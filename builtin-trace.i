# 1 "builtin-trace.c"
# 1 "/home/jmikedupont2/linux/tools/perf//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_VERSION__ 199901L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 6
#define __GNUC_MINOR__ 3
#define __GNUC_PATCHLEVEL__ 0
#define __VERSION__ "6.3.0 20170516"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __pic__ 2
#define __PIC__ 2
#define __pie__ 2
#define __PIE__ 2
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define _LP64 1
#define __LP64__ 1
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 8
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 16
#define __SIZEOF_SIZE_T__ 8
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 8
#define __SIZE_TYPE__ long unsigned int
#define __PTRDIFF_TYPE__ long int
#define __WCHAR_TYPE__ int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long int
#define __UINTMAX_TYPE__ long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ long int
#define __INT_FAST32_TYPE__ long int
#define __INT_FAST64_TYPE__ long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ long unsigned int
#define __UINT_FAST32_TYPE__ long unsigned int
#define __UINT_FAST64_TYPE__ long unsigned int
#define __INTPTR_TYPE__ long int
#define __UINTPTR_TYPE__ long unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1010
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffffffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0x7fffffff
#define __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffffffffffffL
#define __SIZE_MAX__ 0xffffffffffffffffUL
#define __INTMAX_MAX__ 0x7fffffffffffffffL
#define __INTMAX_C(c) c ## L
#define __UINTMAX_MAX__ 0xffffffffffffffffUL
#define __UINTMAX_C(c) c ## UL
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffff
#define __INT64_MAX__ 0x7fffffffffffffffL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffU
#define __UINT64_MAX__ 0xffffffffffffffffUL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __INT32_C(c) c
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffL
#define __INT64_C(c) c ## L
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
#define __UINT64_C(c) c ## UL
#define __INT_FAST8_MAX__ 0x7f
#define __INT_FAST16_MAX__ 0x7fffffffffffffffL
#define __INT_FAST32_MAX__ 0x7fffffffffffffffL
#define __INT_FAST64_MAX__ 0x7fffffffffffffffL
#define __UINT_FAST8_MAX__ 0xff
#define __UINT_FAST16_MAX__ 0xffffffffffffffffUL
#define __UINT_FAST32_MAX__ 0xffffffffffffffffUL
#define __UINT_FAST64_MAX__ 0xffffffffffffffffUL
#define __INTPTR_MAX__ 0x7fffffffffffffffL
#define __UINTPTR_MAX__ 0xffffffffffffffffUL
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859812e+38F
#define __FLT_MIN__ 1.17549435082228750797e-38F
#define __FLT_EPSILON__ 1.19209289550781250000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570815e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308085e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544177e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SSP_ALL__ 2
#define __SIZEOF_INT128__ 16
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 8
#define __amd64 1
#define __amd64__ 1
#define __x86_64 1
#define __x86_64__ 1
#define __SIZEOF_FLOAT80__ 16
#define __SIZEOF_FLOAT128__ 16
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __GCC_ASM_FLAG_OUTPUTS__ 1
#define __k8 1
#define __k8__ 1
#define __code_model_small__ 1
#define __MMX__ 1
#define __SSE__ 1
#define __SSE2__ 1
#define __FXSR__ 1
#define __SSE_MATH__ 1
#define __SSE2_MATH__ 1
#define __SEG_FS 1
#define __SEG_GS 1
#define __gnu_linux__ 1
#define __linux 1
#define __linux__ 1
#define linux 1
#define __unix 1
#define __unix__ 1
#define unix 1
#define __ELF__ 1
#define __DECIMAL_BID_FORMAT__ 1
# 1 "<command-line>"
#define HAVE_ARCH_X86_64_SUPPORT 1
#define HAVE_SYSCALL_TABLE_SUPPORT 1
#define HAVE_PERF_REGS_SUPPORT 1
#define HAVE_ARCH_REGS_QUERY_REGISTER_OFFSET 1
#define _FORTIFY_SOURCE 2
#define _LARGEFILE64_SOURCE 1
#define _FILE_OFFSET_BITS 64
#define _GNU_SOURCE 1
#define HAVE_SYNC_COMPARE_AND_SWAP_SUPPORT 1
#define HAVE_PTHREAD_ATTR_SETAFFINITY_NP 1
#define HAVE_PTHREAD_BARRIER 1
#define HAVE_EVENTFD 1
#define HAVE_GET_CURRENT_DIR_NAME 1
#define HAVE_GLIBC_SUPPORT 1
#define HAVE_AIO_SUPPORT 1
#define HAVE_SCHED_GETCPU_SUPPORT 1
#define HAVE_SETNS_SUPPORT 1
#define HAVE_LIBELF_SUPPORT 1
#define HAVE_LIBELF_MMAP_SUPPORT 1
#define HAVE_ELF_GETPHDRNUM_SUPPORT 1
#define HAVE_GELF_GETNOTE_SUPPORT 1
#define HAVE_ELF_GETSHDRSTRNDX_SUPPORT 1
#define HAVE_LIBBPF_SUPPORT 1
#define HAVE_JITDUMP 1
#define HAVE_LIBCRYPTO_SUPPORT 1
#define NO_LIBPERL 1
#define HAVE_TIMERFD_SUPPORT 1
#define NO_LIBPYTHON 1
#define NO_DEMANGLE 1
#define HAVE_ZLIB_SUPPORT 1
#define HAVE_BACKTRACE_SUPPORT 1
#define HAVE_KVM_STAT_SUPPORT 1
#define HAVE_AUXTRACE_SUPPORT 1
#define HAVE_JVMTI_CMLR 1
#define BUILD_STR(s) #s
#define STRACE_GROUPS_DIR BUILD_STR(share/perf-core/strace/groups)
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 19 "/usr/include/stdc-predef.h" 3 4
#define _STDC_PREDEF_H 1
# 38 "/usr/include/stdc-predef.h" 3 4
#define __STDC_IEC_559__ 1







#define __STDC_IEC_559_COMPLEX__ 1
# 57 "/usr/include/stdc-predef.h" 3 4
#define __STDC_ISO_10646__ 201605L


#define __STDC_NO_THREADS__ 1
# 1 "<command-line>" 2
# 1 "builtin-trace.c"
# 17 "builtin-trace.c"
# 1 "util/record.h" 1


#define _PERF_RECORD_H 

# 1 "/usr/include/time.h" 1 3 4
# 26 "/usr/include/time.h" 3 4
#define _TIME_H 1
# 1 "/usr/include/features.h" 1 3 4
# 19 "/usr/include/features.h" 3 4
#define _FEATURES_H 1
# 97 "/usr/include/features.h" 3 4
#undef __USE_ISOC11
#undef __USE_ISOC99
#undef __USE_ISOC95
#undef __USE_ISOCXX11
#undef __USE_POSIX
#undef __USE_POSIX2
#undef __USE_POSIX199309
#undef __USE_POSIX199506
#undef __USE_XOPEN
#undef __USE_XOPEN_EXTENDED
#undef __USE_UNIX98
#undef __USE_XOPEN2K
#undef __USE_XOPEN2KXSI
#undef __USE_XOPEN2K8
#undef __USE_XOPEN2K8XSI
#undef __USE_LARGEFILE
#undef __USE_LARGEFILE64
#undef __USE_FILE_OFFSET64
#undef __USE_MISC
#undef __USE_ATFILE
#undef __USE_GNU
#undef __USE_REENTRANT
#undef __USE_FORTIFY_LEVEL
#undef __KERNEL_STRICT_NAMES




#define __KERNEL_STRICT_NAMES 
# 136 "/usr/include/features.h" 3 4
#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
# 155 "/usr/include/features.h" 3 4
#undef _ISOC95_SOURCE
#define _ISOC95_SOURCE 1
#undef _ISOC99_SOURCE
#define _ISOC99_SOURCE 1
#undef _ISOC11_SOURCE
#define _ISOC11_SOURCE 1
#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
#undef _XOPEN_SOURCE
#define _XOPEN_SOURCE 700
#undef _XOPEN_SOURCE_EXTENDED
#define _XOPEN_SOURCE_EXTENDED 1
#undef _LARGEFILE64_SOURCE
#define _LARGEFILE64_SOURCE 1
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
# 184 "/usr/include/features.h" 3 4
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1





#define __USE_ISOC11 1





#define __USE_ISOC99 1





#define __USE_ISOC95 1
# 222 "/usr/include/features.h" 3 4
#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
# 246 "/usr/include/features.h" 3 4
#define __USE_POSIX 1



#define __USE_POSIX2 1



#define __USE_POSIX199309 1



#define __USE_POSIX199506 1



#define __USE_XOPEN2K 1
#undef __USE_ISOC95
#define __USE_ISOC95 1
#undef __USE_ISOC99
#define __USE_ISOC99 1



#define __USE_XOPEN2K8 1
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1



#define __USE_XOPEN 1

#define __USE_XOPEN_EXTENDED 1
#define __USE_UNIX98 1
#undef _LARGEFILE_SOURCE
#define _LARGEFILE_SOURCE 1


#define __USE_XOPEN2K8 1
#define __USE_XOPEN2K8XSI 1

#define __USE_XOPEN2K 1
#define __USE_XOPEN2KXSI 1
#undef __USE_ISOC95
#define __USE_ISOC95 1
#undef __USE_ISOC99
#define __USE_ISOC99 1
# 302 "/usr/include/features.h" 3 4
#define __USE_LARGEFILE 1



#define __USE_LARGEFILE64 1



#define __USE_FILE_OFFSET64 1



#define __USE_MISC 1



#define __USE_ATFILE 1



#define __USE_GNU 1
# 332 "/usr/include/features.h" 3 4
#define __USE_FORTIFY_LEVEL 2
# 350 "/usr/include/features.h" 3 4
#undef __GNU_LIBRARY__
#define __GNU_LIBRARY__ 6



#define __GLIBC__ 2
#define __GLIBC_MINOR__ 24

#define __GLIBC_PREREQ(maj,min) ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))





# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define _SYS_CDEFS_H 1
# 34 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#undef __P
#undef __PMT






#define __LEAF , __leaf__
#define __LEAF_ATTR __attribute__ ((__leaf__))
# 55 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __THROW __attribute__ ((__nothrow__ __LEAF))
#define __THROWNL __attribute__ ((__nothrow__))
#define __NTH(fct) __attribute__ ((__nothrow__ __LEAF)) fct
# 82 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __P(args) args
#define __PMT(args) args




#define __CONCAT(x,y) x ## y
#define __STRING(x) #x


#define __ptr_t void *
#define __long_double_t long double







#define __BEGIN_DECLS 
#define __END_DECLS 
# 122 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __BEGIN_NAMESPACE_STD 
#define __END_NAMESPACE_STD 
#define __USING_NAMESPACE_STD(name) 
#define __BEGIN_NAMESPACE_C99 
#define __END_NAMESPACE_C99 
#define __USING_NAMESPACE_C99(name) 




#define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
#define __bos0(ptr) __builtin_object_size (ptr, 0)


#define __warndecl(name,msg) extern void name (void) __attribute__((__warning__ (msg)))

#define __warnattr(msg) __attribute__((__warning__ (msg)))
#define __errordecl(name,msg) extern void name (void) __attribute__((__error__ (msg)))
# 150 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __flexarr []
# 177 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __REDIRECT(name,proto,alias) name proto __asm__ (__ASMNAME (#alias))






#define __REDIRECT_NTH(name,proto,alias) name proto __asm__ (__ASMNAME (#alias)) __THROW

#define __REDIRECT_NTHNL(name,proto,alias) name proto __asm__ (__ASMNAME (#alias)) __THROWNL


#define __ASMNAME(cname) __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
#define __ASMNAME2(prefix,cname) __STRING (prefix) cname
# 211 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __attribute_malloc__ __attribute__ ((__malloc__))







#define __attribute_alloc_size__(params) __attribute__ ((__alloc_size__ params))
# 229 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __attribute_pure__ __attribute__ ((__pure__))






#define __attribute_const__ __attribute__ ((__const__))
# 245 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __attribute_used__ __attribute__ ((__used__))
#define __attribute_noinline__ __attribute__ ((__noinline__))







#define __attribute_deprecated__ __attribute__ ((__deprecated__))
# 266 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __attribute_format_arg__(x) __attribute__ ((__format_arg__ (x)))
# 276 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __attribute_format_strfmon__(a,b) __attribute__ ((__format__ (__strfmon__, a, b)))
# 285 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __nonnull(params) __attribute__ ((__nonnull__ params))







#define __attribute_warn_unused_result__ __attribute__ ((__warn_unused_result__))


#define __wur __attribute_warn_unused_result__
# 310 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#undef __always_inline
#define __always_inline __inline __attribute__ ((__always_inline__))
# 320 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __attribute_artificial__ __attribute__ ((__artificial__))
# 338 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __extern_inline extern __inline __attribute__ ((__gnu_inline__))
#define __extern_always_inline extern __always_inline __attribute__ ((__gnu_inline__))
# 348 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __fortify_function __extern_always_inline __attribute_artificial__





#define __va_arg_pack() __builtin_va_arg_pack ()
#define __va_arg_pack_len() __builtin_va_arg_pack_len ()
# 375 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __restrict_arr __restrict
# 390 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __glibc_unlikely(cond) __builtin_expect ((cond), 0)
#define __glibc_likely(cond) __builtin_expect ((cond), 1)
# 415 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 416 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 437 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
#define __LDBL_REDIR1(name,proto,alias) name proto
#define __LDBL_REDIR(name,proto) name proto
#define __LDBL_REDIR1_NTH(name,proto,alias) name proto __THROW
#define __LDBL_REDIR_NTH(name,proto) name proto __THROW
#define __LDBL_REDIR_DECL(name) 

#define __REDIRECT_LDBL(name,proto,alias) __REDIRECT (name, proto, alias)
#define __REDIRECT_NTH_LDBL(name,proto,alias) __REDIRECT_NTH (name, proto, alias)
# 365 "/usr/include/features.h" 2 3 4
# 380 "/usr/include/features.h" 3 4
#define __USE_EXTERN_INLINES 1







# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 3 4
#define __stub___compat_bdflush 
#define __stub_chflags 
#define __stub_fattach 
#define __stub_fchflags 
#define __stub_fdetach 
#define __stub_getmsg 
#define __stub_gtty 
#define __stub_lchmod 
#define __stub_putmsg 
#define __stub_revoke 
#define __stub_setlogin 
#define __stub_sigreturn 
#define __stub_sstk 
#define __stub_stty 
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/time.h" 2 3 4







#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 187 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 






# 216 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
#define _STRUCT_TIMEVAL 1
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
#define _BITS_TYPES_H 1


# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 89 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
#define __S16_TYPE short int
#define __U16_TYPE unsigned short int
#define __S32_TYPE int
#define __U32_TYPE unsigned int
#define __SLONGWORD_TYPE long int
#define __ULONGWORD_TYPE unsigned long int
# 108 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
#define __SQUAD_TYPE long int
#define __UQUAD_TYPE unsigned long int
#define __SWORD_TYPE long int
#define __UWORD_TYPE unsigned long int
#define __SLONG32_TYPE int
#define __ULONG32_TYPE unsigned int
#define __S64_TYPE long int
#define __U64_TYPE unsigned long int

#define __STD_TYPE typedef



# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 3 4
#define _BITS_TYPESIZES_H 1
# 34 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 3 4
#define __SYSCALL_SLONG_TYPE __SLONGWORD_TYPE
#define __SYSCALL_ULONG_TYPE __ULONGWORD_TYPE


#define __DEV_T_TYPE __UQUAD_TYPE
#define __UID_T_TYPE __U32_TYPE
#define __GID_T_TYPE __U32_TYPE
#define __INO_T_TYPE __SYSCALL_ULONG_TYPE
#define __INO64_T_TYPE __UQUAD_TYPE
#define __MODE_T_TYPE __U32_TYPE

#define __NLINK_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSWORD_T_TYPE __SYSCALL_SLONG_TYPE




#define __OFF_T_TYPE __SYSCALL_SLONG_TYPE
#define __OFF64_T_TYPE __SQUAD_TYPE
#define __PID_T_TYPE __S32_TYPE
#define __RLIM_T_TYPE __SYSCALL_ULONG_TYPE
#define __RLIM64_T_TYPE __UQUAD_TYPE
#define __BLKCNT_T_TYPE __SYSCALL_SLONG_TYPE
#define __BLKCNT64_T_TYPE __SQUAD_TYPE
#define __FSBLKCNT_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSBLKCNT64_T_TYPE __UQUAD_TYPE
#define __FSFILCNT_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSFILCNT64_T_TYPE __UQUAD_TYPE
#define __ID_T_TYPE __U32_TYPE
#define __CLOCK_T_TYPE __SYSCALL_SLONG_TYPE
#define __TIME_T_TYPE __SYSCALL_SLONG_TYPE
#define __USECONDS_T_TYPE __U32_TYPE
#define __SUSECONDS_T_TYPE __SYSCALL_SLONG_TYPE
#define __DADDR_T_TYPE __S32_TYPE
#define __KEY_T_TYPE __S32_TYPE
#define __CLOCKID_T_TYPE __S32_TYPE
#define __TIMER_T_TYPE void *
#define __BLKSIZE_T_TYPE __SYSCALL_SLONG_TYPE
#define __FSID_T_TYPE struct { int __val[2]; }
#define __SSIZE_T_TYPE __SWORD_TYPE
#define __CPU_MASK_TYPE __SYSCALL_ULONG_TYPE





#define __OFF_T_MATCHES_OFF64_T 1


#define __INO_T_MATCHES_INO64_T 1



#define __FD_SETSIZE 1024
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;


#undef __STD_TYPE
# 27 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4



struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };





#define _BITS_TIME_H 1







#define CLOCKS_PER_SEC ((clock_t) 1000000)
# 61 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
#define CLOCK_REALTIME 0

#define CLOCK_MONOTONIC 1

#define CLOCK_PROCESS_CPUTIME_ID 2

#define CLOCK_THREAD_CPUTIME_ID 3

#define CLOCK_MONOTONIC_RAW 4

#define CLOCK_REALTIME_COARSE 5

#define CLOCK_MONOTONIC_COARSE 6

#define CLOCK_BOOTTIME 7

#define CLOCK_REALTIME_ALARM 8

#define CLOCK_BOOTTIME_ALARM 9

#define CLOCK_TAI 11


#define TIMER_ABSTIME 1



# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
#define _BITS_TIMEX_H 1





struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};


#define ADJ_OFFSET 0x0001
#define ADJ_FREQUENCY 0x0002
#define ADJ_MAXERROR 0x0004
#define ADJ_ESTERROR 0x0008
#define ADJ_STATUS 0x0010
#define ADJ_TIMECONST 0x0020
#define ADJ_TAI 0x0080
#define ADJ_SETOFFSET 0x0100
#define ADJ_MICRO 0x1000
#define ADJ_NANO 0x2000
#define ADJ_TICK 0x4000
#define ADJ_OFFSET_SINGLESHOT 0x8001
#define ADJ_OFFSET_SS_READ 0xa001


#define MOD_OFFSET ADJ_OFFSET
#define MOD_FREQUENCY ADJ_FREQUENCY
#define MOD_MAXERROR ADJ_MAXERROR
#define MOD_ESTERROR ADJ_ESTERROR
#define MOD_STATUS ADJ_STATUS
#define MOD_TIMECONST ADJ_TIMECONST
#define MOD_CLKB ADJ_TICK
#define MOD_CLKA ADJ_OFFSET_SINGLESHOT
#define MOD_TAI ADJ_TAI
#define MOD_MICRO ADJ_MICRO
#define MOD_NANO ADJ_NANO



#define STA_PLL 0x0001
#define STA_PPSFREQ 0x0002
#define STA_PPSTIME 0x0004
#define STA_FLL 0x0008

#define STA_INS 0x0010
#define STA_DEL 0x0020
#define STA_UNSYNC 0x0040
#define STA_FREQHOLD 0x0080

#define STA_PPSSIGNAL 0x0100
#define STA_PPSJITTER 0x0200
#define STA_PPSWANDER 0x0400
#define STA_PPSERROR 0x0800

#define STA_CLOCKERR 0x1000
#define STA_NANO 0x2000
#define STA_MODE 0x4000
#define STA_CLK 0x8000


#define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)
# 89 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));







#undef __need_timeval
# 42 "/usr/include/time.h" 2 3 4
# 53 "/usr/include/time.h" 3 4
#define __clock_t_defined 1





typedef __clock_t clock_t;






#undef __need_clock_t


#define __time_t_defined 1





typedef __time_t time_t;






#undef __need_time_t



#define __clockid_t_defined 1




typedef __clockid_t clockid_t;


#undef __clockid_time_t



#define __timer_t_defined 1




typedef __timer_t timer_t;


#undef __need_timer_t







#define __timespec_defined 1





struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };


#undef __need_timespec





struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;
#define __pid_t_defined 






#define TIME_UTC 1






extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/xlocale.h" 1 3 4
# 21 "/usr/include/xlocale.h" 3 4
#define _XLOCALE_H 1





typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 222 "/usr/include/time.h" 2 3 4

extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));






extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));





#define __isleap(year) ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 6 "util/record.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdbool.h" 1 3 4
# 29 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdbool.h" 3 4
#define _STDBOOL_H 



#define bool _Bool
#define true 1
#define false 0
# 52 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdbool.h" 3 4
#define __bool_true_false_are_defined 1
# 7 "util/record.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/linux/types.h" 1


#define _TOOLS_LINUX_TYPES_H_ 


# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 39 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef long int ptrdiff_t;
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 267 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 328 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
typedef int wchar_t;
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 7 "/home/jmikedupont2/linux/tools/include/linux/types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 23 "/usr/include/stdint.h" 3 4
#define _STDINT_H 1


# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 3 4
#define _BITS_WCHAR_H 1
# 34 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 3 4
#define __WCHAR_MAX __WCHAR_MAX__







#define __WCHAR_MIN __WCHAR_MIN__
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 28 "/usr/include/stdint.h" 2 3 4







#define __int8_t_defined 
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;
#define __uint32_t_defined 


typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;
#define __intptr_t_defined 

typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 145 "/usr/include/stdint.h" 3 4
#define __INT64_C(c) c ## L
#define __UINT64_C(c) c ## UL
# 155 "/usr/include/stdint.h" 3 4
#define INT8_MIN (-128)
#define INT16_MIN (-32767-1)
#define INT32_MIN (-2147483647-1)
#define INT64_MIN (-__INT64_C(9223372036854775807)-1)

#define INT8_MAX (127)
#define INT16_MAX (32767)
#define INT32_MAX (2147483647)
#define INT64_MAX (__INT64_C(9223372036854775807))


#define UINT8_MAX (255)
#define UINT16_MAX (65535)
#define UINT32_MAX (4294967295U)
#define UINT64_MAX (__UINT64_C(18446744073709551615))



#define INT_LEAST8_MIN (-128)
#define INT_LEAST16_MIN (-32767-1)
#define INT_LEAST32_MIN (-2147483647-1)
#define INT_LEAST64_MIN (-__INT64_C(9223372036854775807)-1)

#define INT_LEAST8_MAX (127)
#define INT_LEAST16_MAX (32767)
#define INT_LEAST32_MAX (2147483647)
#define INT_LEAST64_MAX (__INT64_C(9223372036854775807))


#define UINT_LEAST8_MAX (255)
#define UINT_LEAST16_MAX (65535)
#define UINT_LEAST32_MAX (4294967295U)
#define UINT_LEAST64_MAX (__UINT64_C(18446744073709551615))



#define INT_FAST8_MIN (-128)

#define INT_FAST16_MIN (-9223372036854775807L-1)
#define INT_FAST32_MIN (-9223372036854775807L-1)




#define INT_FAST64_MIN (-__INT64_C(9223372036854775807)-1)

#define INT_FAST8_MAX (127)

#define INT_FAST16_MAX (9223372036854775807L)
#define INT_FAST32_MAX (9223372036854775807L)




#define INT_FAST64_MAX (__INT64_C(9223372036854775807))


#define UINT_FAST8_MAX (255)

#define UINT_FAST16_MAX (18446744073709551615UL)
#define UINT_FAST32_MAX (18446744073709551615UL)




#define UINT_FAST64_MAX (__UINT64_C(18446744073709551615))




#define INTPTR_MIN (-9223372036854775807L-1)
#define INTPTR_MAX (9223372036854775807L)
#define UINTPTR_MAX (18446744073709551615UL)
# 236 "/usr/include/stdint.h" 3 4
#define INTMAX_MIN (-__INT64_C(9223372036854775807)-1)

#define INTMAX_MAX (__INT64_C(9223372036854775807))


#define UINTMAX_MAX (__UINT64_C(18446744073709551615))






#define PTRDIFF_MIN (-9223372036854775807L-1)
#define PTRDIFF_MAX (9223372036854775807L)






#define SIG_ATOMIC_MIN (-2147483647-1)
#define SIG_ATOMIC_MAX (2147483647)



#define SIZE_MAX (18446744073709551615UL)
# 273 "/usr/include/stdint.h" 3 4
#define WCHAR_MIN __WCHAR_MIN
#define WCHAR_MAX __WCHAR_MAX



#define WINT_MIN (0u)
#define WINT_MAX (4294967295u)


#define INT8_C(c) c
#define INT16_C(c) c
#define INT32_C(c) c

#define INT64_C(c) c ## L





#define UINT8_C(c) c
#define UINT16_C(c) c
#define UINT32_C(c) c ## U

#define UINT64_C(c) c ## UL






#define INTMAX_C(c) c ## L
#define UINTMAX_C(c) c ## UL
# 10 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 8 "/home/jmikedupont2/linux/tools/include/linux/types.h" 2

#define __SANE_USERSPACE_TYPES__ 
# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4

#define _ASM_X86_TYPES_H 

# 1 "/usr/include/asm-generic/types.h" 1 3 4

#define _ASM_GENERIC_TYPES_H 



# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 9 "/usr/include/asm-generic/int-ll64.h" 3 4
#define _ASM_GENERIC_INT_LL64_H 

# 1 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/bitsperlong.h" 1 3 4


#define __ASM_X86_BITSPERLONG_H 


#define __BITS_PER_LONG 64




# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitsperlong.h" 1 3 4


#define __ASM_GENERIC_BITS_PER_LONG 

# 1 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/bitsperlong.h" 1 3 4

#define _UAPI__ASM_GENERIC_BITS_PER_LONG 
# 6 "/home/jmikedupont2/linux/tools/include/asm-generic/bitsperlong.h" 2 3 4


#define BITS_PER_LONG (__CHAR_BIT__ * __SIZEOF_LONG__)
# 18 "/home/jmikedupont2/linux/tools/include/asm-generic/bitsperlong.h" 3 4
#define BITS_PER_LONG_LONG 64
# 12 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/bitsperlong.h" 2 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 7 "/usr/include/asm-generic/types.h" 2 3 4
# 5 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 11 "/home/jmikedupont2/linux/tools/include/linux/types.h" 2
# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4





# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4

#define _ASM_X86_POSIX_TYPES_64_H 







typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;
#define __kernel_old_uid_t __kernel_old_uid_t

typedef unsigned long __kernel_old_dev_t;
#define __kernel_old_dev_t __kernel_old_dev_t

# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4

#define __ASM_GENERIC_POSIX_TYPES_H 
# 14 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 71 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 18 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 7 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 12 "/home/jmikedupont2/linux/tools/include/linux/types.h" 2


# 13 "/home/jmikedupont2/linux/tools/include/linux/types.h"
struct page;
struct kmem_cache;

typedef enum {
 GFP_KERNEL,
 GFP_ATOMIC,
 __GFP_HIGHMEM,
 __GFP_HIGH
} gfp_t;
# 30 "/home/jmikedupont2/linux/tools/include/linux/types.h"
typedef uint64_t u64;
typedef int64_t s64;

typedef __u32 u32;
typedef __s32 s32;

typedef __u16 u16;
typedef __s16 s16;

typedef __u8 u8;
typedef __s8 s8;




#define __bitwise__ 

#define __bitwise __bitwise__

#define __force 
#define __user 
#define __must_check 
#define __cold 

typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef struct {
 int counter;
} atomic_t;


#define __aligned_u64 __u64 __attribute__((aligned(8)))


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};
# 8 "util/record.h" 2
# 1 "/usr/include/linux/stddef.h" 1 3 4
# 9 "util/record.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h" 1
# 16 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
#define _UAPI_LINUX_PERF_EVENT_H 


# 1 "/usr/include/linux/ioctl.h" 1 3 4

#define _LINUX_IOCTL_H 

# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4

#define _ASM_GENERIC_IOCTL_H 
# 22 "/usr/include/asm-generic/ioctl.h" 3 4
#define _IOC_NRBITS 8
#define _IOC_TYPEBITS 8







#define _IOC_SIZEBITS 14



#define _IOC_DIRBITS 2


#define _IOC_NRMASK ((1 << _IOC_NRBITS)-1)
#define _IOC_TYPEMASK ((1 << _IOC_TYPEBITS)-1)
#define _IOC_SIZEMASK ((1 << _IOC_SIZEBITS)-1)
#define _IOC_DIRMASK ((1 << _IOC_DIRBITS)-1)

#define _IOC_NRSHIFT 0
#define _IOC_TYPESHIFT (_IOC_NRSHIFT+_IOC_NRBITS)
#define _IOC_SIZESHIFT (_IOC_TYPESHIFT+_IOC_TYPEBITS)
#define _IOC_DIRSHIFT (_IOC_SIZESHIFT+_IOC_SIZEBITS)







#define _IOC_NONE 0U



#define _IOC_WRITE 1U



#define _IOC_READ 2U


#define _IOC(dir,type,nr,size) (((dir) << _IOC_DIRSHIFT) | ((type) << _IOC_TYPESHIFT) | ((nr) << _IOC_NRSHIFT) | ((size) << _IOC_SIZESHIFT))





#define _IOC_TYPECHECK(t) (sizeof(t))


#define _IO(type,nr) _IOC(_IOC_NONE,(type),(nr),0)
#define _IOR(type,nr,size) _IOC(_IOC_READ,(type),(nr),(_IOC_TYPECHECK(size)))
#define _IOW(type,nr,size) _IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
#define _IOWR(type,nr,size) _IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
#define _IOR_BAD(type,nr,size) _IOC(_IOC_READ,(type),(nr),sizeof(size))
#define _IOW_BAD(type,nr,size) _IOC(_IOC_WRITE,(type),(nr),sizeof(size))
#define _IOWR_BAD(type,nr,size) _IOC(_IOC_READ|_IOC_WRITE,(type),(nr),sizeof(size))


#define _IOC_DIR(nr) (((nr) >> _IOC_DIRSHIFT) & _IOC_DIRMASK)
#define _IOC_TYPE(nr) (((nr) >> _IOC_TYPESHIFT) & _IOC_TYPEMASK)
#define _IOC_NR(nr) (((nr) >> _IOC_NRSHIFT) & _IOC_NRMASK)
#define _IOC_SIZE(nr) (((nr) >> _IOC_SIZESHIFT) & _IOC_SIZEMASK)



#define IOC_IN (_IOC_WRITE << _IOC_DIRSHIFT)
#define IOC_OUT (_IOC_READ << _IOC_DIRSHIFT)
#define IOC_INOUT ((_IOC_WRITE|_IOC_READ) << _IOC_DIRSHIFT)
#define IOCSIZE_MASK (_IOC_SIZEMASK << _IOC_SIZESHIFT)
#define IOCSIZE_SHIFT (_IOC_SIZESHIFT)
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 2 3 4
# 5 "/usr/include/linux/ioctl.h" 2 3 4
# 20 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h" 2
# 1 "/usr/include/x86_64-linux-gnu/asm/byteorder.h" 1 3 4

#define _ASM_X86_BYTEORDER_H 

# 1 "/usr/include/linux/byteorder/little_endian.h" 1 3 4

#define _LINUX_BYTEORDER_LITTLE_ENDIAN_H 


#define __LITTLE_ENDIAN 1234


#define __LITTLE_ENDIAN_BITFIELD 



# 1 "/usr/include/linux/swab.h" 1 3 4

#define _LINUX_SWAB_H 



# 1 "/home/jmikedupont2/linux/tools/perf/util/include/asm/swab.h" 1 3 4
# 7 "/usr/include/linux/swab.h" 2 3 4





#define ___constant_swab16(x) ((__u16)( (((__u16)(x) & (__u16)0x00ffU) << 8) | (((__u16)(x) & (__u16)0xff00U) >> 8)))



#define ___constant_swab32(x) ((__u32)( (((__u32)(x) & (__u32)0x000000ffUL) << 24) | (((__u32)(x) & (__u32)0x0000ff00UL) << 8) | (((__u32)(x) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(x) & (__u32)0xff000000UL) >> 24)))





#define ___constant_swab64(x) ((__u64)( (((__u64)(x) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(x) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(x) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(x) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(x) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(x) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(x) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(x) & (__u64)0xff00000000000000ULL) >> 56)))
# 32 "/usr/include/linux/swab.h" 3 4
#define ___constant_swahw32(x) ((__u32)( (((__u32)(x) & (__u32)0x0000ffffUL) << 16) | (((__u32)(x) & (__u32)0xffff0000UL) >> 16)))



#define ___constant_swahb32(x) ((__u32)( (((__u32)(x) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(x) & (__u32)0xff00ff00UL) >> 8)))
# 46 "/usr/include/linux/swab.h" 3 4

# 46 "/usr/include/linux/swab.h" 3 4
static __inline__ __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static __inline__ __u32 __fswab32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x000000ffUL) << 24) | (((__u32)(val) & (__u32)0x0000ff00UL) << 8) | (((__u32)(val) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(val) & (__u32)0xff000000UL) >> 24)));

}

static __inline__ __u64 __fswab64(__u64 val)
{







 return ((__u64)( (((__u64)(val) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(val) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(val) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(val) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(val) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(val) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(val) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(val) & (__u64)0xff00000000000000ULL) >> 56)));

}

static __inline__ __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static __inline__ __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 102 "/usr/include/linux/swab.h" 3 4
#define __swab16(x) (__builtin_constant_p((__u16)(x)) ? ___constant_swab16(x) : __fswab16(x))
# 115 "/usr/include/linux/swab.h" 3 4
#define __swab32(x) (__builtin_constant_p((__u32)(x)) ? ___constant_swab32(x) : __fswab32(x))
# 128 "/usr/include/linux/swab.h" 3 4
#define __swab64(x) (__builtin_constant_p((__u64)(x)) ? ___constant_swab64(x) : __fswab64(x))
# 140 "/usr/include/linux/swab.h" 3 4
#define __swahw32(x) (__builtin_constant_p((__u32)(x)) ? ___constant_swahw32(x) : __fswahw32(x))
# 151 "/usr/include/linux/swab.h" 3 4
#define __swahb32(x) (__builtin_constant_p((__u32)(x)) ? ___constant_swahb32(x) : __fswahb32(x))
# 160 "/usr/include/linux/swab.h" 3 4
static __inline __attribute__ ((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static __inline __attribute__ ((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static __inline __attribute__ ((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static __inline__ __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static __inline__ __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static __inline__ void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static __inline __attribute__ ((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static __inline __attribute__ ((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static __inline__ void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static __inline__ void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 13 "/usr/include/linux/byteorder/little_endian.h" 2 3 4

#define __constant_htonl(x) ((__be32)___constant_swab32((x)))
#define __constant_ntohl(x) ___constant_swab32((__be32)(x))
#define __constant_htons(x) ((__be16)___constant_swab16((x)))
#define __constant_ntohs(x) ___constant_swab16((__be16)(x))
#define __constant_cpu_to_le64(x) ((__le64)(__u64)(x))
#define __constant_le64_to_cpu(x) ((__u64)(__le64)(x))
#define __constant_cpu_to_le32(x) ((__le32)(__u32)(x))
#define __constant_le32_to_cpu(x) ((__u32)(__le32)(x))
#define __constant_cpu_to_le16(x) ((__le16)(__u16)(x))
#define __constant_le16_to_cpu(x) ((__u16)(__le16)(x))
#define __constant_cpu_to_be64(x) ((__be64)___constant_swab64((x)))
#define __constant_be64_to_cpu(x) ___constant_swab64((__u64)(__be64)(x))
#define __constant_cpu_to_be32(x) ((__be32)___constant_swab32((x)))
#define __constant_be32_to_cpu(x) ___constant_swab32((__u32)(__be32)(x))
#define __constant_cpu_to_be16(x) ((__be16)___constant_swab16((x)))
#define __constant_be16_to_cpu(x) ___constant_swab16((__u16)(__be16)(x))
#define __cpu_to_le64(x) ((__le64)(__u64)(x))
#define __le64_to_cpu(x) ((__u64)(__le64)(x))
#define __cpu_to_le32(x) ((__le32)(__u32)(x))
#define __le32_to_cpu(x) ((__u32)(__le32)(x))
#define __cpu_to_le16(x) ((__le16)(__u16)(x))
#define __le16_to_cpu(x) ((__u16)(__le16)(x))
#define __cpu_to_be64(x) ((__be64)__swab64((x)))
#define __be64_to_cpu(x) __swab64((__u64)(__be64)(x))
#define __cpu_to_be32(x) ((__be32)__swab32((x)))
#define __be32_to_cpu(x) __swab32((__u32)(__be32)(x))
#define __cpu_to_be16(x) ((__be16)__swab16((x)))
#define __be16_to_cpu(x) __swab16((__u16)(__be16)(x))

static __inline __attribute__ ((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return (__le64)*p;
}
static __inline __attribute__ ((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return (__u64)*p;
}
static __inline __attribute__ ((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return (__le32)*p;
}
static __inline __attribute__ ((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return (__u32)*p;
}
static __inline __attribute__ ((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return (__le16)*p;
}
static __inline __attribute__ ((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return (__u16)*p;
}
static __inline __attribute__ ((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return (__be64)__swab64p(p);
}
static __inline __attribute__ ((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static __inline __attribute__ ((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return (__be32)__swab32p(p);
}
static __inline __attribute__ ((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static __inline __attribute__ ((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return (__be16)__swab16p(p);
}
static __inline __attribute__ ((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
#define __cpu_to_le64s(x) do { (void)(x); } while (0)
#define __le64_to_cpus(x) do { (void)(x); } while (0)
#define __cpu_to_le32s(x) do { (void)(x); } while (0)
#define __le32_to_cpus(x) do { (void)(x); } while (0)
#define __cpu_to_le16s(x) do { (void)(x); } while (0)
#define __le16_to_cpus(x) do { (void)(x); } while (0)
#define __cpu_to_be64s(x) __swab64s((x))
#define __be64_to_cpus(x) __swab64s((x))
#define __cpu_to_be32s(x) __swab32s((x))
#define __be32_to_cpus(x) __swab32s((x))
#define __cpu_to_be16s(x) __swab16s((x))
#define __be16_to_cpus(x) __swab16s((x))
# 5 "/usr/include/x86_64-linux-gnu/asm/byteorder.h" 2 3 4
# 21 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h" 2
# 29 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"

# 29 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
enum perf_type_id {
 PERF_TYPE_HARDWARE = 0,
 PERF_TYPE_SOFTWARE = 1,
 PERF_TYPE_TRACEPOINT = 2,
 PERF_TYPE_HW_CACHE = 3,
 PERF_TYPE_RAW = 4,
 PERF_TYPE_BREAKPOINT = 5,

 PERF_TYPE_MAX,
};






enum perf_hw_id {



 PERF_COUNT_HW_CPU_CYCLES = 0,
 PERF_COUNT_HW_INSTRUCTIONS = 1,
 PERF_COUNT_HW_CACHE_REFERENCES = 2,
 PERF_COUNT_HW_CACHE_MISSES = 3,
 PERF_COUNT_HW_BRANCH_INSTRUCTIONS = 4,
 PERF_COUNT_HW_BRANCH_MISSES = 5,
 PERF_COUNT_HW_BUS_CYCLES = 6,
 PERF_COUNT_HW_STALLED_CYCLES_FRONTEND = 7,
 PERF_COUNT_HW_STALLED_CYCLES_BACKEND = 8,
 PERF_COUNT_HW_REF_CPU_CYCLES = 9,

 PERF_COUNT_HW_MAX,
};
# 70 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
enum perf_hw_cache_id {
 PERF_COUNT_HW_CACHE_L1D = 0,
 PERF_COUNT_HW_CACHE_L1I = 1,
 PERF_COUNT_HW_CACHE_LL = 2,
 PERF_COUNT_HW_CACHE_DTLB = 3,
 PERF_COUNT_HW_CACHE_ITLB = 4,
 PERF_COUNT_HW_CACHE_BPU = 5,
 PERF_COUNT_HW_CACHE_NODE = 6,

 PERF_COUNT_HW_CACHE_MAX,
};

enum perf_hw_cache_op_id {
 PERF_COUNT_HW_CACHE_OP_READ = 0,
 PERF_COUNT_HW_CACHE_OP_WRITE = 1,
 PERF_COUNT_HW_CACHE_OP_PREFETCH = 2,

 PERF_COUNT_HW_CACHE_OP_MAX,
};

enum perf_hw_cache_op_result_id {
 PERF_COUNT_HW_CACHE_RESULT_ACCESS = 0,
 PERF_COUNT_HW_CACHE_RESULT_MISS = 1,

 PERF_COUNT_HW_CACHE_RESULT_MAX,
};







enum perf_sw_ids {
 PERF_COUNT_SW_CPU_CLOCK = 0,
 PERF_COUNT_SW_TASK_CLOCK = 1,
 PERF_COUNT_SW_PAGE_FAULTS = 2,
 PERF_COUNT_SW_CONTEXT_SWITCHES = 3,
 PERF_COUNT_SW_CPU_MIGRATIONS = 4,
 PERF_COUNT_SW_PAGE_FAULTS_MIN = 5,
 PERF_COUNT_SW_PAGE_FAULTS_MAJ = 6,
 PERF_COUNT_SW_ALIGNMENT_FAULTS = 7,
 PERF_COUNT_SW_EMULATION_FAULTS = 8,
 PERF_COUNT_SW_DUMMY = 9,
 PERF_COUNT_SW_BPF_OUTPUT = 10,

 PERF_COUNT_SW_MAX,
};





enum perf_event_sample_format {
 PERF_SAMPLE_IP = 1U << 0,
 PERF_SAMPLE_TID = 1U << 1,
 PERF_SAMPLE_TIME = 1U << 2,
 PERF_SAMPLE_ADDR = 1U << 3,
 PERF_SAMPLE_READ = 1U << 4,
 PERF_SAMPLE_CALLCHAIN = 1U << 5,
 PERF_SAMPLE_ID = 1U << 6,
 PERF_SAMPLE_CPU = 1U << 7,
 PERF_SAMPLE_PERIOD = 1U << 8,
 PERF_SAMPLE_STREAM_ID = 1U << 9,
 PERF_SAMPLE_RAW = 1U << 10,
 PERF_SAMPLE_BRANCH_STACK = 1U << 11,
 PERF_SAMPLE_REGS_USER = 1U << 12,
 PERF_SAMPLE_STACK_USER = 1U << 13,
 PERF_SAMPLE_WEIGHT = 1U << 14,
 PERF_SAMPLE_DATA_SRC = 1U << 15,
 PERF_SAMPLE_IDENTIFIER = 1U << 16,
 PERF_SAMPLE_TRANSACTION = 1U << 17,
 PERF_SAMPLE_REGS_INTR = 1U << 18,
 PERF_SAMPLE_PHYS_ADDR = 1U << 19,
 PERF_SAMPLE_AUX = 1U << 20,

 PERF_SAMPLE_MAX = 1U << 21,

 __PERF_SAMPLE_CALLCHAIN_EARLY = 1ULL << 63,
};
# 161 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
enum perf_branch_sample_type_shift {
 PERF_SAMPLE_BRANCH_USER_SHIFT = 0,
 PERF_SAMPLE_BRANCH_KERNEL_SHIFT = 1,
 PERF_SAMPLE_BRANCH_HV_SHIFT = 2,

 PERF_SAMPLE_BRANCH_ANY_SHIFT = 3,
 PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT = 4,
 PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT = 5,
 PERF_SAMPLE_BRANCH_IND_CALL_SHIFT = 6,
 PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT = 7,
 PERF_SAMPLE_BRANCH_IN_TX_SHIFT = 8,
 PERF_SAMPLE_BRANCH_NO_TX_SHIFT = 9,
 PERF_SAMPLE_BRANCH_COND_SHIFT = 10,

 PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT = 11,
 PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT = 12,
 PERF_SAMPLE_BRANCH_CALL_SHIFT = 13,

 PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT = 14,
 PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT = 15,

 PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT = 16,

 PERF_SAMPLE_BRANCH_MAX_SHIFT
};

enum perf_branch_sample_type {
 PERF_SAMPLE_BRANCH_USER = 1U << PERF_SAMPLE_BRANCH_USER_SHIFT,
 PERF_SAMPLE_BRANCH_KERNEL = 1U << PERF_SAMPLE_BRANCH_KERNEL_SHIFT,
 PERF_SAMPLE_BRANCH_HV = 1U << PERF_SAMPLE_BRANCH_HV_SHIFT,

 PERF_SAMPLE_BRANCH_ANY = 1U << PERF_SAMPLE_BRANCH_ANY_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_CALL = 1U << PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_RETURN = 1U << PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT,
 PERF_SAMPLE_BRANCH_IND_CALL = 1U << PERF_SAMPLE_BRANCH_IND_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ABORT_TX = 1U << PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT,
 PERF_SAMPLE_BRANCH_IN_TX = 1U << PERF_SAMPLE_BRANCH_IN_TX_SHIFT,
 PERF_SAMPLE_BRANCH_NO_TX = 1U << PERF_SAMPLE_BRANCH_NO_TX_SHIFT,
 PERF_SAMPLE_BRANCH_COND = 1U << PERF_SAMPLE_BRANCH_COND_SHIFT,

 PERF_SAMPLE_BRANCH_CALL_STACK = 1U << PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT,
 PERF_SAMPLE_BRANCH_IND_JUMP = 1U << PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT,
 PERF_SAMPLE_BRANCH_CALL = 1U << PERF_SAMPLE_BRANCH_CALL_SHIFT,

 PERF_SAMPLE_BRANCH_NO_FLAGS = 1U << PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT,
 PERF_SAMPLE_BRANCH_NO_CYCLES = 1U << PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT,

 PERF_SAMPLE_BRANCH_TYPE_SAVE =
  1U << PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT,

 PERF_SAMPLE_BRANCH_MAX = 1U << PERF_SAMPLE_BRANCH_MAX_SHIFT,
};




enum {
 PERF_BR_UNKNOWN = 0,
 PERF_BR_COND = 1,
 PERF_BR_UNCOND = 2,
 PERF_BR_IND = 3,
 PERF_BR_CALL = 4,
 PERF_BR_IND_CALL = 5,
 PERF_BR_RET = 6,
 PERF_BR_SYSCALL = 7,
 PERF_BR_SYSRET = 8,
 PERF_BR_COND_CALL = 9,
 PERF_BR_COND_RET = 10,
 PERF_BR_MAX,
};

#define PERF_SAMPLE_BRANCH_PLM_ALL (PERF_SAMPLE_BRANCH_USER| PERF_SAMPLE_BRANCH_KERNEL| PERF_SAMPLE_BRANCH_HV)







enum perf_sample_regs_abi {
 PERF_SAMPLE_REGS_ABI_NONE = 0,
 PERF_SAMPLE_REGS_ABI_32 = 1,
 PERF_SAMPLE_REGS_ABI_64 = 2,
};





enum {
 PERF_TXN_ELISION = (1 << 0),
 PERF_TXN_TRANSACTION = (1 << 1),
 PERF_TXN_SYNC = (1 << 2),
 PERF_TXN_ASYNC = (1 << 3),
 PERF_TXN_RETRY = (1 << 4),
 PERF_TXN_CONFLICT = (1 << 5),
 PERF_TXN_CAPACITY_WRITE = (1 << 6),
 PERF_TXN_CAPACITY_READ = (1 << 7),

 PERF_TXN_MAX = (1 << 8),



 PERF_TXN_ABORT_MASK = (0xffffffffULL << 32),
 PERF_TXN_ABORT_SHIFT = 32,
};
# 288 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
enum perf_event_read_format {
 PERF_FORMAT_TOTAL_TIME_ENABLED = 1U << 0,
 PERF_FORMAT_TOTAL_TIME_RUNNING = 1U << 1,
 PERF_FORMAT_ID = 1U << 2,
 PERF_FORMAT_GROUP = 1U << 3,

 PERF_FORMAT_MAX = 1U << 4,
};

#define PERF_ATTR_SIZE_VER0 64
#define PERF_ATTR_SIZE_VER1 72
#define PERF_ATTR_SIZE_VER2 80
#define PERF_ATTR_SIZE_VER3 96

#define PERF_ATTR_SIZE_VER4 104
#define PERF_ATTR_SIZE_VER5 112
#define PERF_ATTR_SIZE_VER6 120







struct perf_event_attr {




 __u32 type;




 __u32 size;




 __u64 config;

 union {
  __u64 sample_period;
  __u64 sample_freq;
 };

 __u64 sample_type;
 __u64 read_format;

 __u64 disabled : 1,
    inherit : 1,
    pinned : 1,
    exclusive : 1,
    exclude_user : 1,
    exclude_kernel : 1,
    exclude_hv : 1,
    exclude_idle : 1,
    mmap : 1,
    comm : 1,
    freq : 1,
    inherit_stat : 1,
    enable_on_exec : 1,
    task : 1,
    watermark : 1,
# 362 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
    precise_ip : 2,
    mmap_data : 1,
    sample_id_all : 1,

    exclude_host : 1,
    exclude_guest : 1,

    exclude_callchain_kernel : 1,
    exclude_callchain_user : 1,
    mmap2 : 1,
    comm_exec : 1,
    use_clockid : 1,
    context_switch : 1,
    write_backward : 1,
    namespaces : 1,
    ksymbol : 1,
    bpf_event : 1,
    aux_output : 1,
    __reserved_1 : 32;

 union {
  __u32 wakeup_events;
  __u32 wakeup_watermark;
 };

 __u32 bp_type;
 union {
  __u64 bp_addr;
  __u64 kprobe_func;
  __u64 uprobe_path;
  __u64 config1;
 };
 union {
  __u64 bp_len;
  __u64 kprobe_addr;
  __u64 probe_offset;
  __u64 config2;
 };
 __u64 branch_sample_type;





 __u64 sample_regs_user;




 __u32 sample_stack_user;

 __s32 clockid;
# 422 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 __u64 sample_regs_intr;




 __u32 aux_watermark;
 __u16 sample_max_stack;
 __u16 __reserved_2;
 __u32 aux_sample_size;
 __u32 __reserved_3;
};






struct perf_event_query_bpf {



 __u32 ids_len;




 __u32 prog_cnt;



 __u32 ids[0];
};




#define PERF_EVENT_IOC_ENABLE _IO ('$', 0)
#define PERF_EVENT_IOC_DISABLE _IO ('$', 1)
#define PERF_EVENT_IOC_REFRESH _IO ('$', 2)
#define PERF_EVENT_IOC_RESET _IO ('$', 3)
#define PERF_EVENT_IOC_PERIOD _IOW('$', 4, __u64)
#define PERF_EVENT_IOC_SET_OUTPUT _IO ('$', 5)
#define PERF_EVENT_IOC_SET_FILTER _IOW('$', 6, char *)
#define PERF_EVENT_IOC_ID _IOR('$', 7, __u64 *)
#define PERF_EVENT_IOC_SET_BPF _IOW('$', 8, __u32)
#define PERF_EVENT_IOC_PAUSE_OUTPUT _IOW('$', 9, __u32)
#define PERF_EVENT_IOC_QUERY_BPF _IOWR('$', 10, struct perf_event_query_bpf *)
#define PERF_EVENT_IOC_MODIFY_ATTRIBUTES _IOW('$', 11, struct perf_event_attr *)

enum perf_event_ioc_flags {
 PERF_IOC_FLAG_GROUP = 1U << 0,
};




struct perf_event_mmap_page {
 __u32 version;
 __u32 compat_version;
# 517 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 __u32 lock;
 __u32 index;
 __s64 offset;
 __u64 time_enabled;
 __u64 time_running;
 union {
  __u64 capabilities;
  struct {
   __u64 cap_bit0 : 1,
    cap_bit0_is_deprecated : 1,

    cap_user_rdpmc : 1,
    cap_user_time : 1,
    cap_user_time_zero : 1,
    cap_____res : 59;
  };
 };
# 544 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 __u16 pmc_width;
# 570 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 __u16 time_shift;
 __u32 time_mult;
 __u64 time_offset;
# 589 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 __u64 time_zero;
 __u32 size;





 __u8 __reserved[118*8+4];
# 614 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 __u64 data_head;
 __u64 data_tail;
 __u64 data_offset;
 __u64 data_size;
# 630 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 __u64 aux_head;
 __u64 aux_tail;
 __u64 aux_offset;
 __u64 aux_size;
};

#define PERF_RECORD_MISC_CPUMODE_MASK (7 << 0)
#define PERF_RECORD_MISC_CPUMODE_UNKNOWN (0 << 0)
#define PERF_RECORD_MISC_KERNEL (1 << 0)
#define PERF_RECORD_MISC_USER (2 << 0)
#define PERF_RECORD_MISC_HYPERVISOR (3 << 0)
#define PERF_RECORD_MISC_GUEST_KERNEL (4 << 0)
#define PERF_RECORD_MISC_GUEST_USER (5 << 0)




#define PERF_RECORD_MISC_PROC_MAP_PARSE_TIMEOUT (1 << 12)
# 657 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
#define PERF_RECORD_MISC_MMAP_DATA (1 << 13)
#define PERF_RECORD_MISC_COMM_EXEC (1 << 13)
#define PERF_RECORD_MISC_FORK_EXEC (1 << 13)
#define PERF_RECORD_MISC_SWITCH_OUT (1 << 13)
# 677 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
#define PERF_RECORD_MISC_EXACT_IP (1 << 14)
#define PERF_RECORD_MISC_SWITCH_OUT_PREEMPT (1 << 14)



#define PERF_RECORD_MISC_EXT_RESERVED (1 << 15)

struct perf_event_header {
 __u32 type;
 __u16 misc;
 __u16 size;
};

struct perf_ns_link_info {
 __u64 dev;
 __u64 ino;
};

enum {
 NET_NS_INDEX = 0,
 UTS_NS_INDEX = 1,
 IPC_NS_INDEX = 2,
 PID_NS_INDEX = 3,
 USER_NS_INDEX = 4,
 MNT_NS_INDEX = 5,
 CGROUP_NS_INDEX = 6,

 NR_NAMESPACES,
};

enum perf_event_type {
# 748 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_MMAP = 1,
# 758 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_LOST = 2,
# 769 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_COMM = 3,
# 780 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_EXIT = 4,
# 791 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_THROTTLE = 5,
 PERF_RECORD_UNTHROTTLE = 6,
# 803 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_FORK = 7,
# 814 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_READ = 8,
# 875 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_SAMPLE = 9,
# 897 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_MMAP2 = 10,
# 911 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_AUX = 11,
# 923 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_ITRACE_START = 12,
# 935 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_LOST_SAMPLES = 13,
# 947 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_SWITCH = 14,
# 961 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_SWITCH_CPU_WIDE = 15,
# 973 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_NAMESPACES = 16,
# 988 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_KSYMBOL = 17,
# 1007 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
 PERF_RECORD_BPF_EVENT = 18,

 PERF_RECORD_MAX,
};

enum perf_record_ksymbol_type {
 PERF_RECORD_KSYMBOL_TYPE_UNKNOWN = 0,
 PERF_RECORD_KSYMBOL_TYPE_BPF = 1,
 PERF_RECORD_KSYMBOL_TYPE_MAX
};

#define PERF_RECORD_KSYMBOL_FLAGS_UNREGISTER (1 << 0)

enum perf_bpf_event_type {
 PERF_BPF_EVENT_UNKNOWN = 0,
 PERF_BPF_EVENT_PROG_LOAD = 1,
 PERF_BPF_EVENT_PROG_UNLOAD = 2,
 PERF_BPF_EVENT_MAX,
};

#define PERF_MAX_STACK_DEPTH 127
#define PERF_MAX_CONTEXTS_PER_STACK 8

enum perf_callchain_context {
 PERF_CONTEXT_HV = (__u64)-32,
 PERF_CONTEXT_KERNEL = (__u64)-128,
 PERF_CONTEXT_USER = (__u64)-512,

 PERF_CONTEXT_GUEST = (__u64)-2048,
 PERF_CONTEXT_GUEST_KERNEL = (__u64)-2176,
 PERF_CONTEXT_GUEST_USER = (__u64)-2560,

 PERF_CONTEXT_MAX = (__u64)-4095,
};




#define PERF_AUX_FLAG_TRUNCATED 0x01
#define PERF_AUX_FLAG_OVERWRITE 0x02
#define PERF_AUX_FLAG_PARTIAL 0x04
#define PERF_AUX_FLAG_COLLISION 0x08

#define PERF_FLAG_FD_NO_GROUP (1UL << 0)
#define PERF_FLAG_FD_OUTPUT (1UL << 1)
#define PERF_FLAG_PID_CGROUP (1UL << 2)
#define PERF_FLAG_FD_CLOEXEC (1UL << 3)


union perf_mem_data_src {
 __u64 val;
 struct {
  __u64 mem_op:5,
   mem_lvl:14,
   mem_snoop:5,
   mem_lock:2,
   mem_dtlb:7,
   mem_lvl_num:4,
   mem_remote:1,
   mem_snoopx:2,
   mem_rsvd:24;
 };
};
# 1090 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
#define PERF_MEM_OP_NA 0x01
#define PERF_MEM_OP_LOAD 0x02
#define PERF_MEM_OP_STORE 0x04
#define PERF_MEM_OP_PFETCH 0x08
#define PERF_MEM_OP_EXEC 0x10
#define PERF_MEM_OP_SHIFT 0


#define PERF_MEM_LVL_NA 0x01
#define PERF_MEM_LVL_HIT 0x02
#define PERF_MEM_LVL_MISS 0x04
#define PERF_MEM_LVL_L1 0x08
#define PERF_MEM_LVL_LFB 0x10
#define PERF_MEM_LVL_L2 0x20
#define PERF_MEM_LVL_L3 0x40
#define PERF_MEM_LVL_LOC_RAM 0x80
#define PERF_MEM_LVL_REM_RAM1 0x100
#define PERF_MEM_LVL_REM_RAM2 0x200
#define PERF_MEM_LVL_REM_CCE1 0x400
#define PERF_MEM_LVL_REM_CCE2 0x800
#define PERF_MEM_LVL_IO 0x1000
#define PERF_MEM_LVL_UNC 0x2000
#define PERF_MEM_LVL_SHIFT 5

#define PERF_MEM_REMOTE_REMOTE 0x01
#define PERF_MEM_REMOTE_SHIFT 37

#define PERF_MEM_LVLNUM_L1 0x01
#define PERF_MEM_LVLNUM_L2 0x02
#define PERF_MEM_LVLNUM_L3 0x03
#define PERF_MEM_LVLNUM_L4 0x04

#define PERF_MEM_LVLNUM_ANY_CACHE 0x0b
#define PERF_MEM_LVLNUM_LFB 0x0c
#define PERF_MEM_LVLNUM_RAM 0x0d
#define PERF_MEM_LVLNUM_PMEM 0x0e
#define PERF_MEM_LVLNUM_NA 0x0f

#define PERF_MEM_LVLNUM_SHIFT 33


#define PERF_MEM_SNOOP_NA 0x01
#define PERF_MEM_SNOOP_NONE 0x02
#define PERF_MEM_SNOOP_HIT 0x04
#define PERF_MEM_SNOOP_MISS 0x08
#define PERF_MEM_SNOOP_HITM 0x10
#define PERF_MEM_SNOOP_SHIFT 19

#define PERF_MEM_SNOOPX_FWD 0x01

#define PERF_MEM_SNOOPX_SHIFT 37


#define PERF_MEM_LOCK_NA 0x01
#define PERF_MEM_LOCK_LOCKED 0x02
#define PERF_MEM_LOCK_SHIFT 24


#define PERF_MEM_TLB_NA 0x01
#define PERF_MEM_TLB_HIT 0x02
#define PERF_MEM_TLB_MISS 0x04
#define PERF_MEM_TLB_L1 0x08
#define PERF_MEM_TLB_L2 0x10
#define PERF_MEM_TLB_WK 0x20
#define PERF_MEM_TLB_OS 0x40
#define PERF_MEM_TLB_SHIFT 26

#define PERF_MEM_S(a,s) (((__u64)PERF_MEM_ ##a ##_ ##s) << PERF_MEM_ ##a ##_SHIFT)
# 1176 "/home/jmikedupont2/linux/tools/include/uapi/linux/perf_event.h"
struct perf_branch_entry {
 __u64 from;
 __u64 to;
 __u64 mispred:1,
  predicted:1,
  in_tx:1,
  abort:1,
  cycles:16,
  type:4,
  reserved:40;
};
# 10 "util/record.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/target.h" 1


#define _PERF_TARGET_H 


# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
#define _SYS_TYPES_H 1










# 33 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
#define __u_char_defined 



typedef __loff_t loff_t;





typedef __ino64_t ino_t;

#define __ino_t_defined 


typedef __ino64_t ino64_t;
#define __ino64_t_defined 



typedef __dev_t dev_t;
#define __dev_t_defined 



typedef __gid_t gid_t;
#define __gid_t_defined 



typedef __mode_t mode_t;
#define __mode_t_defined 



typedef __nlink_t nlink_t;
#define __nlink_t_defined 



typedef __uid_t uid_t;
#define __uid_t_defined 






typedef __off64_t off_t;

#define __off_t_defined 


typedef __off64_t off64_t;
#define __off64_t_defined 
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
#define __id_t_defined 



typedef __ssize_t ssize_t;
#define __ssize_t_defined 




typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
#define __daddr_t_defined 




typedef __key_t key_t;
#define __key_t_defined 



#define __need_clock_t 

#define __need_time_t 
#define __need_timer_t 
#define __need_clockid_t 




typedef __useconds_t useconds_t;
#define __useconds_t_defined 


typedef __suseconds_t suseconds_t;
#define __suseconds_t_defined 



#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 187 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
#define __intN_t(N,MODE) typedef int int ##N ##_t __attribute__ ((__mode__ (MODE)))

#define __u_intN_t(N,MODE) typedef unsigned int u_int ##N ##_t __attribute__ ((__mode__ (MODE)))
# 200 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));





#define __BIT_TYPES_DEFINED__ 1




# 1 "/usr/include/endian.h" 1 3 4
# 19 "/usr/include/endian.h" 3 4
#define _ENDIAN_H 1
# 31 "/usr/include/endian.h" 3 4
#define __LITTLE_ENDIAN 1234
#define __BIG_ENDIAN 4321
#define __PDP_ENDIAN 3412


# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4






#define __BYTE_ORDER __LITTLE_ENDIAN
# 37 "/usr/include/endian.h" 2 3 4




#define __FLOAT_WORD_ORDER __BYTE_ORDER



#define LITTLE_ENDIAN __LITTLE_ENDIAN
#define BIG_ENDIAN __BIG_ENDIAN
#define PDP_ENDIAN __PDP_ENDIAN
#define BYTE_ORDER __BYTE_ORDER



#define __LONG_LONG_PAIR(HI,LO) LO, HI







# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
#define _BITS_BYTESWAP_H 1



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4


#define __bswap_constant_16(x) ((unsigned short int) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)))



# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 3 4
#define __bswap_16(x) (__extension__ ({ unsigned short int __v, __x = (unsigned short int) (x); if (__builtin_constant_p (__x)) __v = __bswap_constant_16 (__x); else __asm__ ("rorw $8, %w0" : "=r" (__v) : "0" (__x) : "cc"); __v; }))
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4


#define __bswap_constant_32(x) ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | (((x) & 0x0000ff00) << 8) | (((x) & 0x000000ff) << 24))





static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 97 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
#define __bswap_constant_64(x) (__extension__ ((((x) & 0xff00000000000000ull) >> 56) | (((x) & 0x00ff000000000000ull) >> 40) | (((x) & 0x0000ff0000000000ull) >> 24) | (((x) & 0x000000ff00000000ull) >> 8) | (((x) & 0x00000000ff000000ull) << 8) | (((x) & 0x0000000000ff0000ull) << 24) | (((x) & 0x000000000000ff00ull) << 40) | (((x) & 0x00000000000000ffull) << 56)))
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4


#define htobe16(x) __bswap_16 (x)
#define htole16(x) (x)
#define be16toh(x) __bswap_16 (x)
#define le16toh(x) (x)

#define htobe32(x) __bswap_32 (x)
#define htole32(x) (x)
#define be32toh(x) __bswap_32 (x)
#define le32toh(x) (x)

#define htobe64(x) __bswap_64 (x)
#define htole64(x) (x)
#define be64toh(x) __bswap_64 (x)
#define le64toh(x) (x)
# 217 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
#define _SYS_SELECT_H 1







# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4





#define __FD_ZERO_STOS "stosq"




#define __FD_ZERO(fdsp) do { int __d0, __d1; __asm__ __volatile__ ("cld; rep; " __FD_ZERO_STOS : "=c" (__d0), "=D" (__d1) : "a" (0), "0" (sizeof (fd_set) / sizeof (__fd_mask)), "1" (&__FDS_BITS (fdsp)[0]) : "memory"); } while (0)
# 58 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
#define __FD_SET(d,set) ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))

#define __FD_CLR(d,set) ((void) (__FDS_BITS (set)[__FD_ELT (d)] &= ~__FD_MASK (d)))

#define __FD_ISSET(d,set) ((__FDS_BITS (set)[__FD_ELT (d)] & __FD_MASK (d)) != 0)
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
#define _SIGSET_H_types 1

typedef int __sig_atomic_t;



#define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


#define __sigset_t_defined 
typedef __sigset_t sigset_t;



#define __need_time_t 

#define __need_timespec 


#define __need_timeval 
# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 101 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
#undef __need_timeval
# 48 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 56 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;


#undef __NFDBITS

#define __NFDBITS (8 * (int) sizeof (__fd_mask))
#define __FD_ELT(d) ((d) / __NFDBITS)
#define __FD_MASK(d) ((__fd_mask) (1UL << ((d) % __NFDBITS)))


typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];
#define __FDS_BITS(set) ((set)->fds_bits)




  } fd_set;


#define FD_SETSIZE __FD_SETSIZE



typedef __fd_mask fd_mask;


#define NFDBITS __NFDBITS




#define FD_SET(fd,fdsetp) __FD_SET (fd, fdsetp)
#define FD_CLR(fd,fdsetp) __FD_CLR (fd, fdsetp)
#define FD_ISSET(fd,fdsetp) __FD_ISSET (fd, fdsetp)
#define FD_ZERO(fdsetp) __FD_ZERO (fdsetp)



# 108 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 120 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
#undef __FD_ELT
#define __FD_ELT(d) __extension__ ({ long int __d = (d); (__builtin_constant_p (__d) ? (0 <= __d && __d < __FD_SETSIZE ? (__d / __NFDBITS) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
#define _SYS_SYSMACROS_H 1





__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}




#define major(dev) gnu_dev_major (dev)
#define minor(dev) gnu_dev_minor (dev)
#define makedev(maj,min) gnu_dev_makedev (maj, min)
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;
#define __blksize_t_defined 
# 248 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt_t;
#define __blkcnt_t_defined 


typedef __fsblkcnt64_t fsblkcnt_t;
#define __fsblkcnt_t_defined 


typedef __fsfilcnt64_t fsfilcnt_t;
#define __fsfilcnt_t_defined 




typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
#define _BITS_PTHREADTYPES_H 1

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



#define __SIZEOF_PTHREAD_ATTR_T 56
#define __SIZEOF_PTHREAD_MUTEX_T 40
#define __SIZEOF_PTHREAD_MUTEXATTR_T 4
#define __SIZEOF_PTHREAD_COND_T 48
#define __SIZEOF_PTHREAD_CONDATTR_T 4
#define __SIZEOF_PTHREAD_RWLOCK_T 56
#define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
#define __SIZEOF_PTHREAD_BARRIER_T 32
#define __SIZEOF_PTHREAD_BARRIERATTR_T 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;
#define __have_pthread_attr_t 1




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
#define __PTHREAD_MUTEX_HAVE_PREV 1

#define __PTHREAD_SPINS 0, 0
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];
#define __PTHREAD_RWLOCK_ELISION_EXTRA 0, { 0, 0, 0, 0, 0, 0, 0 }

    unsigned long int __pad2;


    unsigned int __flags;
#define __PTHREAD_RWLOCK_INT_FLAGS_SHARED 1
  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 7 "/home/jmikedupont2/linux/tools/perf/util/target.h" 2


# 8 "/home/jmikedupont2/linux/tools/perf/util/target.h"
struct target {
 const char *pid;
 const char *tid;
 const char *cpu_list;
 const char *uid_str;
 uid_t uid;
 
# 14 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
_Bool 
# 14 "/home/jmikedupont2/linux/tools/perf/util/target.h"
          system_wide;
 
# 15 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
_Bool 
# 15 "/home/jmikedupont2/linux/tools/perf/util/target.h"
          uses_mmap;
 
# 16 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
_Bool 
# 16 "/home/jmikedupont2/linux/tools/perf/util/target.h"
          default_per_cpu;
 
# 17 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
_Bool 
# 17 "/home/jmikedupont2/linux/tools/perf/util/target.h"
          per_thread;
};

enum target_errno {
 TARGET_ERRNO__SUCCESS = 0,
# 30 "/home/jmikedupont2/linux/tools/perf/util/target.h"
 __TARGET_ERRNO__START = -10000,


 TARGET_ERRNO__PID_OVERRIDE_CPU = __TARGET_ERRNO__START,
 TARGET_ERRNO__PID_OVERRIDE_UID,
 TARGET_ERRNO__UID_OVERRIDE_CPU,
 TARGET_ERRNO__PID_OVERRIDE_SYSTEM,
 TARGET_ERRNO__UID_OVERRIDE_SYSTEM,
 TARGET_ERRNO__SYSTEM_OVERRIDE_THREAD,


 TARGET_ERRNO__INVALID_UID,
 TARGET_ERRNO__USER_NOT_FOUND,

 __TARGET_ERRNO__END,
};

enum target_errno target__validate(struct target *target);
enum target_errno target__parse_uid(struct target *target);

int target__strerror(struct target *target, int errnum, char *buf, size_t buflen);

static inline 
# 52 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
             _Bool 
# 52 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                  target__has_task(struct target *target)
{
 return target->tid || target->pid || target->uid_str;
}

static inline 
# 57 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
             _Bool 
# 57 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                  target__has_cpu(struct target *target)
{
 return target->system_wide || target->cpu_list;
}

static inline 
# 62 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
             _Bool 
# 62 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                  target__none(struct target *target)
{
 return !target__has_task(target) && !target__has_cpu(target);
}

static inline 
# 67 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
             _Bool 
# 67 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                  target__has_per_thread(struct target *target)
{
 return target->system_wide && target->per_thread;
}

static inline 
# 72 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
             _Bool 
# 72 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                  target__uses_dummy_map(struct target *target)
{
 
# 74 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
_Bool 
# 74 "/home/jmikedupont2/linux/tools/perf/util/target.h"
     use_dummy = 
# 74 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
                 0
# 74 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                      ;

 if (target->default_per_cpu)
  use_dummy = target->per_thread ? 
# 77 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
                                  1 
# 77 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                                       : 
# 77 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
                                         0
# 77 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                                              ;
 else if (target__has_task(target) ||
          (!target__has_cpu(target) && !target->uses_mmap))
  use_dummy = 
# 80 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
             1
# 80 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                 ;
 else if (target__has_per_thread(target))
  use_dummy = 
# 82 "/home/jmikedupont2/linux/tools/perf/util/target.h" 3 4
             1
# 82 "/home/jmikedupont2/linux/tools/perf/util/target.h"
                 ;

 return use_dummy;
}
# 11 "util/record.h" 2

struct option;

struct record_opts {
 struct target target;
 
# 16 "util/record.h" 3 4
_Bool 
# 16 "util/record.h"
           group;
 
# 17 "util/record.h" 3 4
_Bool 
# 17 "util/record.h"
           inherit_stat;
 
# 18 "util/record.h" 3 4
_Bool 
# 18 "util/record.h"
           no_buffering;
 
# 19 "util/record.h" 3 4
_Bool 
# 19 "util/record.h"
           no_inherit;
 
# 20 "util/record.h" 3 4
_Bool 
# 20 "util/record.h"
           no_inherit_set;
 
# 21 "util/record.h" 3 4
_Bool 
# 21 "util/record.h"
           no_samples;
 
# 22 "util/record.h" 3 4
_Bool 
# 22 "util/record.h"
           raw_samples;
 
# 23 "util/record.h" 3 4
_Bool 
# 23 "util/record.h"
           sample_address;
 
# 24 "util/record.h" 3 4
_Bool 
# 24 "util/record.h"
           sample_phys_addr;
 
# 25 "util/record.h" 3 4
_Bool 
# 25 "util/record.h"
           sample_weight;
 
# 26 "util/record.h" 3 4
_Bool 
# 26 "util/record.h"
           sample_time;
 
# 27 "util/record.h" 3 4
_Bool 
# 27 "util/record.h"
           sample_time_set;
 
# 28 "util/record.h" 3 4
_Bool 
# 28 "util/record.h"
           sample_cpu;
 
# 29 "util/record.h" 3 4
_Bool 
# 29 "util/record.h"
           period;
 
# 30 "util/record.h" 3 4
_Bool 
# 30 "util/record.h"
           period_set;
 
# 31 "util/record.h" 3 4
_Bool 
# 31 "util/record.h"
           running_time;
 
# 32 "util/record.h" 3 4
_Bool 
# 32 "util/record.h"
           full_auxtrace;
 
# 33 "util/record.h" 3 4
_Bool 
# 33 "util/record.h"
           auxtrace_snapshot_mode;
 
# 34 "util/record.h" 3 4
_Bool 
# 34 "util/record.h"
           auxtrace_snapshot_on_exit;
 
# 35 "util/record.h" 3 4
_Bool 
# 35 "util/record.h"
           auxtrace_sample_mode;
 
# 36 "util/record.h" 3 4
_Bool 
# 36 "util/record.h"
           record_namespaces;
 
# 37 "util/record.h" 3 4
_Bool 
# 37 "util/record.h"
           record_switch_events;
 
# 38 "util/record.h" 3 4
_Bool 
# 38 "util/record.h"
           all_kernel;
 
# 39 "util/record.h" 3 4
_Bool 
# 39 "util/record.h"
           all_user;
 
# 40 "util/record.h" 3 4
_Bool 
# 40 "util/record.h"
           kernel_callchains;
 
# 41 "util/record.h" 3 4
_Bool 
# 41 "util/record.h"
           user_callchains;
 
# 42 "util/record.h" 3 4
_Bool 
# 42 "util/record.h"
           tail_synthesize;
 
# 43 "util/record.h" 3 4
_Bool 
# 43 "util/record.h"
           overwrite;
 
# 44 "util/record.h" 3 4
_Bool 
# 44 "util/record.h"
           ignore_missing_thread;
 
# 45 "util/record.h" 3 4
_Bool 
# 45 "util/record.h"
           strict_freq;
 
# 46 "util/record.h" 3 4
_Bool 
# 46 "util/record.h"
           sample_id;
 
# 47 "util/record.h" 3 4
_Bool 
# 47 "util/record.h"
           no_bpf_event;
 
# 48 "util/record.h" 3 4
_Bool 
# 48 "util/record.h"
           kcore;
 unsigned int freq;
 unsigned int mmap_pages;
 unsigned int auxtrace_mmap_pages;
 unsigned int user_freq;
 u64 branch_stack;
 u64 sample_intr_regs;
 u64 sample_user_regs;
 u64 default_interval;
 u64 user_interval;
 size_t auxtrace_snapshot_size;
 const char *auxtrace_snapshot_opts;
 const char *auxtrace_sample_opts;
 
# 61 "util/record.h" 3 4
_Bool 
# 61 "util/record.h"
           sample_transaction;
 unsigned initial_delay;
 
# 63 "util/record.h" 3 4
_Bool 
# 63 "util/record.h"
           use_clockid;
 clockid_t clockid;
 u64 clockid_res_ns;
 int nr_cblocks;
 int affinity;
 int mmap_flush;
 unsigned int comp_level;
};

extern const char * const *record_usage;
extern struct option *record_options;

int record__parse_freq(const struct option *opt, const char *str, int unset);
# 18 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 1
# 21 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
#define _PARSE_EVENTS_H 


# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 1 3 4
# 31 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 3 4
#define _STDARG_H 
#define _ANSI_STDARG_H_ 

#undef __need___va_list




#define __GNUC_VA_LIST 

# 40 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;






#define va_start(v,l) __builtin_va_start(v,l)
#define va_end(v) __builtin_va_end(v)
#define va_arg(v,l) __builtin_va_arg(v,l)


#define va_copy(d,s) __builtin_va_copy(d,s)

#define __va_copy(d,s) __builtin_va_copy(d,s)
# 99 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;





#define _VA_LIST_ 


#define _VA_LIST 


#define _VA_LIST_DEFINED 


#define _VA_LIST_T_H 


#define __va_list__ 
# 25 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 26 "/usr/include/stdio.h" 3 4
#define _STDIO_H 1




#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 34 "/usr/include/stdio.h" 2 3 4


#define __need_FILE 
#define __need___FILE 






struct _IO_FILE;



typedef struct _IO_FILE FILE;







#define __FILE_defined 1

#undef __need_FILE





typedef struct _IO_FILE __FILE;

#define ____FILE_defined 1

#undef __need___FILE



#define _STDIO_USES_IOSTREAM 

# 1 "/usr/include/libio.h" 1 3 4
# 29 "/usr/include/libio.h" 3 4
#define _IO_STDIO_H 

# 1 "/usr/include/_G_config.h" 1 3 4




#define _G_config_h 1




#define __need_size_t 



#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 16 "/usr/include/_G_config.h" 2 3 4
#define __need_mbstate_t 



# 1 "/usr/include/wchar.h" 1 3 4
# 80 "/usr/include/wchar.h" 3 4
#define ____mbstate_t_defined 1

typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;

#undef __need_mbstate_t
# 902 "/usr/include/wchar.h" 3 4
#undef __need_mbstate_t
#undef __need_wint_t
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 46 "/usr/include/_G_config.h" 3 4
#define _G_va_list __gnuc_va_list

#define _G_HAVE_MMAP 1
#define _G_HAVE_MREMAP 1

#define _G_IO_IO_FILE_VERSION 0x20001


#define _G_HAVE_ST_BLKSIZE defined (_STATBUF_ST_BLKSIZE)

#define _G_BUFSIZ 8192
# 32 "/usr/include/libio.h" 2 3 4

#define _IO_fpos_t _G_fpos_t
#define _IO_fpos64_t _G_fpos64_t
#define _IO_size_t size_t
#define _IO_ssize_t __ssize_t
#define _IO_off_t __off_t
#define _IO_off64_t __off64_t
#define _IO_pid_t __pid_t
#define _IO_uid_t __uid_t
#define _IO_iconv_t _G_iconv_t
#define _IO_HAVE_ST_BLKSIZE _G_HAVE_ST_BLKSIZE
#define _IO_BUFSIZ _G_BUFSIZ
#define _IO_va_list _G_va_list
#define _IO_wint_t wint_t


#define __need___va_list 


#undef _IO_va_list
#define _IO_va_list __gnuc_va_list






#define _IO_UNIFIED_JUMPTABLES 1


#define EOF (-1)
# 77 "/usr/include/libio.h" 3 4
#define _IOS_INPUT 1
#define _IOS_OUTPUT 2
#define _IOS_ATEND 4
#define _IOS_APPEND 8
#define _IOS_TRUNC 16
#define _IOS_NOCREATE 32
#define _IOS_NOREPLACE 64
#define _IOS_BIN 128







#define _IO_MAGIC 0xFBAD0000
#define _OLD_STDIO_MAGIC 0xFABC0000
#define _IO_MAGIC_MASK 0xFFFF0000
#define _IO_USER_BUF 1
#define _IO_UNBUFFERED 2
#define _IO_NO_READS 4
#define _IO_NO_WRITES 8
#define _IO_EOF_SEEN 0x10
#define _IO_ERR_SEEN 0x20
#define _IO_DELETE_DONT_CLOSE 0x40
#define _IO_LINKED 0x80
#define _IO_IN_BACKUP 0x100
#define _IO_LINE_BUF 0x200
#define _IO_TIED_PUT_GET 0x400
#define _IO_CURRENTLY_PUTTING 0x800
#define _IO_IS_APPENDING 0x1000
#define _IO_IS_FILEBUF 0x2000
#define _IO_BAD_SEEN 0x4000
#define _IO_USER_LOCK 0x8000

#define _IO_FLAGS2_MMAP 1
#define _IO_FLAGS2_NOTCANCEL 2



#define _IO_FLAGS2_USER_WBUF 8







#define _IO_SKIPWS 01
#define _IO_LEFT 02
#define _IO_RIGHT 04
#define _IO_INTERNAL 010
#define _IO_DEC 020
#define _IO_OCT 040
#define _IO_HEX 0100
#define _IO_SHOWBASE 0200
#define _IO_SHOWPOINT 0400
#define _IO_UPPERCASE 01000
#define _IO_SHOWPOS 02000
#define _IO_SCIENTIFIC 04000
#define _IO_FIXED 010000
#define _IO_UNITBUF 020000
#define _IO_STDIO 040000
#define _IO_DONT_CLOSE 0100000
#define _IO_BOOLALPHA 0200000


struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;
#define _IO_file_flags _flags



  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;

#define __HAVE_COLUMN 

  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;

#define _IO_stdin ((_IO_FILE*)(&_IO_2_1_stdin_))
#define _IO_stdout ((_IO_FILE*)(&_IO_2_1_stdout_))
#define _IO_stderr ((_IO_FILE*)(&_IO_2_1_stderr_))
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);







#define _IO_BE(expr,res) __builtin_expect ((expr), res)




#define _IO_getc_unlocked(_fp) (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)


#define _IO_peekc_unlocked(_fp) (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) && __underflow (_fp) == EOF ? EOF : *(unsigned char *) (_fp)->_IO_read_ptr)



#define _IO_putc_unlocked(_ch,_fp) (_IO_BE ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end, 0) ? __overflow (_fp, (unsigned char) (_ch)) : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))
# 426 "/usr/include/libio.h" 3 4
#define _IO_feof_unlocked(__fp) (((__fp)->_flags & _IO_EOF_SEEN) != 0)
#define _IO_ferror_unlocked(__fp) (((__fp)->_flags & _IO_ERR_SEEN) != 0)

extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);


#define _IO_PENDING_OUTPUT_COUNT(_fp) ((_fp)->_IO_write_ptr - (_fp)->_IO_write_base)


extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 451 "/usr/include/libio.h" 3 4
#define _IO_peekc(_fp) _IO_peekc_unlocked (_fp)
#define _IO_flockfile(_fp) 
#define _IO_funlockfile(_fp) 
#define _IO_ftrylockfile(_fp) 
#define _IO_cleanup_region_start(_fct,_fp) 
#define _IO_cleanup_region_end(_Doit) 


extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4
# 110 "/usr/include/stdio.h" 3 4




typedef _G_fpos64_t fpos_t;



typedef _G_fpos64_t fpos64_t;



#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2




#define BUFSIZ _IO_BUFSIZ
# 142 "/usr/include/stdio.h" 3 4
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2

#define SEEK_DATA 3
#define SEEK_HOLE 4





#define P_tmpdir "/tmp"
# 166 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 3 4
#define L_tmpnam 20
#define TMP_MAX 238328
#define FILENAME_MAX 4096


#define L_ctermid 9

#define L_cuserid 9





#undef FOPEN_MAX
#define FOPEN_MAX 16
# 167 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;

#define stdin stdin
#define stdout stdout
#define stderr stderr



extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));



# 200 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) __asm__ ("" "tmpfile64") __attribute__ ((__warn_unused_result__));






extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 229 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 254 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 264 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);




# 285 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename, const char *__restrict __modes) __asm__ ("" "fopen64")

  __attribute__ ((__warn_unused_result__));
extern FILE *freopen (const char *__restrict __filename, const char *__restrict __modes, FILE *__restrict __stream) __asm__ ("" "freopen64")


  __attribute__ ((__warn_unused_result__));







extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 465 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 524 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);




#define getc(_fp) _IO_getc (_fp)






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 563 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);




#define putc(_ch,_fp) _IO_putc (_ch, _fp)
# 596 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 642 "/usr/include/stdio.h" 3 4

# 651 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 667 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 728 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 739 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);

# 783 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off64_t __off, int __whence) __asm__ ("" "fseeko64")

                  ;
extern __off64_t ftello (FILE *__stream) __asm__ ("" "ftello64");








# 808 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos) __asm__ ("" "fgetpos64")
                                          ;
extern int fsetpos (FILE *__stream, const fpos_t *__pos) __asm__ ("" "fsetpos64")
                                                          ;








extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 856 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 874 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 935 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
#define __STDIO_INLINE __extern_inline
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 144 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
#define fread_unlocked(ptr,size,n,stream) (__extension__ ((__builtin_constant_p (size) && __builtin_constant_p (n) && (size_t) (size) * (size_t) (n) <= 8 && (size_t) (size) != 0) ? ({ char *__ptr = (char *) (ptr); FILE *__stream = (stream); size_t __cnt; for (__cnt = (size_t) (size) * (size_t) (n); __cnt > 0; --__cnt) { int __c = _IO_getc_unlocked (__stream); if (__c == EOF) break; *__ptr++ = __c; } ((size_t) (size) * (size_t) (n) - __cnt) / (size_t) (size); }) : (((__builtin_constant_p (size) && (size_t) (size) == 0) || (__builtin_constant_p (n) && (size_t) (n) == 0)) ? ((void) (ptr), (void) (stream), (void) (size), (void) (n), (size_t) 0) : fread_unlocked (ptr, size, n, stream))))
# 168 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
#define fwrite_unlocked(ptr,size,n,stream) (__extension__ ((__builtin_constant_p (size) && __builtin_constant_p (n) && (size_t) (size) * (size_t) (n) <= 8 && (size_t) (size) != 0) ? ({ const char *__ptr = (const char *) (ptr); FILE *__stream = (stream); size_t __cnt; for (__cnt = (size_t) (size) * (size_t) (n); __cnt > 0; --__cnt) if (_IO_putc_unlocked (*__ptr++, __stream) == EOF) break; ((size_t) (size) * (size_t) (n) - __cnt) / (size_t) (size); }) : (((__builtin_constant_p (size) && (size_t) (size) == 0) || (__builtin_constant_p (n) && (size_t) (n) == 0)) ? ((void) (ptr), (void) (stream), (void) (size), (void) (n), (size_t) 0) : fwrite_unlocked (ptr, size, n, stream))))
# 190 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
#undef __STDIO_INLINE
# 936 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...)

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 241 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}



#undef fread_unlocked
extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 939 "/usr/include/stdio.h" 2 3 4






# 26 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 2
# 1 "/usr/include/regex.h" 1 3 4
# 21 "/usr/include/regex.h" 3 4
#define _REGEX_H 1
# 34 "/usr/include/regex.h" 3 4
typedef long int s_reg_t;
typedef unsigned long int active_reg_t;






typedef unsigned long int reg_syntax_t;




#define RE_BACKSLASH_ESCAPE_IN_LISTS ((unsigned long int) 1)




#define RE_BK_PLUS_QM (RE_BACKSLASH_ESCAPE_IN_LISTS << 1)





#define RE_CHAR_CLASSES (RE_BK_PLUS_QM << 1)
# 72 "/usr/include/regex.h" 3 4
#define RE_CONTEXT_INDEP_ANCHORS (RE_CHAR_CLASSES << 1)







#define RE_CONTEXT_INDEP_OPS (RE_CONTEXT_INDEP_ANCHORS << 1)



#define RE_CONTEXT_INVALID_OPS (RE_CONTEXT_INDEP_OPS << 1)



#define RE_DOT_NEWLINE (RE_CONTEXT_INVALID_OPS << 1)



#define RE_DOT_NOT_NULL (RE_DOT_NEWLINE << 1)



#define RE_HAT_LISTS_NOT_NEWLINE (RE_DOT_NOT_NULL << 1)




#define RE_INTERVALS (RE_HAT_LISTS_NOT_NEWLINE << 1)



#define RE_LIMITED_OPS (RE_INTERVALS << 1)



#define RE_NEWLINE_ALT (RE_LIMITED_OPS << 1)




#define RE_NO_BK_BRACES (RE_NEWLINE_ALT << 1)



#define RE_NO_BK_PARENS (RE_NO_BK_BRACES << 1)



#define RE_NO_BK_REFS (RE_NO_BK_PARENS << 1)



#define RE_NO_BK_VBAR (RE_NO_BK_REFS << 1)





#define RE_NO_EMPTY_RANGES (RE_NO_BK_VBAR << 1)



#define RE_UNMATCHED_RIGHT_PAREN_ORD (RE_NO_EMPTY_RANGES << 1)



#define RE_NO_POSIX_BACKTRACKING (RE_UNMATCHED_RIGHT_PAREN_ORD << 1)



#define RE_NO_GNU_OPS (RE_NO_POSIX_BACKTRACKING << 1)







#define RE_DEBUG (RE_NO_GNU_OPS << 1)




#define RE_INVALID_INTERVAL_ORD (RE_DEBUG << 1)



#define RE_ICASE (RE_INVALID_INTERVAL_ORD << 1)




#define RE_CARET_ANCHORS_HERE (RE_ICASE << 1)



#define RE_CONTEXT_INVALID_DUP (RE_CARET_ANCHORS_HERE << 1)



#define RE_NO_SUB (RE_CONTEXT_INVALID_DUP << 1)






extern reg_syntax_t re_syntax_options;






#define RE_SYNTAX_EMACS 0

#define RE_SYNTAX_AWK (RE_BACKSLASH_ESCAPE_IN_LISTS | RE_DOT_NOT_NULL | RE_NO_BK_PARENS | RE_NO_BK_REFS | RE_NO_BK_VBAR | RE_NO_EMPTY_RANGES | RE_DOT_NEWLINE | RE_CONTEXT_INDEP_ANCHORS | RE_CHAR_CLASSES | RE_UNMATCHED_RIGHT_PAREN_ORD | RE_NO_GNU_OPS)







#define RE_SYNTAX_GNU_AWK ((RE_SYNTAX_POSIX_EXTENDED | RE_BACKSLASH_ESCAPE_IN_LISTS | RE_INVALID_INTERVAL_ORD) & ~(RE_DOT_NOT_NULL | RE_CONTEXT_INDEP_OPS | RE_CONTEXT_INVALID_OPS ))





#define RE_SYNTAX_POSIX_AWK (RE_SYNTAX_POSIX_EXTENDED | RE_BACKSLASH_ESCAPE_IN_LISTS | RE_INTERVALS | RE_NO_GNU_OPS | RE_INVALID_INTERVAL_ORD)




#define RE_SYNTAX_GREP (RE_BK_PLUS_QM | RE_CHAR_CLASSES | RE_HAT_LISTS_NOT_NEWLINE | RE_INTERVALS | RE_NEWLINE_ALT)




#define RE_SYNTAX_EGREP (RE_CHAR_CLASSES | RE_CONTEXT_INDEP_ANCHORS | RE_CONTEXT_INDEP_OPS | RE_HAT_LISTS_NOT_NEWLINE | RE_NEWLINE_ALT | RE_NO_BK_PARENS | RE_NO_BK_VBAR)





#define RE_SYNTAX_POSIX_EGREP (RE_SYNTAX_EGREP | RE_INTERVALS | RE_NO_BK_BRACES | RE_INVALID_INTERVAL_ORD)




#define RE_SYNTAX_ED RE_SYNTAX_POSIX_BASIC

#define RE_SYNTAX_SED RE_SYNTAX_POSIX_BASIC


#define _RE_SYNTAX_POSIX_COMMON (RE_CHAR_CLASSES | RE_DOT_NEWLINE | RE_DOT_NOT_NULL | RE_INTERVALS | RE_NO_EMPTY_RANGES)



#define RE_SYNTAX_POSIX_BASIC (_RE_SYNTAX_POSIX_COMMON | RE_BK_PLUS_QM | RE_CONTEXT_INVALID_DUP)





#define RE_SYNTAX_POSIX_MINIMAL_BASIC (_RE_SYNTAX_POSIX_COMMON | RE_LIMITED_OPS)


#define RE_SYNTAX_POSIX_EXTENDED (_RE_SYNTAX_POSIX_COMMON | RE_CONTEXT_INDEP_ANCHORS | RE_CONTEXT_INDEP_OPS | RE_NO_BK_BRACES | RE_NO_BK_PARENS | RE_NO_BK_VBAR | RE_CONTEXT_INVALID_OPS | RE_UNMATCHED_RIGHT_PAREN_ORD)







#define RE_SYNTAX_POSIX_MINIMAL_EXTENDED (_RE_SYNTAX_POSIX_COMMON | RE_CONTEXT_INDEP_ANCHORS | RE_CONTEXT_INVALID_OPS | RE_NO_BK_BRACES | RE_NO_BK_PARENS | RE_NO_BK_REFS | RE_NO_BK_VBAR | RE_UNMATCHED_RIGHT_PAREN_ORD)
# 265 "/usr/include/regex.h" 3 4
#define RE_DUP_MAX (0x7fff)







#define REG_EXTENDED 1



#define REG_ICASE (REG_EXTENDED << 1)




#define REG_NEWLINE (REG_ICASE << 1)



#define REG_NOSUB (REG_NEWLINE << 1)
# 296 "/usr/include/regex.h" 3 4
#define REG_NOTBOL 1


#define REG_NOTEOL (1 << 1)



#define REG_STARTEND (1 << 2)




typedef enum
{

  REG_ENOSYS = -1,


  REG_NOERROR = 0,
  REG_NOMATCH,



  REG_BADPAT,
  REG_ECOLLATE,
  REG_ECTYPE,
  REG_EESCAPE,
  REG_ESUBREG,
  REG_EBRACK,
  REG_EPAREN,
  REG_EBRACE,
  REG_BADBR,
  REG_ERANGE,
  REG_ESPACE,
  REG_BADRPT,


  REG_EEND,
  REG_ESIZE,
  REG_ERPAREN
} reg_errcode_t;
# 345 "/usr/include/regex.h" 3 4
#define __RE_TRANSLATE_TYPE unsigned char *

#define RE_TRANSLATE_TYPE __RE_TRANSLATE_TYPE




#define __REPB_PREFIX(name) name




struct re_pattern_buffer
{



  unsigned char *buffer;


  unsigned long int allocated;


  unsigned long int used;


  reg_syntax_t syntax;




  char *fastmap;





  unsigned char * translate;


  size_t re_nsub;





  unsigned can_be_null : 1;






#define REGS_UNALLOCATED 0
#define REGS_REALLOCATE 1
#define REGS_FIXED 2

  unsigned regs_allocated : 2;



  unsigned fastmap_accurate : 1;



  unsigned no_sub : 1;



  unsigned not_bol : 1;


  unsigned not_eol : 1;


  unsigned newline_anchor : 1;
};

typedef struct re_pattern_buffer regex_t;


typedef int regoff_t;





struct re_registers
{
  unsigned num_regs;
  regoff_t *start;
  regoff_t *end;
};






#define RE_NREGS 30







typedef struct
{
  regoff_t rm_so;
  regoff_t rm_eo;
} regmatch_t;






extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
# 473 "/usr/include/regex.h" 3 4
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
           struct re_pattern_buffer *__buffer);





extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);







extern int re_search (struct re_pattern_buffer *__buffer, const char *__string,
        int __length, int __start, int __range,
        struct re_registers *__regs);




extern int re_search_2 (struct re_pattern_buffer *__buffer,
   const char *__string1, int __length1,
   const char *__string2, int __length2, int __start,
   int __range, struct re_registers *__regs, int __stop);




extern int re_match (struct re_pattern_buffer *__buffer, const char *__string,
       int __length, int __start, struct re_registers *__regs);



extern int re_match_2 (struct re_pattern_buffer *__buffer,
         const char *__string1, int __length1,
         const char *__string2, int __length2, int __start,
         struct re_registers *__regs, int __stop);
# 526 "/usr/include/regex.h" 3 4
extern void re_set_registers (struct re_pattern_buffer *__buffer,
         struct re_registers *__regs,
         unsigned int __num_regs,
         regoff_t *__starts, regoff_t *__ends);
# 562 "/usr/include/regex.h" 3 4
extern int regcomp (regex_t *__restrict __preg,
      const char *__restrict __pattern,
      int __cflags);

extern int regexec (const regex_t *__restrict __preg,
      const char *__restrict __string, size_t __nmatch,
      regmatch_t __pmatch[__restrict],
      int __eflags);

extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
   char *__restrict __errbuf, size_t __errbuf_size);

extern void regfree (regex_t *__preg);
# 27 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 23 "/usr/include/string.h" 3 4
#define _STRING_H 1






#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));




#define strdupa(s) (__extension__ ({ const char *__old = (s); size_t __len = strlen (__old) + 1; char *__new = (char *) __builtin_alloca (__len); (char *) memcpy (__new, __old, __len); }))
# 195 "/usr/include/string.h" 3 4
#define strndupa(s,n) (__extension__ ({ const char *__old = (s); size_t __len = strnlen (__old, (n)); char *__new = (char *) __builtin_alloca (__len + 1); __new[__len] = '\0'; (char *) memcpy (__new, __old, __len); }))
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 272 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 368 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 599 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 627 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/string.h" 3 4
#define _STRING_INLINE_unaligned 1


#define _HAVE_STRING_ARCH_mempcpy 1
# 628 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/string2.h" 1 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define __STRING_INLINE __extern_inline






#define __string2_1bptr_p(__x) ((size_t)(const void *)((__x) + 1) - (size_t)(const void *)(__x) == 1)




#define __bzero(s,n) __builtin_memset (s, '\0', n)




extern void *__rawmemchr (const void *__s, int __c);
#define strchr(s,c) (__extension__ (__builtin_constant_p (c) && !__builtin_constant_p (s) && (c) == '\0' ? (char *) __rawmemchr (s, c) : __builtin_strchr (s, c)))
# 74 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define __stpcpy(dest,src) __builtin_stpcpy (dest, src)


#define stpcpy(dest,src) __stpcpy (dest, src)






#define strncpy(dest,src,n) __builtin_strncpy (dest, src, n)
# 100 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define strncat(dest,src,n) __builtin_strncat (dest, src, n)






#define strcmp(s1,s2) __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (s1) && __builtin_constant_p (s2) && (__s1_len = __builtin_strlen (s1), __s2_len = __builtin_strlen (s2), (!__string2_1bptr_p (s1) || __s1_len >= 4) && (!__string2_1bptr_p (s2) || __s2_len >= 4)) ? __builtin_strcmp (s1, s2) : (__builtin_constant_p (s1) && __string2_1bptr_p (s1) && (__s1_len = __builtin_strlen (s1), __s1_len < 4) ? (__builtin_constant_p (s2) && __string2_1bptr_p (s2) ? __builtin_strcmp (s1, s2) : __strcmp_cg (s1, s2, __s1_len)) : (__builtin_constant_p (s2) && __string2_1bptr_p (s2) && (__s2_len = __builtin_strlen (s2), __s2_len < 4) ? (__builtin_constant_p (s1) && __string2_1bptr_p (s1) ? __builtin_strcmp (s1, s2) : -__strcmp_cg (s2, s1, __s2_len)) : __builtin_strcmp (s1, s2)))); })
# 127 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define __strcmp_cg(s1,s2,l1) (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (s2); int __result = (((const unsigned char *) (const char *) (s1))[0] - __s2[0]); if (l1 > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (s1))[1] - __s2[1]); if (l1 > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (s1))[2] - __s2[2]); if (l1 > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (s1))[3] - __s2[3]); } } __result; }))
# 153 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define strncmp(s1,s2,n) (__extension__ (__builtin_constant_p (n) && ((__builtin_constant_p (s1) && strlen (s1) < ((size_t) (n))) || (__builtin_constant_p (s2) && strlen (s2) < ((size_t) (n)))) ? strcmp (s1, s2) : strncmp (s1, s2, n)))
# 166 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define strcspn(s,reject) __builtin_strcspn (s, reject)






#define strspn(s,accept) __builtin_strspn (s, accept)





#define strpbrk(s,accept) __builtin_strpbrk (s, accept)





#define __strtok_r(s,sep,nextp) (__extension__ (__builtin_constant_p (sep) && __string2_1bptr_p (sep) && ((const char *) (sep))[0] != '\0' && ((const char *) (sep))[1] == '\0' ? __strtok_r_1c (s, ((const char *) (sep))[0], nextp) : __strtok_r (s, sep, nextp)))







extern __inline __attribute__ ((__gnu_inline__)) char *__strtok_r_1c (char *__s, char __sep, char **__nextp);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strtok_r_1c (char *__s, char __sep, char **__nextp)
{
  char *__result;
  if (__s == ((void *)0))
    __s = *__nextp;
  while (*__s == __sep)
    ++__s;
  __result = ((void *)0);
  if (*__s != '\0')
    {
      __result = __s++;
      while (*__s != '\0')
 if (*__s++ == __sep)
   {
     __s[-1] = '\0';
     break;
   }
    }
  *__nextp = __s;
  return __result;
}

#define strtok_r(s,sep,nextp) __strtok_r (s, sep, nextp)







extern char *__strsep_g (char **__stringp, const char *__delim);
#define __strsep(s,reject) __extension__ ({ char __r0, __r1, __r2; (__builtin_constant_p (reject) && __string2_1bptr_p (reject) && (__r0 = ((const char *) (reject))[0], ((const char *) (reject))[0] != '\0') ? ((__r1 = ((const char *) (reject))[1], ((const char *) (reject))[1] == '\0') ? __strsep_1c (s, __r0) : ((__r2 = ((const char *) (reject))[2], __r2 == '\0') ? __strsep_2c (s, __r0, __r1) : (((const char *) (reject))[3] == '\0' ? __strsep_3c (s, __r0, __r1, __r2) : __strsep_g (s, reject)))) : __strsep_g (s, reject)); })
# 243 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_1c (char **__s, char __reject);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_1c (char **__s, char __reject)
{
  char *__retval = *__s;
  if (__retval != ((void *)0) && (*__s = (__extension__ (__builtin_constant_p (__reject) && !__builtin_constant_p (__retval) && (__reject) == '\0' ? (char *) __rawmemchr (__retval, __reject) : __builtin_strchr (__retval, __reject)))) != ((void *)0))
    *(*__s)++ = '\0';
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_2c (char **__s, char __reject1, char __reject2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_2c (char **__s, char __reject1, char __reject2)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_3c (char **__s, char __reject1, char __reject2,
       char __reject3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}

#define strsep(s,reject) __strsep (s, reject)
# 318 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define __need_malloc_and_calloc 
# 1 "/usr/include/stdlib.h" 1 3 4
# 27 "/usr/include/stdlib.h" 3 4
#define __need_size_t 




# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 33 "/usr/include/stdlib.h" 2 3 4


# 424 "/usr/include/stdlib.h" 3 4
#define __malloc_and_calloc_defined 


extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

# 932 "/usr/include/stdlib.h" 3 4
#undef __need_malloc_and_calloc


# 320 "/usr/include/x86_64-linux-gnu/bits/string2.h" 2 3 4




extern char *__strdup (const char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
#define __strdup(s) (__extension__ (__builtin_constant_p (s) && __string2_1bptr_p (s) ? (((const char *) (s))[0] == '\0' ? (char *) calloc ((size_t) 1, (size_t) 1) : ({ size_t __len = strlen (s) + 1; char *__retval = (char *) malloc (__len); if (__retval != NULL) __retval = (char *) memcpy (__retval, s, __len); __retval; })) : __strdup (s)))
# 337 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define strdup(s) __strdup (s)





extern char *__strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
#define __strndup(s,n) (__extension__ (__builtin_constant_p (s) && __string2_1bptr_p (s) ? (((const char *) (s))[0] == '\0' ? (char *) calloc ((size_t) 1, (size_t) 1) : ({ size_t __len = strlen (s) + 1; size_t __n = (n); char *__retval; if (__n < __len) __len = __n + 1; __retval = (char *) malloc (__len); if (__retval != NULL) { __retval[__len - 1] = '\0'; __retval = (char *) memcpy (__retval, s, __len - 1); } __retval; })) : __strndup (s, n)))
# 365 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
#define strndup(s,n) __strndup (s, n)






#undef __STRING_INLINE
# 631 "/usr/include/string.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/string3.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
#undef memcpy
#undef memmove
#undef memset
#undef strcat
#undef strcpy
#undef strncat
#undef strncpy

#undef mempcpy
#undef stpcpy


#undef bcopy
#undef bzero




extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memmove (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 77 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memset (void *__dest, int __ch, size_t __len)
{
# 90 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bcopy (const void *__src, void *__dest, size_t __len)
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bzero (void *__dest, size_t __len)
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) __asm__ ("" "stpncpy") __attribute__ ((__nothrow__ , __leaf__))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpncpy (char *__dest, const char *__src, size_t __n)
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcat (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 636 "/usr/include/string.h" 2 3 4
# 656 "/usr/include/string.h" 3 4

# 28 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 2

# 1 "/home/jmikedupont2/linux/tools/lib/traceevent/trace-seq.h" 1







#define _TRACE_SEQ_H 







#define TRACE_SEQ_BUF_SIZE 4096



# 19 "/home/jmikedupont2/linux/tools/lib/traceevent/trace-seq.h"
enum trace_seq_fail {
 TRACE_SEQ__GOOD,
 TRACE_SEQ__BUFFER_POISONED,
 TRACE_SEQ__MEM_ALLOC_FAILED,
};






struct trace_seq {
 char *buffer;
 unsigned int buffer_size;
 unsigned int len;
 unsigned int readpos;
 enum trace_seq_fail state;
};

void trace_seq_init(struct trace_seq *s);
void trace_seq_reset(struct trace_seq *s);
void trace_seq_destroy(struct trace_seq *s);

extern int trace_seq_printf(struct trace_seq *s, const char *fmt, ...)
 __attribute__ ((format (printf, 2, 3)));
extern int trace_seq_vprintf(struct trace_seq *s, const char *fmt, va_list args)
 __attribute__ ((format (printf, 2, 0)));

extern int trace_seq_puts(struct trace_seq *s, const char *str);
extern int trace_seq_putc(struct trace_seq *s, unsigned char c);

extern void trace_seq_terminate(struct trace_seq *s);

extern int trace_seq_do_fprintf(struct trace_seq *s, FILE *fp);
extern int trace_seq_do_printf(struct trace_seq *s);
# 30 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 2


#define __maybe_unused __attribute__((unused))



#define DEBUG_RECORD 0


struct tep_record {
 unsigned long long ts;
 unsigned long long offset;
 long long missed_events;
 int record_size;
 int size;
 void *data;
 int cpu;
 int ref_count;
 int locked;
 void *priv;





};



struct tep_handle;
struct tep_event;

typedef int (*tep_event_handler_func)(struct trace_seq *s,
          struct tep_record *record,
          struct tep_event *event,
          void *context);

typedef int (*tep_plugin_load_func)(struct tep_handle *tep);
typedef int (*tep_plugin_unload_func)(struct tep_handle *tep);

struct tep_plugin_option {
 struct tep_plugin_option *next;
 void *handle;
 char *file;
 char *name;
 char *plugin_alias;
 char *description;
 const char *value;
 void *priv;
 int set;
};
# 122 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
#define TEP_PLUGIN_LOADER tep_plugin_loader
#define TEP_PLUGIN_UNLOADER tep_plugin_unloader
#define TEP_PLUGIN_OPTIONS tep_plugin_options
#define TEP_PLUGIN_ALIAS tep_plugin_alias
#define _MAKE_STR(x) #x
#define MAKE_STR(x) _MAKE_STR(x)
#define TEP_PLUGIN_LOADER_NAME MAKE_STR(TEP_PLUGIN_LOADER)
#define TEP_PLUGIN_UNLOADER_NAME MAKE_STR(TEP_PLUGIN_UNLOADER)
#define TEP_PLUGIN_OPTIONS_NAME MAKE_STR(TEP_PLUGIN_OPTIONS)
#define TEP_PLUGIN_ALIAS_NAME MAKE_STR(TEP_PLUGIN_ALIAS)

enum tep_format_flags {
 TEP_FIELD_IS_ARRAY = 1,
 TEP_FIELD_IS_POINTER = 2,
 TEP_FIELD_IS_SIGNED = 4,
 TEP_FIELD_IS_STRING = 8,
 TEP_FIELD_IS_DYNAMIC = 16,
 TEP_FIELD_IS_LONG = 32,
 TEP_FIELD_IS_FLAG = 64,
 TEP_FIELD_IS_SYMBOLIC = 128,
};

struct tep_format_field {
 struct tep_format_field *next;
 struct tep_event *event;
 char *type;
 char *name;
 char *alias;
 int offset;
 int size;
 unsigned int arraylen;
 unsigned int elementsize;
 unsigned long flags;
};

struct tep_format {
 int nr_common;
 int nr_fields;
 struct tep_format_field *common_fields;
 struct tep_format_field *fields;
};

struct tep_print_arg_atom {
 char *atom;
};

struct tep_print_arg_string {
 char *string;
 int offset;
};

struct tep_print_arg_bitmask {
 char *bitmask;
 int offset;
};

struct tep_print_arg_field {
 char *name;
 struct tep_format_field *field;
};

struct tep_print_flag_sym {
 struct tep_print_flag_sym *next;
 char *value;
 char *str;
};

struct tep_print_arg_typecast {
 char *type;
 struct tep_print_arg *item;
};

struct tep_print_arg_flags {
 struct tep_print_arg *field;
 char *delim;
 struct tep_print_flag_sym *flags;
};

struct tep_print_arg_symbol {
 struct tep_print_arg *field;
 struct tep_print_flag_sym *symbols;
};

struct tep_print_arg_hex {
 struct tep_print_arg *field;
 struct tep_print_arg *size;
};

struct tep_print_arg_int_array {
 struct tep_print_arg *field;
 struct tep_print_arg *count;
 struct tep_print_arg *el_size;
};

struct tep_print_arg_dynarray {
 struct tep_format_field *field;
 struct tep_print_arg *index;
};

struct tep_print_arg;

struct tep_print_arg_op {
 char *op;
 int prio;
 struct tep_print_arg *left;
 struct tep_print_arg *right;
};

struct tep_function_handler;

struct tep_print_arg_func {
 struct tep_function_handler *func;
 struct tep_print_arg *args;
};

enum tep_print_arg_type {
 TEP_PRINT_NULL,
 TEP_PRINT_ATOM,
 TEP_PRINT_FIELD,
 TEP_PRINT_FLAGS,
 TEP_PRINT_SYMBOL,
 TEP_PRINT_HEX,
 TEP_PRINT_INT_ARRAY,
 TEP_PRINT_TYPE,
 TEP_PRINT_STRING,
 TEP_PRINT_BSTRING,
 TEP_PRINT_DYNAMIC_ARRAY,
 TEP_PRINT_OP,
 TEP_PRINT_FUNC,
 TEP_PRINT_BITMASK,
 TEP_PRINT_DYNAMIC_ARRAY_LEN,
 TEP_PRINT_HEX_STR,
};

struct tep_print_arg {
 struct tep_print_arg *next;
 enum tep_print_arg_type type;
 union {
  struct tep_print_arg_atom atom;
  struct tep_print_arg_field field;
  struct tep_print_arg_typecast typecast;
  struct tep_print_arg_flags flags;
  struct tep_print_arg_symbol symbol;
  struct tep_print_arg_hex hex;
  struct tep_print_arg_int_array int_array;
  struct tep_print_arg_func func;
  struct tep_print_arg_string string;
  struct tep_print_arg_bitmask bitmask;
  struct tep_print_arg_op op;
  struct tep_print_arg_dynarray dynarray;
 };
};

struct tep_print_fmt {
 char *format;
 struct tep_print_arg *args;
};

struct tep_event {
 struct tep_handle *tep;
 char *name;
 int id;
 int flags;
 struct tep_format format;
 struct tep_print_fmt print_fmt;
 char *system;
 tep_event_handler_func handler;
 void *context;
};

enum {
 TEP_EVENT_FL_ISFTRACE = 0x01,
 TEP_EVENT_FL_ISPRINT = 0x02,
 TEP_EVENT_FL_ISBPRINT = 0x04,
 TEP_EVENT_FL_ISFUNCENT = 0x10,
 TEP_EVENT_FL_ISFUNCRET = 0x20,
 TEP_EVENT_FL_NOHANDLE = 0x40,
 TEP_EVENT_FL_PRINTRAW = 0x80,

 TEP_EVENT_FL_FAILED = 0x80000000
};

enum tep_event_sort_type {
 TEP_EVENT_SORT_ID,
 TEP_EVENT_SORT_NAME,
 TEP_EVENT_SORT_SYSTEM,
};

enum tep_event_type {
 TEP_EVENT_ERROR,
 TEP_EVENT_NONE,
 TEP_EVENT_SPACE,
 TEP_EVENT_NEWLINE,
 TEP_EVENT_OP,
 TEP_EVENT_DELIM,
 TEP_EVENT_ITEM,
 TEP_EVENT_DQUOTE,
 TEP_EVENT_SQUOTE,
};

typedef unsigned long long (*tep_func_handler)(struct trace_seq *s,
            unsigned long long *args);

enum tep_func_arg_type {
 TEP_FUNC_ARG_VOID,
 TEP_FUNC_ARG_INT,
 TEP_FUNC_ARG_LONG,
 TEP_FUNC_ARG_STRING,
 TEP_FUNC_ARG_PTR,
 TEP_FUNC_ARG_MAX_TYPES
};

enum tep_flag {
 TEP_NSEC_OUTPUT = 1,
 TEP_DISABLE_SYS_PLUGINS = 1 << 1,
 TEP_DISABLE_PLUGINS = 1 << 2,
};

#define TEP_ERRORS _PE(MEM_ALLOC_FAILED, "failed to allocate memory"), _PE(PARSE_EVENT_FAILED, "failed to parse event"), _PE(READ_ID_FAILED, "failed to read event id"), _PE(READ_FORMAT_FAILED, "failed to read event format"), _PE(READ_PRINT_FAILED, "failed to read event print fmt"), _PE(OLD_FTRACE_ARG_FAILED,"failed to allocate field name for ftrace"), _PE(INVALID_ARG_TYPE, "invalid argument type"), _PE(INVALID_EXP_TYPE, "invalid expression type"), _PE(INVALID_OP_TYPE, "invalid operator type"), _PE(INVALID_EVENT_NAME, "invalid event name"), _PE(EVENT_NOT_FOUND, "no event found"), _PE(SYNTAX_ERROR, "syntax error"), _PE(ILLEGAL_RVALUE, "illegal rvalue"), _PE(ILLEGAL_LVALUE, "illegal lvalue for string comparison"), _PE(INVALID_REGEX, "regex did not compute"), _PE(ILLEGAL_STRING_CMP, "illegal comparison for string"), _PE(ILLEGAL_INTEGER_CMP,"illegal comparison for integer"), _PE(REPARENT_NOT_OP, "cannot reparent other than OP"), _PE(REPARENT_FAILED, "failed to reparent filter OP"), _PE(BAD_FILTER_ARG, "bad arg in filter tree"), _PE(UNEXPECTED_TYPE, "unexpected type (not a value)"), _PE(ILLEGAL_TOKEN, "illegal token"), _PE(INVALID_PAREN, "open parenthesis cannot come here"), _PE(UNBALANCED_PAREN, "unbalanced number of parenthesis"), _PE(UNKNOWN_TOKEN, "unknown token"), _PE(FILTER_NOT_FOUND, "no filter found"), _PE(NOT_A_NUMBER, "must have number field"), _PE(NO_FILTER, "no filters exists"), _PE(FILTER_MISS, "record does not match to filter")
# 371 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
#undef _PE
#define _PE(__code,__str) TEP_ERRNO__ ## __code
enum tep_errno {
 TEP_ERRNO__SUCCESS = 0,
 TEP_ERRNO__FILTER_MATCH = TEP_ERRNO__SUCCESS,
# 384 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
 __TEP_ERRNO__START = -100000,

 TEP_ERRNO__MEM_ALLOC_FAILED, TEP_ERRNO__PARSE_EVENT_FAILED, TEP_ERRNO__READ_ID_FAILED, TEP_ERRNO__READ_FORMAT_FAILED, TEP_ERRNO__READ_PRINT_FAILED, TEP_ERRNO__OLD_FTRACE_ARG_FAILED, TEP_ERRNO__INVALID_ARG_TYPE, TEP_ERRNO__INVALID_EXP_TYPE, TEP_ERRNO__INVALID_OP_TYPE, TEP_ERRNO__INVALID_EVENT_NAME, TEP_ERRNO__EVENT_NOT_FOUND, TEP_ERRNO__SYNTAX_ERROR, TEP_ERRNO__ILLEGAL_RVALUE, TEP_ERRNO__ILLEGAL_LVALUE, TEP_ERRNO__INVALID_REGEX, TEP_ERRNO__ILLEGAL_STRING_CMP, TEP_ERRNO__ILLEGAL_INTEGER_CMP, TEP_ERRNO__REPARENT_NOT_OP, TEP_ERRNO__REPARENT_FAILED, TEP_ERRNO__BAD_FILTER_ARG, TEP_ERRNO__UNEXPECTED_TYPE, TEP_ERRNO__ILLEGAL_TOKEN, TEP_ERRNO__INVALID_PAREN, TEP_ERRNO__UNBALANCED_PAREN, TEP_ERRNO__UNKNOWN_TOKEN, TEP_ERRNO__FILTER_NOT_FOUND, TEP_ERRNO__NOT_A_NUMBER, TEP_ERRNO__NO_FILTER, TEP_ERRNO__FILTER_MISS,

 __TEP_ERRNO__END,
};
#undef _PE

struct tep_plugin_list;

#define INVALID_PLUGIN_LIST_OPTION ((char **)((unsigned long)-1))

struct tep_plugin_list *tep_load_plugins(struct tep_handle *tep);
void tep_unload_plugins(struct tep_plugin_list *plugin_list,
   struct tep_handle *tep);
char **tep_plugin_list_options(void);
void tep_plugin_free_options_list(char **list);
int tep_plugin_add_options(const char *name,
      struct tep_plugin_option *options);
void tep_plugin_remove_options(struct tep_plugin_option *options);
void tep_print_plugins(struct trace_seq *s,
   const char *prefix, const char *suffix,
   const struct tep_plugin_list *list);


typedef char *(tep_func_resolver_t)(void *priv,
        unsigned long long *addrp, char **modp);
void tep_set_flag(struct tep_handle *tep, int flag);
void tep_clear_flag(struct tep_handle *tep, enum tep_flag flag);

# 413 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 3 4
_Bool 
# 413 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
    tep_test_flag(struct tep_handle *tep, enum tep_flag flags);

static inline int tep_is_bigendian(void)
{
 unsigned char str[] = { 0x1, 0x2, 0x3, 0x4 };
 unsigned int val;

 memcpy(&val, str, 4);
 return val == 0x01020304;
}


enum trace_flag_type {
 TRACE_FLAG_IRQS_OFF = 0x01,
 TRACE_FLAG_IRQS_NOSUPPORT = 0x02,
 TRACE_FLAG_NEED_RESCHED = 0x04,
 TRACE_FLAG_HARDIRQ = 0x08,
 TRACE_FLAG_SOFTIRQ = 0x10,
};

int tep_set_function_resolver(struct tep_handle *tep,
         tep_func_resolver_t *func, void *priv);
void tep_reset_function_resolver(struct tep_handle *tep);
int tep_register_comm(struct tep_handle *tep, const char *comm, int pid);
int tep_override_comm(struct tep_handle *tep, const char *comm, int pid);
int tep_register_function(struct tep_handle *tep, char *name,
     unsigned long long addr, char *mod);
int tep_register_print_string(struct tep_handle *tep, const char *fmt,
         unsigned long long addr);

# 442 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 3 4
_Bool 
# 442 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
    tep_is_pid_registered(struct tep_handle *tep, int pid);

struct tep_event *tep_get_event(struct tep_handle *tep, int index);

#define TEP_PRINT_INFO "INFO"
#define TEP_PRINT_INFO_RAW "INFO_RAW"
#define TEP_PRINT_COMM "COMM"
#define TEP_PRINT_LATENCY "LATENCY"
#define TEP_PRINT_NAME "NAME"
#define TEP_PRINT_PID 1U
#define TEP_PRINT_TIME 2U
#define TEP_PRINT_CPU 3U

void tep_print_event(struct tep_handle *tep, struct trace_seq *s,
       struct tep_record *record, const char *fmt, ...)
 __attribute__ ((format (printf, 4, 5)));

int tep_parse_header_page(struct tep_handle *tep, char *buf, unsigned long size,
     int long_size);

enum tep_errno tep_parse_event(struct tep_handle *tep, const char *buf,
          unsigned long size, const char *sys);
enum tep_errno tep_parse_format(struct tep_handle *tep,
    struct tep_event **eventp,
    const char *buf,
    unsigned long size, const char *sys);

void *tep_get_field_raw(struct trace_seq *s, struct tep_event *event,
   const char *name, struct tep_record *record,
   int *len, int err);

int tep_get_field_val(struct trace_seq *s, struct tep_event *event,
        const char *name, struct tep_record *record,
        unsigned long long *val, int err);
int tep_get_common_field_val(struct trace_seq *s, struct tep_event *event,
        const char *name, struct tep_record *record,
        unsigned long long *val, int err);
int tep_get_any_field_val(struct trace_seq *s, struct tep_event *event,
     const char *name, struct tep_record *record,
     unsigned long long *val, int err);

int tep_print_num_field(struct trace_seq *s, const char *fmt,
   struct tep_event *event, const char *name,
   struct tep_record *record, int err);

int tep_print_func_field(struct trace_seq *s, const char *fmt,
    struct tep_event *event, const char *name,
    struct tep_record *record, int err);

enum tep_reg_handler {
 TEP_REGISTER_SUCCESS = 0,
 TEP_REGISTER_SUCCESS_OVERWRITE,
};

int tep_register_event_handler(struct tep_handle *tep, int id,
          const char *sys_name, const char *event_name,
          tep_event_handler_func func, void *context);
int tep_unregister_event_handler(struct tep_handle *tep, int id,
     const char *sys_name, const char *event_name,
     tep_event_handler_func func, void *context);
int tep_register_print_function(struct tep_handle *tep,
    tep_func_handler func,
    enum tep_func_arg_type ret_type,
    char *name, ...);
int tep_unregister_print_function(struct tep_handle *tep,
      tep_func_handler func, char *name);

struct tep_format_field *tep_find_common_field(struct tep_event *event, const char *name);
struct tep_format_field *tep_find_field(struct tep_event *event, const char *name);
struct tep_format_field *tep_find_any_field(struct tep_event *event, const char *name);

const char *tep_find_function(struct tep_handle *tep, unsigned long long addr);
unsigned long long
tep_find_function_address(struct tep_handle *tep, unsigned long long addr);
unsigned long long tep_read_number(struct tep_handle *tep, const void *ptr, int size);
int tep_read_number_field(struct tep_format_field *field, const void *data,
     unsigned long long *value);

struct tep_event *tep_get_first_event(struct tep_handle *tep);
int tep_get_events_count(struct tep_handle *tep);
struct tep_event *tep_find_event(struct tep_handle *tep, int id);

struct tep_event *
tep_find_event_by_name(struct tep_handle *tep, const char *sys, const char *name);
struct tep_event *
tep_find_event_by_record(struct tep_handle *tep, struct tep_record *record);

int tep_data_type(struct tep_handle *tep, struct tep_record *rec);
int tep_data_pid(struct tep_handle *tep, struct tep_record *rec);
int tep_data_preempt_count(struct tep_handle *tep, struct tep_record *rec);
int tep_data_flags(struct tep_handle *tep, struct tep_record *rec);
const char *tep_data_comm_from_pid(struct tep_handle *tep, int pid);
struct tep_cmdline;
struct tep_cmdline *tep_data_pid_from_comm(struct tep_handle *tep, const char *comm,
        struct tep_cmdline *next);
int tep_cmdline_pid(struct tep_handle *tep, struct tep_cmdline *cmdline);

void tep_print_field(struct trace_seq *s, void *data,
       struct tep_format_field *field);
void tep_print_fields(struct trace_seq *s, void *data,
        int size __attribute__((unused)), struct tep_event *event);
int tep_strerror(struct tep_handle *tep, enum tep_errno errnum,
   char *buf, size_t buflen);

struct tep_event **tep_list_events(struct tep_handle *tep, enum tep_event_sort_type);
struct tep_event **tep_list_events_copy(struct tep_handle *tep,
     enum tep_event_sort_type);
struct tep_format_field **tep_event_common_fields(struct tep_event *event);
struct tep_format_field **tep_event_fields(struct tep_event *event);

enum tep_endian {
        TEP_LITTLE_ENDIAN = 0,
        TEP_BIG_ENDIAN
};
int tep_get_cpus(struct tep_handle *tep);
void tep_set_cpus(struct tep_handle *tep, int cpus);
int tep_get_long_size(struct tep_handle *tep);
void tep_set_long_size(struct tep_handle *tep, int long_size);
int tep_get_page_size(struct tep_handle *tep);
void tep_set_page_size(struct tep_handle *tep, int _page_size);

# 562 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 3 4
_Bool 
# 562 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
    tep_is_file_bigendian(struct tep_handle *tep);
void tep_set_file_bigendian(struct tep_handle *tep, enum tep_endian endian);

# 564 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 3 4
_Bool 
# 564 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
    tep_is_local_bigendian(struct tep_handle *tep);
void tep_set_local_bigendian(struct tep_handle *tep, enum tep_endian endian);
int tep_get_header_page_size(struct tep_handle *tep);
int tep_get_header_timestamp_size(struct tep_handle *tep);

# 568 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h" 3 4
_Bool 
# 568 "/home/jmikedupont2/linux/tools/lib/traceevent/event-parse.h"
    tep_is_old_format(struct tep_handle *tep);
void tep_set_test_filters(struct tep_handle *tep, int test_filters);

struct tep_handle *tep_alloc(void);
void tep_free(struct tep_handle *tep);
void tep_ref(struct tep_handle *tep);
void tep_unref(struct tep_handle *tep);
int tep_get_ref(struct tep_handle *tep);


void tep_buffer_init(const char *buf, unsigned long long size);
enum tep_event_type tep_read_token(char **tok);
void tep_free_token(char *token);
int tep_peek_char(void);
const char *tep_get_input_buf(void);
unsigned long long tep_get_input_buf_ptr(void);


void tep_print_funcs(struct tep_handle *tep);
void tep_print_printk(struct tep_handle *tep);



enum tep_filter_boolean_type {
 TEP_FILTER_FALSE,
 TEP_FILTER_TRUE,
};

enum tep_filter_op_type {
 TEP_FILTER_OP_AND = 1,
 TEP_FILTER_OP_OR,
 TEP_FILTER_OP_NOT,
};

enum tep_filter_cmp_type {
 TEP_FILTER_CMP_NONE,
 TEP_FILTER_CMP_EQ,
 TEP_FILTER_CMP_NE,
 TEP_FILTER_CMP_GT,
 TEP_FILTER_CMP_LT,
 TEP_FILTER_CMP_GE,
 TEP_FILTER_CMP_LE,
 TEP_FILTER_CMP_MATCH,
 TEP_FILTER_CMP_NOT_MATCH,
 TEP_FILTER_CMP_REGEX,
 TEP_FILTER_CMP_NOT_REGEX,
};

enum tep_filter_exp_type {
 TEP_FILTER_EXP_NONE,
 TEP_FILTER_EXP_ADD,
 TEP_FILTER_EXP_SUB,
 TEP_FILTER_EXP_MUL,
 TEP_FILTER_EXP_DIV,
 TEP_FILTER_EXP_MOD,
 TEP_FILTER_EXP_RSHIFT,
 TEP_FILTER_EXP_LSHIFT,
 TEP_FILTER_EXP_AND,
 TEP_FILTER_EXP_OR,
 TEP_FILTER_EXP_XOR,
 TEP_FILTER_EXP_NOT,
};

enum tep_filter_arg_type {
 TEP_FILTER_ARG_NONE,
 TEP_FILTER_ARG_BOOLEAN,
 TEP_FILTER_ARG_VALUE,
 TEP_FILTER_ARG_FIELD,
 TEP_FILTER_ARG_EXP,
 TEP_FILTER_ARG_OP,
 TEP_FILTER_ARG_NUM,
 TEP_FILTER_ARG_STR,
};

enum tep_filter_value_type {
 TEP_FILTER_NUMBER,
 TEP_FILTER_STRING,
 TEP_FILTER_CHAR
};

struct tep_filter_arg;

struct tep_filter_arg_boolean {
 enum tep_filter_boolean_type value;
};

struct tep_filter_arg_field {
 struct tep_format_field *field;
};

struct tep_filter_arg_value {
 enum tep_filter_value_type type;
 union {
  char *str;
  unsigned long long val;
 };
};

struct tep_filter_arg_op {
 enum tep_filter_op_type type;
 struct tep_filter_arg *left;
 struct tep_filter_arg *right;
};

struct tep_filter_arg_exp {
 enum tep_filter_exp_type type;
 struct tep_filter_arg *left;
 struct tep_filter_arg *right;
};

struct tep_filter_arg_num {
 enum tep_filter_cmp_type type;
 struct tep_filter_arg *left;
 struct tep_filter_arg *right;
};

struct tep_filter_arg_str {
 enum tep_filter_cmp_type type;
 struct tep_format_field *field;
 char *val;
 char *buffer;
 regex_t reg;
};

struct tep_filter_arg {
 enum tep_filter_arg_type type;
 union {
  struct tep_filter_arg_boolean boolean;
  struct tep_filter_arg_field field;
  struct tep_filter_arg_value value;
  struct tep_filter_arg_op op;
  struct tep_filter_arg_exp exp;
  struct tep_filter_arg_num num;
  struct tep_filter_arg_str str;
 };
};

struct tep_filter_type {
 int event_id;
 struct tep_event *event;
 struct tep_filter_arg *filter;
};

#define TEP_FILTER_ERROR_BUFSZ 1024

struct tep_event_filter {
 struct tep_handle *tep;
 int filters;
 struct tep_filter_type *event_filters;
 char error_buffer[1024];
};

struct tep_event_filter *tep_filter_alloc(struct tep_handle *tep);


#define FILTER_NONE TEP_ERRNO__NO_FILTER
#define FILTER_NOEXIST TEP_ERRNO__FILTER_NOT_FOUND
#define FILTER_MISS TEP_ERRNO__FILTER_MISS
#define FILTER_MATCH TEP_ERRNO__FILTER_MATCH

enum tep_errno tep_filter_add_filter_str(struct tep_event_filter *filter,
      const char *filter_str);

enum tep_errno tep_filter_match(struct tep_event_filter *filter,
    struct tep_record *record);

int tep_filter_strerror(struct tep_event_filter *filter, enum tep_errno err,
   char *buf, size_t buflen);

int tep_event_filtered(struct tep_event_filter *filter,
         int event_id);

void tep_filter_reset(struct tep_event_filter *filter);

void tep_filter_free(struct tep_event_filter *filter);

char *tep_filter_make_string(struct tep_event_filter *filter, int event_id);

int tep_filter_remove_event(struct tep_event_filter *filter,
       int event_id);

int tep_filter_copy(struct tep_event_filter *dest, struct tep_event_filter *source);

int tep_filter_compare(struct tep_event_filter *filter1, struct tep_event_filter *filter2);
# 19 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/lib/api/fs/tracing_path.h" 1


#define __API_FS_TRACING_PATH_H 


# 1 "/usr/include/dirent.h" 1 3 4
# 23 "/usr/include/dirent.h" 3 4
#define _DIRENT_H 1




# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4

# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {




    __ino64_t d_ino;
    __off64_t d_off;

    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


#define d_fileno d_ino

#undef _DIRENT_HAVE_D_NAMLEN
#define _DIRENT_HAVE_D_RECLEN 
#define _DIRENT_HAVE_D_OFF 
#define _DIRENT_HAVE_D_TYPE 



#define _DIRENT_MATCHES_DIRENT64 1
# 62 "/usr/include/dirent.h" 2 3 4
# 85 "/usr/include/dirent.h" 3 4
#define _D_EXACT_NAMLEN(d) (strlen ((d)->d_name))

#define _D_ALLOC_NAMLEN(d) (((char *) (d) + (d)->d_reclen) - &(d)->d_name[0])
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,
#define DT_UNKNOWN DT_UNKNOWN
    DT_FIFO = 1,
#define DT_FIFO DT_FIFO
    DT_CHR = 2,
#define DT_CHR DT_CHR
    DT_DIR = 4,
#define DT_DIR DT_DIR
    DT_BLK = 6,
#define DT_BLK DT_BLK
    DT_REG = 8,
#define DT_REG DT_REG
    DT_LNK = 10,
#define DT_LNK DT_LNK
    DT_SOCK = 12,
#define DT_SOCK DT_SOCK
    DT_WHT = 14
#define DT_WHT DT_WHT
  };


#define IFTODT(mode) (((mode) & 0170000) >> 12)
#define DTTOIF(dirtype) ((dirtype) << 12)





typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 165 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __asm__ ("" "readdir64")
     __attribute__ ((__nonnull__ (1)));






extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 189 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp, struct dirent *__restrict __entry, struct dirent **__restrict __result) __asm__ ("" "readdir64_r")




  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));






extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));




extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
#define _BITS_POSIX1_LIM_H 1





#define _POSIX_AIO_LISTIO_MAX 2


#define _POSIX_AIO_MAX 1


#define _POSIX_ARG_MAX 4096



#define _POSIX_CHILD_MAX 25





#define _POSIX_DELAYTIMER_MAX 32



#define _POSIX_HOST_NAME_MAX 255


#define _POSIX_LINK_MAX 8


#define _POSIX_LOGIN_NAME_MAX 9


#define _POSIX_MAX_CANON 255



#define _POSIX_MAX_INPUT 255


#define _POSIX_MQ_OPEN_MAX 8


#define _POSIX_MQ_PRIO_MAX 32


#define _POSIX_NAME_MAX 14



#define _POSIX_NGROUPS_MAX 8






#define _POSIX_OPEN_MAX 20







#define _POSIX_FD_SETSIZE _POSIX_OPEN_MAX



#define _POSIX_PATH_MAX 256


#define _POSIX_PIPE_BUF 512



#define _POSIX_RE_DUP_MAX 255


#define _POSIX_RTSIG_MAX 8


#define _POSIX_SEM_NSEMS_MAX 256


#define _POSIX_SEM_VALUE_MAX 32767


#define _POSIX_SIGQUEUE_MAX 32


#define _POSIX_SSIZE_MAX 32767


#define _POSIX_STREAM_MAX 8


#define _POSIX_SYMLINK_MAX 255



#define _POSIX_SYMLOOP_MAX 8


#define _POSIX_TIMER_MAX 32


#define _POSIX_TTY_NAME_MAX 9



#define _POSIX_TZNAME_MAX 6






#define _POSIX_QLIMIT 1



#define _POSIX_HIWAT _POSIX_PIPE_BUF


#define _POSIX_UIO_MAXIOV 16



#define _POSIX_CLOCKRES_MIN 20000000



# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
#define __undef_NR_OPEN 


#define __undef_LINK_MAX 


#define __undef_OPEN_MAX 


#define __undef_ARG_MAX 



# 1 "/usr/include/linux/limits.h" 1 3 4

#define _LINUX_LIMITS_H 

#define NR_OPEN 1024

#define NGROUPS_MAX 65536
#define ARG_MAX 131072
#define LINK_MAX 127
#define MAX_CANON 255
#define MAX_INPUT 255
#define NAME_MAX 255
#define PATH_MAX 4096
#define PIPE_BUF 4096
#define XATTR_NAME_MAX 255
#define XATTR_SIZE_MAX 65536
#define XATTR_LIST_MAX 65536

#define RTSIG_MAX 32
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4



#undef NR_OPEN
#undef __undef_NR_OPEN



#undef LINK_MAX
#undef __undef_LINK_MAX



#undef OPEN_MAX
#undef __undef_OPEN_MAX



#undef ARG_MAX
#undef __undef_ARG_MAX



#define _POSIX_THREAD_KEYS_MAX 128

#define PTHREAD_KEYS_MAX 1024


#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4

#define PTHREAD_DESTRUCTOR_ITERATIONS _POSIX_THREAD_DESTRUCTOR_ITERATIONS


#define _POSIX_THREAD_THREADS_MAX 64

#undef PTHREAD_THREADS_MAX



#define AIO_PRIO_DELTA_MAX 20


#define PTHREAD_STACK_MIN 16384


#define DELAYTIMER_MAX 2147483647


#define TTY_NAME_MAX 32


#define LOGIN_NAME_MAX 256


#define HOST_NAME_MAX 64


#define MQ_PRIO_MAX 32768


#define SEM_VALUE_MAX (2147483647)
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4



#define SSIZE_MAX LONG_MAX
# 234 "/usr/include/dirent.h" 2 3 4



#define MAXNAMLEN NAME_MAX






#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 246 "/usr/include/dirent.h" 2 3 4
# 263 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir, struct dirent ***__restrict __namelist, int (*__selector) (const struct dirent *), int (*__cmp) (const struct dirent **, const struct dirent **)) __asm__ ("" "scandir64")





                    __attribute__ ((__nonnull__ (1, 2)));
# 278 "/usr/include/dirent.h" 3 4
extern int scandir64 (const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (const struct dirent64 *),
        int (*__cmp) (const struct dirent64 **,
        const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));
# 301 "/usr/include/dirent.h" 3 4
extern int scandirat (int __dfd, const char *__restrict __dir, struct dirent ***__restrict __namelist, int (*__selector) (const struct dirent *), int (*__cmp) (const struct dirent **, const struct dirent **)) __asm__ ("" "scandirat64")





                      __attribute__ ((__nonnull__ (2, 3)));







extern int scandirat64 (int __dfd, const char *__restrict __dir,
   struct dirent64 ***__restrict __namelist,
   int (*__selector) (const struct dirent64 *),
   int (*__cmp) (const struct dirent64 **,
          const struct dirent64 **))
     __attribute__ ((__nonnull__ (2, 3)));
# 330 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1, const struct dirent **__e2) __asm__ ("" "alphasort64") __attribute__ ((__nothrow__ , __leaf__))


                   __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int alphasort64 (const struct dirent64 **__e1,
   const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 359 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf, size_t __nbytes, __off64_t *__restrict __basep) __asm__ ("" "getdirentries64") __attribute__ ((__nothrow__ , __leaf__))



                      __attribute__ ((__nonnull__ (2, 4)));






extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 385 "/usr/include/dirent.h" 3 4
extern int versionsort (const struct dirent **__e1, const struct dirent **__e2) __asm__ ("" "versionsort64") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int versionsort64 (const struct dirent64 **__e1,
     const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




# 7 "/home/jmikedupont2/linux/tools/lib/api/fs/tracing_path.h" 2


# 8 "/home/jmikedupont2/linux/tools/lib/api/fs/tracing_path.h"
DIR *tracing_events__opendir(void);

void tracing_path_set(const char *mountpoint);
const char *tracing_path_mount(void);

char *get_tracing_file(const char *name);
void put_tracing_file(char *file);

char *get_events_file(const char *name);
void put_events_file(char *file);

#define zput_events_file(ptr) ({ free(*ptr); *ptr = NULL; })

int tracing_path__strerror_open_tp(int err, char *buf, size_t size, const char *sys, const char *name);
# 20 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/lib/bpf/bpf.h" 1
# 24 "/home/jmikedupont2/linux/tools/lib/bpf/bpf.h"
#define __LIBBPF_BPF_H 

# 1 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h" 1
# 9 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
#define _UAPI__LINUX_BPF_H__ 


# 1 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf_common.h" 1


#define _UAPI__LINUX_BPF_COMMON_H__ 


#define BPF_CLASS(code) ((code) & 0x07)
#define BPF_LD 0x00
#define BPF_LDX 0x01
#define BPF_ST 0x02
#define BPF_STX 0x03
#define BPF_ALU 0x04
#define BPF_JMP 0x05
#define BPF_RET 0x06
#define BPF_MISC 0x07


#define BPF_SIZE(code) ((code) & 0x18)
#define BPF_W 0x00
#define BPF_H 0x08
#define BPF_B 0x10

#define BPF_MODE(code) ((code) & 0xe0)
#define BPF_IMM 0x00
#define BPF_ABS 0x20
#define BPF_IND 0x40
#define BPF_MEM 0x60
#define BPF_LEN 0x80
#define BPF_MSH 0xa0


#define BPF_OP(code) ((code) & 0xf0)
#define BPF_ADD 0x00
#define BPF_SUB 0x10
#define BPF_MUL 0x20
#define BPF_DIV 0x30
#define BPF_OR 0x40
#define BPF_AND 0x50
#define BPF_LSH 0x60
#define BPF_RSH 0x70
#define BPF_NEG 0x80
#define BPF_MOD 0x90
#define BPF_XOR 0xa0

#define BPF_JA 0x00
#define BPF_JEQ 0x10
#define BPF_JGT 0x20
#define BPF_JGE 0x30
#define BPF_JSET 0x40
#define BPF_SRC(code) ((code) & 0x08)
#define BPF_K 0x00
#define BPF_X 0x08


#define BPF_MAXINSNS 4096
# 13 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h" 2




#define BPF_JMP32 0x06
#define BPF_ALU64 0x07


#define BPF_DW 0x18
#define BPF_XADD 0xc0


#define BPF_MOV 0xb0
#define BPF_ARSH 0xc0


#define BPF_END 0xd0
#define BPF_TO_LE 0x00
#define BPF_TO_BE 0x08
#define BPF_FROM_LE BPF_TO_LE
#define BPF_FROM_BE BPF_TO_BE


#define BPF_JNE 0x50
#define BPF_JLT 0xa0
#define BPF_JLE 0xb0
#define BPF_JSGT 0x60
#define BPF_JSGE 0x70
#define BPF_JSLT 0xc0
#define BPF_JSLE 0xd0
#define BPF_CALL 0x80
#define BPF_EXIT 0x90


enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};


#define MAX_BPF_REG __MAX_BPF_REG

struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};

struct bpf_cgroup_storage_key {
 __u64 cgroup_inode_id;
 __u32 attach_type;
};


enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
 BPF_PROG_QUERY,
 BPF_RAW_TRACEPOINT_OPEN,
 BPF_BTF_LOAD,
 BPF_BTF_GET_FD_BY_ID,
 BPF_TASK_FD_QUERY,
 BPF_MAP_LOOKUP_AND_DELETE_ELEM,
 BPF_MAP_FREEZE,
 BPF_BTF_GET_NEXT_ID,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
 BPF_MAP_TYPE_CPUMAP,
 BPF_MAP_TYPE_XSKMAP,
 BPF_MAP_TYPE_SOCKHASH,
 BPF_MAP_TYPE_CGROUP_STORAGE,
 BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
 BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
 BPF_MAP_TYPE_QUEUE,
 BPF_MAP_TYPE_STACK,
 BPF_MAP_TYPE_SK_STORAGE,
 BPF_MAP_TYPE_DEVMAP_HASH,
};
# 149 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
 BPF_PROG_TYPE_CGROUP_DEVICE,
 BPF_PROG_TYPE_SK_MSG,
 BPF_PROG_TYPE_RAW_TRACEPOINT,
 BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
 BPF_PROG_TYPE_LWT_SEG6LOCAL,
 BPF_PROG_TYPE_LIRC_MODE2,
 BPF_PROG_TYPE_SK_REUSEPORT,
 BPF_PROG_TYPE_FLOW_DISSECTOR,
 BPF_PROG_TYPE_CGROUP_SYSCTL,
 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
 BPF_PROG_TYPE_CGROUP_SOCKOPT,
 BPF_PROG_TYPE_TRACING,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 BPF_CGROUP_DEVICE,
 BPF_SK_MSG_VERDICT,
 BPF_CGROUP_INET4_BIND,
 BPF_CGROUP_INET6_BIND,
 BPF_CGROUP_INET4_CONNECT,
 BPF_CGROUP_INET6_CONNECT,
 BPF_CGROUP_INET4_POST_BIND,
 BPF_CGROUP_INET6_POST_BIND,
 BPF_CGROUP_UDP4_SENDMSG,
 BPF_CGROUP_UDP6_SENDMSG,
 BPF_LIRC_MODE2,
 BPF_FLOW_DISSECTOR,
 BPF_CGROUP_SYSCTL,
 BPF_CGROUP_UDP4_RECVMSG,
 BPF_CGROUP_UDP6_RECVMSG,
 BPF_CGROUP_GETSOCKOPT,
 BPF_CGROUP_SETSOCKOPT,
 BPF_TRACE_RAW_TP,
 BPF_TRACE_FENTRY,
 BPF_TRACE_FEXIT,
 __MAX_BPF_ATTACH_TYPE
};

#define MAX_BPF_ATTACH_TYPE __MAX_BPF_ATTACH_TYPE
# 250 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
#define BPF_F_ALLOW_OVERRIDE (1U << 0)
#define BPF_F_ALLOW_MULTI (1U << 1)






#define BPF_F_STRICT_ALIGNMENT (1U << 0)
# 272 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
#define BPF_F_ANY_ALIGNMENT (1U << 1)
# 290 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
#define BPF_F_TEST_RND_HI32 (1U << 2)


#define BPF_F_TEST_STATE_FREQ (1U << 3)
# 306 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
#define BPF_PSEUDO_MAP_FD 1
#define BPF_PSEUDO_MAP_VALUE 2




#define BPF_PSEUDO_CALL 1


#define BPF_ANY 0
#define BPF_NOEXIST 1
#define BPF_EXIST 2
#define BPF_F_LOCK 4


#define BPF_F_NO_PREALLOC (1U << 0)






#define BPF_F_NO_COMMON_LRU (1U << 1)

#define BPF_F_NUMA_NODE (1U << 2)

#define BPF_OBJ_NAME_LEN 16U


#define BPF_F_RDONLY (1U << 3)
#define BPF_F_WRONLY (1U << 4)


#define BPF_F_STACK_BUILD_ID (1U << 5)


#define BPF_F_ZERO_SEED (1U << 6)


#define BPF_F_RDONLY_PROG (1U << 7)
#define BPF_F_WRONLY_PROG (1U << 8)


#define BPF_F_CLONE (1U << 9)


#define BPF_F_MMAPABLE (1U << 10)


#define BPF_F_QUERY_EFFECTIVE (1U << 0)

enum bpf_stack_build_id_status {

 BPF_STACK_BUILD_ID_EMPTY = 0,

 BPF_STACK_BUILD_ID_VALID = 1,

 BPF_STACK_BUILD_ID_IP = 2,
};

#define BPF_BUILD_ID_SIZE 20
struct bpf_stack_build_id {
 __s32 status;
 unsigned char build_id[20];
 union {
  __u64 offset;
  __u64 ip;
 };
};

union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


  char map_name[16U];
  __u32 map_ifindex;
  __u32 btf_fd;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
  char prog_name[16U];
  __u32 prog_ifindex;




  __u32 expected_attach_type;
  __u32 prog_btf_fd;
  __u32 func_info_rec_size;
  __u64 __attribute__((aligned(8))) func_info;
  __u32 func_info_cnt;
  __u32 line_info_rec_size;
  __u64 __attribute__((aligned(8))) line_info;
  __u32 line_info_cnt;
  __u32 attach_btf_id;
  __u32 attach_prog_fd;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;



  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
  __u32 ctx_size_in;
  __u32 ctx_size_out;



  __u64 __attribute__((aligned(8))) ctx_in;
  __u64 __attribute__((aligned(8))) ctx_out;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
   __u32 btf_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;

 struct {
  __u32 target_fd;
  __u32 attach_type;
  __u32 query_flags;
  __u32 attach_flags;
  __u64 __attribute__((aligned(8))) prog_ids;
  __u32 prog_cnt;
 } query;

 struct {
  __u64 name;
  __u32 prog_fd;
 } raw_tracepoint;

 struct {
  __u64 __attribute__((aligned(8))) btf;
  __u64 __attribute__((aligned(8))) btf_log_buf;
  __u32 btf_size;
  __u32 btf_log_size;
  __u32 btf_log_level;
 };

 struct {
  __u32 pid;
  __u32 fd;
  __u32 flags;
  __u32 buf_len;
  __u64 __attribute__((aligned(8))) buf;




  __u32 prog_id;
  __u32 fd_type;
  __u64 probe_offset;
  __u64 probe_addr;
 } task_fd_query;
} __attribute__((aligned(8)));
# 2825 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
#define __BPF_FUNC_MAPPER(FN) FN(unspec), FN(map_lookup_elem), FN(map_update_elem), FN(map_delete_elem), FN(probe_read), FN(ktime_get_ns), FN(trace_printk), FN(get_prandom_u32), FN(get_smp_processor_id), FN(skb_store_bytes), FN(l3_csum_replace), FN(l4_csum_replace), FN(tail_call), FN(clone_redirect), FN(get_current_pid_tgid), FN(get_current_uid_gid), FN(get_current_comm), FN(get_cgroup_classid), FN(skb_vlan_push), FN(skb_vlan_pop), FN(skb_get_tunnel_key), FN(skb_set_tunnel_key), FN(perf_event_read), FN(redirect), FN(get_route_realm), FN(perf_event_output), FN(skb_load_bytes), FN(get_stackid), FN(csum_diff), FN(skb_get_tunnel_opt), FN(skb_set_tunnel_opt), FN(skb_change_proto), FN(skb_change_type), FN(skb_under_cgroup), FN(get_hash_recalc), FN(get_current_task), FN(probe_write_user), FN(current_task_under_cgroup), FN(skb_change_tail), FN(skb_pull_data), FN(csum_update), FN(set_hash_invalid), FN(get_numa_node_id), FN(skb_change_head), FN(xdp_adjust_head), FN(probe_read_str), FN(get_socket_cookie), FN(get_socket_uid), FN(set_hash), FN(setsockopt), FN(skb_adjust_room), FN(redirect_map), FN(sk_redirect_map), FN(sock_map_update), FN(xdp_adjust_meta), FN(perf_event_read_value), FN(perf_prog_read_value), FN(getsockopt), FN(override_return), FN(sock_ops_cb_flags_set), FN(msg_redirect_map), FN(msg_apply_bytes), FN(msg_cork_bytes), FN(msg_pull_data), FN(bind), FN(xdp_adjust_tail), FN(skb_get_xfrm_state), FN(get_stack), FN(skb_load_bytes_relative), FN(fib_lookup), FN(sock_hash_update), FN(msg_redirect_hash), FN(sk_redirect_hash), FN(lwt_push_encap), FN(lwt_seg6_store_bytes), FN(lwt_seg6_adjust_srh), FN(lwt_seg6_action), FN(rc_repeat), FN(rc_keydown), FN(skb_cgroup_id), FN(get_current_cgroup_id), FN(get_local_storage), FN(sk_select_reuseport), FN(skb_ancestor_cgroup_id), FN(sk_lookup_tcp), FN(sk_lookup_udp), FN(sk_release), FN(map_push_elem), FN(map_pop_elem), FN(map_peek_elem), FN(msg_push_data), FN(msg_pop_data), FN(rc_pointer_rel), FN(spin_lock), FN(spin_unlock), FN(sk_fullsock), FN(tcp_sock), FN(skb_ecn_set_ce), FN(get_listener_sock), FN(skc_lookup_tcp), FN(tcp_check_syncookie), FN(sysctl_get_name), FN(sysctl_get_current_value), FN(sysctl_get_new_value), FN(sysctl_set_new_value), FN(strtol), FN(strtoul), FN(sk_storage_get), FN(sk_storage_delete), FN(send_signal), FN(tcp_gen_syncookie), FN(skb_output), FN(probe_read_user), FN(probe_read_kernel), FN(probe_read_user_str), FN(probe_read_kernel_str),
# 2946 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
#define __BPF_ENUM_FN(x) BPF_FUNC_ ## x
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update, BPF_FUNC_xdp_adjust_meta, BPF_FUNC_perf_event_read_value, BPF_FUNC_perf_prog_read_value, BPF_FUNC_getsockopt, BPF_FUNC_override_return, BPF_FUNC_sock_ops_cb_flags_set, BPF_FUNC_msg_redirect_map, BPF_FUNC_msg_apply_bytes, BPF_FUNC_msg_cork_bytes, BPF_FUNC_msg_pull_data, BPF_FUNC_bind, BPF_FUNC_xdp_adjust_tail, BPF_FUNC_skb_get_xfrm_state, BPF_FUNC_get_stack, BPF_FUNC_skb_load_bytes_relative, BPF_FUNC_fib_lookup, BPF_FUNC_sock_hash_update, BPF_FUNC_msg_redirect_hash, BPF_FUNC_sk_redirect_hash, BPF_FUNC_lwt_push_encap, BPF_FUNC_lwt_seg6_store_bytes, BPF_FUNC_lwt_seg6_adjust_srh, BPF_FUNC_lwt_seg6_action, BPF_FUNC_rc_repeat, BPF_FUNC_rc_keydown, BPF_FUNC_skb_cgroup_id, BPF_FUNC_get_current_cgroup_id, BPF_FUNC_get_local_storage, BPF_FUNC_sk_select_reuseport, BPF_FUNC_skb_ancestor_cgroup_id, BPF_FUNC_sk_lookup_tcp, BPF_FUNC_sk_lookup_udp, BPF_FUNC_sk_release, BPF_FUNC_map_push_elem, BPF_FUNC_map_pop_elem, BPF_FUNC_map_peek_elem, BPF_FUNC_msg_push_data, BPF_FUNC_msg_pop_data, BPF_FUNC_rc_pointer_rel, BPF_FUNC_spin_lock, BPF_FUNC_spin_unlock, BPF_FUNC_sk_fullsock, BPF_FUNC_tcp_sock, BPF_FUNC_skb_ecn_set_ce, BPF_FUNC_get_listener_sock, BPF_FUNC_skc_lookup_tcp, BPF_FUNC_tcp_check_syncookie, BPF_FUNC_sysctl_get_name, BPF_FUNC_sysctl_get_current_value, BPF_FUNC_sysctl_get_new_value, BPF_FUNC_sysctl_set_new_value, BPF_FUNC_strtol, BPF_FUNC_strtoul, BPF_FUNC_sk_storage_get, BPF_FUNC_sk_storage_delete, BPF_FUNC_send_signal, BPF_FUNC_tcp_gen_syncookie, BPF_FUNC_skb_output, BPF_FUNC_probe_read_user, BPF_FUNC_probe_read_kernel, BPF_FUNC_probe_read_user_str, BPF_FUNC_probe_read_kernel_str,
 __BPF_FUNC_MAX_ID,
};
#undef __BPF_ENUM_FN




#define BPF_F_RECOMPUTE_CSUM (1ULL << 0)
#define BPF_F_INVALIDATE_HASH (1ULL << 1)




#define BPF_F_HDR_FIELD_MASK 0xfULL


#define BPF_F_PSEUDO_HDR (1ULL << 4)
#define BPF_F_MARK_MANGLED_0 (1ULL << 5)
#define BPF_F_MARK_ENFORCE (1ULL << 6)


#define BPF_F_INGRESS (1ULL << 0)


#define BPF_F_TUNINFO_IPV6 (1ULL << 0)


#define BPF_F_SKIP_FIELD_MASK 0xffULL
#define BPF_F_USER_STACK (1ULL << 8)

#define BPF_F_FAST_STACK_CMP (1ULL << 9)
#define BPF_F_REUSE_STACKID (1ULL << 10)

#define BPF_F_USER_BUILD_ID (1ULL << 11)


#define BPF_F_ZERO_CSUM_TX (1ULL << 1)
#define BPF_F_DONT_FRAGMENT (1ULL << 2)
#define BPF_F_SEQ_NUMBER (1ULL << 3)




#define BPF_F_INDEX_MASK 0xffffffffULL
#define BPF_F_CURRENT_CPU BPF_F_INDEX_MASK

#define BPF_F_CTXLEN_MASK (0xfffffULL << 32)


#define BPF_F_CURRENT_NETNS (-1L)


#define BPF_F_ADJ_ROOM_FIXED_GSO (1ULL << 0)

#define BPF_ADJ_ROOM_ENCAP_L2_MASK 0xff
#define BPF_ADJ_ROOM_ENCAP_L2_SHIFT 56

#define BPF_F_ADJ_ROOM_ENCAP_L3_IPV4 (1ULL << 1)
#define BPF_F_ADJ_ROOM_ENCAP_L3_IPV6 (1ULL << 2)
#define BPF_F_ADJ_ROOM_ENCAP_L4_GRE (1ULL << 3)
#define BPF_F_ADJ_ROOM_ENCAP_L4_UDP (1ULL << 4)
#define BPF_F_ADJ_ROOM_ENCAP_L2(len) (((__u64)len & BPF_ADJ_ROOM_ENCAP_L2_MASK) << BPF_ADJ_ROOM_ENCAP_L2_SHIFT)




#define BPF_F_SYSCTL_BASE_NAME (1ULL << 0)


#define BPF_SK_STORAGE_GET_F_CREATE (1ULL << 0)


enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
 BPF_ADJ_ROOM_MAC,
};


enum bpf_hdr_start_off {
 BPF_HDR_START_MAC,
 BPF_HDR_START_NET,
};


enum bpf_lwt_encap_mode {
 BPF_LWT_ENCAP_SEG6,
 BPF_LWT_ENCAP_SEG6_INLINE,
 BPF_LWT_ENCAP_IP,
};

#define __bpf_md_ptr(type,name) union { type name; __u64 :64; } __attribute__((aligned(8)))
# 3048 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;


 __u32 data_meta;
 union { struct bpf_flow_keys * flow_keys; __u64 :64; } __attribute__((aligned(8)));
 __u64 tstamp;
 __u32 wire_len;
 __u32 gso_segs;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};




struct bpf_xfrm_state {
 __u32 reqid;
 __u32 spi;
 __u16 family;
 __u16 ext;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
};
# 3119 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,
# 3133 "/home/jmikedupont2/linux/tools/include/uapi/linux/bpf.h"
 BPF_LWT_REROUTE = 128,
};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;

 __u32 src_ip4;
 __u32 src_ip6[4];
 __u32 src_port;
 __u32 dst_port;
 __u32 dst_ip4;
 __u32 dst_ip6[4];
 __u32 state;
};

struct bpf_tcp_sock {
 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;


 __u32 data_segs_in;


 __u32 segs_out;


 __u32 data_segs_out;


 __u32 lost_out;
 __u32 sacked_out;
 __u64 bytes_received;



 __u64 bytes_acked;



 __u32 dsack_dups;


 __u32 delivered;
 __u32 delivered_ce;
 __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
 union {
  struct {
   __be32 saddr;
   __be32 daddr;
   __be16 sport;
   __be16 dport;
  } ipv4;
  struct {
   __be32 saddr[4];
   __be32 daddr[4];
   __be16 sport;
   __be16 dport;
  } ipv6;
 };
};

struct bpf_xdp_sock {
 __u32 queue_id;
};

#define XDP_PACKET_HEADROOM 256






enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
 __u32 data_meta;

 __u32 ingress_ifindex;
 __u32 rx_queue_index;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};




struct sk_msg_md {
 union { void * data; __u64 :64; } __attribute__((aligned(8)));
 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));

 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 size;
};

struct sk_reuseport_md {




 union { void * data; __u64 :64; } __attribute__((aligned(8)));

 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));






 __u32 len;




 __u32 eth_protocol;
 __u32 ip_protocol;
 __u32 bind_inany;
 __u32 hash;
};

#define BPF_TAG_SIZE 8

struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
 __u64 load_time;
 __u32 created_by_uid;
 __u32 nr_map_ids;
 __u64 __attribute__((aligned(8))) map_ids;
 char name[16U];
 __u32 ifindex;
 __u32 gpl_compatible:1;
 __u32 :31;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 nr_jited_ksyms;
 __u32 nr_jited_func_lens;
 __u64 __attribute__((aligned(8))) jited_ksyms;
 __u64 __attribute__((aligned(8))) jited_func_lens;
 __u32 btf_id;
 __u32 func_info_rec_size;
 __u64 __attribute__((aligned(8))) func_info;
 __u32 nr_func_info;
 __u32 nr_line_info;
 __u64 __attribute__((aligned(8))) line_info;
 __u64 __attribute__((aligned(8))) jited_line_info;
 __u32 nr_jited_line_info;
 __u32 line_info_rec_size;
 __u32 jited_line_info_rec_size;
 __u32 nr_prog_tags;
 __u64 __attribute__((aligned(8))) prog_tags;
 __u64 run_time_ns;
 __u64 run_cnt;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
 char name[16U];
 __u32 ifindex;
 __u32 :32;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 btf_id;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
} __attribute__((aligned(8)));

struct bpf_btf_info {
 __u64 __attribute__((aligned(8))) btf;
 __u32 btf_size;
 __u32 id;
} __attribute__((aligned(8)));





struct bpf_sock_addr {
 __u32 user_family;
 __u32 user_ip4;


 __u32 user_ip6[4];


 __u32 user_port;


 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 msg_src_ip4;


 __u32 msg_src_ip6[4];


 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 args[4];
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 is_fullsock;



 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 bpf_sock_ops_cb_flags;
 __u32 state;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;
 __u32 data_segs_in;
 __u32 segs_out;
 __u32 data_segs_out;
 __u32 lost_out;
 __u32 sacked_out;
 __u32 sk_txhash;
 __u64 bytes_received;
 __u64 bytes_acked;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};


#define BPF_SOCK_OPS_RTO_CB_FLAG (1<<0)
#define BPF_SOCK_OPS_RETRANS_CB_FLAG (1<<1)
#define BPF_SOCK_OPS_STATE_CB_FLAG (1<<2)
#define BPF_SOCK_OPS_RTT_CB_FLAG (1<<3)
#define BPF_SOCK_OPS_ALL_CB_FLAGS 0xF






enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


 BPF_SOCK_OPS_BASE_RTT,






 BPF_SOCK_OPS_RTO_CB,




 BPF_SOCK_OPS_RETRANS_CB,





 BPF_SOCK_OPS_STATE_CB,



 BPF_SOCK_OPS_TCP_LISTEN_CB,


 BPF_SOCK_OPS_RTT_CB,

};






enum {
 BPF_TCP_ESTABLISHED = 1,
 BPF_TCP_SYN_SENT,
 BPF_TCP_SYN_RECV,
 BPF_TCP_FIN_WAIT1,
 BPF_TCP_FIN_WAIT2,
 BPF_TCP_TIME_WAIT,
 BPF_TCP_CLOSE,
 BPF_TCP_CLOSE_WAIT,
 BPF_TCP_LAST_ACK,
 BPF_TCP_LISTEN,
 BPF_TCP_CLOSING,
 BPF_TCP_NEW_SYN_RECV,

 BPF_TCP_MAX_STATES
};

#define TCP_BPF_IW 1001
#define TCP_BPF_SNDCWND_CLAMP 1002

struct bpf_perf_event_value {
 __u64 counter;
 __u64 enabled;
 __u64 running;
};

#define BPF_DEVCG_ACC_MKNOD (1ULL << 0)
#define BPF_DEVCG_ACC_READ (1ULL << 1)
#define BPF_DEVCG_ACC_WRITE (1ULL << 2)

#define BPF_DEVCG_DEV_BLOCK (1ULL << 0)
#define BPF_DEVCG_DEV_CHAR (1ULL << 1)

struct bpf_cgroup_dev_ctx {

 __u32 access_type;
 __u32 major;
 __u32 minor;
};

struct bpf_raw_tracepoint_args {
 __u64 args[0];
};




#define BPF_FIB_LOOKUP_DIRECT (1U << 0)
#define BPF_FIB_LOOKUP_OUTPUT (1U << 1)

enum {
 BPF_FIB_LKUP_RET_SUCCESS,
 BPF_FIB_LKUP_RET_BLACKHOLE,
 BPF_FIB_LKUP_RET_UNREACHABLE,
 BPF_FIB_LKUP_RET_PROHIBIT,
 BPF_FIB_LKUP_RET_NOT_FWDED,
 BPF_FIB_LKUP_RET_FWD_DISABLED,
 BPF_FIB_LKUP_RET_UNSUPP_LWT,
 BPF_FIB_LKUP_RET_NO_NEIGH,
 BPF_FIB_LKUP_RET_FRAG_NEEDED,
};

struct bpf_fib_lookup {



 __u8 family;


 __u8 l4_protocol;
 __be16 sport;
 __be16 dport;


 __u16 tot_len;




 __u32 ifindex;

 union {

  __u8 tos;
  __be32 flowinfo;


  __u32 rt_metric;
 };

 union {
  __be32 ipv4_src;
  __u32 ipv6_src[4];
 };





 union {
  __be32 ipv4_dst;
  __u32 ipv6_dst[4];
 };


 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __u8 smac[6];
 __u8 dmac[6];
};

enum bpf_task_fd_type {
 BPF_FD_TYPE_RAW_TRACEPOINT,
 BPF_FD_TYPE_TRACEPOINT,
 BPF_FD_TYPE_KPROBE,
 BPF_FD_TYPE_KRETPROBE,
 BPF_FD_TYPE_UPROBE,
 BPF_FD_TYPE_URETPROBE,
};

#define BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG (1U << 0)
#define BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL (1U << 1)
#define BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP (1U << 2)

struct bpf_flow_keys {
 __u16 nhoff;
 __u16 thoff;
 __u16 addr_proto;
 __u8 is_frag;
 __u8 is_first_frag;
 __u8 is_encap;
 __u8 ip_proto;
 __be16 n_proto;
 __be16 sport;
 __be16 dport;
 union {
  struct {
   __be32 ipv4_src;
   __be32 ipv4_dst;
  };
  struct {
   __u32 ipv6_src[4];
   __u32 ipv6_dst[4];
  };
 };
 __u32 flags;
 __be32 flow_label;
};

struct bpf_func_info {
 __u32 insn_off;
 __u32 type_id;
};

#define BPF_LINE_INFO_LINE_NUM(line_col) ((line_col) >> 10)
#define BPF_LINE_INFO_LINE_COL(line_col) ((line_col) & 0x3ff)

struct bpf_line_info {
 __u32 insn_off;
 __u32 file_name_off;
 __u32 line_off;
 __u32 line_col;
};

struct bpf_spin_lock {
 __u32 val;
};

struct bpf_sysctl {
 __u32 write;


 __u32 file_pos;


};

struct bpf_sockopt {
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval_end; __u64 :64; } __attribute__((aligned(8)));

 __s32 level;
 __s32 optname;
 __s32 optlen;
 __s32 retval;
};
# 27 "/home/jmikedupont2/linux/tools/lib/bpf/bpf.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 29 "/home/jmikedupont2/linux/tools/lib/bpf/bpf.h" 2







#define LIBBPF_API __attribute__((visibility("default")))


struct bpf_create_map_attr {
 const char *name;
 enum bpf_map_type map_type;
 __u32 map_flags;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 numa_node;
 __u32 btf_fd;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
 __u32 map_ifindex;
 __u32 inner_map_fd;
};

__attribute__((visibility("default"))) int
bpf_create_map_xattr(const struct bpf_create_map_attr *create_attr);
__attribute__((visibility("default"))) int bpf_create_map_node(enum bpf_map_type map_type, const char *name,
       int key_size, int value_size,
       int max_entries, __u32 map_flags, int node);
__attribute__((visibility("default"))) int bpf_create_map_name(enum bpf_map_type map_type, const char *name,
       int key_size, int value_size,
       int max_entries, __u32 map_flags);
__attribute__((visibility("default"))) int bpf_create_map(enum bpf_map_type map_type, int key_size,
         int value_size, int max_entries, __u32 map_flags);
__attribute__((visibility("default"))) int bpf_create_map_in_map_node(enum bpf_map_type map_type,
       const char *name, int key_size,
       int inner_map_fd, int max_entries,
       __u32 map_flags, int node);
__attribute__((visibility("default"))) int bpf_create_map_in_map(enum bpf_map_type map_type,
         const char *name, int key_size,
         int inner_map_fd, int max_entries,
         __u32 map_flags);

struct bpf_load_program_attr {
 enum bpf_prog_type prog_type;
 enum bpf_attach_type expected_attach_type;
 const char *name;
 const struct bpf_insn *insns;
 size_t insns_cnt;
 const char *license;
 union {
  __u32 kern_version;
  __u32 attach_prog_fd;
 };
 union {
  __u32 prog_ifindex;
  __u32 attach_btf_id;
 };
 __u32 prog_btf_fd;
 __u32 func_info_rec_size;
 const void *func_info;
 __u32 func_info_cnt;
 __u32 line_info_rec_size;
 const void *line_info;
 __u32 line_info_cnt;
 __u32 log_level;
 __u32 prog_flags;
};


#define MAPS_RELAX_COMPAT 0x01


#define BPF_LOG_BUF_SIZE (UINT32_MAX >> 8)
__attribute__((visibility("default"))) int
bpf_load_program_xattr(const struct bpf_load_program_attr *load_attr,
         char *log_buf, size_t log_buf_sz);
__attribute__((visibility("default"))) int bpf_load_program(enum bpf_prog_type type,
    const struct bpf_insn *insns, size_t insns_cnt,
    const char *license, __u32 kern_version,
    char *log_buf, size_t log_buf_sz);
__attribute__((visibility("default"))) int bpf_verify_program(enum bpf_prog_type type,
      const struct bpf_insn *insns,
      size_t insns_cnt, __u32 prog_flags,
      const char *license, __u32 kern_version,
      char *log_buf, size_t log_buf_sz,
      int log_level);

__attribute__((visibility("default"))) int bpf_map_update_elem(int fd, const void *key, const void *value,
       __u64 flags);

__attribute__((visibility("default"))) int bpf_map_lookup_elem(int fd, const void *key, void *value);
__attribute__((visibility("default"))) int bpf_map_lookup_elem_flags(int fd, const void *key, void *value,
      __u64 flags);
__attribute__((visibility("default"))) int bpf_map_lookup_and_delete_elem(int fd, const void *key,
           void *value);
__attribute__((visibility("default"))) int bpf_map_delete_elem(int fd, const void *key);
__attribute__((visibility("default"))) int bpf_map_get_next_key(int fd, const void *key, void *next_key);
__attribute__((visibility("default"))) int bpf_map_freeze(int fd);
__attribute__((visibility("default"))) int bpf_obj_pin(int fd, const char *pathname);
__attribute__((visibility("default"))) int bpf_obj_get(const char *pathname);
__attribute__((visibility("default"))) int bpf_prog_attach(int prog_fd, int attachable_fd,
          enum bpf_attach_type type, unsigned int flags);
__attribute__((visibility("default"))) int bpf_prog_detach(int attachable_fd, enum bpf_attach_type type);
__attribute__((visibility("default"))) int bpf_prog_detach2(int prog_fd, int attachable_fd,
    enum bpf_attach_type type);

struct bpf_prog_test_run_attr {
 int prog_fd;
 int repeat;
 const void *data_in;
 __u32 data_size_in;
 void *data_out;
 __u32 data_size_out;

 __u32 retval;
 __u32 duration;
 const void *ctx_in;
 __u32 ctx_size_in;
 void *ctx_out;
 __u32 ctx_size_out;

};

__attribute__((visibility("default"))) int bpf_prog_test_run_xattr(struct bpf_prog_test_run_attr *test_attr);





__attribute__((visibility("default"))) int bpf_prog_test_run(int prog_fd, int repeat, void *data,
     __u32 size, void *data_out, __u32 *size_out,
     __u32 *retval, __u32 *duration);
__attribute__((visibility("default"))) int bpf_prog_get_next_id(__u32 start_id, __u32 *next_id);
__attribute__((visibility("default"))) int bpf_map_get_next_id(__u32 start_id, __u32 *next_id);
__attribute__((visibility("default"))) int bpf_btf_get_next_id(__u32 start_id, __u32 *next_id);
__attribute__((visibility("default"))) int bpf_prog_get_fd_by_id(__u32 id);
__attribute__((visibility("default"))) int bpf_map_get_fd_by_id(__u32 id);
__attribute__((visibility("default"))) int bpf_btf_get_fd_by_id(__u32 id);
__attribute__((visibility("default"))) int bpf_obj_get_info_by_fd(int prog_fd, void *info, __u32 *info_len);
__attribute__((visibility("default"))) int bpf_prog_query(int target_fd, enum bpf_attach_type type,
         __u32 query_flags, __u32 *attach_flags,
         __u32 *prog_ids, __u32 *prog_cnt);
__attribute__((visibility("default"))) int bpf_raw_tracepoint_open(const char *name, int prog_fd);
__attribute__((visibility("default"))) int bpf_load_btf(void *btf, __u32 btf_size, char *log_buf,
       __u32 log_buf_size, 
# 175 "/home/jmikedupont2/linux/tools/lib/bpf/bpf.h" 3 4
                          _Bool 
# 175 "/home/jmikedupont2/linux/tools/lib/bpf/bpf.h"
                               do_log);
__attribute__((visibility("default"))) int bpf_task_fd_query(int pid, int fd, __u32 flags, char *buf,
     __u32 *buf_len, __u32 *prog_id, __u32 *fd_type,
     __u64 *probe_offset, __u64 *probe_addr);
# 21 "builtin-trace.c" 2
# 1 "util/bpf_map.h" 1


#define __PERF_BPF_MAP_H 1


# 1 "/home/jmikedupont2/linux/tools/include/linux/compiler.h" 1


#define _TOOLS_LINUX_COMPILER_H_ 


# 1 "/home/jmikedupont2/linux/tools/include/linux/compiler-gcc.h" 1
# 10 "/home/jmikedupont2/linux/tools/include/linux/compiler-gcc.h"
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
# 20 "/home/jmikedupont2/linux/tools/include/linux/compiler-gcc.h"
#define __compiletime_error(message) __attribute__((error(message)))



#define __must_be_array(a) BUILD_BUG_ON_ZERO(__same_type((a), &(a)[0]))


#define __pure __attribute__((pure))

#define noinline __attribute__((noinline))

#define __packed __attribute__((packed))


#define __noreturn __attribute__((noreturn))


#define __aligned(x) __attribute__((aligned(x)))

#define __printf(a,b) __attribute__((format(printf, a, b)))
#define __scanf(a,b) __attribute__((format(scanf, a, b)))


#define COMPILER_HAS_GENERIC_BUILTIN_OVERFLOW 1
# 7 "/home/jmikedupont2/linux/tools/include/linux/compiler.h" 2
# 15 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
#define barrier() __asm__ __volatile__("": : :"memory")
# 27 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
#define __same_type(a,b) __builtin_types_compatible_p(typeof(a), typeof(b))
# 41 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
#define __user 
#define __rcu 
#define __read_mostly 
# 54 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
#define __used __attribute__((__unused__))
# 66 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
#define __weak __attribute__((weak))



#define likely(x) __builtin_expect(!!(x), 1)



#define unlikely(x) __builtin_expect(!!(x), 0)



#define __init 






#define uninitialized_var(x) x = *(&(x))
# 100 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
typedef __u8 __attribute__((__may_alias__)) __u8_alias_t;
typedef __u16 __attribute__((__may_alias__)) __u16_alias_t;
typedef __u32 __attribute__((__may_alias__)) __u32_alias_t;
typedef __u64 __attribute__((__may_alias__)) __u64_alias_t;

static 
# 105 "/home/jmikedupont2/linux/tools/include/linux/compiler.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 105 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
                      void __read_once_size(const volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(__u8_alias_t *) res = *(volatile __u8_alias_t *) p; break;
 case 2: *(__u16_alias_t *) res = *(volatile __u16_alias_t *) p; break;
 case 4: *(__u32_alias_t *) res = *(volatile __u32_alias_t *) p; break;
 case 8: *(__u64_alias_t *) res = *(volatile __u64_alias_t *) p; break;
 default:
  __asm__ __volatile__("": : :"memory");
  __builtin_memcpy((void *)res, (const void *)p, size);
  __asm__ __volatile__("": : :"memory");
 }
}

static 
# 119 "/home/jmikedupont2/linux/tools/include/linux/compiler.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 119 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
                      void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(volatile __u8_alias_t *) p = *(__u8_alias_t *) res; break;
 case 2: *(volatile __u16_alias_t *) p = *(__u16_alias_t *) res; break;
 case 4: *(volatile __u32_alias_t *) p = *(__u32_alias_t *) res; break;
 case 8: *(volatile __u64_alias_t *) p = *(__u64_alias_t *) res; break;
 default:
  __asm__ __volatile__("": : :"memory");
  __builtin_memcpy((void *)p, (const void *)res, size);
  __asm__ __volatile__("": : :"memory");
 }
}
# 154 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
#define READ_ONCE(x) ({ union { typeof(x) __val; char __c[1]; } __u = { .__c = { 0 } }; __read_once_size(&(x), __u.__c, sizeof(x)); __u.__val; })







#define WRITE_ONCE(x,val) ({ union { typeof(x) __val; char __c[1]; } __u = { .__val = (val) }; __write_once_size(&(x), __u.__c, sizeof(x)); __u.__val; })
# 172 "/home/jmikedupont2/linux/tools/include/linux/compiler.h"
#define __fallthrough 
# 7 "util/bpf_map.h" 2
struct bpf_map;



int bpf_map__fprintf(struct bpf_map *map, FILE *fp);
# 22 "builtin-trace.c" 2
# 1 "util/rlimit.h" 1

#define __PERF_RLIMIT_H_ 


void rlimit__bump_memlock(void);
# 23 "builtin-trace.c" 2
# 1 "builtin.h" 1


#define BUILTIN_H 

extern const char perf_usage_string[];
extern const char perf_more_info_string[];

void list_common_cmds_help(void);
const char *help_unknown_cmd(const char *cmd);

int cmd_annotate(int argc, const char **argv);
int cmd_bench(int argc, const char **argv);
int cmd_buildid_cache(int argc, const char **argv);
int cmd_buildid_list(int argc, const char **argv);
int cmd_config(int argc, const char **argv);
int cmd_c2c(int argc, const char **argv);
int cmd_diff(int argc, const char **argv);
int cmd_evlist(int argc, const char **argv);
int cmd_help(int argc, const char **argv);
int cmd_sched(int argc, const char **argv);
int cmd_kallsyms(int argc, const char **argv);
int cmd_list(int argc, const char **argv);
int cmd_record(int argc, const char **argv);
int cmd_report(int argc, const char **argv);
int cmd_stat(int argc, const char **argv);
int cmd_timechart(int argc, const char **argv);
int cmd_top(int argc, const char **argv);
int cmd_script(int argc, const char **argv);
int cmd_version(int argc, const char **argv);
int cmd_probe(int argc, const char **argv);
int cmd_kmem(int argc, const char **argv);
int cmd_lock(int argc, const char **argv);
int cmd_kvm(int argc, const char **argv);
int cmd_test(int argc, const char **argv);
int cmd_trace(int argc, const char **argv);
int cmd_inject(int argc, const char **argv);
int cmd_mem(int argc, const char **argv);
int cmd_data(int argc, const char **argv);
int cmd_ftrace(int argc, const char **argv);

int find_scripts(char **scripts_array, char **scripts_path_array, int num,
   int pathlen);
# 24 "builtin-trace.c" 2
# 1 "util/cgroup.h" 1


#define __CGROUP_H__ 

# 1 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 1


#define _TOOLS_LINUX_REFCOUNT_H 
# 41 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
# 1 "/home/jmikedupont2/linux/tools/include/linux/atomic.h" 1


#define __TOOLS_LINUX_ATOMIC_H 

# 1 "/home/jmikedupont2/linux/tools/include/asm/atomic.h" 1


#define __TOOLS_LINUX_ASM_ATOMIC_H 


# 1 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/atomic.h" 1


#define _TOOLS_LINUX_ASM_X86_ATOMIC_H 



# 1 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/rmwcc.h" 1


#define _TOOLS_LINUX_ASM_X86_RMWcc 
# 25 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/rmwcc.h"
#define __GEN_RMWcc(fullop,var,cc,...) do { char c; asm volatile (fullop "; set" cc " %1" : "+m" (var), "=qm" (c) : __VA_ARGS__ : "memory"); return c != 0; } while (0)
# 34 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/rmwcc.h"
#define GEN_UNARY_RMWcc(op,var,arg0,cc) __GEN_RMWcc(op " " arg0, var, cc)


#define GEN_BINARY_RMWcc(op,var,vcon,val,arg0,cc) __GEN_RMWcc(op " %2, " arg0, var, cc, vcon (val))
# 8 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/atomic.h" 2

#define LOCK_PREFIX "\n\tlock; "

# 1 "/home/jmikedupont2/linux/tools/arch/x86/include/asm/cmpxchg.h" 1


#define TOOLS_ASM_X86_CMPXCHG_H 







extern void __cmpxchg_wrong_size(void)
 __attribute__((error("Bad argument size for cmpxchg")));
# 21 "/home/jmikedupont2/linux/tools/arch/x86/include/asm/cmpxchg.h"
#define __X86_CASE_B 1
#define __X86_CASE_W 2
#define __X86_CASE_L 4

#define __X86_CASE_Q 8
# 35 "/home/jmikedupont2/linux/tools/arch/x86/include/asm/cmpxchg.h"
#define __raw_cmpxchg(ptr,old,new,size,lock) ({ __typeof__(*(ptr)) __ret; __typeof__(*(ptr)) __old = (old); __typeof__(*(ptr)) __new = (new); switch (size) { case __X86_CASE_B: { volatile u8 *__ptr = (volatile u8 *)(ptr); asm volatile(lock "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case __X86_CASE_W: { volatile u16 *__ptr = (volatile u16 *)(ptr); asm volatile(lock "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case __X86_CASE_L: { volatile u32 *__ptr = (volatile u32 *)(ptr); asm volatile(lock "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case __X86_CASE_Q: { volatile u64 *__ptr = (volatile u64 *)(ptr); asm volatile(lock "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; })
# 83 "/home/jmikedupont2/linux/tools/arch/x86/include/asm/cmpxchg.h"
#define __cmpxchg(ptr,old,new,size) __raw_cmpxchg((ptr), (old), (new), (size), LOCK_PREFIX)


#define cmpxchg(ptr,old,new) __cmpxchg(ptr, old, new, sizeof(*(ptr)))
# 12 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/atomic.h" 2






#define ATOMIC_INIT(i) { (i) }







static inline int atomic_read(const atomic_t *v)
{
 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u = { .__c = { 0 } }; __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); __u.__val; });
}
# 38 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/atomic.h"
static inline void atomic_set(atomic_t *v, int i)
{
 v->counter = i;
}







static inline void atomic_inc(atomic_t *v)
{
 asm volatile("\n\tlock; " "incl %0"
       : "+m" (v->counter));
}
# 63 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/atomic.h"
static inline int atomic_dec_and_test(atomic_t *v)
{
 do { char c; asm volatile ("\n\tlock; " "decl" " " "%0" "; set" "e" " %1" : "+m" (v->counter), "=qm" (c) : : "memory"); return c != 0; } while (0);
}

static 
# 68 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/atomic.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 68 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/atomic.h"
                      int atomic_cmpxchg(atomic_t *v, int old, int new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile("\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile("\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile("\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile("\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}
# 7 "/home/jmikedupont2/linux/tools/include/asm/atomic.h" 2
# 6 "/home/jmikedupont2/linux/tools/include/linux/atomic.h" 2



#define atomic_cmpxchg_relaxed atomic_cmpxchg
#define atomic_cmpxchg_release atomic_cmpxchg
# 42 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/linux/kernel.h" 1


#define __TOOLS_LINUX_KERNEL_H 


# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 7 "/home/jmikedupont2/linux/tools/include/linux/kernel.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 34 "/usr/include/assert.h" 3 4
#define _ASSERT_H 1





#define __ASSERT_VOID_CAST (void)
# 65 "/usr/include/assert.h" 3 4
#define _ASSERT_H_DECLS 




# 69 "/usr/include/assert.h" 3 4
extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





#define assert(expr) ((expr) ? __ASSERT_VOID_CAST (0) : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))





#define assert_perror(errnum) (!(errnum) ? __ASSERT_VOID_CAST (0) : __assert_perror_fail ((errnum), __FILE__, __LINE__, __ASSERT_FUNCTION))
# 106 "/usr/include/assert.h" 3 4
#define __ASSERT_FUNCTION __PRETTY_FUNCTION__
# 119 "/usr/include/assert.h" 3 4
#undef static_assert
#define static_assert _Static_assert
# 8 "/home/jmikedupont2/linux/tools/include/linux/kernel.h" 2


# 1 "/usr/include/byteswap.h" 1 3 4
# 19 "/usr/include/byteswap.h" 3 4
#define _BYTESWAP_H 1




# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 25 "/usr/include/byteswap.h" 2 3 4






#define bswap_16(x) __bswap_16 (x)


#define bswap_32(x) __bswap_32 (x)


#define bswap_64(x) __bswap_64 (x)
# 11 "/home/jmikedupont2/linux/tools/include/linux/kernel.h" 2


#define UINT_MAX (~0U)


#define DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))

#define PERF_ALIGN(x,a) __PERF_ALIGN_MASK(x, (typeof(x))(a)-1)
#define __PERF_ALIGN_MASK(x,mask) (((x)+(mask))&~(mask))
# 33 "/home/jmikedupont2/linux/tools/include/linux/kernel.h"
#define container_of(ptr,type,member) ({ const typeof(((type *)0)->member) * __mptr = (ptr); (type *)((char *)__mptr - offsetof(type, member)); })




#define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
#define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); }))


#define max(x,y) ({ typeof(x) _max1 = (x); typeof(y) _max2 = (y); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; })







#define min(x,y) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })







#define roundup(x,y) ( { const typeof(y) __y = y; (((x) + (__y - 1)) / __y) * __y; } )
# 70 "/home/jmikedupont2/linux/tools/include/linux/kernel.h"
#define BUG_ON(cond) assert(!(cond))


#define BUG() BUG_ON(1)
# 89 "/home/jmikedupont2/linux/tools/include/linux/kernel.h"
#define cpu_to_le16 
#define cpu_to_le32 
#define cpu_to_le64 
#define le16_to_cpu 
#define le32_to_cpu 
#define le64_to_cpu 
#define cpu_to_be16 bswap_16
#define cpu_to_be32 bswap_32
#define cpu_to_be64 bswap_64
#define be16_to_cpu bswap_16
#define be32_to_cpu bswap_32
#define be64_to_cpu bswap_64



# 103 "/home/jmikedupont2/linux/tools/include/linux/kernel.h"
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
int scnprintf(char * buf, size_t size, const char * fmt, ...);
int scnprintf_pad(char * buf, size_t size, const char * fmt, ...);

#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]) + __must_be_array(arr))







#define __round_mask(x,y) ((__typeof__(x))((y)-1))
#define round_up(x,y) ((((x)-1) | __round_mask(x, y))+1)
#define round_down(x,y) ((x) & ~__round_mask(x, y))

#define current_gfp_context(k) 0
#define synchronize_rcu() 
# 43 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 2





#define REFCOUNT_WARN(cond,str) BUG_ON(cond)
#define __refcount_check __must_check


typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;

#define REFCOUNT_INIT(n) { .refs = ATOMIC_INIT(n), }

static inline void refcount_set(refcount_t *r, unsigned int n)
{
 atomic_set(&r->refs, n);
}

static inline unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}
# 75 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
static inline

# 76 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
_Bool 
# 76 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
    refcount_inc_not_zero(refcount_t *r)
{
 unsigned int old, new, val = atomic_read(&r->refs);

 for (;;) {
  new = val + 1;

  if (!val)
   return 
# 84 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
         0
# 84 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
              ;

  if (__builtin_expect(!!(!new), 0))
   return 
# 87 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
         1
# 87 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
             ;

  old = atomic_cmpxchg(&r->refs, val, new);
  if (old == val)
   break;

  val = old;
 }

 
# 96 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
((
# 96 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
!(new == (~0U))
# 96 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
) ? (void) (0) : __assert_fail (
# 96 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
"!(new == (~0U))"
# 96 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
, "/home/jmikedupont2/linux/tools/include/linux/refcount.h", 96, __PRETTY_FUNCTION__))
# 96 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
                                                                          ;

 return 
# 98 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
       1
# 98 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
           ;
}







static inline void refcount_inc(refcount_t *r)
{
 
# 109 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
((
# 109 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
!(!refcount_inc_not_zero(r))
# 109 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
) ? (void) (0) : __assert_fail (
# 109 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
"!(!refcount_inc_not_zero(r))"
# 109 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
, "/home/jmikedupont2/linux/tools/include/linux/refcount.h", 109, __PRETTY_FUNCTION__))
# 109 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
                                                                                         ;
}
# 120 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
static inline

# 121 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
_Bool 
# 121 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
    refcount_sub_and_test(unsigned int i, refcount_t *r)
{
 unsigned int old, new, val = atomic_read(&r->refs);

 for (;;) {
  if (__builtin_expect(!!(val == (~0U)), 0))
   return 
# 127 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
         0
# 127 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
              ;

  new = val - i;
  if (new > val) {
   
# 131 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
  ((
# 131 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
  !(new > val)
# 131 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
  ) ? (void) (0) : __assert_fail (
# 131 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
  "!(new > val)"
# 131 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
  , "/home/jmikedupont2/linux/tools/include/linux/refcount.h", 131, __PRETTY_FUNCTION__))
# 131 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
                                                                      ;
   return 
# 132 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
         0
# 132 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
              ;
  }

  old = atomic_cmpxchg(&r->refs, val, new);
  if (old == val)
   break;

  val = old;
 }

 return !new;
}

static inline

# 146 "/home/jmikedupont2/linux/tools/include/linux/refcount.h" 3 4
_Bool 
# 146 "/home/jmikedupont2/linux/tools/include/linux/refcount.h"
    refcount_dec_and_test(refcount_t *r)
{
 return refcount_sub_and_test(1, r);
}
# 6 "util/cgroup.h" 2

struct option;

struct cgroup {
 char *name;
 int fd;
 refcount_t refcnt;
};


extern int nr_cgroups;

struct cgroup *cgroup__get(struct cgroup *cgroup);
void cgroup__put(struct cgroup *cgroup);

struct evlist;

struct cgroup *evlist__findnew_cgroup(struct evlist *evlist, const char *name);

void evlist__set_default_cgroup(struct evlist *evlist, struct cgroup *cgroup);

int parse_cgroups(const struct option *opt, const char *str, int unset);
# 25 "builtin-trace.c" 2
# 1 "util/color.h" 1


#define __PERF_COLOR_H 





#define COLOR_MAXLEN 24

#define PERF_COLOR_NORMAL ""
#define PERF_COLOR_RESET "\033[m"
#define PERF_COLOR_BOLD "\033[1m"
#define PERF_COLOR_RED "\033[31m"
#define PERF_COLOR_GREEN "\033[32m"
#define PERF_COLOR_YELLOW "\033[33m"
#define PERF_COLOR_BLUE "\033[34m"
#define PERF_COLOR_MAGENTA "\033[35m"
#define PERF_COLOR_CYAN "\033[36m"
#define PERF_COLOR_BG_RED "\033[41m"

#define MIN_GREEN 0.5
#define MIN_RED 5.0




extern int perf_use_color_default;





int perf_color_default_config(const char *var, const char *value, void *cb);

int perf_config_colorbool(const char *var, const char *value, int stdout_is_tty);
int color_vsnprintf(char *bf, size_t size, const char *color,
      const char *fmt, va_list args);
int color_vfprintf(FILE *fp, const char *color, const char *fmt, va_list args);
int color_fprintf(FILE *fp, const char *color, const char *fmt, ...);
int color_snprintf(char *bf, size_t size, const char *color, const char *fmt, ...);
int color_fwrite_lines(FILE *fp, const char *color, size_t count, const char *buf);
int value_color_snprintf(char *bf, size_t size, const char *fmt, double value);
int percent_color_snprintf(char *bf, size_t size, const char *fmt, ...);
int percent_color_len_snprintf(char *bf, size_t size, const char *fmt, ...);
int percent_color_fprintf(FILE *fp, const char *fmt, double percent);
const char *get_percent_color(double percent);
# 26 "builtin-trace.c" 2
# 1 "util/config.h" 1


#define __PERF_CONFIG_H 


# 1 "/home/jmikedupont2/linux/tools/include/linux/list.h" 1


#define __TOOLS_LINUX_LIST_H 


# 1 "/home/jmikedupont2/linux/tools/include/linux/poison.h" 1


#define _LINUX_POISON_H 
# 15 "/home/jmikedupont2/linux/tools/include/linux/poison.h"
#define POISON_POINTER_DELTA 0
# 27 "/home/jmikedupont2/linux/tools/include/linux/poison.h"
#define LIST_POISON1 ((void *) 0x100 + POISON_POINTER_DELTA)
#define LIST_POISON2 ((void *) 0x200 + POISON_POINTER_DELTA)







#define TIMER_ENTRY_STATIC ((void *) 0x300 + POISON_POINTER_DELTA)





#define PAGE_POISON 0xaa




#define TAIL_MAPPING ((void *) 0x400 + POISON_POINTER_DELTA)






#define RED_INACTIVE 0x09F911029D74E35BULL
#define RED_ACTIVE 0xD84156C5635688C0ULL

#define SLUB_RED_INACTIVE 0xbb
#define SLUB_RED_ACTIVE 0xcc


#define POISON_INUSE 0x5a
#define POISON_FREE 0x6b
#define POISON_END 0xa5


#define POISON_FREE_INITMEM 0xcc
# 75 "/home/jmikedupont2/linux/tools/include/linux/poison.h"
#define JBD_POISON_FREE 0x5b
#define JBD2_POISON_FREE 0x5c


#define POOL_POISON_FREED 0xa7
#define POOL_POISON_ALLOCATED 0xa9


#define ATM_POISON_FREE 0x12
#define ATM_POISON 0xdeadbeef


#define MUTEX_DEBUG_INIT 0x11
#define MUTEX_DEBUG_FREE 0x22


#define KEY_DESTROY 0xbd
# 7 "/home/jmikedupont2/linux/tools/include/linux/list.h" 2
# 20 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define LIST_HEAD_INIT(name) { &(name), &(name) }

#define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)


static inline void INIT_LIST_HEAD(struct list_head *list)
{
 list->next = list;
 list->prev = list;
}
# 38 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 next->prev = new;
 new->next = next;
 new->prev = prev;
 prev->next = new;
}
# 61 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 75 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 87 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = (next) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 100 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void __list_del_entry(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
}

static inline void list_del(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->next = ((void *) 0x100 + 0);
 entry->prev = ((void *) 0x200 + 0);
}
# 123 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}

static inline void list_replace_init(struct list_head *old,
     struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}





static inline void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}






static inline int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline int list_empty(const struct list_head *head)
{
 return head->next == head;
}
# 205 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = head->next;
 return (next == head) && (next == head->prev);
}





static inline void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}





static inline int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 260 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}

static inline void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 319 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 336 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}







#define list_entry(ptr,type,member) container_of(ptr, type, member)
# 362 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_first_entry(ptr,type,member) list_entry((ptr)->next, type, member)
# 373 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_last_entry(ptr,type,member) list_entry((ptr)->prev, type, member)
# 384 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_first_entry_or_null(ptr,type,member) (!list_empty(ptr) ? list_first_entry(ptr, type, member) : NULL)







#define list_next_entry(pos,member) list_entry((pos)->member.next, typeof(*(pos)), member)







#define list_prev_entry(pos,member) list_entry((pos)->member.prev, typeof(*(pos)), member)







#define list_for_each(pos,head) for (pos = (head)->next; pos != (head); pos = pos->next)







#define list_for_each_prev(pos,head) for (pos = (head)->prev; pos != (head); pos = pos->prev)
# 425 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_safe(pos,n,head) for (pos = (head)->next, n = pos->next; pos != (head); pos = n, n = pos->next)
# 435 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_prev_safe(pos,n,head) for (pos = (head)->prev, n = pos->prev; pos != (head); pos = n, n = pos->prev)
# 446 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry(pos,head,member) for (pos = list_first_entry(head, typeof(*pos), member); &pos->member != (head); pos = list_next_entry(pos, member))
# 457 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_reverse(pos,head,member) for (pos = list_last_entry(head, typeof(*pos), member); &pos->member != (head); pos = list_prev_entry(pos, member))
# 470 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_prepare_entry(pos,head,member) ((pos) ? : list_entry(head, typeof(*pos), member))
# 482 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_continue(pos,head,member) for (pos = list_next_entry(pos, member); &pos->member != (head); pos = list_next_entry(pos, member))
# 496 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_continue_reverse(pos,head,member) for (pos = list_prev_entry(pos, member); &pos->member != (head); pos = list_prev_entry(pos, member))
# 509 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_from(pos,head,member) for (; &pos->member != (head); pos = list_next_entry(pos, member))
# 520 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_safe(pos,n,head,member) for (pos = list_first_entry(head, typeof(*pos), member), n = list_next_entry(pos, member); &pos->member != (head); pos = n, n = list_next_entry(n, member))
# 536 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_safe_continue(pos,n,head,member) for (pos = list_next_entry(pos, member), n = list_next_entry(pos, member); &pos->member != (head); pos = n, n = list_next_entry(n, member))
# 552 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_safe_from(pos,n,head,member) for (n = list_next_entry(pos, member); &pos->member != (head); pos = n, n = list_next_entry(n, member))
# 567 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_for_each_entry_safe_reverse(pos,n,head,member) for (pos = list_last_entry(head, typeof(*pos), member), n = list_prev_entry(pos, member); &pos->member != (head); pos = n, n = list_prev_entry(n, member))
# 585 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define list_safe_reset_next(pos,n,member) n = list_next_entry(pos, member)
# 595 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define HLIST_HEAD_INIT { .first = NULL }
#define HLIST_HEAD(name) struct hlist_head name = { .first = NULL }
#define INIT_HLIST_HEAD(ptr) ((ptr)->first = NULL)
static inline void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = 
# 600 "/home/jmikedupont2/linux/tools/include/linux/list.h" 3 4
          ((void *)0)
# 600 "/home/jmikedupont2/linux/tools/include/linux/list.h"
              ;
 h->pprev = 
# 601 "/home/jmikedupont2/linux/tools/include/linux/list.h" 3 4
           ((void *)0)
# 601 "/home/jmikedupont2/linux/tools/include/linux/list.h"
               ;
}

static inline int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}

static inline int hlist_empty(const struct hlist_head *h)
{
 return !h->first;
}

static inline void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (next)
  next->pprev = pprev;
}

static inline void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x200 + 0);
}

static inline void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}

static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 n->next = first;
 if (first)
  first->pprev = &n->next;
 h->first = n;
 n->pprev = &h->first;
}


static inline void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 next->pprev = &n->next;
 *(n->pprev) = n;
}

static inline void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 n->next = prev->next;
 prev->next = n;
 n->pprev = &prev->next;

 if (n->next)
  n->next->pprev = &n->next;
}


static inline void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}

static inline 
# 676 "/home/jmikedupont2/linux/tools/include/linux/list.h" 3 4
             _Bool 
# 676 "/home/jmikedupont2/linux/tools/include/linux/list.h"
                  hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}





static inline void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = 
# 691 "/home/jmikedupont2/linux/tools/include/linux/list.h" 3 4
             ((void *)0)
# 691 "/home/jmikedupont2/linux/tools/include/linux/list.h"
                 ;
}

#define hlist_entry(ptr,type,member) container_of(ptr,type,member)

#define hlist_for_each(pos,head) for (pos = (head)->first; pos ; pos = pos->next)


#define hlist_for_each_safe(pos,n,head) for (pos = (head)->first; pos && ({ n = pos->next; 1; }); pos = n)



#define hlist_entry_safe(ptr,type,member) ({ typeof(ptr) ____ptr = (ptr); ____ptr ? hlist_entry(____ptr, type, member) : NULL; })
# 714 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define hlist_for_each_entry(pos,head,member) for (pos = hlist_entry_safe((head)->first, typeof(*(pos)), member); pos; pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))
# 724 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define hlist_for_each_entry_continue(pos,member) for (pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member); pos; pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))
# 734 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define hlist_for_each_entry_from(pos,member) for (; pos; pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))
# 745 "/home/jmikedupont2/linux/tools/include/linux/list.h"
#define hlist_for_each_entry_safe(pos,n,head,member) for (pos = hlist_entry_safe((head)->first, typeof(*pos), member); pos && ({ n = pos->member.next; 1; }); pos = hlist_entry_safe(n, typeof(*pos), member))
# 757 "/home/jmikedupont2/linux/tools/include/linux/list.h"
static inline void list_del_range(struct list_head *begin,
      struct list_head *end)
{
 begin->prev->next = end->next;
 end->next->prev = begin->prev;
}






#define list_for_each_from(pos,head) for (; pos != (head); pos = pos->next)
# 7 "util/config.h" 2

struct perf_config_item {
 char *name;
 char *value;
 
# 11 "util/config.h" 3 4
_Bool 
# 11 "util/config.h"
     from_system_config;
 struct list_head node;
};

struct perf_config_section {
 char *name;
 struct list_head items;
 
# 18 "util/config.h" 3 4
_Bool 
# 18 "util/config.h"
     from_system_config;
 struct list_head node;
};

struct perf_config_set {
 struct list_head sections;
};

extern const char *config_exclusive_filename;

typedef int (*config_fn_t)(const char *, const char *, void *);
int perf_default_config(const char *, const char *, void *);
int perf_config(config_fn_t fn, void *);
int perf_config_int(int *dest, const char *, const char *);
int perf_config_u64(u64 *dest, const char *, const char *);
int perf_config_bool(const char *, const char *);
int config_error_nonbool(const char *);
const char *perf_etc_perfconfig(void);

struct perf_config_set *perf_config_set__new(void);
void perf_config_set__delete(struct perf_config_set *set);
int perf_config_set__collect(struct perf_config_set *set, const char *file_name,
        const char *var, const char *value);
void perf_config__exit(void);
void perf_config__refresh(void);






#define perf_config_sections__for_each_entry(list,section) list_for_each_entry(section, list, node)







#define perf_config_items__for_each_entry(list,item) list_for_each_entry(item, list, node)
# 66 "util/config.h"
#define perf_config_set__for_each_entry(set,section,item) perf_config_sections__for_each_entry(&set->sections, section) perf_config_items__for_each_entry(&section->items, item)
# 27 "builtin-trace.c" 2
# 1 "util/debug.h" 1



#define __PERF_DEBUG_H 





extern int verbose;
extern int debug_peo_args;
extern 
# 12 "util/debug.h" 3 4
      _Bool 
# 12 "util/debug.h"
           quiet, dump_trace;
extern int debug_ordered_events;
extern int debug_data_convert;


#define pr_fmt(fmt) fmt


#define pr_err(fmt,...) eprintf(0, verbose, pr_fmt(fmt), ##__VA_ARGS__)

#define pr_warning(fmt,...) eprintf(0, verbose, pr_fmt(fmt), ##__VA_ARGS__)

#define pr_info(fmt,...) eprintf(0, verbose, pr_fmt(fmt), ##__VA_ARGS__)

#define pr_debug(fmt,...) eprintf(1, verbose, pr_fmt(fmt), ##__VA_ARGS__)

#define pr_debugN(n,fmt,...) eprintf(n, verbose, pr_fmt(fmt), ##__VA_ARGS__)

#define pr_debug2(fmt,...) pr_debugN(2, pr_fmt(fmt), ##__VA_ARGS__)
#define pr_debug3(fmt,...) pr_debugN(3, pr_fmt(fmt), ##__VA_ARGS__)
#define pr_debug4(fmt,...) pr_debugN(4, pr_fmt(fmt), ##__VA_ARGS__)


#define pr_debug2_peo(fmt,...) { if (debug_peo_args) pr_debugN(0, pr_fmt(fmt), ##__VA_ARGS__); else pr_debugN(2, pr_fmt(fmt), ##__VA_ARGS__); }






#define pr_time_N(n,var,t,fmt,...) eprintf_time(n, var, t, fmt, ##__VA_ARGS__)


#define pr_oe_time(t,fmt,...) pr_time_N(1, debug_ordered_events, t, pr_fmt(fmt), ##__VA_ARGS__)
#define pr_oe_time2(t,fmt,...) pr_time_N(2, debug_ordered_events, t, pr_fmt(fmt), ##__VA_ARGS__)

#define STRERR_BUFSIZE 128

union perf_event;

int dump_printf(const char *fmt, ...) __attribute__((format(printf, 1, 2)));
void trace_event(union perf_event *event);

int ui__error(const char *format, ...) __attribute__((format(printf, 1, 2)));
int ui__warning(const char *format, ...) __attribute__((format(printf, 1, 2)));

void pr_stat(const char *fmt, ...);

int eprintf(int level, int var, const char *fmt, ...) __attribute__((format(printf, 3, 4)));
int eprintf_time(int level, int var, u64 t, const char *fmt, ...) __attribute__((format(printf, 4, 5)));
int veprintf(int level, int var, const char *fmt, va_list args);

int perf_debug_option(const char *str);
void perf_debug_setup(void);
int perf_quiet_option(void);

void dump_stack(void);
void sighandler_dump_stack(int sig);
# 28 "builtin-trace.c" 2
# 1 "util/dso.h" 1


#define __PERF_DSO 

# 1 "/usr/include/pthread.h" 1 3 4
# 19 "/usr/include/pthread.h" 3 4
#define _PTHREAD_H 1



# 1 "/usr/include/sched.h" 1 3 4
# 20 "/usr/include/sched.h" 3 4
#define _SCHED_H 1






#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 29 "/usr/include/sched.h" 2 3 4


#define __need_time_t 
#define __need_timespec 
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
#define SCHED_OTHER 0
#define SCHED_FIFO 1
#define SCHED_RR 2

#define SCHED_BATCH 3
#define SCHED_IDLE 5

#define SCHED_RESET_ON_FORK 0x40000000




#define CSIGNAL 0x000000ff
#define CLONE_VM 0x00000100
#define CLONE_FS 0x00000200
#define CLONE_FILES 0x00000400
#define CLONE_SIGHAND 0x00000800
#define CLONE_PTRACE 0x00002000
#define CLONE_VFORK 0x00004000

#define CLONE_PARENT 0x00008000

#define CLONE_THREAD 0x00010000
#define CLONE_NEWNS 0x00020000
#define CLONE_SYSVSEM 0x00040000
#define CLONE_SETTLS 0x00080000
#define CLONE_PARENT_SETTID 0x00100000

#define CLONE_CHILD_CLEARTID 0x00200000

#define CLONE_DETACHED 0x00400000
#define CLONE_UNTRACED 0x00800000

#define CLONE_CHILD_SETTID 0x01000000

#define CLONE_NEWCGROUP 0x02000000
#define CLONE_NEWUTS 0x04000000
#define CLONE_NEWIPC 0x08000000
#define CLONE_NEWUSER 0x10000000
#define CLONE_NEWPID 0x20000000
#define CLONE_NEWNET 0x40000000
#define CLONE_IO 0x80000000




# 73 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));


extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));









#define __defined_schedparam 1

struct __sched_param
  {
    int __sched_priority;
  };
#undef __need_schedparam




#define __cpu_set_t_defined 

#define __CPU_SETSIZE 1024
#define __NCPUBITS (8 * sizeof (__cpu_mask))


typedef unsigned long int __cpu_mask;


#define __CPUELT(cpu) ((cpu) / __NCPUBITS)
#define __CPUMASK(cpu) ((__cpu_mask) 1 << ((cpu) % __NCPUBITS))


typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;



#define __CPU_ZERO_S(setsize,cpusetp) do __builtin_memset (cpusetp, '\0', setsize); while (0)
# 145 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
#define __CPU_SET_S(cpu,setsize,cpusetp) (__extension__ ({ size_t __cpu = (cpu); __cpu / 8 < (setsize) ? (((__cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)] |= __CPUMASK (__cpu)) : 0; }))






#define __CPU_CLR_S(cpu,setsize,cpusetp) (__extension__ ({ size_t __cpu = (cpu); __cpu / 8 < (setsize) ? (((__cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)] &= ~__CPUMASK (__cpu)) : 0; }))






#define __CPU_ISSET_S(cpu,setsize,cpusetp) (__extension__ ({ size_t __cpu = (cpu); __cpu / 8 < (setsize) ? ((((const __cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)] & __CPUMASK (__cpu))) != 0 : 0; }))







#define __CPU_COUNT_S(setsize,cpusetp) __sched_cpucount (setsize, cpusetp)



#define __CPU_EQUAL_S(setsize,cpusetp1,cpusetp2) (__builtin_memcmp (cpusetp1, cpusetp2, setsize) == 0)
# 186 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
#define __CPU_OP_S(setsize,destset,srcset1,srcset2,op) (__extension__ ({ cpu_set_t *__dest = (destset); const __cpu_mask *__arr1 = (srcset1)->__bits; const __cpu_mask *__arr2 = (srcset2)->__bits; size_t __imax = (setsize) / sizeof (__cpu_mask); size_t __i; for (__i = 0; __i < __imax; ++__i) ((__cpu_mask *) __dest->__bits)[__i] = __arr1[__i] op __arr2[__i]; __dest; }))
# 197 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
#define __CPU_ALLOC_SIZE(count) ((((count) + __NCPUBITS - 1) / __NCPUBITS) * sizeof (__cpu_mask))

#define __CPU_ALLOC(count) __sched_cpualloc (count)
#define __CPU_FREE(cpuset) __sched_cpufree (cpuset)



extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 44 "/usr/include/sched.h" 2 3 4

#define sched_priority __sched_priority





extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));




#define CPU_SETSIZE __CPU_SETSIZE
#define CPU_SET(cpu,cpusetp) __CPU_SET_S (cpu, sizeof (cpu_set_t), cpusetp)
#define CPU_CLR(cpu,cpusetp) __CPU_CLR_S (cpu, sizeof (cpu_set_t), cpusetp)
#define CPU_ISSET(cpu,cpusetp) __CPU_ISSET_S (cpu, sizeof (cpu_set_t), cpusetp)

#define CPU_ZERO(cpusetp) __CPU_ZERO_S (sizeof (cpu_set_t), cpusetp)
#define CPU_COUNT(cpusetp) __CPU_COUNT_S (sizeof (cpu_set_t), cpusetp)

#define CPU_SET_S(cpu,setsize,cpusetp) __CPU_SET_S (cpu, setsize, cpusetp)
#define CPU_CLR_S(cpu,setsize,cpusetp) __CPU_CLR_S (cpu, setsize, cpusetp)
#define CPU_ISSET_S(cpu,setsize,cpusetp) __CPU_ISSET_S (cpu, setsize, cpusetp)

#define CPU_ZERO_S(setsize,cpusetp) __CPU_ZERO_S (setsize, cpusetp)
#define CPU_COUNT_S(setsize,cpusetp) __CPU_COUNT_S (setsize, cpusetp)

#define CPU_EQUAL(cpusetp1,cpusetp2) __CPU_EQUAL_S (sizeof (cpu_set_t), cpusetp1, cpusetp2)

#define CPU_EQUAL_S(setsize,cpusetp1,cpusetp2) __CPU_EQUAL_S (setsize, cpusetp1, cpusetp2)


#define CPU_AND(destset,srcset1,srcset2) __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, &)

#define CPU_OR(destset,srcset1,srcset2) __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, |)

#define CPU_XOR(destset,srcset1,srcset2) __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, ^)

#define CPU_AND_S(setsize,destset,srcset1,srcset2) __CPU_OP_S (setsize, destset, srcset1, srcset2, &)

#define CPU_OR_S(setsize,destset,srcset1,srcset2) __CPU_OP_S (setsize, destset, srcset1, srcset2, |)

#define CPU_XOR_S(setsize,destset,srcset1,srcset2) __CPU_OP_S (setsize, destset, srcset1, srcset2, ^)


#define CPU_ALLOC_SIZE(count) __CPU_ALLOC_SIZE (count)
#define CPU_ALLOC(count) __CPU_ALLOC (count)
#define CPU_FREE(cpuset) __CPU_FREE (cpuset)



extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));



# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
#define _BITS_SETJMP_H 1





# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,
#define PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_JOINABLE
  PTHREAD_CREATE_DETACHED
#define PTHREAD_CREATE_DETACHED PTHREAD_CREATE_DETACHED
};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};




#define PTHREAD_MUTEX_INITIALIZER { { 0, 0, 0, 0, 0, __PTHREAD_SPINS, { 0, 0 } } }


#define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, __PTHREAD_SPINS, { 0, 0 } } }

#define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP { { 0, 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, __PTHREAD_SPINS, { 0, 0 } } }

#define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP { { 0, 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP, __PTHREAD_SPINS, { 0, 0 } } }
# 114 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 132 "/usr/include/pthread.h" 3 4
#define PTHREAD_RWLOCK_INITIALIZER { { 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, 0 } }



#define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP { { 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }
# 155 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,
#define PTHREAD_INHERIT_SCHED PTHREAD_INHERIT_SCHED
  PTHREAD_EXPLICIT_SCHED
#define PTHREAD_EXPLICIT_SCHED PTHREAD_EXPLICIT_SCHED
};



enum
{
  PTHREAD_SCOPE_SYSTEM,
#define PTHREAD_SCOPE_SYSTEM PTHREAD_SCOPE_SYSTEM
  PTHREAD_SCOPE_PROCESS
#define PTHREAD_SCOPE_PROCESS PTHREAD_SCOPE_PROCESS
};



enum
{
  PTHREAD_PROCESS_PRIVATE,
#define PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE
  PTHREAD_PROCESS_SHARED
#define PTHREAD_PROCESS_SHARED PTHREAD_PROCESS_SHARED
};




#define PTHREAD_COND_INITIALIZER { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }



struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,
#define PTHREAD_CANCEL_ENABLE PTHREAD_CANCEL_ENABLE
  PTHREAD_CANCEL_DISABLE
#define PTHREAD_CANCEL_DISABLE PTHREAD_CANCEL_DISABLE
};
enum
{
  PTHREAD_CANCEL_DEFERRED,
#define PTHREAD_CANCEL_DEFERRED PTHREAD_CANCEL_DEFERRED
  PTHREAD_CANCEL_ASYNCHRONOUS
#define PTHREAD_CANCEL_ASYNCHRONOUS PTHREAD_CANCEL_ASYNCHRONOUS
};
#define PTHREAD_CANCELED ((void *) -1)



#define PTHREAD_ONCE_INIT 0






#define PTHREAD_BARRIER_SERIAL_THREAD -1








extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 494 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 506 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));



#define __cleanup_fct_attribute 




struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 664 "/usr/include/pthread.h" 3 4
#define pthread_cleanup_push(routine,arg) do { __pthread_unwind_buf_t __cancel_buf; void (*__cancel_routine) (void *) = (routine); void *__cancel_arg = (arg); int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *) __cancel_buf.__cancel_jmp_buf, 0); if (__glibc_unlikely (__not_first_call)) { __cancel_routine (__cancel_arg); __pthread_unwind_next (&__cancel_buf); } __pthread_register_cancel (&__cancel_buf); do {
# 680 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;



#define pthread_cleanup_pop(execute) do { } while (0); } while (0); __pthread_unregister_cancel (&__cancel_buf); if (execute) __cancel_routine (__cancel_arg); } while (0)






extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;





#define pthread_cleanup_push_defer_np(routine,arg) do { __pthread_unwind_buf_t __cancel_buf; void (*__cancel_routine) (void *) = (routine); void *__cancel_arg = (arg); int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *) __cancel_buf.__cancel_jmp_buf, 0); if (__glibc_unlikely (__not_first_call)) { __cancel_routine (__cancel_arg); __pthread_unwind_next (&__cancel_buf); } __pthread_register_cancel_defer (&__cancel_buf); do {
# 715 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     ;




#define pthread_cleanup_pop_restore_np(execute) do { } while (0); } while (0); __pthread_unregister_cancel_restore (&__cancel_buf); if (execute) __cancel_routine (__cancel_arg); } while (0)






extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 806 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 888 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1000 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1044 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1111 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2)
{
  return __thread1 == __thread2;
}



# 6 "util/dso.h" 2


# 1 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h" 1
# 18 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h"
#define __TOOLS_LINUX_PERF_RBTREE_H 





# 23 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h"
struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};

#define rb_parent(r) ((struct rb_node *)((r)->__rb_parent_color & ~3))

#define RB_ROOT (struct rb_root) { NULL, }
#define rb_entry(ptr,type,member) container_of(ptr, type, member)

#define RB_EMPTY_ROOT(root) (READ_ONCE((root)->rb_node) == NULL)


#define RB_EMPTY_NODE(node) ((node)->__rb_parent_color == (unsigned long)(node))

#define RB_CLEAR_NODE(node) ((node)->__rb_parent_color = (unsigned long)(node))



extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);

static inline void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = 
# 70 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h" 3 4
                                 ((void *)0)
# 70 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h"
                                     ;

 *rb_link = node;
}

#define rb_entry_safe(ptr,type,member) ({ typeof(ptr) ____ptr = (ptr); ____ptr ? rb_entry(____ptr, type, member) : NULL; })
# 97 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h"
#define rbtree_postorder_for_each_entry_safe(pos,n,root,field) for (pos = rb_entry_safe(rb_first_postorder(root), typeof(*pos), field); pos && ({ n = rb_entry_safe(rb_next_postorder(&pos->field), typeof(*pos), field); 1; }); pos = n)





static inline void rb_erase_init(struct rb_node *n, struct rb_root *root)
{
 rb_erase(n, root);
 ((n)->__rb_parent_color = (unsigned long)(n));
}
# 119 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};

#define RB_ROOT_CACHED (struct rb_root_cached) { {NULL, }, NULL }


#define rb_first_cached(root) (root)->rb_leftmost

static inline void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       
# 131 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h" 3 4
      _Bool 
# 131 "/home/jmikedupont2/linux/tools/include/linux/rbtree.h"
           leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}

static inline void rb_erase_cached(struct rb_node *node,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == node)
  root->rb_leftmost = rb_next(node);
 rb_erase(node, &root->rb_root);
}

static inline void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 9 "util/dso.h" 2



# 1 "/home/jmikedupont2/linux/tools/include/linux/bitops.h" 1


#define _TOOLS_LINUX_BITOPS_H_ 


# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 1 3 4
# 30 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 3 4
#define _GCC_LIMITS_H_ 



# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 23 "/usr/include/limits.h" 3 4
#define _LIBC_LIMITS_H_ 1







#define MB_LEN_MAX 16
# 131 "/usr/include/limits.h" 3 4
#define LLONG_MIN (-LLONG_MAX-1)


#define LLONG_MAX __LONG_LONG_MAX__


#define ULLONG_MAX (LLONG_MAX * 2ULL + 1)
# 147 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 3 4
#define _BITS_POSIX2_LIM_H 1



#define _POSIX2_BC_BASE_MAX 99


#define _POSIX2_BC_DIM_MAX 2048


#define _POSIX2_BC_SCALE_MAX 99


#define _POSIX2_BC_STRING_MAX 1000



#define _POSIX2_COLL_WEIGHTS_MAX 2



#define _POSIX2_EXPR_NEST_MAX 32


#define _POSIX2_LINE_MAX 2048



#define _POSIX2_RE_DUP_MAX 255



#define _POSIX2_CHARCLASS_NAME_MAX 14







#define BC_BASE_MAX _POSIX2_BC_BASE_MAX


#define BC_DIM_MAX _POSIX2_BC_DIM_MAX


#define BC_SCALE_MAX _POSIX2_BC_SCALE_MAX


#define BC_STRING_MAX _POSIX2_BC_STRING_MAX


#define COLL_WEIGHTS_MAX 255


#define EXPR_NEST_MAX _POSIX2_EXPR_NEST_MAX


#define LINE_MAX _POSIX2_LINE_MAX


#define CHARCLASS_NAME_MAX 2048



#define RE_DUP_MAX (0x7fff)
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
#define _XOPEN_LIM_H 1

#define __need_IOV_MAX 
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 3 4
#define L_tmpnam 20
#define TMP_MAX 238328
#define FILENAME_MAX 4096


#define L_ctermid 9

#define L_cuserid 9





#undef FOPEN_MAX
#define FOPEN_MAX 16



#define IOV_MAX 1024
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
#define _XOPEN_IOV_MAX _POSIX_UIO_MAXIOV




#define NL_ARGMAX _POSIX_ARG_MAX


#define NL_LANGMAX _POSIX2_LINE_MAX


#define NL_MSGMAX INT_MAX




#define NL_NMAX INT_MAX



#define NL_SETMAX INT_MAX


#define NL_TEXTMAX INT_MAX


#define NZERO 20
# 111 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
#define WORD_BIT 32
# 134 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
#define LONG_BIT 64
# 152 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/syslimits.h" 2 3 4
#undef _GCC_NEXT_LIMITS_H
# 35 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 2 3 4
# 60 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 3 4
#define _LIMITS_H___ 


#undef CHAR_BIT
#define CHAR_BIT __CHAR_BIT__







#undef SCHAR_MIN
#define SCHAR_MIN (-SCHAR_MAX - 1)
#undef SCHAR_MAX
#define SCHAR_MAX __SCHAR_MAX__


#undef UCHAR_MAX



#define UCHAR_MAX (SCHAR_MAX * 2 + 1)
# 96 "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed/limits.h" 3 4
#undef CHAR_MIN
#define CHAR_MIN SCHAR_MIN
#undef CHAR_MAX
#define CHAR_MAX SCHAR_MAX



#undef SHRT_MIN
#define SHRT_MIN (-SHRT_MAX - 1)
#undef SHRT_MAX
#define SHRT_MAX __SHRT_MAX__


#undef USHRT_MAX



#define USHRT_MAX (SHRT_MAX * 2 + 1)



#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__


#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1U)



#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1L)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__


#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1UL)



#undef LLONG_MIN
#define LLONG_MIN (-LLONG_MAX - 1LL)
#undef LLONG_MAX
#define LLONG_MAX __LONG_LONG_MAX__


#undef ULLONG_MAX
#define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)




#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__


#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)
# 7 "/home/jmikedupont2/linux/tools/include/linux/bitops.h" 2







# 1 "/home/jmikedupont2/linux/tools/include/linux/bits.h" 1


#define __LINUX_BITS_H 

# 1 "/home/jmikedupont2/linux/tools/include/linux/const.h" 1

#define _LINUX_CONST_H 

# 1 "/home/jmikedupont2/linux/tools/include/uapi/linux/const.h" 1




#define _UAPI_LINUX_CONST_H 
# 20 "/home/jmikedupont2/linux/tools/include/uapi/linux/const.h"
#define __AC(X,Y) (X ##Y)
#define _AC(X,Y) __AC(X,Y)
#define _AT(T,X) ((T)(X))


#define _UL(x) (_AC(x, UL))
#define _ULL(x) (_AC(x, ULL))

#define _BITUL(x) (_UL(1) << (x))
#define _BITULL(x) (_ULL(1) << (x))
# 5 "/home/jmikedupont2/linux/tools/include/linux/const.h" 2

#define UL(x) (_UL(x))
#define ULL(x) (_ULL(x))
# 6 "/home/jmikedupont2/linux/tools/include/linux/bits.h" 2


#define BIT(nr) (UL(1) << (nr))
#define BIT_ULL(nr) (ULL(1) << (nr))
#define BIT_MASK(nr) (UL(1) << ((nr) % BITS_PER_LONG))
#define BIT_WORD(nr) ((nr) / BITS_PER_LONG)
#define BIT_ULL_MASK(nr) (ULL(1) << ((nr) % BITS_PER_LONG_LONG))
#define BIT_ULL_WORD(nr) ((nr) / BITS_PER_LONG_LONG)
#define BITS_PER_BYTE 8






#define GENMASK(h,l) (((~UL(0)) - (UL(1) << (l)) + 1) & (~UL(0) >> (BITS_PER_LONG - 1 - (h))))



#define GENMASK_ULL(h,l) (((~ULL(0)) - (ULL(1) << (l)) + 1) & (~ULL(0) >> (BITS_PER_LONG_LONG - 1 - (h))))
# 15 "/home/jmikedupont2/linux/tools/include/linux/bitops.h" 2


#define BITS_TO_LONGS(nr) DIV_ROUND_UP(nr, BITS_PER_BYTE * sizeof(long))
#define BITS_TO_U64(nr) DIV_ROUND_UP(nr, BITS_PER_BYTE * sizeof(u64))
#define BITS_TO_U32(nr) DIV_ROUND_UP(nr, BITS_PER_BYTE * sizeof(u32))
#define BITS_TO_BYTES(nr) DIV_ROUND_UP(nr, BITS_PER_BYTE)

extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);







# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 1


#define __TOOLS_ASM_GENERIC_BITOPS_H 
# 16 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h"
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__ffs.h" 1


#define _TOOLS_LINUX_ASM_GENERIC_BITOPS___FFS_H_ 
# 14 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__ffs.h"
static 
# 14 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__ffs.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 14 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__ffs.h"
                      unsigned long __ffs(unsigned long word)
{
 int num = 0;


 if ((word & 0xffffffff) == 0) {
  num += 32;
  word >>= 32;
 }

 if ((word & 0xffff) == 0) {
  num += 16;
  word >>= 16;
 }
 if ((word & 0xff) == 0) {
  num += 8;
  word >>= 8;
 }
 if ((word & 0xf) == 0) {
  num += 4;
  word >>= 4;
 }
 if ((word & 0x3) == 0) {
  num += 2;
  word >>= 2;
 }
 if ((word & 0x1) == 0)
  num += 1;
 return num;
}
# 17 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__ffz.h" 1

#define _ASM_GENERIC_BITOPS_FFZ_H_ 







#define ffz(x) __ffs(~(x))
# 18 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls.h" 1


#define _ASM_GENERIC_BITOPS_FLS_H_ 
# 13 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls.h"
static 
# 13 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 13 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls.h"
                      int fls(unsigned int x)
{
 int r = 32;

 if (!x)
  return 0;
 if (!(x & 0xffff0000u)) {
  x <<= 16;
  r -= 16;
 }
 if (!(x & 0xff000000u)) {
  x <<= 8;
  r -= 8;
 }
 if (!(x & 0xf0000000u)) {
  x <<= 4;
  r -= 4;
 }
 if (!(x & 0xc0000000u)) {
  x <<= 2;
  r -= 2;
 }
 if (!(x & 0x80000000u)) {
  x <<= 1;
  r -= 1;
 }
 return r;
}
# 19 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 1


#define _ASM_GENERIC_BITOPS___FLS_H_ 
# 13 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
static 
# 13 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 13 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
                      unsigned long __fls(unsigned long word)
{
 int num = 
# 15 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 3 4
          (8 * 8) 
# 15 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
                        - 1;


 if (!(word & (~0ul << 32))) {
  num -= 32;
  word <<= 32;
 }

 if (!(word & (~0ul << (
# 23 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 3 4
                       (8 * 8)
# 23 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
                                    -16)))) {
  num -= 16;
  word <<= 16;
 }
 if (!(word & (~0ul << (
# 27 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 3 4
                       (8 * 8)
# 27 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
                                    -8)))) {
  num -= 8;
  word <<= 8;
 }
 if (!(word & (~0ul << (
# 31 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 3 4
                       (8 * 8)
# 31 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
                                    -4)))) {
  num -= 4;
  word <<= 4;
 }
 if (!(word & (~0ul << (
# 35 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 3 4
                       (8 * 8)
# 35 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
                                    -2)))) {
  num -= 2;
  word <<= 2;
 }
 if (!(word & (~0ul << (
# 39 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h" 3 4
                       (8 * 8)
# 39 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/__fls.h"
                                    -1))))
  num -= 1;
 return num;
}
# 20 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls64.h" 1


#define _ASM_GENERIC_BITOPS_FLS64_H_ 
# 27 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls64.h"
static 
# 27 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls64.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 27 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/fls64.h"
                      int fls64(__u64 x)
{
 if (x == 0)
  return 0;
 return __fls(x) + 1;
}
# 21 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/find.h" 1


#define _TOOLS_LINUX_ASM_GENERIC_BITOPS_FIND_H_ 
# 15 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(const unsigned long *addr, unsigned long
  size, unsigned long offset);
# 30 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/find.h"
extern unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset);
# 46 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/find.h"
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
     unsigned long offset);
# 60 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/find.h"
extern unsigned long find_first_bit(const unsigned long *addr,
        unsigned long size);
# 75 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/find.h"
unsigned long find_first_zero_bit(const unsigned long *addr, unsigned long size);
# 22 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2





# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/hweight.h" 1


#define _TOOLS_LINUX_ASM_GENERIC_BITOPS_HWEIGHT_H_ 

# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/arch_hweight.h" 1


#define _ASM_GENERIC_BITOPS_ARCH_HWEIGHT_H_ 



static inline unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 6 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/hweight.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/const_hweight.h" 1


#define _ASM_GENERIC_BITOPS_CONST_HWEIGHT_H_ 




#define __const_hweight8(w) ((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7)))))
# 19 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/const_hweight.h"
#define __const_hweight16(w) (__const_hweight8(w) + __const_hweight8((w) >> 8 ))
#define __const_hweight32(w) (__const_hweight16(w) + __const_hweight16((w) >> 16))
#define __const_hweight64(w) (__const_hweight32(w) + __const_hweight32((w) >> 32))




#define hweight8(w) (__builtin_constant_p(w) ? __const_hweight8(w) : __arch_hweight8(w))
#define hweight16(w) (__builtin_constant_p(w) ? __const_hweight16(w) : __arch_hweight16(w))
#define hweight32(w) (__builtin_constant_p(w) ? __const_hweight32(w) : __arch_hweight32(w))
#define hweight64(w) (__builtin_constant_p(w) ? __const_hweight64(w) : __arch_hweight64(w))




#define HWEIGHT8(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight8(w))
#define HWEIGHT16(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight16(w))
#define HWEIGHT32(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight32(w))
#define HWEIGHT64(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight64(w))




#define HWEIGHT(w) HWEIGHT64((u64)w)
# 7 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/hweight.h" 2
# 28 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2

# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h" 1


#define _TOOLS_LINUX_ASM_GENERIC_BITOPS_ATOMIC_H_ 




static inline void set_bit(int nr, unsigned long *addr)
{
 addr[nr / 
# 10 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h" 3 4
          64
# 10 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h"
                         ] |= 1UL << (nr % 
# 10 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h" 3 4
                                           64
# 10 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h"
                                                          );
}

static inline void clear_bit(int nr, unsigned long *addr)
{
 addr[nr / 
# 15 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h" 3 4
          64
# 15 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h"
                         ] &= ~(1UL << (nr % 
# 15 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h" 3 4
                                             64
# 15 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/atomic.h"
                                                            ));
}
# 30 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 1


#define _ASM_GENERIC_BITOPS_NON_ATOMIC_H_ 
# 16 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
static inline void __set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 18 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                     (8 * 8)
# 18 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 19 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                                             (8 * 8)
# 19 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                                             );

 *p |= mask;
}

static inline void __clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 26 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                     (8 * 8)
# 26 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 27 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                                             (8 * 8)
# 27 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                                             );

 *p &= ~mask;
}
# 41 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
static inline void __change_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 43 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                     (8 * 8)
# 43 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 44 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                                             (8 * 8)
# 44 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                                             );

 *p ^= mask;
}
# 58 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
static inline int __test_and_set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 60 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                     (8 * 8)
# 60 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 61 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                                             (8 * 8)
# 61 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                                             );
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 77 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
static inline int __test_and_clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 79 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                     (8 * 8)
# 79 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 80 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                                             (8 * 8)
# 80 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                                             );
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}


static inline int __test_and_change_bit(int nr,
         volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 91 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                     (8 * 8)
# 91 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 92 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                                             (8 * 8)
# 92 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                                             );
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}






static inline int test_bit(int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 
# 106 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                   (8 * 8)
# 106 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                   )] >> (nr & (
# 106 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h" 3 4
                                           (8 * 8)
# 106 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops/non-atomic.h"
                                                        -1)));
}
# 31 "/home/jmikedupont2/linux/tools/include/asm-generic/bitops.h" 2
# 34 "/home/jmikedupont2/linux/tools/include/linux/bitops.h" 2

#define for_each_set_bit(bit,addr,size) for ((bit) = find_first_bit((addr), (size)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))




#define for_each_clear_bit(bit,addr,size) for ((bit) = find_first_zero_bit((addr), (size)); (bit) < (size); (bit) = find_next_zero_bit((addr), (size), (bit) + 1))





#define for_each_set_bit_from(bit,addr,size) for ((bit) = find_next_bit((addr), (size), (bit)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))




static inline unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p(w) ? (((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!(((w) >> 32) & (1ULL << 0))) + (!!(((w) >> 32) & (1ULL << 1))) + (!!(((w) >> 32) & (1ULL << 2))) + (!!(((w) >> 32) & (1ULL << 3))) + (!!(((w) >> 32) & (1ULL << 4))) + (!!(((w) >> 32) & (1ULL << 5))) + (!!(((w) >> 32) & (1ULL << 6))) + (!!(((w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 32) >> 8) & (1ULL << 0))) + (!!((((w) >> 32) >> 8) & (1ULL << 1))) + (!!((((w) >> 32) >> 8) & (1ULL << 2))) + (!!((((w) >> 32) >> 8) & (1ULL << 3))) + (!!((((w) >> 32) >> 8) & (1ULL << 4))) + (!!((((w) >> 32) >> 8) & (1ULL << 5))) + (!!((((w) >> 32) >> 8) & (1ULL << 6))) + (!!((((w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((w) >> 32) >> 16) & (1ULL << 0))) + (!!((((w) >> 32) >> 16) & (1ULL << 1))) + (!!((((w) >> 32) >> 16) & (1ULL << 2))) + (!!((((w) >> 32) >> 16) & (1ULL << 3))) + (!!((((w) >> 32) >> 16) & (1ULL << 4))) + (!!((((w) >> 32) >> 16) & (1ULL << 5))) + (!!((((w) >> 32) >> 16) & (1ULL << 6))) + (!!((((w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64(w));
}

static inline unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}






static inline __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << shift) | (word >> ((-shift) & 31));
}
# 13 "util/dso.h" 2
# 1 "util/build-id.h" 1


#define PERF_BUILD_ID_H_ 1

#define BUILD_ID_SIZE 20
#define SBUILD_ID_SIZE (BUILD_ID_SIZE * 2 + 1)

# 1 "util/tool.h" 1


#define __PERF_TOOL_H 





struct perf_session;
union perf_event;
struct evlist;
struct evsel;
struct perf_sample;
struct perf_tool;
struct machine;
struct ordered_events;

typedef int (*event_sample)(struct perf_tool *tool, union perf_event *event,
       struct perf_sample *sample,
       struct evsel *evsel, struct machine *machine);

typedef int (*event_op)(struct perf_tool *tool, union perf_event *event,
   struct perf_sample *sample, struct machine *machine);

typedef int (*event_attr_op)(struct perf_tool *tool,
        union perf_event *event,
        struct evlist **pevlist);

typedef int (*event_op2)(struct perf_session *session, union perf_event *event);
typedef s64 (*event_op3)(struct perf_session *session, union perf_event *event);
typedef int (*event_op4)(struct perf_session *session, union perf_event *event, u64 data);

typedef int (*event_oe)(struct perf_tool *tool, union perf_event *event,
   struct ordered_events *oe);

enum show_feature_header {
 SHOW_FEAT_NO_HEADER = 0,
 SHOW_FEAT_HEADER,
 SHOW_FEAT_HEADER_FULL_INFO,
};

struct perf_tool {
 event_sample sample,
   read;
 event_op mmap,
   mmap2,
   comm,
   namespaces,
   fork,
   exit,
   lost,
   lost_samples,
   aux,
   itrace_start,
   context_switch,
   throttle,
   unthrottle,
   ksymbol,
   bpf;

 event_attr_op attr;
 event_attr_op event_update;
 event_op2 tracing_data;
 event_oe finished_round;
 event_op2 build_id,
   id_index,
   auxtrace_info,
   auxtrace_error,
   time_conv,
   thread_map,
   cpu_map,
   stat_config,
   stat,
   stat_round,
   feature;
 event_op4 compressed;
 event_op3 auxtrace;
 
# 78 "util/tool.h" 3 4
_Bool 
# 78 "util/tool.h"
      ordered_events;
 
# 79 "util/tool.h" 3 4
_Bool 
# 79 "util/tool.h"
      ordering_requires_timestamps;
 
# 80 "util/tool.h" 3 4
_Bool 
# 80 "util/tool.h"
      namespace_events;
 
# 81 "util/tool.h" 3 4
_Bool 
# 81 "util/tool.h"
      no_warn;
 enum show_feature_header show_feat_hdr;
};
# 9 "util/build-id.h" 2


struct nsinfo;

extern struct perf_tool build_id__mark_dso_hit_ops;
struct dso;
struct feat_fd;

int build_id__sprintf(const u8 *build_id, int len, char *bf);
int sysfs__sprintf_build_id(const char *root_dir, char *sbuild_id);
int filename__sprintf_build_id(const char *pathname, char *sbuild_id);
char *build_id_cache__kallsyms_path(const char *sbuild_id, char *bf,
        size_t size);

char *dso__build_id_filename(const struct dso *dso, char *bf, size_t size,
        
# 24 "util/build-id.h" 3 4
       _Bool 
# 24 "util/build-id.h"
            is_debug);

int build_id__mark_dso_hit(struct perf_tool *tool, union perf_event *event,
      struct perf_sample *sample, struct evsel *evsel,
      struct machine *machine);

int dsos__hit_all(struct perf_session *session);


# 32 "util/build-id.h" 3 4
_Bool 
# 32 "util/build-id.h"
    perf_session__read_build_ids(struct perf_session *session, 
# 32 "util/build-id.h" 3 4
                                                               _Bool 
# 32 "util/build-id.h"
                                                                    with_hits);
int perf_session__write_buildid_table(struct perf_session *session,
          struct feat_fd *fd);
int perf_session__cache_build_ids(struct perf_session *session);

char *build_id_cache__origname(const char *sbuild_id);
char *build_id_cache__linkname(const char *sbuild_id, char *bf, size_t size);
char *build_id_cache__cachedir(const char *sbuild_id, const char *name,
          struct nsinfo *nsi, 
# 40 "util/build-id.h" 3 4
                             _Bool 
# 40 "util/build-id.h"
                                  is_kallsyms,
          
# 41 "util/build-id.h" 3 4
         _Bool 
# 41 "util/build-id.h"
              is_vdso);

struct strlist;

struct strlist *build_id_cache__list_all(
# 45 "util/build-id.h" 3 4
                                        _Bool 
# 45 "util/build-id.h"
                                             validonly);
char *build_id_cache__complement(const char *incomplete_sbuild_id);
int build_id_cache__list_build_ids(const char *pathname, struct nsinfo *nsi,
       struct strlist **result);

# 49 "util/build-id.h" 3 4
_Bool 
# 49 "util/build-id.h"
    build_id_cache__cached(const char *sbuild_id);
int build_id_cache__add_s(const char *sbuild_id,
     const char *name, struct nsinfo *nsi,
     
# 52 "util/build-id.h" 3 4
    _Bool 
# 52 "util/build-id.h"
         is_kallsyms, 
# 52 "util/build-id.h" 3 4
                      _Bool 
# 52 "util/build-id.h"
                           is_vdso);
int build_id_cache__remove_s(const char *sbuild_id);

extern char buildid_dir[];

void set_buildid_dir(const char *dir);
void disable_buildid_cache(void);
# 14 "util/dso.h" 2

struct machine;
struct map;
struct perf_env;

#define DSO__NAME_KALLSYMS "[kernel.kallsyms]"
#define DSO__NAME_KCORE "[kernel.kcore]"

enum dso_binary_type {
 DSO_BINARY_TYPE__KALLSYMS = 0,
 DSO_BINARY_TYPE__GUEST_KALLSYMS,
 DSO_BINARY_TYPE__VMLINUX,
 DSO_BINARY_TYPE__GUEST_VMLINUX,
 DSO_BINARY_TYPE__JAVA_JIT,
 DSO_BINARY_TYPE__DEBUGLINK,
 DSO_BINARY_TYPE__BUILD_ID_CACHE,
 DSO_BINARY_TYPE__BUILD_ID_CACHE_DEBUGINFO,
 DSO_BINARY_TYPE__FEDORA_DEBUGINFO,
 DSO_BINARY_TYPE__UBUNTU_DEBUGINFO,
 DSO_BINARY_TYPE__BUILDID_DEBUGINFO,
 DSO_BINARY_TYPE__SYSTEM_PATH_DSO,
 DSO_BINARY_TYPE__GUEST_KMODULE,
 DSO_BINARY_TYPE__GUEST_KMODULE_COMP,
 DSO_BINARY_TYPE__SYSTEM_PATH_KMODULE,
 DSO_BINARY_TYPE__SYSTEM_PATH_KMODULE_COMP,
 DSO_BINARY_TYPE__KCORE,
 DSO_BINARY_TYPE__GUEST_KCORE,
 DSO_BINARY_TYPE__OPENEMBEDDED_DEBUGINFO,
 DSO_BINARY_TYPE__BPF_PROG_INFO,
 DSO_BINARY_TYPE__NOT_FOUND,
};

enum dso_kernel_type {
 DSO_TYPE_USER = 0,
 DSO_TYPE_KERNEL,
 DSO_TYPE_GUEST_KERNEL
};

enum dso_swap_type {
 DSO_SWAP__UNSET,
 DSO_SWAP__NO,
 DSO_SWAP__YES,
};

enum dso_data_status {
 DSO_DATA_STATUS_ERROR = -1,
 DSO_DATA_STATUS_UNKNOWN = 0,
 DSO_DATA_STATUS_OK = 1,
};

enum dso_data_status_seen {
 DSO_DATA_STATUS_SEEN_ITRACE,
};

enum dso_type {
 DSO__TYPE_UNKNOWN,
 DSO__TYPE_64BIT,
 DSO__TYPE_32BIT,
 DSO__TYPE_X32BIT,
};

enum dso_load_errno {
 DSO_LOAD_ERRNO__SUCCESS = 0,
# 85 "util/dso.h"
 __DSO_LOAD_ERRNO__START = -10000,

 DSO_LOAD_ERRNO__INTERNAL_ERROR = __DSO_LOAD_ERRNO__START,


 DSO_LOAD_ERRNO__INVALID_ELF,
 DSO_LOAD_ERRNO__CANNOT_READ_BUILDID,
 DSO_LOAD_ERRNO__MISMATCHING_BUILDID,


 DSO_LOAD_ERRNO__DECOMPRESSION_FAILURE,

 __DSO_LOAD_ERRNO__END,
};

#define DSO__SWAP(dso,type,val) ({ type ____r = val; BUG_ON(dso->needs_swap == DSO_SWAP__UNSET); if (dso->needs_swap == DSO_SWAP__YES) { switch (sizeof(____r)) { case 2: ____r = bswap_16(val); break; case 4: ____r = bswap_32(val); break; case 8: ____r = bswap_64(val); break; default: BUG_ON(1); } } ____r; })
# 122 "util/dso.h"
#define DSO__DATA_CACHE_SIZE 4096
#define DSO__DATA_CACHE_MASK ~(DSO__DATA_CACHE_SIZE - 1)




struct dso_id {
 u32 maj;
 u32 min;
 u64 ino;
 u64 ino_generation;
};

struct dso_cache {
 struct rb_node rb_node;
 u64 offset;
 u64 size;
 char data[0];
};

struct auxtrace_cache;

struct dso {
 pthread_mutex_t lock;
 struct list_head node;
 struct rb_node rb_node;
 struct rb_root *root;
 struct rb_root_cached symbols;
 struct rb_root_cached symbol_names;
 struct rb_root_cached inlined_nodes;
 struct rb_root_cached srclines;
 struct {
  u64 addr;
  struct symbol *symbol;
 } last_find_result;
 void *a2l;
 char *symsrc_filename;
 unsigned int a2l_fails;
 enum dso_kernel_type kernel;
 enum dso_swap_type needs_swap;
 enum dso_binary_type symtab_type;
 enum dso_binary_type binary_type;
 enum dso_load_errno load_errno;
 u8 adjust_symbols:1;
 u8 has_build_id:1;
 u8 has_srcline:1;
 u8 hit:1;
 u8 annotate_warned:1;
 u8 short_name_allocated:1;
 u8 long_name_allocated:1;
 u8 is_64_bit:1;
 
# 173 "util/dso.h" 3 4
_Bool 
# 173 "util/dso.h"
       sorted_by_name;
 
# 174 "util/dso.h" 3 4
_Bool 
# 174 "util/dso.h"
       loaded;
 u8 rel;
 u8 build_id[20];
 u64 text_offset;
 const char *short_name;
 const char *long_name;
 u16 long_name_len;
 u16 short_name_len;
 void *dwfl;
 struct auxtrace_cache *auxtrace_cache;
 int comp;


 struct {
  struct rb_root cache;
  int fd;
  int status;
  u32 status_seen;
  size_t file_size;
  struct list_head open_entry;
  u64 debug_frame_offset;
  u64 eh_frame_hdr_offset;
 } data;

 struct {
  u32 id;
  u32 sub_id;
  struct perf_env *env;
 } bpf_prog;

 union {
  void *priv;
  u64 db_id;
 };
 struct nsinfo *nsinfo;
 struct dso_id id;
 refcount_t refcnt;
 char name[0];
};







#define dso__for_each_symbol(dso,pos,n) symbols__for_each_entry(&(dso)->symbols, pos, n)


static inline void dso__set_loaded(struct dso *dso)
{
 dso->loaded = 
# 225 "util/dso.h" 3 4
              1
# 225 "util/dso.h"
                  ;
}

struct dso *dso__new_id(const char *name, struct dso_id *id);
struct dso *dso__new(const char *name);
void dso__delete(struct dso *dso);

int dso__cmp_id(struct dso *a, struct dso *b);
void dso__set_short_name(struct dso *dso, const char *name, 
# 233 "util/dso.h" 3 4
                                                           _Bool 
# 233 "util/dso.h"
                                                                name_allocated);
void dso__set_long_name(struct dso *dso, const char *name, 
# 234 "util/dso.h" 3 4
                                                          _Bool 
# 234 "util/dso.h"
                                                               name_allocated);

int dso__name_len(const struct dso *dso);

struct dso *dso__get(struct dso *dso);
void dso__put(struct dso *dso);

static inline void __dso__zput(struct dso **dso)
{
 dso__put(*dso);
 *dso = 
# 244 "util/dso.h" 3 4
       ((void *)0)
# 244 "util/dso.h"
           ;
}

#define dso__zput(dso) __dso__zput(&dso)


# 249 "util/dso.h" 3 4
_Bool 
# 249 "util/dso.h"
    dso__loaded(const struct dso *dso);

static inline 
# 251 "util/dso.h" 3 4
             _Bool 
# 251 "util/dso.h"
                  dso__has_symbols(const struct dso *dso)
{
 return !(({ union { typeof((&dso->symbols.rb_root)->rb_node) __val; char __c[1]; } __u = { .__c = { 0 } }; __read_once_size(&((&dso->symbols.rb_root)->rb_node), __u.__c, sizeof((&dso->symbols.rb_root)->rb_node)); __u.__val; }) == 
# 253 "util/dso.h" 3 4
        ((void *)0)
# 253 "util/dso.h"
        );
}


# 256 "util/dso.h" 3 4
_Bool 
# 256 "util/dso.h"
    dso__sorted_by_name(const struct dso *dso);
void dso__set_sorted_by_name(struct dso *dso);
void dso__sort_by_name(struct dso *dso);

void dso__set_build_id(struct dso *dso, void *build_id);

# 261 "util/dso.h" 3 4
_Bool 
# 261 "util/dso.h"
    dso__build_id_equal(const struct dso *dso, u8 *build_id);
void dso__read_running_kernel_build_id(struct dso *dso,
           struct machine *machine);
int dso__kernel_module_get_build_id(struct dso *dso, const char *root_dir);

char dso__symtab_origin(const struct dso *dso);
int dso__read_binary_type_filename(const struct dso *dso, enum dso_binary_type type,
       char *root_dir, char *filename, size_t size);

# 269 "util/dso.h" 3 4
_Bool 
# 269 "util/dso.h"
    is_kernel_module(const char *pathname, int cpumode);

# 270 "util/dso.h" 3 4
_Bool 
# 270 "util/dso.h"
    dso__needs_decompress(struct dso *dso);
int dso__decompress_kmodule_fd(struct dso *dso, const char *name);
int dso__decompress_kmodule_path(struct dso *dso, const char *name,
     char *pathname, size_t len);

#define KMOD_DECOMP_NAME "/tmp/perf-kmod-XXXXXX"
#define KMOD_DECOMP_LEN sizeof(KMOD_DECOMP_NAME)

struct kmod_path {
 char *name;
 int comp;
 
# 281 "util/dso.h" 3 4
_Bool 
# 281 "util/dso.h"
      kmod;
};

int __kmod_path__parse(struct kmod_path *m, const char *path,
       
# 285 "util/dso.h" 3 4
      _Bool 
# 285 "util/dso.h"
           alloc_name);

#define kmod_path__parse(__m,__p) __kmod_path__parse(__m, __p, false)
#define kmod_path__parse_name(__m,__p) __kmod_path__parse(__m, __p, true)

void dso__set_module_info(struct dso *dso, struct kmod_path *m,
     struct machine *machine);
# 338 "util/dso.h"
int dso__data_get_fd(struct dso *dso, struct machine *machine);
void dso__data_put_fd(struct dso *dso);
void dso__data_close(struct dso *dso);

int dso__data_file_size(struct dso *dso, struct machine *machine);
off_t dso__data_size(struct dso *dso, struct machine *machine);
ssize_t dso__data_read_offset(struct dso *dso, struct machine *machine,
         u64 offset, u8 *data, ssize_t size);
ssize_t dso__data_read_addr(struct dso *dso, struct map *map,
       struct machine *machine, u64 addr,
       u8 *data, ssize_t size);

# 349 "util/dso.h" 3 4
_Bool 
# 349 "util/dso.h"
    dso__data_status_seen(struct dso *dso, enum dso_data_status_seen by);
ssize_t dso__data_write_cache_offs(struct dso *dso, struct machine *machine,
       u64 offset, const u8 *data, ssize_t size);
ssize_t dso__data_write_cache_addr(struct dso *dso, struct map *map,
       struct machine *machine, u64 addr,
       const u8 *data, ssize_t size);

struct map *dso__new_map(const char *name);
struct dso *machine__findnew_kernel(struct machine *machine, const char *name,
        const char *short_name, int dso_type);

void dso__reset_find_symbol_cache(struct dso *dso);

size_t dso__fprintf_buildid(struct dso *dso, FILE *fp);
size_t dso__fprintf_symbols_by_name(struct dso *dso, FILE *fp);
size_t dso__fprintf(struct dso *dso, FILE *fp);

static inline 
# 366 "util/dso.h" 3 4
             _Bool 
# 366 "util/dso.h"
                  dso__is_vmlinux(struct dso *dso)
{
 return dso->binary_type == DSO_BINARY_TYPE__VMLINUX ||
        dso->binary_type == DSO_BINARY_TYPE__GUEST_VMLINUX;
}

static inline 
# 372 "util/dso.h" 3 4
             _Bool 
# 372 "util/dso.h"
                  dso__is_kcore(struct dso *dso)
{
 return dso->binary_type == DSO_BINARY_TYPE__KCORE ||
        dso->binary_type == DSO_BINARY_TYPE__GUEST_KCORE;
}

static inline 
# 378 "util/dso.h" 3 4
             _Bool 
# 378 "util/dso.h"
                  dso__is_kallsyms(struct dso *dso)
{
 return dso->kernel && dso->long_name[0] != '/';
}

void dso__free_a2l(struct dso *dso);

enum dso_type dso__type(struct dso *dso, struct machine *machine);

int dso__strerror_load(struct dso *dso, char *buf, size_t buflen);

void reset_fd_limit(void);
# 29 "builtin-trace.c" 2
# 1 "util/env.h" 1


#define __PERF_ENV_H 



# 1 "util/rwsem.h" 1

#define _PERF_RWSEM_H 



struct rw_semaphore {
 pthread_rwlock_t lock;
};

int init_rwsem(struct rw_semaphore *sem);
int exit_rwsem(struct rw_semaphore *sem);

int down_read(struct rw_semaphore *sem);
int up_read(struct rw_semaphore *sem);

int down_write(struct rw_semaphore *sem);
int up_write(struct rw_semaphore *sem);
# 8 "util/env.h" 2

struct perf_cpu_map;

struct cpu_topology_map {
 int socket_id;
 int die_id;
 int core_id;
};

struct cpu_cache_level {
 u32 level;
 u32 line_size;
 u32 sets;
 u32 ways;
 char *type;
 char *size;
 char *map;
};

struct numa_node {
 u32 node;
 u64 mem_total;
 u64 mem_free;
 struct perf_cpu_map *map;
};

struct memory_node {
 u64 node;
 u64 size;
 unsigned long *set;
};

struct perf_env {
 char *hostname;
 char *os_release;
 char *version;
 char *arch;
 int nr_cpus_online;
 int nr_cpus_avail;
 char *cpu_desc;
 char *cpuid;
 unsigned long long total_mem;
 unsigned int msr_pmu_type;

 int nr_cmdline;
 int nr_sibling_cores;
 int nr_sibling_dies;
 int nr_sibling_threads;
 int nr_numa_nodes;
 int nr_memory_nodes;
 int nr_pmu_mappings;
 int nr_groups;
 char *cmdline;
 const char **cmdline_argv;
 char *sibling_cores;
 char *sibling_dies;
 char *sibling_threads;
 char *pmu_mappings;
 struct cpu_topology_map *cpu;
 struct cpu_cache_level *caches;
 int caches_cnt;
 u32 comp_ratio;
 u32 comp_ver;
 u32 comp_type;
 u32 comp_level;
 u32 comp_mmap_len;
 struct numa_node *numa_nodes;
 struct memory_node *memory_nodes;
 unsigned long long memory_bsize;
 u64 clockid_res_ns;





 struct {
  struct rw_semaphore lock;
  struct rb_root infos;
  u32 infos_cnt;
  struct rb_root btfs;
  u32 btfs_cnt;
 } bpf_progs;


 int *numa_map;
 int nr_numa_map;
};

enum perf_compress_type {
 PERF_COMP_NONE = 0,
 PERF_COMP_ZSTD,
 PERF_COMP_MAX
};

struct bpf_prog_info_node;
struct btf_node;

extern struct perf_env perf_env;

void perf_env__exit(struct perf_env *env);

int perf_env__set_cmdline(struct perf_env *env, int argc, const char *argv[]);

int perf_env__read_cpuid(struct perf_env *env);
int perf_env__read_cpu_topology_map(struct perf_env *env);

void cpu_cache_level__free(struct cpu_cache_level *cache);

const char *perf_env__arch(struct perf_env *env);
const char *perf_env__raw_arch(struct perf_env *env);
int perf_env__nr_cpus_avail(struct perf_env *env);

void perf_env__init(struct perf_env *env);
void perf_env__insert_bpf_prog_info(struct perf_env *env,
        struct bpf_prog_info_node *info_node);
struct bpf_prog_info_node *perf_env__find_bpf_prog_info(struct perf_env *env,
       __u32 prog_id);
void perf_env__insert_btf(struct perf_env *env, struct btf_node *btf_node);
struct btf_node *perf_env__find_btf(struct perf_env *env, __u32 btf_id);

int perf_env__numa_node(struct perf_env *env, int cpu);
# 30 "builtin-trace.c" 2
# 1 "util/event.h" 1


#define __PERF_RECORD_H 
# 12 "util/event.h"
# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/event.h" 1


#define __LIBPERF_EVENT_H 







struct perf_record_mmap {
 struct perf_event_header header;
 __u32 pid, tid;
 __u64 start;
 __u64 len;
 __u64 pgoff;
 char filename[
# 17 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/event.h" 3 4
                 4096
# 17 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/event.h"
                         ];
};

struct perf_record_mmap2 {
 struct perf_event_header header;
 __u32 pid, tid;
 __u64 start;
 __u64 len;
 __u64 pgoff;
 __u32 maj;
 __u32 min;
 __u64 ino;
 __u64 ino_generation;
 __u32 prot;
 __u32 flags;
 char filename[
# 32 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/event.h" 3 4
                 4096
# 32 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/event.h"
                         ];
};

struct perf_record_comm {
 struct perf_event_header header;
 __u32 pid, tid;
 char comm[16];
};

struct perf_record_namespaces {
 struct perf_event_header header;
 __u32 pid, tid;
 __u64 nr_namespaces;
 struct perf_ns_link_info link_info[];
};

struct perf_record_fork {
 struct perf_event_header header;
 __u32 pid, ppid;
 __u32 tid, ptid;
 __u64 time;
};

struct perf_record_lost {
 struct perf_event_header header;
 __u64 id;
 __u64 lost;
};

struct perf_record_lost_samples {
 struct perf_event_header header;
 __u64 lost;
};




struct perf_record_read {
 struct perf_event_header header;
 __u32 pid, tid;
 __u64 value;
 __u64 time_enabled;
 __u64 time_running;
 __u64 id;
};

struct perf_record_throttle {
 struct perf_event_header header;
 __u64 time;
 __u64 id;
 __u64 stream_id;
};


#define KSYM_NAME_LEN 256


struct perf_record_ksymbol {
 struct perf_event_header header;
 __u64 addr;
 __u32 len;
 __u16 ksym_type;
 __u16 flags;
 char name[256];
};

struct perf_record_bpf_event {
 struct perf_event_header header;
 __u16 type;
 __u16 flags;
 __u32 id;


 __u8 tag[8];
};

struct perf_record_sample {
 struct perf_event_header header;
 __u64 array[];
};

struct perf_record_switch {
 struct perf_event_header header;
 __u32 next_prev_pid;
 __u32 next_prev_tid;
};

struct perf_record_header_attr {
 struct perf_event_header header;
 struct perf_event_attr attr;
 __u64 id[];
};

enum {
 PERF_CPU_MAP__CPUS = 0,
 PERF_CPU_MAP__MASK = 1,
};

struct cpu_map_entries {
 __u16 nr;
 __u16 cpu[];
};

struct perf_record_record_cpu_map {
 __u16 nr;
 __u16 long_size;
 unsigned long mask[];
};

struct perf_record_cpu_map_data {
 __u16 type;
 char data[];
};

struct perf_record_cpu_map {
 struct perf_event_header header;
 struct perf_record_cpu_map_data data;
};

enum {
 PERF_EVENT_UPDATE__UNIT = 0,
 PERF_EVENT_UPDATE__SCALE = 1,
 PERF_EVENT_UPDATE__NAME = 2,
 PERF_EVENT_UPDATE__CPUS = 3,
};

struct perf_record_event_update_cpus {
 struct perf_record_cpu_map_data cpus;
};

struct perf_record_event_update_scale {
 double scale;
};

struct perf_record_event_update {
 struct perf_event_header header;
 __u64 type;
 __u64 id;
 char data[];
};

#define MAX_EVENT_NAME 64

struct perf_trace_event_type {
 __u64 event_id;
 char name[64];
};

struct perf_record_header_event_type {
 struct perf_event_header header;
 struct perf_trace_event_type event_type;
};

struct perf_record_header_tracing_data {
 struct perf_event_header header;
 __u32 size;
};

struct perf_record_header_build_id {
 struct perf_event_header header;
 pid_t pid;
 __u8 build_id[24];
 char filename[];
};

struct id_index_entry {
 __u64 id;
 __u64 idx;
 __u64 cpu;
 __u64 tid;
};

struct perf_record_id_index {
 struct perf_event_header header;
 __u64 nr;
 struct id_index_entry entries[0];
};

struct perf_record_auxtrace_info {
 struct perf_event_header header;
 __u32 type;
 __u32 reserved__;
 __u64 priv[];
};

struct perf_record_auxtrace {
 struct perf_event_header header;
 __u64 size;
 __u64 offset;
 __u64 reference;
 __u32 idx;
 __u32 tid;
 __u32 cpu;
 __u32 reserved__;
};

#define MAX_AUXTRACE_ERROR_MSG 64

struct perf_record_auxtrace_error {
 struct perf_event_header header;
 __u32 type;
 __u32 code;
 __u32 cpu;
 __u32 pid;
 __u32 tid;
 __u32 fmt;
 __u64 ip;
 __u64 time;
 char msg[64];
};

struct perf_record_aux {
 struct perf_event_header header;
 __u64 aux_offset;
 __u64 aux_size;
 __u64 flags;
};

struct perf_record_itrace_start {
 struct perf_event_header header;
 __u32 pid;
 __u32 tid;
};

struct perf_record_thread_map_entry {
 __u64 pid;
 char comm[16];
};

struct perf_record_thread_map {
 struct perf_event_header header;
 __u64 nr;
 struct perf_record_thread_map_entry entries[];
};

enum {
 PERF_STAT_CONFIG_TERM__AGGR_MODE = 0,
 PERF_STAT_CONFIG_TERM__INTERVAL = 1,
 PERF_STAT_CONFIG_TERM__SCALE = 2,
 PERF_STAT_CONFIG_TERM__MAX = 3,
};

struct perf_record_stat_config_entry {
 __u64 tag;
 __u64 val;
};

struct perf_record_stat_config {
 struct perf_event_header header;
 __u64 nr;
 struct perf_record_stat_config_entry data[];
};

struct perf_record_stat {
 struct perf_event_header header;

 __u64 id;
 __u32 cpu;
 __u32 thread;

 union {
  struct {
   __u64 val;
   __u64 ena;
   __u64 run;
  };
  __u64 values[3];
 };
};

struct perf_record_stat_round {
 struct perf_event_header header;
 __u64 type;
 __u64 time;
};

struct perf_record_time_conv {
 struct perf_event_header header;
 __u64 time_shift;
 __u64 time_mult;
 __u64 time_zero;
};

struct perf_record_header_feature {
 struct perf_event_header header;
 __u64 feat_id;
 char data[];
};

struct perf_record_compressed {
 struct perf_event_header header;
 char data[];
};

enum perf_user_event_type {
 PERF_RECORD_USER_TYPE_START = 64,
 PERF_RECORD_HEADER_ATTR = 64,
 PERF_RECORD_HEADER_EVENT_TYPE = 65,
 PERF_RECORD_HEADER_TRACING_DATA = 66,
 PERF_RECORD_HEADER_BUILD_ID = 67,
 PERF_RECORD_FINISHED_ROUND = 68,
 PERF_RECORD_ID_INDEX = 69,
 PERF_RECORD_AUXTRACE_INFO = 70,
 PERF_RECORD_AUXTRACE = 71,
 PERF_RECORD_AUXTRACE_ERROR = 72,
 PERF_RECORD_THREAD_MAP = 73,
 PERF_RECORD_CPU_MAP = 74,
 PERF_RECORD_STAT_CONFIG = 75,
 PERF_RECORD_STAT = 76,
 PERF_RECORD_STAT_ROUND = 77,
 PERF_RECORD_EVENT_UPDATE = 78,
 PERF_RECORD_TIME_CONV = 79,
 PERF_RECORD_HEADER_FEATURE = 80,
 PERF_RECORD_COMPRESSED = 81,
 PERF_RECORD_HEADER_MAX
};

union perf_event {
 struct perf_event_header header;
 struct perf_record_mmap mmap;
 struct perf_record_mmap2 mmap2;
 struct perf_record_comm comm;
 struct perf_record_namespaces namespaces;
 struct perf_record_fork fork;
 struct perf_record_lost lost;
 struct perf_record_lost_samples lost_samples;
 struct perf_record_read read;
 struct perf_record_throttle throttle;
 struct perf_record_sample sample;
 struct perf_record_bpf_event bpf;
 struct perf_record_ksymbol ksymbol;
 struct perf_record_header_attr attr;
 struct perf_record_event_update event_update;
 struct perf_record_header_event_type event_type;
 struct perf_record_header_tracing_data tracing_data;
 struct perf_record_header_build_id build_id;
 struct perf_record_id_index id_index;
 struct perf_record_auxtrace_info auxtrace_info;
 struct perf_record_auxtrace auxtrace;
 struct perf_record_auxtrace_error auxtrace_error;
 struct perf_record_aux aux;
 struct perf_record_itrace_start itrace_start;
 struct perf_record_switch context_switch;
 struct perf_record_thread_map thread_map;
 struct perf_record_cpu_map cpu_map;
 struct perf_record_stat_config stat_config;
 struct perf_record_stat stat;
 struct perf_record_stat_round stat_round;
 struct perf_record_time_conv time_conv;
 struct perf_record_header_feature feat;
 struct perf_record_compressed pack;
};
# 13 "util/event.h" 2


# 1 "util/perf_regs.h" 1


#define __PERF_REGS_H 




struct regs_dump;

struct sample_reg {
 const char *name;
 uint64_t mask;
};
#define SMPL_REG(n,b) { .name = #n, .mask = 1ULL << (b) }
#define SMPL_REG2(n,b) { .name = #n, .mask = 3ULL << (b) }
#define SMPL_REG_END { .name = NULL }

enum {
 SDT_ARG_VALID = 0,
 SDT_ARG_SKIP,
};

int arch_sdt_arg_parse_op(char *old_op, char **new_op);
uint64_t arch__intr_reg_mask(void);
uint64_t arch__user_reg_mask(void);


extern const struct sample_reg sample_reg_masks[];

# 1 "/home/jmikedupont2/linux/tools/perf/arch/x86/include/perf_regs.h" 1


#define ARCH_PERF_REGS_H 

# 1 "/usr/include/stdlib.h" 1 3 4
# 27 "/usr/include/stdlib.h" 3 4
#define __need_size_t 

#define __need_wchar_t 
#define __need_NULL 

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 33 "/usr/include/stdlib.h" 2 3 4




#define _STDLIB_H 1



# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
#define WNOHANG 1
#define WUNTRACED 2


#define WSTOPPED 2
#define WEXITED 4
#define WCONTINUED 8
#define WNOWAIT 0x01000000

#define __WNOTHREAD 0x20000000

#define __WALL 0x40000000
#define __WCLONE 0x80000000




#define __ENUM_IDTYPE_T 1



#undef P_ALL
#undef P_PID
#undef P_PGID


# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
#define __WEXITSTATUS(status) (((status) & 0xff00) >> 8)


#define __WTERMSIG(status) ((status) & 0x7f)


#define __WSTOPSIG(status) __WEXITSTATUS(status)


#define __WIFEXITED(status) (__WTERMSIG(status) == 0)


#define __WIFSIGNALED(status) (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)



#define __WIFSTOPPED(status) (((status) & 0xff) == 0x7f)




#define __WIFCONTINUED(status) ((status) == __W_CONTINUED)



#define __WCOREDUMP(status) ((status) & __WCOREFLAG)


#define __W_EXITCODE(ret,sig) ((ret) << 8 | (sig))
#define __W_STOPCODE(sig) ((sig) << 8 | 0x7f)
#define __W_CONTINUED 0xffff
#define __WCOREFLAG 0x80
# 43 "/usr/include/stdlib.h" 2 3 4


#define WEXITSTATUS(status) __WEXITSTATUS (status)
#define WTERMSIG(status) __WTERMSIG (status)
#define WSTOPSIG(status) __WSTOPSIG (status)
#define WIFEXITED(status) __WIFEXITED (status)
#define WIFSIGNALED(status) __WIFSIGNALED (status)
#define WIFSTOPPED(status) __WIFSTOPPED (status)

#define WIFCONTINUED(status) __WIFCONTINUED (status)





typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;
#define __ldiv_t_defined 1






__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
#define __lldiv_t_defined 1





#define RAND_MAX 2147483647




#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0



#define MB_CUR_MAX (__ctype_get_mb_cur_max ())
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 200 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) atoi (const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__ , __leaf__)) atol (const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__ , __leaf__)) atoll (const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}

# 266 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 282 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int ;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 435 "/usr/include/stdlib.h" 3 4






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 19 "/usr/include/alloca.h" 3 4
#define _ALLOCA_H 1



#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 25 "/usr/include/alloca.h" 2 3 4




#undef alloca


extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));


#define alloca(size) __builtin_alloca (size)



# 454 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 567 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 583 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __asm__ ("" "mkstemp64")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 605 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __asm__ ("" "mkstemps64")
                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 623 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 637 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __asm__ ("" "mkostemp64")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 658 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags) __asm__ ("" "mkostemps64")

     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));









extern int system (const char *__command) __attribute__ ((__warn_unused_result__));






extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 694 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





#define __COMPAR_FN_T 
typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return ((void *)0);
}
# 721 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));

# 772 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 859 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));





extern void setkey (const char *__key) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 921 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__ , __leaf__)) atof (const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}

# 922 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) __asm__ ("" "realpath") __attribute__ ((__nothrow__ , __leaf__))

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) __asm__ ("" "__realpath_chk") __attribute__ ((__nothrow__ , __leaf__))


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved)
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {

      if (__builtin_object_size (__resolved, 2 > 1) < 4096)
 return __realpath_chk_warn (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));

      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ptsname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ptsname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) __asm__ ("" "wctomb") __attribute__ ((__nothrow__ , __leaf__))
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__nothrow__ , __leaf__)) wctomb (char *__s, wchar_t __wchar)
{



#define __STDLIB_MB_LEN_MAX 16



  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) __asm__ ("" "mbstowcs") __attribute__ ((__nothrow__ , __leaf__))


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__mbstowcs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len)

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) __asm__ ("" "wcstombs") __attribute__ ((__nothrow__ , __leaf__))


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__wcstombs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len)

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 926 "/usr/include/stdlib.h" 2 3 4






#undef __need_malloc_and_calloc


# 6 "/home/jmikedupont2/linux/tools/perf/arch/x86/include/perf_regs.h" 2

# 1 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/perf_regs.h" 1


#define _ASM_X86_PERF_REGS_H 


# 5 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/perf_regs.h"
enum perf_event_x86_regs {
 PERF_REG_X86_AX,
 PERF_REG_X86_BX,
 PERF_REG_X86_CX,
 PERF_REG_X86_DX,
 PERF_REG_X86_SI,
 PERF_REG_X86_DI,
 PERF_REG_X86_BP,
 PERF_REG_X86_SP,
 PERF_REG_X86_IP,
 PERF_REG_X86_FLAGS,
 PERF_REG_X86_CS,
 PERF_REG_X86_SS,
 PERF_REG_X86_DS,
 PERF_REG_X86_ES,
 PERF_REG_X86_FS,
 PERF_REG_X86_GS,
 PERF_REG_X86_R8,
 PERF_REG_X86_R9,
 PERF_REG_X86_R10,
 PERF_REG_X86_R11,
 PERF_REG_X86_R12,
 PERF_REG_X86_R13,
 PERF_REG_X86_R14,
 PERF_REG_X86_R15,

 PERF_REG_X86_32_MAX = PERF_REG_X86_GS + 1,
 PERF_REG_X86_64_MAX = PERF_REG_X86_R15 + 1,


 PERF_REG_X86_XMM0 = 32,
 PERF_REG_X86_XMM1 = 34,
 PERF_REG_X86_XMM2 = 36,
 PERF_REG_X86_XMM3 = 38,
 PERF_REG_X86_XMM4 = 40,
 PERF_REG_X86_XMM5 = 42,
 PERF_REG_X86_XMM6 = 44,
 PERF_REG_X86_XMM7 = 46,
 PERF_REG_X86_XMM8 = 48,
 PERF_REG_X86_XMM9 = 50,
 PERF_REG_X86_XMM10 = 52,
 PERF_REG_X86_XMM11 = 54,
 PERF_REG_X86_XMM12 = 56,
 PERF_REG_X86_XMM13 = 58,
 PERF_REG_X86_XMM14 = 60,
 PERF_REG_X86_XMM15 = 62,


 PERF_REG_X86_XMM_MAX = PERF_REG_X86_XMM15 + 2,
};

#define PERF_REG_EXTENDED_MASK (~((1ULL << PERF_REG_X86_XMM0) - 1))
# 8 "/home/jmikedupont2/linux/tools/perf/arch/x86/include/perf_regs.h" 2

void perf_regs_load(u64 *regs);

#define PERF_REGS_MAX PERF_REG_X86_XMM_MAX




#define REG_NOSUPPORT ((1ULL << PERF_REG_X86_DS) | (1ULL << PERF_REG_X86_ES) | (1ULL << PERF_REG_X86_FS) | (1ULL << PERF_REG_X86_GS))



#define PERF_REGS_MASK (((1ULL << PERF_REG_X86_64_MAX) - 1) & ~REG_NOSUPPORT)
#define PERF_SAMPLE_REGS_ABI PERF_SAMPLE_REGS_ABI_64

#define PERF_REG_IP PERF_REG_X86_IP
#define PERF_REG_SP PERF_REG_X86_SP

static inline const char *perf_reg_name(int id)
{
 switch (id) {
 case PERF_REG_X86_AX:
  return "AX";
 case PERF_REG_X86_BX:
  return "BX";
 case PERF_REG_X86_CX:
  return "CX";
 case PERF_REG_X86_DX:
  return "DX";
 case PERF_REG_X86_SI:
  return "SI";
 case PERF_REG_X86_DI:
  return "DI";
 case PERF_REG_X86_BP:
  return "BP";
 case PERF_REG_X86_SP:
  return "SP";
 case PERF_REG_X86_IP:
  return "IP";
 case PERF_REG_X86_FLAGS:
  return "FLAGS";
 case PERF_REG_X86_CS:
  return "CS";
 case PERF_REG_X86_SS:
  return "SS";
 case PERF_REG_X86_DS:
  return "DS";
 case PERF_REG_X86_ES:
  return "ES";
 case PERF_REG_X86_FS:
  return "FS";
 case PERF_REG_X86_GS:
  return "GS";

 case PERF_REG_X86_R8:
  return "R8";
 case PERF_REG_X86_R9:
  return "R9";
 case PERF_REG_X86_R10:
  return "R10";
 case PERF_REG_X86_R11:
  return "R11";
 case PERF_REG_X86_R12:
  return "R12";
 case PERF_REG_X86_R13:
  return "R13";
 case PERF_REG_X86_R14:
  return "R14";
 case PERF_REG_X86_R15:
  return "R15";


#define XMM(x) case PERF_REG_X86_XMM ## x: case PERF_REG_X86_XMM ## x + 1: return "XMM" #x;



 case PERF_REG_X86_XMM0: case PERF_REG_X86_XMM0 + 1: return "XMM" "0";
 case PERF_REG_X86_XMM1: case PERF_REG_X86_XMM1 + 1: return "XMM" "1";
 case PERF_REG_X86_XMM2: case PERF_REG_X86_XMM2 + 1: return "XMM" "2";
 case PERF_REG_X86_XMM3: case PERF_REG_X86_XMM3 + 1: return "XMM" "3";
 case PERF_REG_X86_XMM4: case PERF_REG_X86_XMM4 + 1: return "XMM" "4";
 case PERF_REG_X86_XMM5: case PERF_REG_X86_XMM5 + 1: return "XMM" "5";
 case PERF_REG_X86_XMM6: case PERF_REG_X86_XMM6 + 1: return "XMM" "6";
 case PERF_REG_X86_XMM7: case PERF_REG_X86_XMM7 + 1: return "XMM" "7";
 case PERF_REG_X86_XMM8: case PERF_REG_X86_XMM8 + 1: return "XMM" "8";
 case PERF_REG_X86_XMM9: case PERF_REG_X86_XMM9 + 1: return "XMM" "9";
 case PERF_REG_X86_XMM10: case PERF_REG_X86_XMM10 + 1: return "XMM" "10";
 case PERF_REG_X86_XMM11: case PERF_REG_X86_XMM11 + 1: return "XMM" "11";
 case PERF_REG_X86_XMM12: case PERF_REG_X86_XMM12 + 1: return "XMM" "12";
 case PERF_REG_X86_XMM13: case PERF_REG_X86_XMM13 + 1: return "XMM" "13";
 case PERF_REG_X86_XMM14: case PERF_REG_X86_XMM14 + 1: return "XMM" "14";
 case PERF_REG_X86_XMM15: case PERF_REG_X86_XMM15 + 1: return "XMM" "15";
#undef XMM
 default:
  return 
# 102 "/home/jmikedupont2/linux/tools/perf/arch/x86/include/perf_regs.h" 3 4
        ((void *)0)
# 102 "/home/jmikedupont2/linux/tools/perf/arch/x86/include/perf_regs.h"
            ;
 }

 return 
# 105 "/home/jmikedupont2/linux/tools/perf/arch/x86/include/perf_regs.h" 3 4
       ((void *)0)
# 105 "/home/jmikedupont2/linux/tools/perf/arch/x86/include/perf_regs.h"
           ;
}
# 31 "util/perf_regs.h" 2

#define DWARF_MINIMAL_REGS ((1ULL << PERF_REG_IP) | (1ULL << PERF_REG_SP))

int perf_reg_value(u64 *valp, struct regs_dump *regs, int id);
# 16 "util/event.h" 2

struct dso;
struct machine;
struct perf_event_attr;
# 28 "util/event.h"
#define PRI_lu64 "l" PRIu64
#define PRI_lx64 "l" PRIx64
#define PRI_ld64 "l" PRId64






#define PERF_SAMPLE_MASK (PERF_SAMPLE_IP | PERF_SAMPLE_TID | PERF_SAMPLE_TIME | PERF_SAMPLE_ADDR | PERF_SAMPLE_ID | PERF_SAMPLE_STREAM_ID | PERF_SAMPLE_CPU | PERF_SAMPLE_PERIOD | PERF_SAMPLE_IDENTIFIER)







#define PERF_SAMPLE_MAX_SIZE (1 << 16)

struct regs_dump {
 u64 abi;
 u64 mask;
 u64 *regs;


 u64 cache_regs[PERF_REG_X86_XMM_MAX];
 u64 cache_mask;
};

struct stack_dump {
 u16 offset;
 u64 size;
 char *data;
};

struct sample_read_value {
 u64 value;
 u64 id;
};

struct sample_read {
 u64 time_enabled;
 u64 time_running;
 union {
  struct {
   u64 nr;
   struct sample_read_value *values;
  } group;
  struct sample_read_value one;
 };
};

struct ip_callchain {
 u64 nr;
 u64 ips[0];
};

struct branch_stack;

enum {
 PERF_IP_FLAG_BRANCH = 1ULL << 0,
 PERF_IP_FLAG_CALL = 1ULL << 1,
 PERF_IP_FLAG_RETURN = 1ULL << 2,
 PERF_IP_FLAG_CONDITIONAL = 1ULL << 3,
 PERF_IP_FLAG_SYSCALLRET = 1ULL << 4,
 PERF_IP_FLAG_ASYNC = 1ULL << 5,
 PERF_IP_FLAG_INTERRUPT = 1ULL << 6,
 PERF_IP_FLAG_TX_ABORT = 1ULL << 7,
 PERF_IP_FLAG_TRACE_BEGIN = 1ULL << 8,
 PERF_IP_FLAG_TRACE_END = 1ULL << 9,
 PERF_IP_FLAG_IN_TX = 1ULL << 10,
};

#define PERF_IP_FLAG_CHARS "bcrosyiABEx"

#define PERF_BRANCH_MASK ( PERF_IP_FLAG_BRANCH | PERF_IP_FLAG_CALL | PERF_IP_FLAG_RETURN | PERF_IP_FLAG_CONDITIONAL | PERF_IP_FLAG_SYSCALLRET | PERF_IP_FLAG_ASYNC | PERF_IP_FLAG_INTERRUPT | PERF_IP_FLAG_TX_ABORT | PERF_IP_FLAG_TRACE_BEGIN | PERF_IP_FLAG_TRACE_END)
# 115 "util/event.h"
#define MAX_INSN 16

struct aux_sample {
 u64 size;
 void *data;
};

struct perf_sample {
 u64 ip;
 u32 pid, tid;
 u64 time;
 u64 addr;
 u64 id;
 u64 stream_id;
 u64 period;
 u64 weight;
 u64 transaction;
 u64 insn_cnt;
 u64 cyc_cnt;
 u32 cpu;
 u32 raw_size;
 u64 data_src;
 u64 phys_addr;
 u32 flags;
 u16 insn_len;
 u8 cpumode;
 u16 misc;
 char insn[16];
 void *raw_data;
 struct ip_callchain *callchain;
 struct branch_stack *branch_stack;
 struct regs_dump user_regs;
 struct regs_dump intr_regs;
 struct stack_dump user_stack;
 struct sample_read read;
 struct aux_sample aux_sample;
};

#define PERF_MEM_DATA_SRC_NONE (PERF_MEM_S(OP, NA) | PERF_MEM_S(LVL, NA) | PERF_MEM_S(SNOOP, NA) | PERF_MEM_S(LOCK, NA) | PERF_MEM_S(TLB, NA))







#define PERF_TYPE_SYNTH (INT_MAX + 1U)


enum perf_synth_id {
 PERF_SYNTH_INTEL_PTWRITE,
 PERF_SYNTH_INTEL_MWAIT,
 PERF_SYNTH_INTEL_PWRE,
 PERF_SYNTH_INTEL_EXSTOP,
 PERF_SYNTH_INTEL_PWRX,
 PERF_SYNTH_INTEL_CBR,
};
# 182 "util/event.h"
struct perf_synth_intel_ptwrite {
 u32 padding;
 union {
  struct {
   u32 ip : 1,
    reserved : 31;
  };
  u32 flags;
 };
 u64 payload;
};

struct perf_synth_intel_mwait {
 u32 padding;
 u32 reserved;
 union {
  struct {
   u64 hints : 8,
    reserved1 : 24,
    extensions : 2,
    reserved2 : 30;
  };
  u64 payload;
 };
};

struct perf_synth_intel_pwre {
 u32 padding;
 u32 reserved;
 union {
  struct {
   u64 reserved1 : 7,
    hw : 1,
    subcstate : 4,
    cstate : 4,
    reserved2 : 48;
  };
  u64 payload;
 };
};

struct perf_synth_intel_exstop {
 u32 padding;
 union {
  struct {
   u32 ip : 1,
    reserved : 31;
  };
  u32 flags;
 };
};

struct perf_synth_intel_pwrx {
 u32 padding;
 u32 reserved;
 union {
  struct {
   u64 deepest_cstate : 4,
    last_cstate : 4,
    wake_reason : 4,
    reserved1 : 52;
  };
  u64 payload;
 };
};

struct perf_synth_intel_cbr {
 u32 padding;
 union {
  struct {
   u32 cbr : 8,
    reserved1 : 8,
    max_nonturbo : 8,
    reserved2 : 8;
  };
  u32 flags;
 };
 u32 freq;
 u32 reserved3;
};





static inline void *perf_sample__synth_ptr(struct perf_sample *sample)
{
 return sample->raw_data - 4;
}

static inline void *perf_synth__raw_data(void *p)
{
 return p + 4;
}

#define perf_synth__raw_size(d) (sizeof(d) - 4)

#define perf_sample__bad_synth_size(s,d) ((s)->raw_size < sizeof(d) - 4)

enum {
 PERF_STAT_ROUND_TYPE__INTERVAL = 0,
 PERF_STAT_ROUND_TYPE__FINAL = 1,
};

void perf_event__print_totals(void);

struct perf_cpu_map;
struct perf_record_stat_config;
struct perf_stat_config;
struct perf_tool;

void perf_event__read_stat_config(struct perf_stat_config *config,
      struct perf_record_stat_config *event);

int perf_event__process_comm(struct perf_tool *tool,
        union perf_event *event,
        struct perf_sample *sample,
        struct machine *machine);
int perf_event__process_lost(struct perf_tool *tool,
        union perf_event *event,
        struct perf_sample *sample,
        struct machine *machine);
int perf_event__process_lost_samples(struct perf_tool *tool,
         union perf_event *event,
         struct perf_sample *sample,
         struct machine *machine);
int perf_event__process_aux(struct perf_tool *tool,
       union perf_event *event,
       struct perf_sample *sample,
       struct machine *machine);
int perf_event__process_itrace_start(struct perf_tool *tool,
         union perf_event *event,
         struct perf_sample *sample,
         struct machine *machine);
int perf_event__process_switch(struct perf_tool *tool,
          union perf_event *event,
          struct perf_sample *sample,
          struct machine *machine);
int perf_event__process_namespaces(struct perf_tool *tool,
       union perf_event *event,
       struct perf_sample *sample,
       struct machine *machine);
int perf_event__process_mmap(struct perf_tool *tool,
        union perf_event *event,
        struct perf_sample *sample,
        struct machine *machine);
int perf_event__process_mmap2(struct perf_tool *tool,
        union perf_event *event,
        struct perf_sample *sample,
        struct machine *machine);
int perf_event__process_fork(struct perf_tool *tool,
        union perf_event *event,
        struct perf_sample *sample,
        struct machine *machine);
int perf_event__process_exit(struct perf_tool *tool,
        union perf_event *event,
        struct perf_sample *sample,
        struct machine *machine);
int perf_event__process_ksymbol(struct perf_tool *tool,
    union perf_event *event,
    struct perf_sample *sample,
    struct machine *machine);
int perf_event__process_bpf(struct perf_tool *tool,
       union perf_event *event,
       struct perf_sample *sample,
       struct machine *machine);
int perf_event__process(struct perf_tool *tool,
   union perf_event *event,
   struct perf_sample *sample,
   struct machine *machine);

struct addr_location;

int machine__resolve(struct machine *machine, struct addr_location *al,
       struct perf_sample *sample);

void addr_location__put(struct addr_location *al);

struct thread;


# 362 "util/event.h" 3 4
_Bool 
# 362 "util/event.h"
    is_bts_event(struct perf_event_attr *attr);

# 363 "util/event.h" 3 4
_Bool 
# 363 "util/event.h"
    sample_addr_correlates_sym(struct perf_event_attr *attr);
void thread__resolve(struct thread *thread, struct addr_location *al,
       struct perf_sample *sample);

const char *perf_event__name(unsigned int id);

size_t perf_event__fprintf_comm(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_mmap(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_mmap2(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_task(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_aux(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_itrace_start(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_switch(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_thread_map(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_cpu_map(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_namespaces(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_ksymbol(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_bpf(union perf_event *event, FILE *fp);
size_t perf_event__fprintf(union perf_event *event, FILE *fp);

int kallsyms__get_function_start(const char *kallsyms_filename,
     const char *symbol_name, u64 *addr);

void *cpu_map_data__alloc(struct perf_cpu_map *map, size_t *size, u16 *type, int *max);
void cpu_map_data__synthesize(struct perf_record_cpu_map_data *data, struct perf_cpu_map *map,
          u16 type, int max);

void event_attr_init(struct perf_event_attr *attr);

int perf_event_paranoid(void);

# 393 "util/event.h" 3 4
_Bool 
# 393 "util/event.h"
    perf_event_paranoid_check(int max_level);

extern int sysctl_perf_event_max_stack;
extern int sysctl_perf_event_max_contexts_per_stack;
extern unsigned int proc_map_timeout;
# 31 "builtin-trace.c" 2
# 1 "util/evsel.h" 1


#define __PERF_EVSEL_H 1






# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evsel.h" 1


#define __LIBPERF_INTERNAL_EVSEL_H 






struct perf_cpu_map;
struct perf_thread_map;
struct xyarray;





struct perf_sample_id {
 struct hlist_node node;
 u64 id;
 struct perf_evsel *evsel;







 int idx;
 int cpu;
 pid_t tid;


 u64 period;
};

struct perf_evsel {
 struct list_head node;
 struct perf_event_attr attr;
 struct perf_cpu_map *cpus;
 struct perf_cpu_map *own_cpus;
 struct perf_thread_map *threads;
 struct xyarray *fd;
 struct xyarray *sample_id;
 u64 *id;
 u32 ids;


 int nr_members;
 
# 50 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evsel.h" 3 4
_Bool 
# 50 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evsel.h"
        system_wide;
};

void perf_evsel__init(struct perf_evsel *evsel, struct perf_event_attr *attr);
int perf_evsel__alloc_fd(struct perf_evsel *evsel, int ncpus, int nthreads);
void perf_evsel__close_fd(struct perf_evsel *evsel);
void perf_evsel__free_fd(struct perf_evsel *evsel);
int perf_evsel__read_size(struct perf_evsel *evsel);
int perf_evsel__apply_filter(struct perf_evsel *evsel, const char *filter);

int perf_evsel__alloc_id(struct perf_evsel *evsel, int ncpus, int nthreads);
void perf_evsel__free_id(struct perf_evsel *evsel);
# 11 "util/evsel.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/evsel.h" 1


#define __LIBPERF_EVSEL_H 


# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/core.h" 1


#define __LIBPERF_CORE_H 




#define LIBPERF_API __attribute__((visibility("default")))


enum libperf_print_level {
 LIBPERF_ERR,
 LIBPERF_WARN,
 LIBPERF_INFO,
 LIBPERF_DEBUG,
 LIBPERF_DEBUG2,
 LIBPERF_DEBUG3,
};

typedef int (*libperf_print_fn_t)(enum libperf_print_level level,
      const char *, va_list ap);

__attribute__((visibility("default"))) void libperf_init(libperf_print_fn_t fn);
# 7 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/evsel.h" 2

struct perf_evsel;
struct perf_event_attr;
struct perf_cpu_map;
struct perf_thread_map;

struct perf_counts_values {
 union {
  struct {
   uint64_t val;
   uint64_t ena;
   uint64_t run;
  };
  uint64_t values[3];
 };
};

__attribute__((visibility("default"))) struct perf_evsel *perf_evsel__new(struct perf_event_attr *attr);
__attribute__((visibility("default"))) void perf_evsel__delete(struct perf_evsel *evsel);
__attribute__((visibility("default"))) int perf_evsel__open(struct perf_evsel *evsel, struct perf_cpu_map *cpus,
     struct perf_thread_map *threads);
__attribute__((visibility("default"))) void perf_evsel__close(struct perf_evsel *evsel);
__attribute__((visibility("default"))) void perf_evsel__close_cpu(struct perf_evsel *evsel, int cpu);
__attribute__((visibility("default"))) int perf_evsel__read(struct perf_evsel *evsel, int cpu, int thread,
     struct perf_counts_values *count);
__attribute__((visibility("default"))) int perf_evsel__enable(struct perf_evsel *evsel);
__attribute__((visibility("default"))) int perf_evsel__enable_cpu(struct perf_evsel *evsel, int cpu);
__attribute__((visibility("default"))) int perf_evsel__disable(struct perf_evsel *evsel);
__attribute__((visibility("default"))) int perf_evsel__disable_cpu(struct perf_evsel *evsel, int cpu);
__attribute__((visibility("default"))) struct perf_cpu_map *perf_evsel__cpus(struct perf_evsel *evsel);
__attribute__((visibility("default"))) struct perf_thread_map *perf_evsel__threads(struct perf_evsel *evsel);
__attribute__((visibility("default"))) struct perf_event_attr *perf_evsel__attr(struct perf_evsel *evsel);
# 12 "util/evsel.h" 2
# 1 "util/symbol_conf.h" 1


#define __PERF_SYMBOL_CONF 1



struct strlist;
struct intlist;

struct symbol_conf {
 
# 11 "util/symbol_conf.h" 3 4
_Bool 
# 11 "util/symbol_conf.h"
      nanosecs;
 unsigned short priv_size;
 
# 13 "util/symbol_conf.h" 3 4
_Bool 
# 13 "util/symbol_conf.h"
      try_vmlinux_path,
   init_annotation,
   force,
   ignore_vmlinux,
   ignore_vmlinux_buildid,
   show_kernel_path,
   use_modules,
   allow_aliases,
   sort_by_name,
   show_nr_samples,
   show_total_period,
   use_callchain,
   cumulate_callchain,
   show_branchflag_count,
   exclude_other,
   show_cpu_utilization,
   initialized,
   kptr_restrict,
   event_group,
   demangle,
   demangle_kernel,
   filter_relative,
   show_hist_headers,
   branch_callstack,
   has_filter,
   show_ref_callgraph,
   hide_unresolved,
   raw_trace,
   report_hierarchy,
   report_block,
   report_individual_block,
   inline_name,
   disable_add2line_warn;
 const char *vmlinux_name,
   *kallsyms_name,
   *source_prefix,
   *field_sep,
   *graph_function;
 const char *default_guest_vmlinux_name,
   *default_guest_kallsyms,
   *default_guest_modules;
 const char *guestmount;
 const char *dso_list_str,
   *comm_list_str,
   *pid_list_str,
   *tid_list_str,
   *sym_list_str,
   *col_width_list_str,
   *bt_stop_list_str;
 unsigned long time_quantum;
       struct strlist *dso_list,
   *comm_list,
   *sym_list,
   *dso_from_list,
   *dso_to_list,
   *sym_from_list,
   *sym_to_list,
   *bt_stop_list;
 struct intlist *pid_list,
   *tid_list;
 const char *symfs;
 int res_sample;
 int pad_output_len_dso;
};

extern struct symbol_conf symbol_conf;
# 13 "util/evsel.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/cpumap.h" 1


#define __LIBPERF_INTERNAL_CPUMAP_H 



struct perf_cpu_map {
 refcount_t refcnt;
 int nr;
 int map[];
};


#define MAX_NR_CPUS 2048


int perf_cpu_map__idx(struct perf_cpu_map *cpus, int cpu);
# 14 "util/evsel.h" 2

struct bpf_object;
struct cgroup;
struct perf_counts;
struct perf_stat_evsel;
union perf_event;

typedef int (perf_evsel__sb_cb_t)(union perf_event *event, void *data);

enum perf_tool_event {
 PERF_TOOL_NONE = 0,
 PERF_TOOL_DURATION_TIME = 1,
};
# 43 "util/evsel.h"
struct evsel {
 struct perf_evsel core;
 struct evlist *evlist;
 char *filter;
 struct perf_counts *counts;
 struct perf_counts *prev_raw_counts;
 int idx;
 unsigned long max_events;
 unsigned long nr_events_printed;
 char *name;
 double scale;
 const char *unit;
 struct tep_event *tp_format;
 off_t id_offset;
 struct perf_stat_evsel *stats;
 void *priv;
 u64 db_id;
 struct cgroup *cgrp;
 void *handler;
 unsigned int sample_size;
 int id_pos;
 int is_pos;
 enum perf_tool_event tool_event;
 
# 66 "util/evsel.h" 3 4
_Bool 
# 66 "util/evsel.h"
       uniquified_name;
 
# 67 "util/evsel.h" 3 4
_Bool 
# 67 "util/evsel.h"
       snapshot;
 
# 68 "util/evsel.h" 3 4
_Bool 
# 68 "util/evsel.h"
        supported;
 
# 69 "util/evsel.h" 3 4
_Bool 
# 69 "util/evsel.h"
        needs_swap;
 
# 70 "util/evsel.h" 3 4
_Bool 
# 70 "util/evsel.h"
        disabled;
 
# 71 "util/evsel.h" 3 4
_Bool 
# 71 "util/evsel.h"
       no_aux_samples;
 
# 72 "util/evsel.h" 3 4
_Bool 
# 72 "util/evsel.h"
       immediate;
 
# 73 "util/evsel.h" 3 4
_Bool 
# 73 "util/evsel.h"
       tracking;
 
# 74 "util/evsel.h" 3 4
_Bool 
# 74 "util/evsel.h"
       per_pkg;
 
# 75 "util/evsel.h" 3 4
_Bool 
# 75 "util/evsel.h"
       precise_max;
 
# 76 "util/evsel.h" 3 4
_Bool 
# 76 "util/evsel.h"
       ignore_missing_thread;
 
# 77 "util/evsel.h" 3 4
_Bool 
# 77 "util/evsel.h"
       forced_leader;
 
# 78 "util/evsel.h" 3 4
_Bool 
# 78 "util/evsel.h"
       use_uncore_alias;

 int exclude_GH;
 int sample_read;
 unsigned long *per_pkg_mask;
 struct evsel *leader;
 char *group_name;
 
# 85 "util/evsel.h" 3 4
_Bool 
# 85 "util/evsel.h"
       cmdline_group_boundary;
 struct list_head config_terms;
 struct bpf_object *bpf_obj;
 int bpf_fd;
 int err;
 
# 90 "util/evsel.h" 3 4
_Bool 
# 90 "util/evsel.h"
       auto_merge_stats;
 
# 91 "util/evsel.h" 3 4
_Bool 
# 91 "util/evsel.h"
       merged_stat;
 const char * metric_expr;
 const char * metric_name;
 struct evsel **metric_events;
 struct evsel *metric_leader;
 
# 96 "util/evsel.h" 3 4
_Bool 
# 96 "util/evsel.h"
       collect_stat;
 
# 97 "util/evsel.h" 3 4
_Bool 
# 97 "util/evsel.h"
       weak_group;
 
# 98 "util/evsel.h" 3 4
_Bool 
# 98 "util/evsel.h"
       reset_group;
 
# 99 "util/evsel.h" 3 4
_Bool 
# 99 "util/evsel.h"
       errored;
 
# 100 "util/evsel.h" 3 4
_Bool 
# 100 "util/evsel.h"
       percore;
 int cpu_iter;
 const char *pmu_name;
 struct {
  perf_evsel__sb_cb_t *cb;
  void *data;
 } side_band;
};

struct perf_missing_features {
 
# 110 "util/evsel.h" 3 4
_Bool 
# 110 "util/evsel.h"
     sample_id_all;
 
# 111 "util/evsel.h" 3 4
_Bool 
# 111 "util/evsel.h"
     exclude_guest;
 
# 112 "util/evsel.h" 3 4
_Bool 
# 112 "util/evsel.h"
     mmap2;
 
# 113 "util/evsel.h" 3 4
_Bool 
# 113 "util/evsel.h"
     cloexec;
 
# 114 "util/evsel.h" 3 4
_Bool 
# 114 "util/evsel.h"
     clockid;
 
# 115 "util/evsel.h" 3 4
_Bool 
# 115 "util/evsel.h"
     clockid_wrong;
 
# 116 "util/evsel.h" 3 4
_Bool 
# 116 "util/evsel.h"
     lbr_flags;
 
# 117 "util/evsel.h" 3 4
_Bool 
# 117 "util/evsel.h"
     write_backward;
 
# 118 "util/evsel.h" 3 4
_Bool 
# 118 "util/evsel.h"
     group_read;
 
# 119 "util/evsel.h" 3 4
_Bool 
# 119 "util/evsel.h"
     ksymbol;
 
# 120 "util/evsel.h" 3 4
_Bool 
# 120 "util/evsel.h"
     bpf;
 
# 121 "util/evsel.h" 3 4
_Bool 
# 121 "util/evsel.h"
     aux_output;
};

extern struct perf_missing_features perf_missing_features;

struct perf_cpu_map;
struct target;
struct thread_map;
struct record_opts;

static inline struct perf_cpu_map *evsel__cpus(struct evsel *evsel)
{
 return perf_evsel__cpus(&evsel->core);
}

static inline int perf_evsel__nr_cpus(struct evsel *evsel)
{
 return evsel__cpus(evsel)->nr;
}

void perf_counts_values__scale(struct perf_counts_values *count,
          
# 142 "util/evsel.h" 3 4
         _Bool 
# 142 "util/evsel.h"
              scale, s8 *pscaled);

void perf_evsel__compute_deltas(struct evsel *evsel, int cpu, int thread,
    struct perf_counts_values *count);

int perf_evsel__object_config(size_t object_size,
         int (*init)(struct evsel *evsel),
         void (*fini)(struct evsel *evsel));

struct evsel *perf_evsel__new_idx(struct perf_event_attr *attr, int idx);

static inline struct evsel *evsel__new(struct perf_event_attr *attr)
{
 return perf_evsel__new_idx(attr, 0);
}

struct evsel *perf_evsel__newtp_idx(const char *sys, const char *name, int idx);




static inline struct evsel *perf_evsel__newtp(const char *sys, const char *name)
{
 return perf_evsel__newtp_idx(sys, name, 0);
}

struct evsel *perf_evsel__new_cycles(
# 168 "util/evsel.h" 3 4
                                    _Bool 
# 168 "util/evsel.h"
                                         precise);

struct tep_event *event_format__new(const char *sys, const char *name);

void evsel__init(struct evsel *evsel, struct perf_event_attr *attr, int idx);
void perf_evsel__exit(struct evsel *evsel);
void evsel__delete(struct evsel *evsel);

struct callchain_param;

void perf_evsel__config(struct evsel *evsel,
   struct record_opts *opts,
   struct callchain_param *callchain);
void perf_evsel__config_callchain(struct evsel *evsel,
      struct record_opts *opts,
      struct callchain_param *callchain);

int __perf_evsel__sample_size(u64 sample_type);
void perf_evsel__calc_id_pos(struct evsel *evsel);


# 188 "util/evsel.h" 3 4
_Bool 
# 188 "util/evsel.h"
    perf_evsel__is_cache_op_valid(u8 type, u8 op);

#define PERF_EVSEL__MAX_ALIASES 8

extern const char *perf_evsel__hw_cache[PERF_COUNT_HW_CACHE_MAX]
           [8];
extern const char *perf_evsel__hw_cache_op[PERF_COUNT_HW_CACHE_OP_MAX]
       [8];
extern const char *perf_evsel__hw_cache_result[PERF_COUNT_HW_CACHE_RESULT_MAX]
           [8];
extern const char *perf_evsel__hw_names[PERF_COUNT_HW_MAX];
extern const char *perf_evsel__sw_names[PERF_COUNT_SW_MAX];
int __perf_evsel__hw_cache_type_op_res_name(u8 type, u8 op, u8 result,
         char *bf, size_t size);
const char *perf_evsel__name(struct evsel *evsel);

const char *perf_evsel__group_name(struct evsel *evsel);
int perf_evsel__group_desc(struct evsel *evsel, char *buf, size_t size);

void __perf_evsel__set_sample_bit(struct evsel *evsel,
      enum perf_event_sample_format bit);
void __perf_evsel__reset_sample_bit(struct evsel *evsel,
        enum perf_event_sample_format bit);

#define perf_evsel__set_sample_bit(evsel,bit) __perf_evsel__set_sample_bit(evsel, PERF_SAMPLE_ ##bit)


#define perf_evsel__reset_sample_bit(evsel,bit) __perf_evsel__reset_sample_bit(evsel, PERF_SAMPLE_ ##bit)


void perf_evsel__set_sample_id(struct evsel *evsel,
          
# 219 "util/evsel.h" 3 4
         _Bool 
# 219 "util/evsel.h"
              use_sample_identifier);

int perf_evsel__set_filter(struct evsel *evsel, const char *filter);
int perf_evsel__append_tp_filter(struct evsel *evsel, const char *filter);
int perf_evsel__append_addr_filter(struct evsel *evsel,
       const char *filter);
int evsel__enable_cpu(struct evsel *evsel, int cpu);
int evsel__enable(struct evsel *evsel);
int evsel__disable(struct evsel *evsel);
int evsel__disable_cpu(struct evsel *evsel, int cpu);

int perf_evsel__open_per_cpu(struct evsel *evsel,
        struct perf_cpu_map *cpus,
        int cpu);
int perf_evsel__open_per_thread(struct evsel *evsel,
    struct perf_thread_map *threads);
int evsel__open(struct evsel *evsel, struct perf_cpu_map *cpus,
  struct perf_thread_map *threads);
void evsel__close(struct evsel *evsel);

struct perf_sample;

void *perf_evsel__rawptr(struct evsel *evsel, struct perf_sample *sample,
    const char *name);
u64 perf_evsel__intval(struct evsel *evsel, struct perf_sample *sample,
         const char *name);

static inline char *perf_evsel__strval(struct evsel *evsel,
           struct perf_sample *sample,
           const char *name)
{
 return perf_evsel__rawptr(evsel, sample, name);
}

struct tep_format_field;

u64 format_field__intval(struct tep_format_field *field, struct perf_sample *sample, 
# 255 "util/evsel.h" 3 4
                                                                                    _Bool 
# 255 "util/evsel.h"
                                                                                         needs_swap);

struct tep_format_field *perf_evsel__field(struct evsel *evsel, const char *name);

#define perf_evsel__match(evsel,t,c) (evsel->core.attr.type == PERF_TYPE_ ##t && evsel->core.attr.config == PERF_COUNT_ ##c)



static inline 
# 263 "util/evsel.h" 3 4
             _Bool 
# 263 "util/evsel.h"
                  perf_evsel__match2(struct evsel *e1,
          struct evsel *e2)
{
 return (e1->core.attr.type == e2->core.attr.type) &&
        (e1->core.attr.config == e2->core.attr.config);
}

#define perf_evsel__cmp(a,b) ((a) && (b) && (a)->core.attr.type == (b)->core.attr.type && (a)->core.attr.config == (b)->core.attr.config)





int perf_evsel__read_counter(struct evsel *evsel, int cpu, int thread);

int __perf_evsel__read_on_cpu(struct evsel *evsel,
         int cpu, int thread, 
# 279 "util/evsel.h" 3 4
                             _Bool 
# 279 "util/evsel.h"
                                  scale);
# 288 "util/evsel.h"
static inline int perf_evsel__read_on_cpu(struct evsel *evsel,
       int cpu, int thread)
{
 return __perf_evsel__read_on_cpu(evsel, cpu, thread, 
# 291 "util/evsel.h" 3 4
                                                     0
# 291 "util/evsel.h"
                                                          );
}
# 301 "util/evsel.h"
static inline int perf_evsel__read_on_cpu_scaled(struct evsel *evsel,
       int cpu, int thread)
{
 return __perf_evsel__read_on_cpu(evsel, cpu, thread, 
# 304 "util/evsel.h" 3 4
                                                     1
# 304 "util/evsel.h"
                                                         );
}

int perf_evsel__parse_sample(struct evsel *evsel, union perf_event *event,
        struct perf_sample *sample);

int perf_evsel__parse_sample_timestamp(struct evsel *evsel,
           union perf_event *event,
           u64 *timestamp);

static inline struct evsel *perf_evsel__next(struct evsel *evsel)
{
 return ({ const typeof(((struct evsel *)0)->core.node) * __mptr = (evsel->core.node.next); (struct evsel *)((char *)__mptr - 
# 316 "util/evsel.h" 3 4
       __builtin_offsetof (
# 316 "util/evsel.h"
       struct evsel
# 316 "util/evsel.h" 3 4
       , 
# 316 "util/evsel.h"
       core.node
# 316 "util/evsel.h" 3 4
       )
# 316 "util/evsel.h"
       ); });
}

static inline struct evsel *perf_evsel__prev(struct evsel *evsel)
{
 return ({ const typeof(((struct evsel *)0)->core.node) * __mptr = (evsel->core.node.prev); (struct evsel *)((char *)__mptr - 
# 321 "util/evsel.h" 3 4
       __builtin_offsetof (
# 321 "util/evsel.h"
       struct evsel
# 321 "util/evsel.h" 3 4
       , 
# 321 "util/evsel.h"
       core.node
# 321 "util/evsel.h" 3 4
       )
# 321 "util/evsel.h"
       ); });
}
# 331 "util/evsel.h"
static inline 
# 331 "util/evsel.h" 3 4
             _Bool 
# 331 "util/evsel.h"
                  perf_evsel__is_group_leader(const struct evsel *evsel)
{
 return evsel->leader == evsel;
}
# 344 "util/evsel.h"
static inline 
# 344 "util/evsel.h" 3 4
             _Bool 
# 344 "util/evsel.h"
                  perf_evsel__is_group_event(struct evsel *evsel)
{
 if (!symbol_conf.event_group)
  return 
# 347 "util/evsel.h" 3 4
        0
# 347 "util/evsel.h"
             ;

 return perf_evsel__is_group_leader(evsel) && evsel->core.nr_members > 1;
}


# 352 "util/evsel.h" 3 4
_Bool 
# 352 "util/evsel.h"
    perf_evsel__is_function_event(struct evsel *evsel);

static inline 
# 354 "util/evsel.h" 3 4
             _Bool 
# 354 "util/evsel.h"
                  perf_evsel__is_bpf_output(struct evsel *evsel)
{
 return (evsel->core.attr.type == PERF_TYPE_SOFTWARE && evsel->core.attr.config == PERF_COUNT_SW_BPF_OUTPUT);
}

static inline 
# 359 "util/evsel.h" 3 4
             _Bool 
# 359 "util/evsel.h"
                  perf_evsel__is_clock(struct evsel *evsel)
{
 return (evsel->core.attr.type == PERF_TYPE_SOFTWARE && evsel->core.attr.config == PERF_COUNT_SW_CPU_CLOCK) ||
        (evsel->core.attr.type == PERF_TYPE_SOFTWARE && evsel->core.attr.config == PERF_COUNT_SW_TASK_CLOCK);
}


# 365 "util/evsel.h" 3 4
_Bool 
# 365 "util/evsel.h"
    perf_evsel__fallback(struct evsel *evsel, int err,
     char *msg, size_t msgsize);
int perf_evsel__open_strerror(struct evsel *evsel, struct target *target,
         int err, char *msg, size_t size);

static inline int perf_evsel__group_idx(struct evsel *evsel)
{
 return evsel->idx - evsel->leader->idx;
}


#define for_each_group_member(_evsel,_leader) for ((_evsel) = list_entry((_leader)->core.node.next, struct evsel, core.node); (_evsel) && (_evsel)->leader == (_leader); (_evsel) = list_entry((_evsel)->core.node.next, struct evsel, core.node))





#define for_each_group_evsel(_evsel,_leader) for ((_evsel) = _leader; (_evsel) && (_evsel)->leader == (_leader); (_evsel) = list_entry((_evsel)->core.node.next, struct evsel, core.node))




static inline 
# 387 "util/evsel.h" 3 4
             _Bool 
# 387 "util/evsel.h"
                  perf_evsel__has_branch_callstack(const struct evsel *evsel)
{
 return evsel->core.attr.branch_sample_type & PERF_SAMPLE_BRANCH_CALL_STACK;
}

static inline 
# 392 "util/evsel.h" 3 4
             _Bool 
# 392 "util/evsel.h"
                  evsel__has_callchain(const struct evsel *evsel)
{
 return (evsel->core.attr.sample_type & PERF_SAMPLE_CALLCHAIN) != 0;
}

struct perf_env *perf_evsel__env(struct evsel *evsel);

int perf_evsel__store_ids(struct evsel *evsel, struct evlist *evlist);
# 32 "builtin-trace.c" 2
# 1 "util/evsel_fprintf.h" 1


#define __PERF_EVSEL_FPRINTF_H 1




struct evsel;

struct perf_attr_details {
 
# 11 "util/evsel_fprintf.h" 3 4
_Bool 
# 11 "util/evsel_fprintf.h"
     freq;
 
# 12 "util/evsel_fprintf.h" 3 4
_Bool 
# 12 "util/evsel_fprintf.h"
     verbose;
 
# 13 "util/evsel_fprintf.h" 3 4
_Bool 
# 13 "util/evsel_fprintf.h"
     event_group;
 
# 14 "util/evsel_fprintf.h" 3 4
_Bool 
# 14 "util/evsel_fprintf.h"
     force;
 
# 15 "util/evsel_fprintf.h" 3 4
_Bool 
# 15 "util/evsel_fprintf.h"
     trace_fields;
};

int perf_evsel__fprintf(struct evsel *evsel,
   struct perf_attr_details *details, FILE *fp);

#define EVSEL__PRINT_IP (1<<0)
#define EVSEL__PRINT_SYM (1<<1)
#define EVSEL__PRINT_DSO (1<<2)
#define EVSEL__PRINT_SYMOFFSET (1<<3)
#define EVSEL__PRINT_ONELINE (1<<4)
#define EVSEL__PRINT_SRCLINE (1<<5)
#define EVSEL__PRINT_UNKNOWN_AS_ADDR (1<<6)
#define EVSEL__PRINT_CALLCHAIN_ARROW (1<<7)
#define EVSEL__PRINT_SKIP_IGNORED (1<<8)

struct addr_location;
struct perf_event_attr;
struct perf_sample;
struct callchain_cursor;
struct strlist;

int sample__fprintf_callchain(struct perf_sample *sample, int left_alignment,
         unsigned int print_opts, struct callchain_cursor *cursor,
         struct strlist *bt_stop_list, FILE *fp);

int sample__fprintf_sym(struct perf_sample *sample, struct addr_location *al,
   int left_alignment, unsigned int print_opts,
   struct callchain_cursor *cursor,
   struct strlist *bt_stop_list, FILE *fp);

typedef int (*attr__fprintf_f)(FILE *, const char *, const char *, void *);

int perf_event_attr__fprintf(FILE *fp, struct perf_event_attr *attr,
        attr__fprintf_f attr__fprintf, void *priv);
# 33 "builtin-trace.c" 2
# 1 "util/synthetic-events.h" 1


#define __PERF_SYNTHETIC_EVENTS_H 






struct auxtrace_record;
struct dso;
struct evlist;
struct evsel;
struct machine;
struct perf_counts_values;
struct perf_cpu_map;
struct perf_event_attr;
struct perf_event_mmap_page;
struct perf_sample;
struct perf_session;
struct perf_stat_config;
struct perf_thread_map;
struct perf_tool;
struct record_opts;
struct target;

union perf_event;

typedef int (*perf_event__handler_t)(struct perf_tool *tool, union perf_event *event,
         struct perf_sample *sample, struct machine *machine);

int perf_event__synthesize_attrs(struct perf_tool *tool, struct evlist *evlist, perf_event__handler_t process);
int perf_event__synthesize_attr(struct perf_tool *tool, struct perf_event_attr *attr, u32 ids, u64 *id, perf_event__handler_t process);
int perf_event__synthesize_build_id(struct perf_tool *tool, struct dso *pos, u16 misc, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_cpu_map(struct perf_tool *tool, struct perf_cpu_map *cpus, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_event_update_cpus(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
int perf_event__synthesize_event_update_name(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
int perf_event__synthesize_event_update_scale(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
int perf_event__synthesize_event_update_unit(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
int perf_event__synthesize_extra_attr(struct perf_tool *tool, struct evlist *evsel_list, perf_event__handler_t process, 
# 40 "util/synthetic-events.h" 3 4
                                                                                                                       _Bool 
# 40 "util/synthetic-events.h"
                                                                                                                            is_pipe);
int perf_event__synthesize_extra_kmaps(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_features(struct perf_tool *tool, struct perf_session *session, struct evlist *evlist, perf_event__handler_t process);
int perf_event__synthesize_id_index(struct perf_tool *tool, perf_event__handler_t process, struct evlist *evlist, struct machine *machine);
int perf_event__synthesize_kernel_mmap(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_mmap_events(struct perf_tool *tool, union perf_event *event, pid_t pid, pid_t tgid, perf_event__handler_t process, struct machine *machine, 
# 45 "util/synthetic-events.h" 3 4
                                                                                                                                                                      _Bool 
# 45 "util/synthetic-events.h"
                                                                                                                                                                           mmap_data);
int perf_event__synthesize_modules(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_namespaces(struct perf_tool *tool, union perf_event *event, pid_t pid, pid_t tgid, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_sample(union perf_event *event, u64 type, u64 read_format, const struct perf_sample *sample);
int perf_event__synthesize_stat_config(struct perf_tool *tool, struct perf_stat_config *config, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_stat_events(struct perf_stat_config *config, struct perf_tool *tool, struct evlist *evlist, perf_event__handler_t process, 
# 50 "util/synthetic-events.h" 3 4
                                                                                                                                                     _Bool 
# 50 "util/synthetic-events.h"
                                                                                                                                                          attrs);
int perf_event__synthesize_stat_round(struct perf_tool *tool, u64 time, u64 type, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_stat(struct perf_tool *tool, u32 cpu, u32 thread, u64 id, struct perf_counts_values *count, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_thread_map2(struct perf_tool *tool, struct perf_thread_map *threads, perf_event__handler_t process, struct machine *machine);
int perf_event__synthesize_thread_map(struct perf_tool *tool, struct perf_thread_map *threads, perf_event__handler_t process, struct machine *machine, 
# 54 "util/synthetic-events.h" 3 4
                                                                                                                                                      _Bool 
# 54 "util/synthetic-events.h"
                                                                                                                                                           mmap_data);
int perf_event__synthesize_threads(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine, 
# 55 "util/synthetic-events.h" 3 4
                                                                                                                  _Bool 
# 55 "util/synthetic-events.h"
                                                                                                                       mmap_data, unsigned int nr_threads_synthesize);
int perf_event__synthesize_tracing_data(struct perf_tool *tool, int fd, struct evlist *evlist, perf_event__handler_t process);
int perf_event__synth_time_conv(const struct perf_event_mmap_page *pc, struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
pid_t perf_event__synthesize_comm(struct perf_tool *tool, union perf_event *event, pid_t pid, perf_event__handler_t process, struct machine *machine);

int perf_tool__process_synth_event(struct perf_tool *tool, union perf_event *event, struct machine *machine, perf_event__handler_t process);

size_t perf_event__sample_event_size(const struct perf_sample *sample, u64 type, u64 read_format);

int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
      struct target *target, struct perf_thread_map *threads,
      perf_event__handler_t process, 
# 66 "util/synthetic-events.h" 3 4
                                    _Bool 
# 66 "util/synthetic-events.h"
                                         data_mmap,
      unsigned int nr_threads_synthesize);
int machine__synthesize_threads(struct machine *machine, struct target *target,
    struct perf_thread_map *threads, 
# 69 "util/synthetic-events.h" 3 4
                                    _Bool 
# 69 "util/synthetic-events.h"
                                         data_mmap,
    unsigned int nr_threads_synthesize);


int perf_event__synthesize_auxtrace_info(struct auxtrace_record *itr, struct perf_tool *tool,
      struct perf_session *session, perf_event__handler_t process);
# 91 "util/synthetic-events.h"
int perf_event__synthesize_bpf_events(struct perf_session *session, perf_event__handler_t process,
          struct machine *machine, struct record_opts *opts);
# 34 "builtin-trace.c" 2
# 1 "util/evlist.h" 1


#define __PERF_EVLIST_H 1





# 1 "/home/jmikedupont2/linux/tools/lib/api/fd/array.h" 1


#define __API_FD_ARRAY__ 



struct pollfd;
# 19 "/home/jmikedupont2/linux/tools/lib/api/fd/array.h"
struct fdarray {
 int nr;
 int nr_alloc;
 int nr_autogrow;
 struct pollfd *entries;
 union {
  int idx;
  void *ptr;
 } *priv;
};

void fdarray__init(struct fdarray *fda, int nr_autogrow);
void fdarray__exit(struct fdarray *fda);

struct fdarray *fdarray__new(int nr_alloc, int nr_autogrow);
void fdarray__delete(struct fdarray *fda);

int fdarray__add(struct fdarray *fda, int fd, short revents);
int fdarray__poll(struct fdarray *fda, int timeout);
int fdarray__filter(struct fdarray *fda, short revents,
      void (*entry_destructor)(struct fdarray *fda, int fd, void *arg),
      void *arg);
int fdarray__grow(struct fdarray *fda, int extra);
int fdarray__fprintf(struct fdarray *fda, FILE *fp);

static inline int fdarray__available_entries(struct fdarray *fda)
{
 return fda->nr_alloc - fda->nr;
}
# 10 "util/evlist.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 1


#define __LIBPERF_INTERNAL_EVLIST_H 





#define PERF_EVLIST__HLIST_BITS 8
#define PERF_EVLIST__HLIST_SIZE (1 << PERF_EVLIST__HLIST_BITS)

struct perf_cpu_map;
struct perf_thread_map;
struct perf_mmap_param;

struct perf_evlist {
 struct list_head entries;
 int nr_entries;
 
# 19 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
_Bool 
# 19 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
        has_user_cpus;
 struct perf_cpu_map *cpus;
 struct perf_cpu_map *all_cpus;
 struct perf_thread_map *threads;
 int nr_mmaps;
 size_t mmap_len;
 struct fdarray pollfd;
 struct hlist_head heads[(1 << 8)];
 struct perf_mmap *mmap;
 struct perf_mmap *mmap_ovw;
 struct perf_mmap *mmap_first;
 struct perf_mmap *mmap_ovw_first;
};

typedef void
(*perf_evlist_mmap__cb_idx_t)(struct perf_evlist*, struct perf_mmap_param*, int, 
# 34 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
                                                                                _Bool
# 34 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
                                                                                    );
typedef struct perf_mmap*
(*perf_evlist_mmap__cb_get_t)(struct perf_evlist*, 
# 36 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
                                                  _Bool
# 36 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
                                                      , int);
typedef int
(*perf_evlist_mmap__cb_mmap_t)(struct perf_mmap*, struct perf_mmap_param*, int, int);

struct perf_evlist_mmap_ops {
 perf_evlist_mmap__cb_idx_t idx;
 perf_evlist_mmap__cb_get_t get;
 perf_evlist_mmap__cb_mmap_t mmap;
};

int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd,
       void *ptr, short revent);

int perf_evlist__mmap_ops(struct perf_evlist *evlist,
     struct perf_evlist_mmap_ops *ops,
     struct perf_mmap_param *mp);

void perf_evlist__init(struct perf_evlist *evlist);
void perf_evlist__exit(struct perf_evlist *evlist);






#define __perf_evlist__for_each_entry(list,evsel) list_for_each_entry(evsel, list, node)







#define perf_evlist__for_each_entry(evlist,evsel) __perf_evlist__for_each_entry(&(evlist)->entries, evsel)







#define __perf_evlist__for_each_entry_reverse(list,evsel) list_for_each_entry_reverse(evsel, list, node)







#define perf_evlist__for_each_entry_reverse(evlist,evsel) __perf_evlist__for_each_entry_reverse(&(evlist)->entries, evsel)
# 95 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
#define __perf_evlist__for_each_entry_safe(list,tmp,evsel) list_for_each_entry_safe(evsel, tmp, list, node)
# 104 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
#define perf_evlist__for_each_entry_safe(evlist,tmp,evsel) __perf_evlist__for_each_entry_safe(&(evlist)->entries, tmp, evsel)


static inline struct perf_evsel *perf_evlist__first(struct perf_evlist *evlist)
{
 return ({ const typeof(((struct perf_evsel *)0)->node) * __mptr = (evlist->entries.next); (struct perf_evsel *)((char *)__mptr - 
# 109 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
       __builtin_offsetof (
# 109 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
       struct perf_evsel
# 109 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
       , 
# 109 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
       node
# 109 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
       )
# 109 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
       ); });
}

static inline struct perf_evsel *perf_evlist__last(struct perf_evlist *evlist)
{
 return ({ const typeof(((struct perf_evsel *)0)->node) * __mptr = (evlist->entries.prev); (struct perf_evsel *)((char *)__mptr - 
# 114 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
       __builtin_offsetof (
# 114 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
       struct perf_evsel
# 114 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
       , 
# 114 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
       node
# 114 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h" 3 4
       )
# 114 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/evlist.h"
       ); });
}

u64 perf_evlist__read_format(struct perf_evlist *evlist);

void perf_evlist__id_add(struct perf_evlist *evlist,
    struct perf_evsel *evsel,
    int cpu, int thread, u64 id);

int perf_evlist__id_add_fd(struct perf_evlist *evlist,
      struct perf_evsel *evsel,
      int cpu, int thread, int fd);
# 11 "util/evlist.h" 2

# 1 "util/events_stats.h" 1


#define __PERF_EVENTS_STATS_ 




# 1 "util/auxtrace.h" 1







#define __PERF_AUXTRACE_H 


# 1 "/usr/include/errno.h" 1 3 4
# 27 "/usr/include/errno.h" 3 4
#define _ERRNO_H 1







# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
#undef EDOM
#undef EILSEQ
#undef ERANGE
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/errno.h" 1 3 4
# 1 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/errno.h" 1 3 4


#define _ASM_GENERIC_ERRNO_H 

# 1 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/errno-base.h" 1 3 4


#define _ASM_GENERIC_ERRNO_BASE_H 

#define EPERM 1
#define ENOENT 2
#define ESRCH 3
#define EINTR 4
#define EIO 5
#define ENXIO 6
#define E2BIG 7
#define ENOEXEC 8
#define EBADF 9
#define ECHILD 10
#define EAGAIN 11
#define ENOMEM 12
#define EACCES 13
#define EFAULT 14
#define ENOTBLK 15
#define EBUSY 16
#define EEXIST 17
#define EXDEV 18
#define ENODEV 19
#define ENOTDIR 20
#define EISDIR 21
#define EINVAL 22
#define ENFILE 23
#define EMFILE 24
#define ENOTTY 25
#define ETXTBSY 26
#define EFBIG 27
#define ENOSPC 28
#define ESPIPE 29
#define EROFS 30
#define EMLINK 31
#define EPIPE 32
#define EDOM 33
#define ERANGE 34
# 6 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/errno.h" 2 3 4

#define EDEADLK 35
#define ENAMETOOLONG 36
#define ENOLCK 37
# 18 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/errno.h" 3 4
#define ENOSYS 38

#define ENOTEMPTY 39
#define ELOOP 40
#define EWOULDBLOCK EAGAIN
#define ENOMSG 42
#define EIDRM 43
#define ECHRNG 44
#define EL2NSYNC 45
#define EL3HLT 46
#define EL3RST 47
#define ELNRNG 48
#define EUNATCH 49
#define ENOCSI 50
#define EL2HLT 51
#define EBADE 52
#define EBADR 53
#define EXFULL 54
#define ENOANO 55
#define EBADRQC 56
#define EBADSLT 57

#define EDEADLOCK EDEADLK

#define EBFONT 59
#define ENOSTR 60
#define ENODATA 61
#define ETIME 62
#define ENOSR 63
#define ENONET 64
#define ENOPKG 65
#define EREMOTE 66
#define ENOLINK 67
#define EADV 68
#define ESRMNT 69
#define ECOMM 70
#define EPROTO 71
#define EMULTIHOP 72
#define EDOTDOT 73
#define EBADMSG 74
#define EOVERFLOW 75
#define ENOTUNIQ 76
#define EBADFD 77
#define EREMCHG 78
#define ELIBACC 79
#define ELIBBAD 80
#define ELIBSCN 81
#define ELIBMAX 82
#define ELIBEXEC 83
#define EILSEQ 84
#define ERESTART 85
#define ESTRPIPE 86
#define EUSERS 87
#define ENOTSOCK 88
#define EDESTADDRREQ 89
#define EMSGSIZE 90
#define EPROTOTYPE 91
#define ENOPROTOOPT 92
#define EPROTONOSUPPORT 93
#define ESOCKTNOSUPPORT 94
#define EOPNOTSUPP 95
#define EPFNOSUPPORT 96
#define EAFNOSUPPORT 97
#define EADDRINUSE 98
#define EADDRNOTAVAIL 99
#define ENETDOWN 100
#define ENETUNREACH 101
#define ENETRESET 102
#define ECONNABORTED 103
#define ECONNRESET 104
#define ENOBUFS 105
#define EISCONN 106
#define ENOTCONN 107
#define ESHUTDOWN 108
#define ETOOMANYREFS 109
#define ETIMEDOUT 110
#define ECONNREFUSED 111
#define EHOSTDOWN 112
#define EHOSTUNREACH 113
#define EALREADY 114
#define EINPROGRESS 115
#define ESTALE 116
#define EUCLEAN 117
#define ENOTNAM 118
#define ENAVAIL 119
#define EISNAM 120
#define EREMOTEIO 121
#define EDQUOT 122

#define ENOMEDIUM 123
#define EMEDIUMTYPE 124
#define ECANCELED 125
#define ENOKEY 126
#define EKEYEXPIRED 127
#define EKEYREVOKED 128
#define EKEYREJECTED 129


#define EOWNERDEAD 130
#define ENOTRECOVERABLE 131

#define ERFKILL 132

#define EHWPOISON 133
# 1 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4


#define ENOTSUP EOPNOTSUPP
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4

# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



#define errno (*__errno_location ())
# 36 "/usr/include/errno.h" 2 3 4
#undef __need_Emath
# 54 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;




# 68 "/usr/include/errno.h" 3 4
typedef int error_t;
#define __error_t_defined 1

#undef __need_error_t
# 12 "util/auxtrace.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 14 "util/auxtrace.h" 2





# 1 "/home/jmikedupont2/linux/tools/include/asm/barrier.h" 1



# 1 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/barrier.h" 1


#define _TOOLS_LINUX_ASM_X86_BARRIER_H 
# 24 "/home/jmikedupont2/linux/tools/include/asm/../../arch/x86/include/asm/barrier.h"
#define mb() asm volatile("mfence" ::: "memory")
#define rmb() asm volatile("lfence" ::: "memory")
#define wmb() asm volatile("sfence" ::: "memory")
#define smp_rmb() barrier()
#define smp_wmb() barrier()
#define smp_mb() asm volatile("lock; addl $0,-132(%%rsp)" ::: "memory", "cc")



#define smp_store_release(p,v) do { barrier(); WRITE_ONCE(*p, v); } while (0)





#define smp_load_acquire(p) ({ typeof(*p) ___p1 = READ_ONCE(*p); barrier(); ___p1; })
# 5 "/home/jmikedupont2/linux/tools/include/asm/barrier.h" 2
# 20 "util/auxtrace.h" 2


# 21 "util/auxtrace.h"
union perf_event;
struct perf_session;
struct evlist;
struct perf_tool;
struct mmap;
struct perf_sample;
struct option;
struct record_opts;
struct perf_record_auxtrace_error;
struct perf_record_auxtrace_info;
struct events_stats;

enum auxtrace_error_type {
       PERF_AUXTRACE_ERROR_ITRACE = 1,
       PERF_AUXTRACE_ERROR_MAX
};


#define PERF_AUXTRACE_RECORD_ALIGNMENT 8

enum auxtrace_type {
 PERF_AUXTRACE_UNKNOWN,
 PERF_AUXTRACE_INTEL_PT,
 PERF_AUXTRACE_INTEL_BTS,
 PERF_AUXTRACE_CS_ETM,
 PERF_AUXTRACE_ARM_SPE,
 PERF_AUXTRACE_S390_CPUMSF,
};

enum itrace_period_type {
 PERF_ITRACE_PERIOD_INSTRUCTIONS,
 PERF_ITRACE_PERIOD_TICKS,
 PERF_ITRACE_PERIOD_NANOSECS,
};
# 86 "util/auxtrace.h"
struct itrace_synth_opts {
 
# 87 "util/auxtrace.h" 3 4
_Bool 
# 87 "util/auxtrace.h"
       set;
 
# 88 "util/auxtrace.h" 3 4
_Bool 
# 88 "util/auxtrace.h"
       default_no_sample;
 
# 89 "util/auxtrace.h" 3 4
_Bool 
# 89 "util/auxtrace.h"
       inject;
 
# 90 "util/auxtrace.h" 3 4
_Bool 
# 90 "util/auxtrace.h"
       instructions;
 
# 91 "util/auxtrace.h" 3 4
_Bool 
# 91 "util/auxtrace.h"
       branches;
 
# 92 "util/auxtrace.h" 3 4
_Bool 
# 92 "util/auxtrace.h"
       transactions;
 
# 93 "util/auxtrace.h" 3 4
_Bool 
# 93 "util/auxtrace.h"
       ptwrites;
 
# 94 "util/auxtrace.h" 3 4
_Bool 
# 94 "util/auxtrace.h"
       pwr_events;
 
# 95 "util/auxtrace.h" 3 4
_Bool 
# 95 "util/auxtrace.h"
       other_events;
 
# 96 "util/auxtrace.h" 3 4
_Bool 
# 96 "util/auxtrace.h"
       errors;
 
# 97 "util/auxtrace.h" 3 4
_Bool 
# 97 "util/auxtrace.h"
       dont_decode;
 
# 98 "util/auxtrace.h" 3 4
_Bool 
# 98 "util/auxtrace.h"
       log;
 
# 99 "util/auxtrace.h" 3 4
_Bool 
# 99 "util/auxtrace.h"
       calls;
 
# 100 "util/auxtrace.h" 3 4
_Bool 
# 100 "util/auxtrace.h"
       returns;
 
# 101 "util/auxtrace.h" 3 4
_Bool 
# 101 "util/auxtrace.h"
       callchain;
 
# 102 "util/auxtrace.h" 3 4
_Bool 
# 102 "util/auxtrace.h"
       thread_stack;
 
# 103 "util/auxtrace.h" 3 4
_Bool 
# 103 "util/auxtrace.h"
       last_branch;
 unsigned int callchain_sz;
 unsigned int last_branch_sz;
 unsigned long long period;
 enum itrace_period_type period_type;
 unsigned long initial_skip;
 unsigned long *cpu_bitmap;
 struct perf_time_interval *ptime_range;
 int range_num;
};







struct auxtrace_index_entry {
 u64 file_offset;
 u64 sz;
};

#define PERF_AUXTRACE_INDEX_ENTRY_COUNT 256
# 134 "util/auxtrace.h"
struct auxtrace_index {
 struct list_head list;
 size_t nr;
 struct auxtrace_index_entry entries[256];
};
# 151 "util/auxtrace.h"
struct auxtrace {
 int (*process_event)(struct perf_session *session,
        union perf_event *event,
        struct perf_sample *sample,
        struct perf_tool *tool);
 int (*process_auxtrace_event)(struct perf_session *session,
          union perf_event *event,
          struct perf_tool *tool);
 int (*queue_data)(struct perf_session *session,
     struct perf_sample *sample, union perf_event *event,
     u64 data_offset);
 void (*dump_auxtrace_sample)(struct perf_session *session,
         struct perf_sample *sample);
 int (*flush_events)(struct perf_session *session,
       struct perf_tool *tool);
 void (*free_events)(struct perf_session *session);
 void (*free)(struct perf_session *session);
};
# 193 "util/auxtrace.h"
struct auxtrace_buffer {
 struct list_head list;
 size_t size;
 pid_t pid;
 pid_t tid;
 int cpu;
 void *data;
 off_t data_offset;
 void *mmap_addr;
 size_t mmap_size;
 
# 203 "util/auxtrace.h" 3 4
_Bool 
# 203 "util/auxtrace.h"
       data_needs_freeing;
 
# 204 "util/auxtrace.h" 3 4
_Bool 
# 204 "util/auxtrace.h"
       consecutive;
 u64 offset;
 u64 reference;
 u64 buffer_nr;
 size_t use_size;
 void *use_data;
};
# 220 "util/auxtrace.h"
struct auxtrace_queue {
 struct list_head head;
 pid_t tid;
 int cpu;
 
# 224 "util/auxtrace.h" 3 4
_Bool 
# 224 "util/auxtrace.h"
       set;
 void *priv;
};
# 236 "util/auxtrace.h"
struct auxtrace_queues {
 struct auxtrace_queue *queue_array;
 unsigned int nr_queues;
 
# 239 "util/auxtrace.h" 3 4
_Bool 
# 239 "util/auxtrace.h"
       new_data;
 
# 240 "util/auxtrace.h" 3 4
_Bool 
# 240 "util/auxtrace.h"
       populated;
 u64 next_buffer_nr;
};







struct auxtrace_heap_item {
 unsigned int queue_nr;
 u64 ordinal;
};







struct auxtrace_heap {
 struct auxtrace_heap_item *heap_array;
 unsigned int heap_cnt;
 unsigned int heap_sz;
};
# 279 "util/auxtrace.h"
struct auxtrace_mmap {
 void *base;
 void *userpg;
 size_t mask;
 size_t len;
 u64 prev;
 int idx;
 pid_t tid;
 int cpu;
};
# 301 "util/auxtrace.h"
struct auxtrace_mmap_params {
 size_t mask;
 off_t offset;
 size_t len;
 int prot;
 int idx;
 pid_t tid;
 int cpu;
};
# 326 "util/auxtrace.h"
struct auxtrace_record {
 int (*recording_options)(struct auxtrace_record *itr,
     struct evlist *evlist,
     struct record_opts *opts);
 size_t (*info_priv_size)(struct auxtrace_record *itr,
     struct evlist *evlist);
 int (*info_fill)(struct auxtrace_record *itr,
    struct perf_session *session,
    struct perf_record_auxtrace_info *auxtrace_info,
    size_t priv_size);
 void (*free)(struct auxtrace_record *itr);
 int (*snapshot_start)(struct auxtrace_record *itr);
 int (*snapshot_finish)(struct auxtrace_record *itr);
 int (*find_snapshot)(struct auxtrace_record *itr, int idx,
        struct auxtrace_mmap *mm, unsigned char *data,
        u64 *head, u64 *old);
 int (*parse_snapshot_options)(struct auxtrace_record *itr,
          struct record_opts *opts,
          const char *str);
 u64 (*reference)(struct auxtrace_record *itr);
 int (*read_finish)(struct auxtrace_record *itr, int idx);
 unsigned int alignment;
 unsigned int default_aux_sample_size;
};
# 368 "util/auxtrace.h"
struct addr_filter {
 struct list_head list;
 
# 370 "util/auxtrace.h" 3 4
_Bool 
# 370 "util/auxtrace.h"
       range;
 
# 371 "util/auxtrace.h" 3 4
_Bool 
# 371 "util/auxtrace.h"
       start;
 const char *action;
 const char *sym_from;
 const char *sym_to;
 int sym_from_idx;
 int sym_to_idx;
 u64 addr;
 u64 size;
 const char *filename;
 char *str;
};






struct addr_filters {
 struct list_head head;
 int cnt;
};

struct auxtrace_cache;
# 403 "util/auxtrace.h"
static inline u64 auxtrace_mmap__read_snapshot_head(struct auxtrace_mmap *mm)
{
 struct perf_event_mmap_page *pc = mm->userpg;
 u64 head = ({ union { typeof(pc->aux_head) __val; char __c[1]; } __u = { .__c = { 0 } }; __read_once_size(&(pc->aux_head), __u.__c, sizeof(pc->aux_head)); __u.__val; });


 asm volatile("lfence" ::: "memory");
 return head;
}

static inline u64 auxtrace_mmap__read_head(struct auxtrace_mmap *mm)
{
 struct perf_event_mmap_page *pc = mm->userpg;

 u64 head = ({ union { typeof(pc->aux_head) __val; char __c[1]; } __u = { .__c = { 0 } }; __read_once_size(&(pc->aux_head), __u.__c, sizeof(pc->aux_head)); __u.__val; });





 asm volatile("lfence" ::: "memory");
 return head;
}

static inline void auxtrace_mmap__write_tail(struct auxtrace_mmap *mm, u64 tail)
{
 struct perf_event_mmap_page *pc = mm->userpg;





 asm volatile("mfence" ::: "memory");

 pc->aux_tail = tail;





}

int auxtrace_mmap__mmap(struct auxtrace_mmap *mm,
   struct auxtrace_mmap_params *mp,
   void *userpg, int fd);
void auxtrace_mmap__munmap(struct auxtrace_mmap *mm);
void auxtrace_mmap_params__init(struct auxtrace_mmap_params *mp,
    off_t auxtrace_offset,
    unsigned int auxtrace_pages,
    
# 452 "util/auxtrace.h" 3 4
   _Bool 
# 452 "util/auxtrace.h"
        auxtrace_overwrite);
void auxtrace_mmap_params__set_idx(struct auxtrace_mmap_params *mp,
       struct evlist *evlist, int idx,
       
# 455 "util/auxtrace.h" 3 4
      _Bool 
# 455 "util/auxtrace.h"
           per_cpu);

typedef int (*process_auxtrace_t)(struct perf_tool *tool,
      struct mmap *map,
      union perf_event *event, void *data1,
      size_t len1, void *data2, size_t len2);

int auxtrace_mmap__read(struct mmap *map, struct auxtrace_record *itr,
   struct perf_tool *tool, process_auxtrace_t fn);

int auxtrace_mmap__read_snapshot(struct mmap *map,
     struct auxtrace_record *itr,
     struct perf_tool *tool, process_auxtrace_t fn,
     size_t snapshot_size);

int auxtrace_queues__init(struct auxtrace_queues *queues);
int auxtrace_queues__add_event(struct auxtrace_queues *queues,
          struct perf_session *session,
          union perf_event *event, off_t data_offset,
          struct auxtrace_buffer **buffer_ptr);
struct auxtrace_queue *
auxtrace_queues__sample_queue(struct auxtrace_queues *queues,
         struct perf_sample *sample,
         struct perf_session *session);
int auxtrace_queues__add_sample(struct auxtrace_queues *queues,
    struct perf_session *session,
    struct perf_sample *sample, u64 data_offset,
    u64 reference);
void auxtrace_queues__free(struct auxtrace_queues *queues);
int auxtrace_queues__process_index(struct auxtrace_queues *queues,
       struct perf_session *session);
int auxtrace_queue_data(struct perf_session *session, 
# 486 "util/auxtrace.h" 3 4
                                                     _Bool 
# 486 "util/auxtrace.h"
                                                          samples,
   
# 487 "util/auxtrace.h" 3 4
  _Bool 
# 487 "util/auxtrace.h"
       events);
struct auxtrace_buffer *auxtrace_buffer__next(struct auxtrace_queue *queue,
           struct auxtrace_buffer *buffer);
void *auxtrace_buffer__get_data(struct auxtrace_buffer *buffer, int fd);
void auxtrace_buffer__put_data(struct auxtrace_buffer *buffer);
void auxtrace_buffer__drop_data(struct auxtrace_buffer *buffer);
void auxtrace_buffer__free(struct auxtrace_buffer *buffer);

int auxtrace_heap__add(struct auxtrace_heap *heap, unsigned int queue_nr,
         u64 ordinal);
void auxtrace_heap__pop(struct auxtrace_heap *heap);
void auxtrace_heap__free(struct auxtrace_heap *heap);

struct auxtrace_cache_entry {
 struct hlist_node hash;
 u32 key;
};

struct auxtrace_cache *auxtrace_cache__new(unsigned int bits, size_t entry_size,
        unsigned int limit_percent);
void auxtrace_cache__free(struct auxtrace_cache *auxtrace_cache);
void *auxtrace_cache__alloc_entry(struct auxtrace_cache *c);
void auxtrace_cache__free_entry(struct auxtrace_cache *c, void *entry);
int auxtrace_cache__add(struct auxtrace_cache *c, u32 key,
   struct auxtrace_cache_entry *entry);
void auxtrace_cache__remove(struct auxtrace_cache *c, u32 key);
void *auxtrace_cache__lookup(struct auxtrace_cache *c, u32 key);

struct auxtrace_record *auxtrace_record__init(struct evlist *evlist,
           int *err);

int auxtrace_parse_snapshot_options(struct auxtrace_record *itr,
        struct record_opts *opts,
        const char *str);
int auxtrace_parse_sample_options(struct auxtrace_record *itr,
      struct evlist *evlist,
      struct record_opts *opts, const char *str);
int auxtrace_record__options(struct auxtrace_record *itr,
        struct evlist *evlist,
        struct record_opts *opts);
size_t auxtrace_record__info_priv_size(struct auxtrace_record *itr,
           struct evlist *evlist);
int auxtrace_record__info_fill(struct auxtrace_record *itr,
          struct perf_session *session,
          struct perf_record_auxtrace_info *auxtrace_info,
          size_t priv_size);
void auxtrace_record__free(struct auxtrace_record *itr);
int auxtrace_record__snapshot_start(struct auxtrace_record *itr);
int auxtrace_record__snapshot_finish(struct auxtrace_record *itr, 
# 535 "util/auxtrace.h" 3 4
                                                                 _Bool 
# 535 "util/auxtrace.h"
                                                                      on_exit);
int auxtrace_record__find_snapshot(struct auxtrace_record *itr, int idx,
       struct auxtrace_mmap *mm,
       unsigned char *data, u64 *head, u64 *old);
u64 auxtrace_record__reference(struct auxtrace_record *itr);

int auxtrace_index__auxtrace_event(struct list_head *head, union perf_event *event,
       off_t file_offset);
int auxtrace_index__write(int fd, struct list_head *head);
int auxtrace_index__process(int fd, u64 size, struct perf_session *session,
       
# 545 "util/auxtrace.h" 3 4
      _Bool 
# 545 "util/auxtrace.h"
           needs_swap);
void auxtrace_index__free(struct list_head *head);

void auxtrace_synth_error(struct perf_record_auxtrace_error *auxtrace_error, int type,
     int code, int cpu, pid_t pid, pid_t tid, u64 ip,
     const char *msg, u64 timestamp);

int perf_event__process_auxtrace_info(struct perf_session *session,
          union perf_event *event);
s64 perf_event__process_auxtrace(struct perf_session *session,
     union perf_event *event);
int perf_event__process_auxtrace_error(struct perf_session *session,
           union perf_event *event);
int itrace_parse_synth_opts(const struct option *opt, const char *str,
       int unset);
void itrace_synth_opts__set_default(struct itrace_synth_opts *synth_opts,
        
# 561 "util/auxtrace.h" 3 4
       _Bool 
# 561 "util/auxtrace.h"
            no_sample);

size_t perf_event__fprintf_auxtrace_error(union perf_event *event, FILE *fp);
void perf_session__auxtrace_error_inc(struct perf_session *session,
          union perf_event *event);
void events_stats__auxtrace_error_warn(const struct events_stats *stats);

void addr_filters__init(struct addr_filters *filts);
void addr_filters__exit(struct addr_filters *filts);
int addr_filters__parse_bare_filter(struct addr_filters *filts,
        const char *filter);
int auxtrace_parse_filters(struct evlist *evlist);

int auxtrace__process_event(struct perf_session *session, union perf_event *event,
       struct perf_sample *sample, struct perf_tool *tool);
void auxtrace__dump_auxtrace_sample(struct perf_session *session,
        struct perf_sample *sample);
int auxtrace__flush_events(struct perf_session *session, struct perf_tool *tool);
void auxtrace__free_events(struct perf_session *session);
void auxtrace__free(struct perf_session *session);

#define ITRACE_HELP "				i:	    		synthesize instructions events\n" "				b:	    		synthesize branches events\n" "				c:	    		synthesize branches events (calls only)\n" "				r:	    		synthesize branches events (returns only)\n" "				x:	    		synthesize transactions events\n" "				w:	    		synthesize ptwrite events\n" "				p:	    		synthesize power events\n" "				e:	    		synthesize error events\n" "				d:	    		create a debug log\n" "				g[len]:     		synthesize a call chain (use with i or x)\n" "				l[len]:     		synthesize last branch entries (use with i or x)\n" "				sNUMBER:    		skip initial number of events\n" "				PERIOD[ns|us|ms|i|t]:   specify period to sample stream\n" "				concatenate multiple options. Default is ibxwpe or cewp\n"
# 598 "util/auxtrace.h"
static inline
void itrace_synth_opts__set_time_range(struct itrace_synth_opts *opts,
           struct perf_time_interval *ptime_range,
           int range_num)
{
 opts->ptime_range = ptime_range;
 opts->range_num = range_num;
}

static inline
void itrace_synth_opts__clear_time_range(struct itrace_synth_opts *opts)
{
 opts->ptime_range = 
# 610 "util/auxtrace.h" 3 4
                    ((void *)0)
# 610 "util/auxtrace.h"
                        ;
 opts->range_num = 0;
}
# 9 "util/events_stats.h" 2
# 28 "util/events_stats.h"
struct events_stats {
 u64 total_period;
 u64 total_non_filtered_period;
 u64 total_lost;
 u64 total_lost_samples;
 u64 total_aux_lost;
 u64 total_aux_partial;
 u64 total_invalid_chains;
 u32 nr_events[PERF_RECORD_HEADER_MAX];
 u32 nr_non_filtered_samples;
 u32 nr_lost_warned;
 u32 nr_unknown_events;
 u32 nr_invalid_chains;
 u32 nr_unknown_id;
 u32 nr_unprocessable_samples;
 u32 nr_auxtrace_errors[PERF_AUXTRACE_ERROR_MAX];
 u32 nr_proc_map_timeout;
};

void events_stats__inc(struct events_stats *stats, u32 type);

size_t events_stats__fprintf(struct events_stats *stats, FILE *fp);
# 13 "util/evlist.h" 2
# 1 "util/evsel.h" 1
# 14 "util/evlist.h" 2

# 1 "/usr/include/signal.h" 1 3 4
# 25 "/usr/include/signal.h" 3 4
#define _SIGNAL_H 






# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
#define _SIGSET_H_fns 1


#define _EXTERN_INLINE __extern_inline



#define __sigmask(sig) (((unsigned long int) 1) << (((sig) - 1) % (8 * sizeof (unsigned long int))))



#define __sigword(sig) (((sig) - 1) / (8 * sizeof (unsigned long int)))


#define __sigemptyset(set) (__extension__ ({ int __cnt = _SIGSET_NWORDS; sigset_t *__set = (set); while (--__cnt >= 0) __set->__val[__cnt] = 0; 0; }))




#define __sigfillset(set) (__extension__ ({ int __cnt = _SIGSET_NWORDS; sigset_t *__set = (set); while (--__cnt >= 0) __set->__val[__cnt] = ~0UL; 0; }))
# 71 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
#define __sigisemptyset(set) (__extension__ ({ int __cnt = _SIGSET_NWORDS; const sigset_t *__set = (set); int __ret = __set->__val[--__cnt]; while (!__ret && --__cnt >= 0) __ret = __set->__val[__cnt]; __ret == 0; }))






#define __sigandset(dest,left,right) (__extension__ ({ int __cnt = _SIGSET_NWORDS; sigset_t *__dest = (dest); const sigset_t *__left = (left); const sigset_t *__right = (right); while (--__cnt >= 0) __dest->__val[__cnt] = (__left->__val[__cnt] & __right->__val[__cnt]); 0; }))
# 87 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
#define __sigorset(dest,left,right) (__extension__ ({ int __cnt = _SIGSET_NWORDS; sigset_t *__dest = (dest); const sigset_t *__left = (left); const sigset_t *__right = (right); while (--__cnt >= 0) __dest->__val[__cnt] = (__left->__val[__cnt] | __right->__val[__cnt]); 0; }))
# 102 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);


#define __SIGSETFN(NAME,BODY,CONST) _EXTERN_INLINE int NAME (CONST __sigset_t *__set, int __sig) { unsigned long int __mask = __sigmask (__sig); unsigned long int __word = __sigword (__sig); return BODY; }
# 116 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int __sigismember (const __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return (__set->__val[__word] & __mask) ? 1 : 0; }
extern __inline __attribute__ ((__gnu_inline__)) int __sigaddset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] |= __mask), 0); }
extern __inline __attribute__ ((__gnu_inline__)) int __sigdelset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] &= ~__mask), 0); }

#undef __SIGSETFN
# 33 "/usr/include/signal.h" 2 3 4





#define __sig_atomic_t_defined 

typedef __sig_atomic_t sig_atomic_t;


#undef __need_sig_atomic_t







#undef __need_sigset_t





# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
#define SIG_ERR ((__sighandler_t) -1)
#define SIG_DFL ((__sighandler_t) 0)
#define SIG_IGN ((__sighandler_t) 1)


#define SIG_HOLD ((__sighandler_t) 2)




#define SIGHUP 1
#define SIGINT 2
#define SIGQUIT 3
#define SIGILL 4
#define SIGTRAP 5
#define SIGABRT 6
#define SIGIOT 6
#define SIGBUS 7
#define SIGFPE 8
#define SIGKILL 9
#define SIGUSR1 10
#define SIGSEGV 11
#define SIGUSR2 12
#define SIGPIPE 13
#define SIGALRM 14
#define SIGTERM 15
#define SIGSTKFLT 16
#define SIGCLD SIGCHLD
#define SIGCHLD 17
#define SIGCONT 18
#define SIGSTOP 19
#define SIGTSTP 20
#define SIGTTIN 21
#define SIGTTOU 22
#define SIGURG 23
#define SIGXCPU 24
#define SIGXFSZ 25
#define SIGVTALRM 26
#define SIGPROF 27
#define SIGWINCH 28
#define SIGPOLL SIGIO
#define SIGIO 29
#define SIGPWR 30
#define SIGSYS 31
#define SIGUNUSED 31

#define _NSIG 65


#define SIGRTMIN (__libc_current_sigrtmin ())
#define SIGRTMAX (__libc_current_sigrtmax ())



#define __SIGRTMIN 32
#define __SIGRTMAX (_NSIG - 1)
# 58 "/usr/include/signal.h" 2 3 4
# 74 "/usr/include/signal.h" 3 4
#define __need_timespec 





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4




#define __have_sigval_t 1


typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;




#define __have_siginfo_t 1

#define __SI_MAX_SIZE 128

#define __SI_PAD_SIZE ((__SI_MAX_SIZE / sizeof (int)) - 4)
# 58 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef __clock_t __sigchld_clock_t;
#define __SI_ALIGNMENT 


typedef struct
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;


 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;



#define si_pid _sifields._kill.si_pid
#define si_uid _sifields._kill.si_uid
#define si_timerid _sifields._timer.si_tid
#define si_overrun _sifields._timer.si_overrun
#define si_status _sifields._sigchld.si_status
#define si_utime _sifields._sigchld.si_utime
#define si_stime _sifields._sigchld.si_stime
#define si_value _sifields._rt.si_sigval
#define si_int _sifields._rt.si_sigval.sival_int
#define si_ptr _sifields._rt.si_sigval.sival_ptr
#define si_addr _sifields._sigfault.si_addr
#define si_addr_lsb _sifields._sigfault.si_addr_lsb
#define si_lower _sifields._sigfault.si_addr_bnd._lower
#define si_upper _sifields._sigfault.si_addr_bnd._upper
#define si_band _sifields._sigpoll.si_band
#define si_fd _sifields._sigpoll.si_fd
#define si_call_addr _sifields._sigsys._call_addr
#define si_syscall _sifields._sigsys._syscall
#define si_arch _sifields._sigsys._arch




enum
{
  SI_ASYNCNL = -60,
#define SI_ASYNCNL SI_ASYNCNL
  SI_TKILL = -6,
#define SI_TKILL SI_TKILL
  SI_SIGIO,
#define SI_SIGIO SI_SIGIO
  SI_ASYNCIO,
#define SI_ASYNCIO SI_ASYNCIO
  SI_MESGQ,
#define SI_MESGQ SI_MESGQ
  SI_TIMER,
#define SI_TIMER SI_TIMER
  SI_QUEUE,
#define SI_QUEUE SI_QUEUE
  SI_USER,
#define SI_USER SI_USER
  SI_KERNEL = 0x80
#define SI_KERNEL SI_KERNEL
};




enum
{
  ILL_ILLOPC = 1,
#define ILL_ILLOPC ILL_ILLOPC
  ILL_ILLOPN,
#define ILL_ILLOPN ILL_ILLOPN
  ILL_ILLADR,
#define ILL_ILLADR ILL_ILLADR
  ILL_ILLTRP,
#define ILL_ILLTRP ILL_ILLTRP
  ILL_PRVOPC,
#define ILL_PRVOPC ILL_PRVOPC
  ILL_PRVREG,
#define ILL_PRVREG ILL_PRVREG
  ILL_COPROC,
#define ILL_COPROC ILL_COPROC
  ILL_BADSTK
#define ILL_BADSTK ILL_BADSTK
};


enum
{
  FPE_INTDIV = 1,
#define FPE_INTDIV FPE_INTDIV
  FPE_INTOVF,
#define FPE_INTOVF FPE_INTOVF
  FPE_FLTDIV,
#define FPE_FLTDIV FPE_FLTDIV
  FPE_FLTOVF,
#define FPE_FLTOVF FPE_FLTOVF
  FPE_FLTUND,
#define FPE_FLTUND FPE_FLTUND
  FPE_FLTRES,
#define FPE_FLTRES FPE_FLTRES
  FPE_FLTINV,
#define FPE_FLTINV FPE_FLTINV
  FPE_FLTSUB
#define FPE_FLTSUB FPE_FLTSUB
};


enum
{
  SEGV_MAPERR = 1,
#define SEGV_MAPERR SEGV_MAPERR
  SEGV_ACCERR
#define SEGV_ACCERR SEGV_ACCERR
};


enum
{
  BUS_ADRALN = 1,
#define BUS_ADRALN BUS_ADRALN
  BUS_ADRERR,
#define BUS_ADRERR BUS_ADRERR
  BUS_OBJERR,
#define BUS_OBJERR BUS_OBJERR
  BUS_MCEERR_AR,
#define BUS_MCEERR_AR BUS_MCEERR_AR
  BUS_MCEERR_AO
#define BUS_MCEERR_AO BUS_MCEERR_AO
};




enum
{
  TRAP_BRKPT = 1,
#define TRAP_BRKPT TRAP_BRKPT
  TRAP_TRACE
#define TRAP_TRACE TRAP_TRACE
};




enum
{
  CLD_EXITED = 1,
#define CLD_EXITED CLD_EXITED
  CLD_KILLED,
#define CLD_KILLED CLD_KILLED
  CLD_DUMPED,
#define CLD_DUMPED CLD_DUMPED
  CLD_TRAPPED,
#define CLD_TRAPPED CLD_TRAPPED
  CLD_STOPPED,
#define CLD_STOPPED CLD_STOPPED
  CLD_CONTINUED
#define CLD_CONTINUED CLD_CONTINUED
};


enum
{
  POLL_IN = 1,
#define POLL_IN POLL_IN
  POLL_OUT,
#define POLL_OUT POLL_OUT
  POLL_MSG,
#define POLL_MSG POLL_MSG
  POLL_ERR,
#define POLL_ERR POLL_ERR
  POLL_PRI,
#define POLL_PRI POLL_PRI
  POLL_HUP
#define POLL_HUP POLL_HUP
};


#undef __need_siginfo_t





#define __have_sigevent_t 1


#define __SIGEV_MAX_SIZE 64

#define __SIGEV_PAD_SIZE ((__SIGEV_MAX_SIZE / sizeof (int)) - 4)
# 320 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;


#define sigev_notify_function _sigev_un._sigev_thread._function
#define sigev_notify_attributes _sigev_un._sigev_thread._attribute


enum
{
  SIGEV_SIGNAL = 0,
#define SIGEV_SIGNAL SIGEV_SIGNAL
  SIGEV_NONE,
#define SIGEV_NONE SIGEV_NONE
  SIGEV_THREAD,
#define SIGEV_THREAD SIGEV_THREAD

  SIGEV_THREAD_ID = 4
#define SIGEV_THREAD_ID SIGEV_THREAD_ID
};
# 81 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));







extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 114 "/usr/include/signal.h" 3 4





extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));






extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 168 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 184 "/usr/include/signal.h" 3 4
#define sigmask(sig) __sigmask(sig)


extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));




#define NSIG _NSIG



typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;
#define sa_handler __sigaction_handler.sa_handler
#define sa_sigaction __sigaction_handler.sa_sigaction





    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };


#define SA_NOCLDSTOP 1
#define SA_NOCLDWAIT 2
#define SA_SIGINFO 4


#define SA_ONSTACK 0x08000000


#define SA_RESTART 0x10000000
#define SA_NODEFER 0x40000000

#define SA_RESETHAND 0x80000000


#define SA_INTERRUPT 0x20000000


#define SA_NOMASK SA_NODEFER
#define SA_ONESHOT SA_RESETHAND
#define SA_STACK SA_ONSTACK



#define SIG_BLOCK 0
#define SIG_UNBLOCK 1
#define SIG_SETMASK 2
# 244 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 301 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
#define _BITS_SIGCONTEXT_H 1





#define FP_XSTATE_MAGIC1 0x46505853U
#define FP_XSTATE_MAGIC2 0x46505845U
#define FP_XSTATE_MAGIC2_SIZE sizeof(FP_XSTATE_MAGIC2)

struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 121 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 307 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));





#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 317 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,
#define SS_ONSTACK SS_ONSTACK
  SS_DISABLE
#define SS_DISABLE SS_DISABLE
};


#define MINSIGSTKSZ 2048


#define SIGSTKSZ 8192



typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 324 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
#define _SYS_UCONTEXT_H 1


# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;


#define NGREG 23


typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,
#define REG_R8 REG_R8
  REG_R9,
#define REG_R9 REG_R9
  REG_R10,
#define REG_R10 REG_R10
  REG_R11,
#define REG_R11 REG_R11
  REG_R12,
#define REG_R12 REG_R12
  REG_R13,
#define REG_R13 REG_R13
  REG_R14,
#define REG_R14 REG_R14
  REG_R15,
#define REG_R15 REG_R15
  REG_RDI,
#define REG_RDI REG_RDI
  REG_RSI,
#define REG_RSI REG_RSI
  REG_RBP,
#define REG_RBP REG_RBP
  REG_RBX,
#define REG_RBX REG_RBX
  REG_RDX,
#define REG_RDX REG_RDX
  REG_RAX,
#define REG_RAX REG_RAX
  REG_RCX,
#define REG_RCX REG_RCX
  REG_RSP,
#define REG_RSP REG_RSP
  REG_RIP,
#define REG_RIP REG_RIP
  REG_EFL,
#define REG_EFL REG_EFL
  REG_CSGSFS,
#define REG_CSGSFS REG_CSGSFS
  REG_ERR,
#define REG_ERR REG_ERR
  REG_TRAPNO,
#define REG_TRAPNO REG_TRAPNO
  REG_OLDMASK,
#define REG_OLDMASK REG_OLDMASK
  REG_CR2
#define REG_CR2 REG_CR2
};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 327 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));







extern int sighold (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigrelse (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigignore (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
#define _BITS_SIGTHREAD_H 1
# 30 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) __attribute__ ((__nothrow__ , __leaf__));
# 363 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));




# 16 "util/evlist.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 23 "/usr/include/unistd.h" 3 4
#define _UNISTD_H 1










#define _POSIX_VERSION 200809L
# 53 "/usr/include/unistd.h" 3 4
#define __POSIX2_THIS_VERSION 200809L
# 67 "/usr/include/unistd.h" 3 4
#define _POSIX2_VERSION __POSIX2_THIS_VERSION


#define _POSIX2_C_VERSION __POSIX2_THIS_VERSION



#define _POSIX2_C_BIND __POSIX2_THIS_VERSION



#define _POSIX2_C_DEV __POSIX2_THIS_VERSION



#define _POSIX2_SW_DEV __POSIX2_THIS_VERSION



#define _POSIX2_LOCALEDEF __POSIX2_THIS_VERSION



#define _XOPEN_VERSION 700
# 100 "/usr/include/unistd.h" 3 4
#define _XOPEN_XCU_VERSION 4


#define _XOPEN_XPG2 1
#define _XOPEN_XPG3 1
#define _XOPEN_XPG4 1


#define _XOPEN_UNIX 1


#define _XOPEN_CRYPT 1



#define _XOPEN_ENH_I18N 1


#define _XOPEN_LEGACY 1
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 3 4
#define _BITS_POSIX_OPT_H 1


#define _POSIX_JOB_CONTROL 1


#define _POSIX_SAVED_IDS 1


#define _POSIX_PRIORITY_SCHEDULING 200809L


#define _POSIX_SYNCHRONIZED_IO 200809L


#define _POSIX_FSYNC 200809L


#define _POSIX_MAPPED_FILES 200809L


#define _POSIX_MEMLOCK 200809L


#define _POSIX_MEMLOCK_RANGE 200809L


#define _POSIX_MEMORY_PROTECTION 200809L


#define _POSIX_CHOWN_RESTRICTED 0



#define _POSIX_VDISABLE '\0'


#define _POSIX_NO_TRUNC 1


#define _XOPEN_REALTIME 1


#define _XOPEN_REALTIME_THREADS 1


#define _XOPEN_SHM 1


#define _POSIX_THREADS 200809L


#define _POSIX_REENTRANT_FUNCTIONS 1
#define _POSIX_THREAD_SAFE_FUNCTIONS 200809L


#define _POSIX_THREAD_PRIORITY_SCHEDULING 200809L


#define _POSIX_THREAD_ATTR_STACKSIZE 200809L


#define _POSIX_THREAD_ATTR_STACKADDR 200809L


#define _POSIX_THREAD_PRIO_INHERIT 200809L



#define _POSIX_THREAD_PRIO_PROTECT 200809L



#define _POSIX_THREAD_ROBUST_PRIO_INHERIT 200809L


#define _POSIX_THREAD_ROBUST_PRIO_PROTECT -1



#define _POSIX_SEMAPHORES 200809L


#define _POSIX_REALTIME_SIGNALS 200809L


#define _POSIX_ASYNCHRONOUS_IO 200809L
#define _POSIX_ASYNC_IO 1

#define _LFS_ASYNCHRONOUS_IO 1

#define _POSIX_PRIORITIZED_IO 200809L


#define _LFS64_ASYNCHRONOUS_IO 1


#define _LFS_LARGEFILE 1
#define _LFS64_LARGEFILE 1
#define _LFS64_STDIO 1


#define _POSIX_SHARED_MEMORY_OBJECTS 200809L


#define _POSIX_CPUTIME 0


#define _POSIX_THREAD_CPUTIME 0


#define _POSIX_REGEXP 1


#define _POSIX_READER_WRITER_LOCKS 200809L


#define _POSIX_SHELL 1


#define _POSIX_TIMEOUTS 200809L


#define _POSIX_SPIN_LOCKS 200809L


#define _POSIX_SPAWN 200809L


#define _POSIX_TIMERS 200809L


#define _POSIX_BARRIERS 200809L


#define _POSIX_MESSAGE_PASSING 200809L


#define _POSIX_THREAD_PROCESS_SHARED 200809L


#define _POSIX_MONOTONIC_CLOCK 0


#define _POSIX_CLOCK_SELECTION 200809L


#define _POSIX_ADVISORY_INFO 200809L


#define _POSIX_IPV6 200809L


#define _POSIX_RAW_SOCKETS 200809L


#define _POSIX2_CHAR_TERM 200809L


#define _POSIX_SPORADIC_SERVER -1
#define _POSIX_THREAD_SPORADIC_SERVER -1


#define _POSIX_TRACE -1
#define _POSIX_TRACE_EVENT_FILTER -1
#define _POSIX_TRACE_INHERIT -1
#define _POSIX_TRACE_LOG -1


#define _POSIX_TYPED_MEMORY_OBJECTS -1
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 56 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
#define _POSIX_V7_LPBIG_OFFBIG -1
#define _POSIX_V6_LPBIG_OFFBIG -1
#define _XBS5_LPBIG_OFFBIG -1


#define _POSIX_V7_LP64_OFF64 1
#define _POSIX_V6_LP64_OFF64 1
#define _XBS5_LP64_OFF64 1
# 95 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
#define __ILP32_OFF32_CFLAGS "-m32"
#define __ILP32_OFF32_LDFLAGS "-m32"




#define __ILP32_OFFBIG_CFLAGS "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
#define __ILP32_OFFBIG_LDFLAGS "-m32"

#define __LP64_OFF64_CFLAGS "-m64"
#define __LP64_OFF64_LDFLAGS "-m64"
# 210 "/usr/include/unistd.h" 2 3 4



#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2
# 227 "/usr/include/unistd.h" 3 4
#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 230 "/usr/include/unistd.h" 2 3 4
# 277 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
#define __socklen_t_defined 





#define R_OK 4
#define W_OK 2
#define X_OK 1
#define F_OK 0


extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 325 "/usr/include/unistd.h" 3 4
#define L_SET SEEK_SET
#define L_INCR SEEK_CUR
#define L_XTND SEEK_END
# 340 "/usr/include/unistd.h" 3 4
extern __off64_t lseek (int __fd, __off64_t __offset, int __whence) __asm__ ("" "lseek64") __attribute__ ((__nothrow__ , __leaf__))

             ;





extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__));
# 391 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

               __attribute__ ((__warn_unused_result__));
extern ssize_t pwrite (int __fd, const void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pwrite64")

                __attribute__ ((__warn_unused_result__));
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__));




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,
#define _PC_LINK_MAX _PC_LINK_MAX
    _PC_MAX_CANON,
#define _PC_MAX_CANON _PC_MAX_CANON
    _PC_MAX_INPUT,
#define _PC_MAX_INPUT _PC_MAX_INPUT
    _PC_NAME_MAX,
#define _PC_NAME_MAX _PC_NAME_MAX
    _PC_PATH_MAX,
#define _PC_PATH_MAX _PC_PATH_MAX
    _PC_PIPE_BUF,
#define _PC_PIPE_BUF _PC_PIPE_BUF
    _PC_CHOWN_RESTRICTED,
#define _PC_CHOWN_RESTRICTED _PC_CHOWN_RESTRICTED
    _PC_NO_TRUNC,
#define _PC_NO_TRUNC _PC_NO_TRUNC
    _PC_VDISABLE,
#define _PC_VDISABLE _PC_VDISABLE
    _PC_SYNC_IO,
#define _PC_SYNC_IO _PC_SYNC_IO
    _PC_ASYNC_IO,
#define _PC_ASYNC_IO _PC_ASYNC_IO
    _PC_PRIO_IO,
#define _PC_PRIO_IO _PC_PRIO_IO
    _PC_SOCK_MAXBUF,
#define _PC_SOCK_MAXBUF _PC_SOCK_MAXBUF
    _PC_FILESIZEBITS,
#define _PC_FILESIZEBITS _PC_FILESIZEBITS
    _PC_REC_INCR_XFER_SIZE,
#define _PC_REC_INCR_XFER_SIZE _PC_REC_INCR_XFER_SIZE
    _PC_REC_MAX_XFER_SIZE,
#define _PC_REC_MAX_XFER_SIZE _PC_REC_MAX_XFER_SIZE
    _PC_REC_MIN_XFER_SIZE,
#define _PC_REC_MIN_XFER_SIZE _PC_REC_MIN_XFER_SIZE
    _PC_REC_XFER_ALIGN,
#define _PC_REC_XFER_ALIGN _PC_REC_XFER_ALIGN
    _PC_ALLOC_SIZE_MIN,
#define _PC_ALLOC_SIZE_MIN _PC_ALLOC_SIZE_MIN
    _PC_SYMLINK_MAX,
#define _PC_SYMLINK_MAX _PC_SYMLINK_MAX
    _PC_2_SYMLINKS
#define _PC_2_SYMLINKS _PC_2_SYMLINKS
  };


enum
  {
    _SC_ARG_MAX,
#define _SC_ARG_MAX _SC_ARG_MAX
    _SC_CHILD_MAX,
#define _SC_CHILD_MAX _SC_CHILD_MAX
    _SC_CLK_TCK,
#define _SC_CLK_TCK _SC_CLK_TCK
    _SC_NGROUPS_MAX,
#define _SC_NGROUPS_MAX _SC_NGROUPS_MAX
    _SC_OPEN_MAX,
#define _SC_OPEN_MAX _SC_OPEN_MAX
    _SC_STREAM_MAX,
#define _SC_STREAM_MAX _SC_STREAM_MAX
    _SC_TZNAME_MAX,
#define _SC_TZNAME_MAX _SC_TZNAME_MAX
    _SC_JOB_CONTROL,
#define _SC_JOB_CONTROL _SC_JOB_CONTROL
    _SC_SAVED_IDS,
#define _SC_SAVED_IDS _SC_SAVED_IDS
    _SC_REALTIME_SIGNALS,
#define _SC_REALTIME_SIGNALS _SC_REALTIME_SIGNALS
    _SC_PRIORITY_SCHEDULING,
#define _SC_PRIORITY_SCHEDULING _SC_PRIORITY_SCHEDULING
    _SC_TIMERS,
#define _SC_TIMERS _SC_TIMERS
    _SC_ASYNCHRONOUS_IO,
#define _SC_ASYNCHRONOUS_IO _SC_ASYNCHRONOUS_IO
    _SC_PRIORITIZED_IO,
#define _SC_PRIORITIZED_IO _SC_PRIORITIZED_IO
    _SC_SYNCHRONIZED_IO,
#define _SC_SYNCHRONIZED_IO _SC_SYNCHRONIZED_IO
    _SC_FSYNC,
#define _SC_FSYNC _SC_FSYNC
    _SC_MAPPED_FILES,
#define _SC_MAPPED_FILES _SC_MAPPED_FILES
    _SC_MEMLOCK,
#define _SC_MEMLOCK _SC_MEMLOCK
    _SC_MEMLOCK_RANGE,
#define _SC_MEMLOCK_RANGE _SC_MEMLOCK_RANGE
    _SC_MEMORY_PROTECTION,
#define _SC_MEMORY_PROTECTION _SC_MEMORY_PROTECTION
    _SC_MESSAGE_PASSING,
#define _SC_MESSAGE_PASSING _SC_MESSAGE_PASSING
    _SC_SEMAPHORES,
#define _SC_SEMAPHORES _SC_SEMAPHORES
    _SC_SHARED_MEMORY_OBJECTS,
#define _SC_SHARED_MEMORY_OBJECTS _SC_SHARED_MEMORY_OBJECTS
    _SC_AIO_LISTIO_MAX,
#define _SC_AIO_LISTIO_MAX _SC_AIO_LISTIO_MAX
    _SC_AIO_MAX,
#define _SC_AIO_MAX _SC_AIO_MAX
    _SC_AIO_PRIO_DELTA_MAX,
#define _SC_AIO_PRIO_DELTA_MAX _SC_AIO_PRIO_DELTA_MAX
    _SC_DELAYTIMER_MAX,
#define _SC_DELAYTIMER_MAX _SC_DELAYTIMER_MAX
    _SC_MQ_OPEN_MAX,
#define _SC_MQ_OPEN_MAX _SC_MQ_OPEN_MAX
    _SC_MQ_PRIO_MAX,
#define _SC_MQ_PRIO_MAX _SC_MQ_PRIO_MAX
    _SC_VERSION,
#define _SC_VERSION _SC_VERSION
    _SC_PAGESIZE,
#define _SC_PAGESIZE _SC_PAGESIZE
#define _SC_PAGE_SIZE _SC_PAGESIZE
    _SC_RTSIG_MAX,
#define _SC_RTSIG_MAX _SC_RTSIG_MAX
    _SC_SEM_NSEMS_MAX,
#define _SC_SEM_NSEMS_MAX _SC_SEM_NSEMS_MAX
    _SC_SEM_VALUE_MAX,
#define _SC_SEM_VALUE_MAX _SC_SEM_VALUE_MAX
    _SC_SIGQUEUE_MAX,
#define _SC_SIGQUEUE_MAX _SC_SIGQUEUE_MAX
    _SC_TIMER_MAX,
#define _SC_TIMER_MAX _SC_TIMER_MAX



    _SC_BC_BASE_MAX,
#define _SC_BC_BASE_MAX _SC_BC_BASE_MAX
    _SC_BC_DIM_MAX,
#define _SC_BC_DIM_MAX _SC_BC_DIM_MAX
    _SC_BC_SCALE_MAX,
#define _SC_BC_SCALE_MAX _SC_BC_SCALE_MAX
    _SC_BC_STRING_MAX,
#define _SC_BC_STRING_MAX _SC_BC_STRING_MAX
    _SC_COLL_WEIGHTS_MAX,
#define _SC_COLL_WEIGHTS_MAX _SC_COLL_WEIGHTS_MAX
    _SC_EQUIV_CLASS_MAX,
#define _SC_EQUIV_CLASS_MAX _SC_EQUIV_CLASS_MAX
    _SC_EXPR_NEST_MAX,
#define _SC_EXPR_NEST_MAX _SC_EXPR_NEST_MAX
    _SC_LINE_MAX,
#define _SC_LINE_MAX _SC_LINE_MAX
    _SC_RE_DUP_MAX,
#define _SC_RE_DUP_MAX _SC_RE_DUP_MAX
    _SC_CHARCLASS_NAME_MAX,
#define _SC_CHARCLASS_NAME_MAX _SC_CHARCLASS_NAME_MAX

    _SC_2_VERSION,
#define _SC_2_VERSION _SC_2_VERSION
    _SC_2_C_BIND,
#define _SC_2_C_BIND _SC_2_C_BIND
    _SC_2_C_DEV,
#define _SC_2_C_DEV _SC_2_C_DEV
    _SC_2_FORT_DEV,
#define _SC_2_FORT_DEV _SC_2_FORT_DEV
    _SC_2_FORT_RUN,
#define _SC_2_FORT_RUN _SC_2_FORT_RUN
    _SC_2_SW_DEV,
#define _SC_2_SW_DEV _SC_2_SW_DEV
    _SC_2_LOCALEDEF,
#define _SC_2_LOCALEDEF _SC_2_LOCALEDEF

    _SC_PII,
#define _SC_PII _SC_PII
    _SC_PII_XTI,
#define _SC_PII_XTI _SC_PII_XTI
    _SC_PII_SOCKET,
#define _SC_PII_SOCKET _SC_PII_SOCKET
    _SC_PII_INTERNET,
#define _SC_PII_INTERNET _SC_PII_INTERNET
    _SC_PII_OSI,
#define _SC_PII_OSI _SC_PII_OSI
    _SC_POLL,
#define _SC_POLL _SC_POLL
    _SC_SELECT,
#define _SC_SELECT _SC_SELECT
    _SC_UIO_MAXIOV,
#define _SC_UIO_MAXIOV _SC_UIO_MAXIOV
    _SC_IOV_MAX = _SC_UIO_MAXIOV,
#define _SC_IOV_MAX _SC_IOV_MAX
    _SC_PII_INTERNET_STREAM,
#define _SC_PII_INTERNET_STREAM _SC_PII_INTERNET_STREAM
    _SC_PII_INTERNET_DGRAM,
#define _SC_PII_INTERNET_DGRAM _SC_PII_INTERNET_DGRAM
    _SC_PII_OSI_COTS,
#define _SC_PII_OSI_COTS _SC_PII_OSI_COTS
    _SC_PII_OSI_CLTS,
#define _SC_PII_OSI_CLTS _SC_PII_OSI_CLTS
    _SC_PII_OSI_M,
#define _SC_PII_OSI_M _SC_PII_OSI_M
    _SC_T_IOV_MAX,
#define _SC_T_IOV_MAX _SC_T_IOV_MAX


    _SC_THREADS,
#define _SC_THREADS _SC_THREADS
    _SC_THREAD_SAFE_FUNCTIONS,
#define _SC_THREAD_SAFE_FUNCTIONS _SC_THREAD_SAFE_FUNCTIONS
    _SC_GETGR_R_SIZE_MAX,
#define _SC_GETGR_R_SIZE_MAX _SC_GETGR_R_SIZE_MAX
    _SC_GETPW_R_SIZE_MAX,
#define _SC_GETPW_R_SIZE_MAX _SC_GETPW_R_SIZE_MAX
    _SC_LOGIN_NAME_MAX,
#define _SC_LOGIN_NAME_MAX _SC_LOGIN_NAME_MAX
    _SC_TTY_NAME_MAX,
#define _SC_TTY_NAME_MAX _SC_TTY_NAME_MAX
    _SC_THREAD_DESTRUCTOR_ITERATIONS,
#define _SC_THREAD_DESTRUCTOR_ITERATIONS _SC_THREAD_DESTRUCTOR_ITERATIONS
    _SC_THREAD_KEYS_MAX,
#define _SC_THREAD_KEYS_MAX _SC_THREAD_KEYS_MAX
    _SC_THREAD_STACK_MIN,
#define _SC_THREAD_STACK_MIN _SC_THREAD_STACK_MIN
    _SC_THREAD_THREADS_MAX,
#define _SC_THREAD_THREADS_MAX _SC_THREAD_THREADS_MAX
    _SC_THREAD_ATTR_STACKADDR,
#define _SC_THREAD_ATTR_STACKADDR _SC_THREAD_ATTR_STACKADDR
    _SC_THREAD_ATTR_STACKSIZE,
#define _SC_THREAD_ATTR_STACKSIZE _SC_THREAD_ATTR_STACKSIZE
    _SC_THREAD_PRIORITY_SCHEDULING,
#define _SC_THREAD_PRIORITY_SCHEDULING _SC_THREAD_PRIORITY_SCHEDULING
    _SC_THREAD_PRIO_INHERIT,
#define _SC_THREAD_PRIO_INHERIT _SC_THREAD_PRIO_INHERIT
    _SC_THREAD_PRIO_PROTECT,
#define _SC_THREAD_PRIO_PROTECT _SC_THREAD_PRIO_PROTECT
    _SC_THREAD_PROCESS_SHARED,
#define _SC_THREAD_PROCESS_SHARED _SC_THREAD_PROCESS_SHARED

    _SC_NPROCESSORS_CONF,
#define _SC_NPROCESSORS_CONF _SC_NPROCESSORS_CONF
    _SC_NPROCESSORS_ONLN,
#define _SC_NPROCESSORS_ONLN _SC_NPROCESSORS_ONLN
    _SC_PHYS_PAGES,
#define _SC_PHYS_PAGES _SC_PHYS_PAGES
    _SC_AVPHYS_PAGES,
#define _SC_AVPHYS_PAGES _SC_AVPHYS_PAGES
    _SC_ATEXIT_MAX,
#define _SC_ATEXIT_MAX _SC_ATEXIT_MAX
    _SC_PASS_MAX,
#define _SC_PASS_MAX _SC_PASS_MAX

    _SC_XOPEN_VERSION,
#define _SC_XOPEN_VERSION _SC_XOPEN_VERSION
    _SC_XOPEN_XCU_VERSION,
#define _SC_XOPEN_XCU_VERSION _SC_XOPEN_XCU_VERSION
    _SC_XOPEN_UNIX,
#define _SC_XOPEN_UNIX _SC_XOPEN_UNIX
    _SC_XOPEN_CRYPT,
#define _SC_XOPEN_CRYPT _SC_XOPEN_CRYPT
    _SC_XOPEN_ENH_I18N,
#define _SC_XOPEN_ENH_I18N _SC_XOPEN_ENH_I18N
    _SC_XOPEN_SHM,
#define _SC_XOPEN_SHM _SC_XOPEN_SHM

    _SC_2_CHAR_TERM,
#define _SC_2_CHAR_TERM _SC_2_CHAR_TERM
    _SC_2_C_VERSION,
#define _SC_2_C_VERSION _SC_2_C_VERSION
    _SC_2_UPE,
#define _SC_2_UPE _SC_2_UPE

    _SC_XOPEN_XPG2,
#define _SC_XOPEN_XPG2 _SC_XOPEN_XPG2
    _SC_XOPEN_XPG3,
#define _SC_XOPEN_XPG3 _SC_XOPEN_XPG3
    _SC_XOPEN_XPG4,
#define _SC_XOPEN_XPG4 _SC_XOPEN_XPG4

    _SC_CHAR_BIT,
#define _SC_CHAR_BIT _SC_CHAR_BIT
    _SC_CHAR_MAX,
#define _SC_CHAR_MAX _SC_CHAR_MAX
    _SC_CHAR_MIN,
#define _SC_CHAR_MIN _SC_CHAR_MIN
    _SC_INT_MAX,
#define _SC_INT_MAX _SC_INT_MAX
    _SC_INT_MIN,
#define _SC_INT_MIN _SC_INT_MIN
    _SC_LONG_BIT,
#define _SC_LONG_BIT _SC_LONG_BIT
    _SC_WORD_BIT,
#define _SC_WORD_BIT _SC_WORD_BIT
    _SC_MB_LEN_MAX,
#define _SC_MB_LEN_MAX _SC_MB_LEN_MAX
    _SC_NZERO,
#define _SC_NZERO _SC_NZERO
    _SC_SSIZE_MAX,
#define _SC_SSIZE_MAX _SC_SSIZE_MAX
    _SC_SCHAR_MAX,
#define _SC_SCHAR_MAX _SC_SCHAR_MAX
    _SC_SCHAR_MIN,
#define _SC_SCHAR_MIN _SC_SCHAR_MIN
    _SC_SHRT_MAX,
#define _SC_SHRT_MAX _SC_SHRT_MAX
    _SC_SHRT_MIN,
#define _SC_SHRT_MIN _SC_SHRT_MIN
    _SC_UCHAR_MAX,
#define _SC_UCHAR_MAX _SC_UCHAR_MAX
    _SC_UINT_MAX,
#define _SC_UINT_MAX _SC_UINT_MAX
    _SC_ULONG_MAX,
#define _SC_ULONG_MAX _SC_ULONG_MAX
    _SC_USHRT_MAX,
#define _SC_USHRT_MAX _SC_USHRT_MAX

    _SC_NL_ARGMAX,
#define _SC_NL_ARGMAX _SC_NL_ARGMAX
    _SC_NL_LANGMAX,
#define _SC_NL_LANGMAX _SC_NL_LANGMAX
    _SC_NL_MSGMAX,
#define _SC_NL_MSGMAX _SC_NL_MSGMAX
    _SC_NL_NMAX,
#define _SC_NL_NMAX _SC_NL_NMAX
    _SC_NL_SETMAX,
#define _SC_NL_SETMAX _SC_NL_SETMAX
    _SC_NL_TEXTMAX,
#define _SC_NL_TEXTMAX _SC_NL_TEXTMAX

    _SC_XBS5_ILP32_OFF32,
#define _SC_XBS5_ILP32_OFF32 _SC_XBS5_ILP32_OFF32
    _SC_XBS5_ILP32_OFFBIG,
#define _SC_XBS5_ILP32_OFFBIG _SC_XBS5_ILP32_OFFBIG
    _SC_XBS5_LP64_OFF64,
#define _SC_XBS5_LP64_OFF64 _SC_XBS5_LP64_OFF64
    _SC_XBS5_LPBIG_OFFBIG,
#define _SC_XBS5_LPBIG_OFFBIG _SC_XBS5_LPBIG_OFFBIG

    _SC_XOPEN_LEGACY,
#define _SC_XOPEN_LEGACY _SC_XOPEN_LEGACY
    _SC_XOPEN_REALTIME,
#define _SC_XOPEN_REALTIME _SC_XOPEN_REALTIME
    _SC_XOPEN_REALTIME_THREADS,
#define _SC_XOPEN_REALTIME_THREADS _SC_XOPEN_REALTIME_THREADS

    _SC_ADVISORY_INFO,
#define _SC_ADVISORY_INFO _SC_ADVISORY_INFO
    _SC_BARRIERS,
#define _SC_BARRIERS _SC_BARRIERS
    _SC_BASE,
#define _SC_BASE _SC_BASE
    _SC_C_LANG_SUPPORT,
#define _SC_C_LANG_SUPPORT _SC_C_LANG_SUPPORT
    _SC_C_LANG_SUPPORT_R,
#define _SC_C_LANG_SUPPORT_R _SC_C_LANG_SUPPORT_R
    _SC_CLOCK_SELECTION,
#define _SC_CLOCK_SELECTION _SC_CLOCK_SELECTION
    _SC_CPUTIME,
#define _SC_CPUTIME _SC_CPUTIME
    _SC_THREAD_CPUTIME,
#define _SC_THREAD_CPUTIME _SC_THREAD_CPUTIME
    _SC_DEVICE_IO,
#define _SC_DEVICE_IO _SC_DEVICE_IO
    _SC_DEVICE_SPECIFIC,
#define _SC_DEVICE_SPECIFIC _SC_DEVICE_SPECIFIC
    _SC_DEVICE_SPECIFIC_R,
#define _SC_DEVICE_SPECIFIC_R _SC_DEVICE_SPECIFIC_R
    _SC_FD_MGMT,
#define _SC_FD_MGMT _SC_FD_MGMT
    _SC_FIFO,
#define _SC_FIFO _SC_FIFO
    _SC_PIPE,
#define _SC_PIPE _SC_PIPE
    _SC_FILE_ATTRIBUTES,
#define _SC_FILE_ATTRIBUTES _SC_FILE_ATTRIBUTES
    _SC_FILE_LOCKING,
#define _SC_FILE_LOCKING _SC_FILE_LOCKING
    _SC_FILE_SYSTEM,
#define _SC_FILE_SYSTEM _SC_FILE_SYSTEM
    _SC_MONOTONIC_CLOCK,
#define _SC_MONOTONIC_CLOCK _SC_MONOTONIC_CLOCK
    _SC_MULTI_PROCESS,
#define _SC_MULTI_PROCESS _SC_MULTI_PROCESS
    _SC_SINGLE_PROCESS,
#define _SC_SINGLE_PROCESS _SC_SINGLE_PROCESS
    _SC_NETWORKING,
#define _SC_NETWORKING _SC_NETWORKING
    _SC_READER_WRITER_LOCKS,
#define _SC_READER_WRITER_LOCKS _SC_READER_WRITER_LOCKS
    _SC_SPIN_LOCKS,
#define _SC_SPIN_LOCKS _SC_SPIN_LOCKS
    _SC_REGEXP,
#define _SC_REGEXP _SC_REGEXP
    _SC_REGEX_VERSION,
#define _SC_REGEX_VERSION _SC_REGEX_VERSION
    _SC_SHELL,
#define _SC_SHELL _SC_SHELL
    _SC_SIGNALS,
#define _SC_SIGNALS _SC_SIGNALS
    _SC_SPAWN,
#define _SC_SPAWN _SC_SPAWN
    _SC_SPORADIC_SERVER,
#define _SC_SPORADIC_SERVER _SC_SPORADIC_SERVER
    _SC_THREAD_SPORADIC_SERVER,
#define _SC_THREAD_SPORADIC_SERVER _SC_THREAD_SPORADIC_SERVER
    _SC_SYSTEM_DATABASE,
#define _SC_SYSTEM_DATABASE _SC_SYSTEM_DATABASE
    _SC_SYSTEM_DATABASE_R,
#define _SC_SYSTEM_DATABASE_R _SC_SYSTEM_DATABASE_R
    _SC_TIMEOUTS,
#define _SC_TIMEOUTS _SC_TIMEOUTS
    _SC_TYPED_MEMORY_OBJECTS,
#define _SC_TYPED_MEMORY_OBJECTS _SC_TYPED_MEMORY_OBJECTS
    _SC_USER_GROUPS,
#define _SC_USER_GROUPS _SC_USER_GROUPS
    _SC_USER_GROUPS_R,
#define _SC_USER_GROUPS_R _SC_USER_GROUPS_R
    _SC_2_PBS,
#define _SC_2_PBS _SC_2_PBS
    _SC_2_PBS_ACCOUNTING,
#define _SC_2_PBS_ACCOUNTING _SC_2_PBS_ACCOUNTING
    _SC_2_PBS_LOCATE,
#define _SC_2_PBS_LOCATE _SC_2_PBS_LOCATE
    _SC_2_PBS_MESSAGE,
#define _SC_2_PBS_MESSAGE _SC_2_PBS_MESSAGE
    _SC_2_PBS_TRACK,
#define _SC_2_PBS_TRACK _SC_2_PBS_TRACK
    _SC_SYMLOOP_MAX,
#define _SC_SYMLOOP_MAX _SC_SYMLOOP_MAX
    _SC_STREAMS,
#define _SC_STREAMS _SC_STREAMS
    _SC_2_PBS_CHECKPOINT,
#define _SC_2_PBS_CHECKPOINT _SC_2_PBS_CHECKPOINT

    _SC_V6_ILP32_OFF32,
#define _SC_V6_ILP32_OFF32 _SC_V6_ILP32_OFF32
    _SC_V6_ILP32_OFFBIG,
#define _SC_V6_ILP32_OFFBIG _SC_V6_ILP32_OFFBIG
    _SC_V6_LP64_OFF64,
#define _SC_V6_LP64_OFF64 _SC_V6_LP64_OFF64
    _SC_V6_LPBIG_OFFBIG,
#define _SC_V6_LPBIG_OFFBIG _SC_V6_LPBIG_OFFBIG

    _SC_HOST_NAME_MAX,
#define _SC_HOST_NAME_MAX _SC_HOST_NAME_MAX
    _SC_TRACE,
#define _SC_TRACE _SC_TRACE
    _SC_TRACE_EVENT_FILTER,
#define _SC_TRACE_EVENT_FILTER _SC_TRACE_EVENT_FILTER
    _SC_TRACE_INHERIT,
#define _SC_TRACE_INHERIT _SC_TRACE_INHERIT
    _SC_TRACE_LOG,
#define _SC_TRACE_LOG _SC_TRACE_LOG

    _SC_LEVEL1_ICACHE_SIZE,
#define _SC_LEVEL1_ICACHE_SIZE _SC_LEVEL1_ICACHE_SIZE
    _SC_LEVEL1_ICACHE_ASSOC,
#define _SC_LEVEL1_ICACHE_ASSOC _SC_LEVEL1_ICACHE_ASSOC
    _SC_LEVEL1_ICACHE_LINESIZE,
#define _SC_LEVEL1_ICACHE_LINESIZE _SC_LEVEL1_ICACHE_LINESIZE
    _SC_LEVEL1_DCACHE_SIZE,
#define _SC_LEVEL1_DCACHE_SIZE _SC_LEVEL1_DCACHE_SIZE
    _SC_LEVEL1_DCACHE_ASSOC,
#define _SC_LEVEL1_DCACHE_ASSOC _SC_LEVEL1_DCACHE_ASSOC
    _SC_LEVEL1_DCACHE_LINESIZE,
#define _SC_LEVEL1_DCACHE_LINESIZE _SC_LEVEL1_DCACHE_LINESIZE
    _SC_LEVEL2_CACHE_SIZE,
#define _SC_LEVEL2_CACHE_SIZE _SC_LEVEL2_CACHE_SIZE
    _SC_LEVEL2_CACHE_ASSOC,
#define _SC_LEVEL2_CACHE_ASSOC _SC_LEVEL2_CACHE_ASSOC
    _SC_LEVEL2_CACHE_LINESIZE,
#define _SC_LEVEL2_CACHE_LINESIZE _SC_LEVEL2_CACHE_LINESIZE
    _SC_LEVEL3_CACHE_SIZE,
#define _SC_LEVEL3_CACHE_SIZE _SC_LEVEL3_CACHE_SIZE
    _SC_LEVEL3_CACHE_ASSOC,
#define _SC_LEVEL3_CACHE_ASSOC _SC_LEVEL3_CACHE_ASSOC
    _SC_LEVEL3_CACHE_LINESIZE,
#define _SC_LEVEL3_CACHE_LINESIZE _SC_LEVEL3_CACHE_LINESIZE
    _SC_LEVEL4_CACHE_SIZE,
#define _SC_LEVEL4_CACHE_SIZE _SC_LEVEL4_CACHE_SIZE
    _SC_LEVEL4_CACHE_ASSOC,
#define _SC_LEVEL4_CACHE_ASSOC _SC_LEVEL4_CACHE_ASSOC
    _SC_LEVEL4_CACHE_LINESIZE,
#define _SC_LEVEL4_CACHE_LINESIZE _SC_LEVEL4_CACHE_LINESIZE


    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,
#define _SC_IPV6 _SC_IPV6
    _SC_RAW_SOCKETS,
#define _SC_RAW_SOCKETS _SC_RAW_SOCKETS

    _SC_V7_ILP32_OFF32,
#define _SC_V7_ILP32_OFF32 _SC_V7_ILP32_OFF32
    _SC_V7_ILP32_OFFBIG,
#define _SC_V7_ILP32_OFFBIG _SC_V7_ILP32_OFFBIG
    _SC_V7_LP64_OFF64,
#define _SC_V7_LP64_OFF64 _SC_V7_LP64_OFF64
    _SC_V7_LPBIG_OFFBIG,
#define _SC_V7_LPBIG_OFFBIG _SC_V7_LPBIG_OFFBIG

    _SC_SS_REPL_MAX,
#define _SC_SS_REPL_MAX _SC_SS_REPL_MAX

    _SC_TRACE_EVENT_NAME_MAX,
#define _SC_TRACE_EVENT_NAME_MAX _SC_TRACE_EVENT_NAME_MAX
    _SC_TRACE_NAME_MAX,
#define _SC_TRACE_NAME_MAX _SC_TRACE_NAME_MAX
    _SC_TRACE_SYS_MAX,
#define _SC_TRACE_SYS_MAX _SC_TRACE_SYS_MAX
    _SC_TRACE_USER_EVENT_MAX,
#define _SC_TRACE_USER_EVENT_MAX _SC_TRACE_USER_EVENT_MAX

    _SC_XOPEN_STREAMS,
#define _SC_XOPEN_STREAMS _SC_XOPEN_STREAMS

    _SC_THREAD_ROBUST_PRIO_INHERIT,
#define _SC_THREAD_ROBUST_PRIO_INHERIT _SC_THREAD_ROBUST_PRIO_INHERIT
    _SC_THREAD_ROBUST_PRIO_PROTECT
#define _SC_THREAD_ROBUST_PRIO_PROTECT _SC_THREAD_ROBUST_PRIO_PROTECT
  };


enum
  {
    _CS_PATH,
#define _CS_PATH _CS_PATH

    _CS_V6_WIDTH_RESTRICTED_ENVS,
#define _CS_V6_WIDTH_RESTRICTED_ENVS _CS_V6_WIDTH_RESTRICTED_ENVS
#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS _CS_V6_WIDTH_RESTRICTED_ENVS

    _CS_GNU_LIBC_VERSION,
#define _CS_GNU_LIBC_VERSION _CS_GNU_LIBC_VERSION
    _CS_GNU_LIBPTHREAD_VERSION,
#define _CS_GNU_LIBPTHREAD_VERSION _CS_GNU_LIBPTHREAD_VERSION

    _CS_V5_WIDTH_RESTRICTED_ENVS,
#define _CS_V5_WIDTH_RESTRICTED_ENVS _CS_V5_WIDTH_RESTRICTED_ENVS
#define _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS _CS_V5_WIDTH_RESTRICTED_ENVS

    _CS_V7_WIDTH_RESTRICTED_ENVS,
#define _CS_V7_WIDTH_RESTRICTED_ENVS _CS_V7_WIDTH_RESTRICTED_ENVS
#define _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS _CS_V7_WIDTH_RESTRICTED_ENVS

    _CS_LFS_CFLAGS = 1000,
#define _CS_LFS_CFLAGS _CS_LFS_CFLAGS
    _CS_LFS_LDFLAGS,
#define _CS_LFS_LDFLAGS _CS_LFS_LDFLAGS
    _CS_LFS_LIBS,
#define _CS_LFS_LIBS _CS_LFS_LIBS
    _CS_LFS_LINTFLAGS,
#define _CS_LFS_LINTFLAGS _CS_LFS_LINTFLAGS
    _CS_LFS64_CFLAGS,
#define _CS_LFS64_CFLAGS _CS_LFS64_CFLAGS
    _CS_LFS64_LDFLAGS,
#define _CS_LFS64_LDFLAGS _CS_LFS64_LDFLAGS
    _CS_LFS64_LIBS,
#define _CS_LFS64_LIBS _CS_LFS64_LIBS
    _CS_LFS64_LINTFLAGS,
#define _CS_LFS64_LINTFLAGS _CS_LFS64_LINTFLAGS

    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
#define _CS_XBS5_ILP32_OFF32_CFLAGS _CS_XBS5_ILP32_OFF32_CFLAGS
    _CS_XBS5_ILP32_OFF32_LDFLAGS,
#define _CS_XBS5_ILP32_OFF32_LDFLAGS _CS_XBS5_ILP32_OFF32_LDFLAGS
    _CS_XBS5_ILP32_OFF32_LIBS,
#define _CS_XBS5_ILP32_OFF32_LIBS _CS_XBS5_ILP32_OFF32_LIBS
    _CS_XBS5_ILP32_OFF32_LINTFLAGS,
#define _CS_XBS5_ILP32_OFF32_LINTFLAGS _CS_XBS5_ILP32_OFF32_LINTFLAGS
    _CS_XBS5_ILP32_OFFBIG_CFLAGS,
#define _CS_XBS5_ILP32_OFFBIG_CFLAGS _CS_XBS5_ILP32_OFFBIG_CFLAGS
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,
#define _CS_XBS5_ILP32_OFFBIG_LDFLAGS _CS_XBS5_ILP32_OFFBIG_LDFLAGS
    _CS_XBS5_ILP32_OFFBIG_LIBS,
#define _CS_XBS5_ILP32_OFFBIG_LIBS _CS_XBS5_ILP32_OFFBIG_LIBS
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
#define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS _CS_XBS5_ILP32_OFFBIG_LINTFLAGS
    _CS_XBS5_LP64_OFF64_CFLAGS,
#define _CS_XBS5_LP64_OFF64_CFLAGS _CS_XBS5_LP64_OFF64_CFLAGS
    _CS_XBS5_LP64_OFF64_LDFLAGS,
#define _CS_XBS5_LP64_OFF64_LDFLAGS _CS_XBS5_LP64_OFF64_LDFLAGS
    _CS_XBS5_LP64_OFF64_LIBS,
#define _CS_XBS5_LP64_OFF64_LIBS _CS_XBS5_LP64_OFF64_LIBS
    _CS_XBS5_LP64_OFF64_LINTFLAGS,
#define _CS_XBS5_LP64_OFF64_LINTFLAGS _CS_XBS5_LP64_OFF64_LINTFLAGS
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,
#define _CS_XBS5_LPBIG_OFFBIG_CFLAGS _CS_XBS5_LPBIG_OFFBIG_CFLAGS
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
#define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS _CS_XBS5_LPBIG_OFFBIG_LDFLAGS
    _CS_XBS5_LPBIG_OFFBIG_LIBS,
#define _CS_XBS5_LPBIG_OFFBIG_LIBS _CS_XBS5_LPBIG_OFFBIG_LIBS
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
#define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS

    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,
#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS _CS_POSIX_V6_ILP32_OFF32_CFLAGS
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS _CS_POSIX_V6_ILP32_OFF32_LDFLAGS
    _CS_POSIX_V6_ILP32_OFF32_LIBS,
#define _CS_POSIX_V6_ILP32_OFF32_LIBS _CS_POSIX_V6_ILP32_OFF32_LIBS
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
#define _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,
#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS _CS_POSIX_V6_ILP32_OFFBIG_LIBS
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
    _CS_POSIX_V6_LP64_OFF64_CFLAGS,
#define _CS_POSIX_V6_LP64_OFF64_CFLAGS _CS_POSIX_V6_LP64_OFF64_CFLAGS
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,
#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS _CS_POSIX_V6_LP64_OFF64_LDFLAGS
    _CS_POSIX_V6_LP64_OFF64_LIBS,
#define _CS_POSIX_V6_LP64_OFF64_LIBS _CS_POSIX_V6_LP64_OFF64_LIBS
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
#define _CS_POSIX_V6_LP64_OFF64_LINTFLAGS _CS_POSIX_V6_LP64_OFF64_LINTFLAGS
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS _CS_POSIX_V6_LPBIG_OFFBIG_LIBS
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS

    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,
#define _CS_POSIX_V7_ILP32_OFF32_CFLAGS _CS_POSIX_V7_ILP32_OFF32_CFLAGS
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
#define _CS_POSIX_V7_ILP32_OFF32_LDFLAGS _CS_POSIX_V7_ILP32_OFF32_LDFLAGS
    _CS_POSIX_V7_ILP32_OFF32_LIBS,
#define _CS_POSIX_V7_ILP32_OFF32_LIBS _CS_POSIX_V7_ILP32_OFF32_LIBS
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
#define _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
#define _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
#define _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,
#define _CS_POSIX_V7_ILP32_OFFBIG_LIBS _CS_POSIX_V7_ILP32_OFFBIG_LIBS
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
    _CS_POSIX_V7_LP64_OFF64_CFLAGS,
#define _CS_POSIX_V7_LP64_OFF64_CFLAGS _CS_POSIX_V7_LP64_OFF64_CFLAGS
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,
#define _CS_POSIX_V7_LP64_OFF64_LDFLAGS _CS_POSIX_V7_LP64_OFF64_LDFLAGS
    _CS_POSIX_V7_LP64_OFF64_LIBS,
#define _CS_POSIX_V7_LP64_OFF64_LIBS _CS_POSIX_V7_LP64_OFF64_LIBS
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
#define _CS_POSIX_V7_LP64_OFF64_LINTFLAGS _CS_POSIX_V7_LP64_OFF64_LINTFLAGS
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_LIBS _CS_POSIX_V7_LPBIG_OFFBIG_LIBS
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS

    _CS_V6_ENV,
#define _CS_V6_ENV _CS_V6_ENV
    _CS_V7_ENV
#define _CS_V7_ENV _CS_V7_ENV
  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







#define __need_getopt 
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/getopt.h" 3 4
#undef __need_getopt
# 874 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 999 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off64_t __length) __asm__ ("" "truncate64") __attribute__ ((__nothrow__ , __leaf__))

                  __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1021 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off64_t __length) __asm__ ("" "ftruncate64") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__warn_unused_result__));





extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 1039 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1060 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1077 "/usr/include/unistd.h" 3 4
#define F_ULOCK 0
#define F_LOCK 1
#define F_TLOCK 2
#define F_TEST 3





extern int lockf (int __fd, int __cmd, __off64_t __len) __asm__ ("" "lockf64")
                  __attribute__ ((__warn_unused_result__));





extern int lockf64 (int __fd, int __cmd, __off64_t __len) __attribute__ ((__warn_unused_result__));
# 1103 "/usr/include/unistd.h" 3 4
#define TEMP_FAILURE_RETRY(expression) (__extension__ ({ long int __result; do __result = (long int) (expression); while (__result == -1L && errno == EINTR); __result; }))
# 1114 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1163 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen) __attribute__ ((__warn_unused_result__));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")
                               __attribute__ ((__warn_unused_result__));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));

      if (__nbytes > __builtin_object_size (__buf, 0))
 return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
    }
  return __read_alias (__fd, __buf, __nbytes);
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")

                                 __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

                                     __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;
# 86 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
       __builtin_object_size (__buf, 0));
    }

  return __pread64_alias (__fd, __buf, __nbytes, __offset);
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
       __builtin_object_size (__buf, 0));
    }

  return __pread64_alias (__fd, __buf, __nbytes, __offset);
}




extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlink") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlink_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len)

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if ( __len > __builtin_object_size (__buf, 2 > 1))
 return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __readlink_alias (__path, __buf, __len);
}



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlinkat") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlinkat_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len)

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__len > __builtin_object_size (__buf, 2 > 1))
 return __readlinkat_chk_warn (__fd, __path, __buf, __len,
          __builtin_object_size (__buf, 2 > 1));
    }
  return __readlinkat_alias (__fd, __path, __buf, __len);
}


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) __asm__ ("" "getcwd") __attribute__ ((__nothrow__ , __leaf__))
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) __asm__ ("" "__getcwd_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getcwd (char *__buf, size_t __size)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size))
 return __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1));

      if (__size > __builtin_object_size (__buf, 2 > 1))
 return __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1));
    }
  return __getcwd_alias (__buf, __size);
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *__getwd_warn (char *__buf) __asm__ ("" "getwd") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getwd (char *__buf)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) __asm__ ("" "confstr") __attribute__ ((__nothrow__ , __leaf__))
                             ;
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) __asm__ ("" "__confstr_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) confstr (int __name, char *__buf, size_t __len)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__builtin_object_size (__buf, 2 > 1) < __len)
 return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __confstr_alias (__name, __buf, __len);
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __getgroups_alias (int __size, __gid_t __list[]) __asm__ ("" "getgroups") __attribute__ ((__nothrow__ , __leaf__))
                 __attribute__ ((__warn_unused_result__));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) __asm__ ("" "__getgroups_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getgroups (int __size, __gid_t __list[])
{
  if (__builtin_object_size (__list, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size) || __size < 0)
 return __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1));

      if (__size * sizeof (__gid_t) > __builtin_object_size (__list, 2 > 1))
 return __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1));
    }
  return __getgroups_alias (__size, __list);
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ttyname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ttyname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getlogin_r_alias (__buf, __buflen);
}




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int __gethostname_alias (char *__buf, size_t __buflen) __asm__ ("" "gethostname") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__nonnull__ (1)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__gethostname_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) gethostname (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __gethostname_alias (__buf, __buflen);
}




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_alias (char *__buf, size_t __buflen) __asm__ ("" "getdomainname") __attribute__ ((__nothrow__ , __leaf__))

                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getdomainname_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getdomainname (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getdomainname_alias (__buf, __buflen);
}
# 1164 "/usr/include/unistd.h" 2 3 4



# 17 "util/evlist.h" 2


# 18 "util/evlist.h"
struct pollfd;
struct thread_map;
struct perf_cpu_map;
struct record_opts;
# 44 "util/evlist.h"
enum bkw_mmap_state {
 BKW_MMAP_NOTREADY,
 BKW_MMAP_RUNNING,
 BKW_MMAP_DATA_PENDING,
 BKW_MMAP_EMPTY,
};

struct evlist {
 struct perf_evlist core;
 int nr_groups;
 
# 54 "util/evlist.h" 3 4
_Bool 
# 54 "util/evlist.h"
       enabled;
 int id_pos;
 int is_pos;
 u64 combined_sample_type;
 enum bkw_mmap_state bkw_mmap_state;
 struct {
  int cork_fd;
  pid_t pid;
 } workload;
 struct mmap *mmap;
 struct mmap *overwrite_mmap;
 struct evsel *selected;
 struct events_stats stats;
 struct perf_env *env;
 void (*trace_event_sample_raw)(struct evlist *evlist,
           union perf_event *event,
           struct perf_sample *sample);
 u64 first_sample_time;
 u64 last_sample_time;
 struct {
  pthread_t th;
  volatile int done;
 } thread;
};

struct evsel_str_handler {
 const char *name;
 void *handler;
};

struct evlist *evlist__new(void);
struct evlist *perf_evlist__new_default(void);
struct evlist *perf_evlist__new_dummy(void);
void evlist__init(struct evlist *evlist, struct perf_cpu_map *cpus,
    struct perf_thread_map *threads);
void evlist__exit(struct evlist *evlist);
void evlist__delete(struct evlist *evlist);

void evlist__add(struct evlist *evlist, struct evsel *entry);
void evlist__remove(struct evlist *evlist, struct evsel *evsel);

int __perf_evlist__add_default(struct evlist *evlist, 
# 95 "util/evlist.h" 3 4
                                                     _Bool 
# 95 "util/evlist.h"
                                                          precise);

static inline int perf_evlist__add_default(struct evlist *evlist)
{
 return __perf_evlist__add_default(evlist, 
# 99 "util/evlist.h" 3 4
                                          1
# 99 "util/evlist.h"
                                              );
}

int __perf_evlist__add_default_attrs(struct evlist *evlist,
         struct perf_event_attr *attrs, size_t nr_attrs);

#define perf_evlist__add_default_attrs(evlist,array) __perf_evlist__add_default_attrs(evlist, array, ARRAY_SIZE(array))


int perf_evlist__add_dummy(struct evlist *evlist);

int perf_evlist__add_sb_event(struct evlist **evlist,
         struct perf_event_attr *attr,
         perf_evsel__sb_cb_t cb,
         void *data);
int perf_evlist__start_sb_thread(struct evlist *evlist,
     struct target *target);
void perf_evlist__stop_sb_thread(struct evlist *evlist);

int perf_evlist__add_newtp(struct evlist *evlist,
      const char *sys, const char *name, void *handler);

int __evlist__set_tracepoints_handlers(struct evlist *evlist,
           const struct evsel_str_handler *assocs,
           size_t nr_assocs);

#define evlist__set_tracepoints_handlers(evlist,array) __evlist__set_tracepoints_handlers(evlist, array, ARRAY_SIZE(array))


void __perf_evlist__set_sample_bit(struct evlist *evlist,
       enum perf_event_sample_format bit);
void __perf_evlist__reset_sample_bit(struct evlist *evlist,
         enum perf_event_sample_format bit);

#define perf_evlist__set_sample_bit(evlist,bit) __perf_evlist__set_sample_bit(evlist, PERF_SAMPLE_ ##bit)


#define perf_evlist__reset_sample_bit(evlist,bit) __perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_ ##bit)


int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);

int perf_evlist__append_tp_filter(struct evlist *evlist, const char *filter);

int perf_evlist__append_tp_filter_pid(struct evlist *evlist, pid_t pid);
int perf_evlist__append_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);

struct evsel *
perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);

struct evsel *
perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
         const char *name);

int evlist__add_pollfd(struct evlist *evlist, int fd);
int evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);

int evlist__poll(struct evlist *evlist, int timeout);

struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
      u64 id);

struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);

void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);

void evlist__mmap_consume(struct evlist *evlist, int idx);

int evlist__open(struct evlist *evlist);
void evlist__close(struct evlist *evlist);

struct callchain_param;

void perf_evlist__set_id_pos(struct evlist *evlist);

# 176 "util/evlist.h" 3 4
_Bool 
# 176 "util/evlist.h"
    perf_can_sample_identifier(void);

# 177 "util/evlist.h" 3 4
_Bool 
# 177 "util/evlist.h"
    perf_can_record_switch_events(void);

# 178 "util/evlist.h" 3 4
_Bool 
# 178 "util/evlist.h"
    perf_can_record_cpu_wide(void);

# 179 "util/evlist.h" 3 4
_Bool 
# 179 "util/evlist.h"
    perf_can_aux_sample(void);
void perf_evlist__config(struct evlist *evlist, struct record_opts *opts,
    struct callchain_param *callchain);
int record_opts__config(struct record_opts *opts);

int perf_evlist__prepare_workload(struct evlist *evlist,
      struct target *target,
      const char *argv[], 
# 186 "util/evlist.h" 3 4
                         _Bool 
# 186 "util/evlist.h"
                              pipe_output,
      void (*exec_error)(int signo, siginfo_t *info,
           void *ucontext));
int perf_evlist__start_workload(struct evlist *evlist);

struct option;

int __perf_evlist__parse_mmap_pages(unsigned int *mmap_pages, const char *str);
int perf_evlist__parse_mmap_pages(const struct option *opt,
      const char *str,
      int unset);

unsigned long perf_event_mlock_kb_in_pages(void);

int evlist__mmap_ex(struct evlist *evlist, unsigned int pages,
    unsigned int auxtrace_pages,
    
# 202 "util/evlist.h" 3 4
   _Bool 
# 202 "util/evlist.h"
        auxtrace_overwrite, int nr_cblocks,
    int affinity, int flush, int comp_level);
int evlist__mmap(struct evlist *evlist, unsigned int pages);
void evlist__munmap(struct evlist *evlist);

size_t evlist__mmap_size(unsigned long pages);

void evlist__disable(struct evlist *evlist);
void evlist__enable(struct evlist *evlist);
void perf_evlist__toggle_enable(struct evlist *evlist);

int perf_evlist__enable_event_idx(struct evlist *evlist,
      struct evsel *evsel, int idx);

void perf_evlist__set_selected(struct evlist *evlist,
          struct evsel *evsel);

int perf_evlist__create_maps(struct evlist *evlist, struct target *target);
int perf_evlist__apply_filters(struct evlist *evlist, struct evsel **err_evsel);

void __perf_evlist__set_leader(struct list_head *list);
void perf_evlist__set_leader(struct evlist *evlist);

u64 __perf_evlist__combined_sample_type(struct evlist *evlist);
u64 perf_evlist__combined_sample_type(struct evlist *evlist);
u64 perf_evlist__combined_branch_type(struct evlist *evlist);

# 228 "util/evlist.h" 3 4
_Bool 
# 228 "util/evlist.h"
    perf_evlist__sample_id_all(struct evlist *evlist);
u16 perf_evlist__id_hdr_size(struct evlist *evlist);

int perf_evlist__parse_sample(struct evlist *evlist, union perf_event *event,
         struct perf_sample *sample);

int perf_evlist__parse_sample_timestamp(struct evlist *evlist,
     union perf_event *event,
     u64 *timestamp);


# 238 "util/evlist.h" 3 4
_Bool 
# 238 "util/evlist.h"
    perf_evlist__valid_sample_type(struct evlist *evlist);

# 239 "util/evlist.h" 3 4
_Bool 
# 239 "util/evlist.h"
    perf_evlist__valid_sample_id_all(struct evlist *evlist);

# 240 "util/evlist.h" 3 4
_Bool 
# 240 "util/evlist.h"
    perf_evlist__valid_read_format(struct evlist *evlist);

void perf_evlist__splice_list_tail(struct evlist *evlist,
       struct list_head *list);

static inline 
# 245 "util/evlist.h" 3 4
             _Bool 
# 245 "util/evlist.h"
                  perf_evlist__empty(struct evlist *evlist)
{
 return list_empty(&evlist->core.entries);
}

static inline struct evsel *evlist__first(struct evlist *evlist)
{
 struct perf_evsel *evsel = perf_evlist__first(&evlist->core);

 return ({ const typeof(((struct evsel *)0)->core) * __mptr = (evsel); (struct evsel *)((char *)__mptr - 
# 254 "util/evlist.h" 3 4
       __builtin_offsetof (
# 254 "util/evlist.h"
       struct evsel
# 254 "util/evlist.h" 3 4
       , 
# 254 "util/evlist.h"
       core
# 254 "util/evlist.h" 3 4
       )
# 254 "util/evlist.h"
       ); });
}

static inline struct evsel *evlist__last(struct evlist *evlist)
{
 struct perf_evsel *evsel = perf_evlist__last(&evlist->core);

 return ({ const typeof(((struct evsel *)0)->core) * __mptr = (evsel); (struct evsel *)((char *)__mptr - 
# 261 "util/evlist.h" 3 4
       __builtin_offsetof (
# 261 "util/evlist.h"
       struct evsel
# 261 "util/evlist.h" 3 4
       , 
# 261 "util/evlist.h"
       core
# 261 "util/evlist.h" 3 4
       )
# 261 "util/evlist.h"
       ); });
}

int perf_evlist__strerror_open(struct evlist *evlist, int err, char *buf, size_t size);
int perf_evlist__strerror_mmap(struct evlist *evlist, int err, char *buf, size_t size);


# 267 "util/evlist.h" 3 4
_Bool 
# 267 "util/evlist.h"
    perf_evlist__can_select_event(struct evlist *evlist, const char *str);
void perf_evlist__to_front(struct evlist *evlist,
      struct evsel *move_evsel);






#define __evlist__for_each_entry(list,evsel) list_for_each_entry(evsel, list, core.node)







#define evlist__for_each_entry(evlist,evsel) __evlist__for_each_entry(&(evlist)->core.entries, evsel)







#define __evlist__for_each_entry_continue(list,evsel) list_for_each_entry_continue(evsel, list, core.node)







#define evlist__for_each_entry_continue(evlist,evsel) __evlist__for_each_entry_continue(&(evlist)->core.entries, evsel)







#define __evlist__for_each_entry_reverse(list,evsel) list_for_each_entry_reverse(evsel, list, core.node)







#define evlist__for_each_entry_reverse(evlist,evsel) __evlist__for_each_entry_reverse(&(evlist)->core.entries, evsel)
# 325 "util/evlist.h"
#define __evlist__for_each_entry_safe(list,tmp,evsel) list_for_each_entry_safe(evsel, tmp, list, core.node)
# 334 "util/evlist.h"
#define evlist__for_each_entry_safe(evlist,tmp,evsel) __evlist__for_each_entry_safe(&(evlist)->core.entries, tmp, evsel)


#define evlist__for_each_cpu(evlist,index,cpu) evlist__cpu_iter_start(evlist); perf_cpu_map__for_each_cpu (cpu, index, (evlist)->core.all_cpus)



void perf_evlist__set_tracking_event(struct evlist *evlist,
         struct evsel *tracking_evsel);

void evlist__cpu_iter_start(struct evlist *evlist);

# 345 "util/evlist.h" 3 4
_Bool 
# 345 "util/evlist.h"
    evsel__cpu_iter_skip(struct evsel *ev, int cpu);

# 346 "util/evlist.h" 3 4
_Bool 
# 346 "util/evlist.h"
    evsel__cpu_iter_skip_no_inc(struct evsel *ev, int cpu);

struct evsel *
perf_evlist__find_evsel_by_str(struct evlist *evlist, const char *str);

struct evsel *perf_evlist__event2evsel(struct evlist *evlist,
         union perf_event *event);


# 354 "util/evlist.h" 3 4
_Bool 
# 354 "util/evlist.h"
    perf_evlist__exclude_kernel(struct evlist *evlist);

void perf_evlist__force_leader(struct evlist *evlist);

struct evsel *perf_evlist__reset_weak_group(struct evlist *evlist,
       struct evsel *evsel,
      
# 360 "util/evlist.h" 3 4
     _Bool 
# 360 "util/evlist.h"
          close);
# 35 "builtin-trace.c" 2
# 1 "util/evswitch.h" 1



#define __PERF_EVSWITCH_H 1




struct evsel;
struct evlist;

struct evswitch {
 struct evsel *on, *off;
 const char *on_name, *off_name;
 
# 15 "util/evswitch.h" 3 4
_Bool 
# 15 "util/evswitch.h"
          discarding;
 
# 16 "util/evswitch.h" 3 4
_Bool 
# 16 "util/evswitch.h"
          show_on_off_events;
};

int evswitch__init(struct evswitch *evswitch, struct evlist *evlist, FILE *fp);


# 21 "util/evswitch.h" 3 4
_Bool 
# 21 "util/evswitch.h"
    evswitch__discard(struct evswitch *evswitch, struct evsel *evsel);

#define OPTS_EVSWITCH(evswitch) OPT_STRING(0, "switch-on", &(evswitch)->on_name, "event", "Consider events after the ocurrence of this event"), OPT_STRING(0, "switch-off", &(evswitch)->off_name, "event", "Stop considering events after the ocurrence of this event"), OPT_BOOLEAN(0, "show-on-off-events", &(evswitch)->show_on_off_events, "Show the on/off switch events, used with --switch-on and --switch-off")
# 36 "builtin-trace.c" 2
# 1 "util/mmap.h" 1

#define __PERF_MMAP_H 1

# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/mmap.h" 1


#define __LIBPERF_INTERNAL_MMAP_H 







#define PERF_SAMPLE_MAX_SIZE (1 << 16)

struct perf_mmap;

typedef void (*libperf_unmap_cb_t)(struct perf_mmap *map);






struct perf_mmap {
 void *base;
 int mask;
 int fd;
 int cpu;
 refcount_t refcnt;
 u64 prev;
 u64 start;
 u64 end;
 
# 31 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/mmap.h" 3 4
_Bool 
# 31 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/mmap.h"
        overwrite;
 u64 flush;
 libperf_unmap_cb_t unmap_cb;
 char event_copy[(1 << 16)] __attribute__((aligned(8)));
 struct perf_mmap *next;
};

struct perf_mmap_param {
 int prot;
 int mask;
};

size_t perf_mmap__mmap_len(struct perf_mmap *map);

void perf_mmap__init(struct perf_mmap *map, struct perf_mmap *prev,
       
# 46 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/mmap.h" 3 4
      _Bool 
# 46 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/mmap.h"
           overwrite, libperf_unmap_cb_t unmap_cb);
int perf_mmap__mmap(struct perf_mmap *map, struct perf_mmap_param *mp,
      int fd, int cpu);
void perf_mmap__munmap(struct perf_mmap *map);
void perf_mmap__get(struct perf_mmap *map);
void perf_mmap__put(struct perf_mmap *map);

u64 perf_mmap__read_head(struct perf_mmap *map);
# 5 "util/mmap.h" 2



# 1 "/home/jmikedupont2/linux/tools/include/linux/ring_buffer.h" 1

#define _TOOLS_LINUX_RING_BUFFER_H_ 

# 1 "/home/jmikedupont2/linux/tools/include/asm/barrier.h" 1
# 5 "/home/jmikedupont2/linux/tools/include/linux/ring_buffer.h" 2
# 51 "/home/jmikedupont2/linux/tools/include/linux/ring_buffer.h"
static inline u64 ring_buffer_read_head(struct perf_event_mmap_page *base)
{






 return ({ typeof(*&base->data_head) ___p1 = ({ union { typeof(*&base->data_head) __val; char __c[1]; } __u = { .__c = { 0 } }; __read_once_size(&(*&base->data_head), __u.__c, sizeof(*&base->data_head)); __u.__val; }); __asm__ __volatile__("": : :"memory"); ___p1; });






}

static inline void ring_buffer_write_tail(struct perf_event_mmap_page *base,
       u64 tail)
{
 do { __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&base->data_tail) __val; char __c[1]; } __u = { .__val = (tail) }; __write_once_size(&(*&base->data_tail), __u.__c, sizeof(*&base->data_tail)); __u.__val; }); } while (0);
}
# 9 "util/mmap.h" 2



# 1 "/usr/include/aio.h" 1 3 4
# 23 "/usr/include/aio.h" 3 4
#define _AIO_H 1



#define __need_sigevent_t 
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4
# 29 "/usr/include/aio.h" 2 3 4
#define __need_timespec 






# 35 "/usr/include/aio.h" 3 4
struct aiocb
{
  int aio_fildes;
  int aio_lio_opcode;
  int aio_reqprio;
  volatile void *aio_buf;
  size_t aio_nbytes;
  struct sigevent aio_sigevent;


  struct aiocb *__next_prio;
  int __abs_prio;
  int __policy;
  int __error_code;
  __ssize_t __return_value;





  __off64_t aio_offset;

  char __glibc_reserved[32];
};




struct aiocb64
{
  int aio_fildes;
  int aio_lio_opcode;
  int aio_reqprio;
  volatile void *aio_buf;
  size_t aio_nbytes;
  struct sigevent aio_sigevent;


  struct aiocb *__next_prio;
  int __abs_prio;
  int __policy;
  int __error_code;
  __ssize_t __return_value;

  __off64_t aio_offset;
  char __glibc_reserved[32];
};






struct aioinit
  {
    int aio_threads;
    int aio_num;
    int aio_locks;
    int aio_usedba;
    int aio_debug;
    int aio_numusers;
    int aio_idle_time;

    int aio_reserved;
  };




enum
{
  AIO_CANCELED,
#define AIO_CANCELED AIO_CANCELED
  AIO_NOTCANCELED,
#define AIO_NOTCANCELED AIO_NOTCANCELED
  AIO_ALLDONE
#define AIO_ALLDONE AIO_ALLDONE
};



enum
{
  LIO_READ,
#define LIO_READ LIO_READ
  LIO_WRITE,
#define LIO_WRITE LIO_WRITE
  LIO_NOP
#define LIO_NOP LIO_NOP
};



enum
{
  LIO_WAIT,
#define LIO_WAIT LIO_WAIT
  LIO_NOWAIT
#define LIO_NOWAIT LIO_NOWAIT
};




extern void aio_init (const struct aioinit *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 179 "/usr/include/aio.h" 3 4
extern int aio_read (struct aiocb *__aiocbp) __asm__ ("" "aio_read64") __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__nonnull__ (1)));
extern int aio_write (struct aiocb *__aiocbp) __asm__ ("" "aio_write64") __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__nonnull__ (1)));

extern int lio_listio (int __mode, struct aiocb *const __list[__restrict], int __nent, struct sigevent *__restrict __sig) __asm__ ("" "lio_listio64") __attribute__ ((__nothrow__ , __leaf__))



                    __attribute__ ((__nonnull__ (2)));

extern int aio_error (const struct aiocb *__aiocbp) __asm__ ("" "aio_error64") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__nonnull__ (1)));
extern __ssize_t aio_return (struct aiocb *__aiocbp) __asm__ ("" "aio_return64") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__nonnull__ (1)));

extern int aio_cancel (int __fildes, struct aiocb *__aiocbp) __asm__ ("" "aio_cancel64") __attribute__ ((__nothrow__ , __leaf__))

                   ;

extern int aio_suspend (const struct aiocb *const __list[], int __nent, const struct timespec *__restrict __timeout) __asm__ ("" "aio_suspend64") __attribute__ ((__nothrow__ , __leaf__))


                     __attribute__ ((__nonnull__ (1)));

extern int aio_fsync (int __operation, struct aiocb *__aiocbp) __asm__ ("" "aio_fsync64") __attribute__ ((__nothrow__ , __leaf__))

                   __attribute__ ((__nonnull__ (2)));
# 221 "/usr/include/aio.h" 3 4
extern int aio_read64 (struct aiocb64 *__aiocbp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int aio_write64 (struct aiocb64 *__aiocbp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int lio_listio64 (int __mode,
    struct aiocb64 *const __list[__restrict],
    int __nent, struct sigevent *__restrict __sig)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int aio_error64 (const struct aiocb64 *__aiocbp)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern __ssize_t aio_return64 (struct aiocb64 *__aiocbp)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int aio_cancel64 (int __fildes, struct aiocb64 *__aiocbp) __attribute__ ((__nothrow__ , __leaf__));

extern int aio_suspend64 (const struct aiocb64 *const __list[], int __nent,
     const struct timespec *__restrict __timeout)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int aio_fsync64 (int __operation, struct aiocb64 *__aiocbp)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 13 "util/mmap.h" 2


# 1 "util/event.h" 1
# 16 "util/mmap.h" 2


# 17 "util/mmap.h"
struct aiocb;





struct mmap {
 struct perf_mmap core;
 struct auxtrace_mmap auxtrace_mmap;

 struct {
  void **data;
  struct aiocb *cblocks;
  struct aiocb **aiocb;
  int nr_cblocks;
 } aio;

 cpu_set_t affinity_mask;
 void *data;
 int comp_level;
};

struct mmap_params {
 struct perf_mmap_param core;
 int nr_cblocks, affinity, flush, comp_level;
 struct auxtrace_mmap_params auxtrace_mp;
};

int mmap__mmap(struct mmap *map, struct mmap_params *mp, int fd, int cpu);
void mmap__munmap(struct mmap *map);

union perf_event *perf_mmap__read_forward(struct mmap *map);

int perf_mmap__push(struct mmap *md, void *to,
      int push(struct mmap *map, void *to, void *buf, size_t size));

size_t mmap__mmap_len(struct mmap *map);
# 37 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/lib/subcmd/pager.h" 1


#define __SUBCMD_PAGER_H 

extern void pager_init(const char *pager_env);

extern void setup_pager(void);
extern int pager_in_use(void);
extern int pager_get_columns(void);
extern void force_pager(const char *);
# 38 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/lib/subcmd/exec-cmd.h" 1


#define __SUBCMD_EXEC_CMD_H 

extern void exec_cmd_init(const char *exec_name, const char *prefix,
     const char *exec_path, const char *exec_path_env);

extern void set_argv_exec_path(const char *exec_path);
extern const char *extract_argv0_path(const char *path);
extern void setup_path(void);
extern int execv_cmd(const char **argv);
extern int execl_cmd(const char *cmd, ...);

extern char *get_argv_exec_path(void);
extern char *system_path(const char *path);
# 39 "builtin-trace.c" 2
# 1 "util/machine.h" 1


#define __PERF_MACHINE_H 



# 1 "util/maps.h" 1


#define __PERF_MAPS_H 
# 12 "util/maps.h"
struct ref_reloc_sym;
struct machine;
struct map;
struct maps;
struct thread;

struct map *maps__find(struct maps *maps, u64 addr);
struct map *maps__first(struct maps *maps);
struct map *map__next(struct map *map);

#define maps__for_each_entry(maps,map) for (map = maps__first(maps); map; map = map__next(map))


#define maps__for_each_entry_safe(maps,map,next) for (map = maps__first(maps), next = map__next(map); map; map = next, next = map__next(map))


struct maps {
 struct rb_root entries;
 struct rw_semaphore lock;
 struct machine *machine;
 struct map *last_search_by_name;
 struct map **maps_by_name;
 refcount_t refcnt;
 unsigned int nr_maps;
 unsigned int nr_maps_allocated;




};

#define KMAP_NAME_LEN 256

struct kmap {
 struct ref_reloc_sym *ref_reloc_sym;
 struct maps *kmaps;
 char name[256];
};

struct maps *maps__new(struct machine *machine);
void maps__delete(struct maps *maps);

# 53 "util/maps.h" 3 4
_Bool 
# 53 "util/maps.h"
    maps__empty(struct maps *maps);

static inline struct maps *maps__get(struct maps *maps)
{
 if (maps)
  refcount_inc(&maps->refcnt);
 return maps;
}

void maps__put(struct maps *maps);
void maps__init(struct maps *maps, struct machine *machine);
void maps__exit(struct maps *maps);
int maps__clone(struct thread *thread, struct maps *parent);
size_t maps__fprintf(struct maps *maps, FILE *fp);

void maps__insert(struct maps *maps, struct map *map);

void maps__remove(struct maps *maps, struct map *map);

struct symbol *maps__find_symbol(struct maps *maps, u64 addr, struct map **mapp);
struct symbol *maps__find_symbol_by_name(struct maps *maps, const char *name, struct map **mapp);

struct addr_map_symbol;

int maps__find_ams(struct maps *maps, struct addr_map_symbol *ams);

int maps__fixup_overlappings(struct maps *maps, struct map *map, FILE *fp);

struct map *maps__find_by_name(struct maps *maps, const char *name);

int maps__merge_in(struct maps *kmaps, struct map *new_map);

void __maps__sort_by_name(struct maps *maps);
# 8 "util/machine.h" 2
# 1 "util/dsos.h" 1


#define __PERF_DSOS 







struct dso;
struct dso_id;





struct dsos {
 struct list_head head;
 struct rb_root root;
 struct rw_semaphore lock;
};

void __dsos__add(struct dsos *dsos, struct dso *dso);
void dsos__add(struct dsos *dsos, struct dso *dso);
struct dso *__dsos__addnew(struct dsos *dsos, const char *name);
struct dso *__dsos__find(struct dsos *dsos, const char *name, 
# 27 "util/dsos.h" 3 4
                                                             _Bool 
# 27 "util/dsos.h"
                                                                  cmp_short);

struct dso *dsos__findnew_id(struct dsos *dsos, const char *name, struct dso_id *id);

struct dso *__dsos__findnew_link_by_longname_id(struct rb_root *root, struct dso *dso,
      const char *name, struct dso_id *id);


# 34 "util/dsos.h" 3 4
_Bool 
# 34 "util/dsos.h"
    __dsos__read_build_ids(struct list_head *head, 
# 34 "util/dsos.h" 3 4
                                                   _Bool 
# 34 "util/dsos.h"
                                                        with_hits);

size_t __dsos__fprintf_buildid(struct list_head *head, FILE *fp,
          
# 37 "util/dsos.h" 3 4
         _Bool 
# 37 "util/dsos.h"
              (skip)(struct dso *dso, int parm), int parm);
size_t __dsos__fprintf(struct list_head *head, FILE *fp);
# 9 "util/machine.h" 2


struct addr_location;
struct branch_stack;
struct dso;
struct dso_id;
struct evsel;
struct perf_sample;
struct symbol;
struct target;
struct thread;
union perf_event;


#define HOST_KERNEL_ID (-1)
#define DEFAULT_GUEST_KERNEL_ID (0)

extern const char *ref_reloc_sym_names[];

struct vdso_info;

#define THREADS__TABLE_BITS 8
#define THREADS__TABLE_SIZE (1 << THREADS__TABLE_BITS)

struct threads {
 struct rb_root_cached entries;
 struct rw_semaphore lock;
 unsigned int nr;
 struct list_head dead;
 struct thread *last_match;
};

struct machine {
 struct rb_node rb_node;
 pid_t pid;
 u16 id_hdr_size;
 
# 45 "util/machine.h" 3 4
_Bool 
# 45 "util/machine.h"
        comm_exec;
 
# 46 "util/machine.h" 3 4
_Bool 
# 46 "util/machine.h"
        kptr_restrict_warned;
 
# 47 "util/machine.h" 3 4
_Bool 
# 47 "util/machine.h"
        single_address_space;
 char *root_dir;
 char *mmap_name;
 struct threads threads[(1 << 8)];
 struct vdso_info *vdso_info;
 struct perf_env *env;
 struct dsos dsos;
 struct maps kmaps;
 struct map *vmlinux_map;
 u64 kernel_start;
 pid_t *current_tid;
 union {
  void *priv;
  u64 db_id;
 };
 
# 62 "util/machine.h" 3 4
_Bool 
# 62 "util/machine.h"
        trampolines_mapped;
};

static inline struct threads *machine__threads(struct machine *machine, pid_t tid)
{

 return &machine->threads[(unsigned int)tid % (1 << 8)];
}




static inline
struct map *machine__kernel_map(struct machine *machine)
{
 return machine->vmlinux_map;
}




static inline
struct maps *machine__kernel_maps(struct machine *machine)
{
 return &machine->kmaps;
}

int machine__get_kernel_start(struct machine *machine);

static inline u64 machine__kernel_start(struct machine *machine)
{
 if (!machine->kernel_start)
  machine__get_kernel_start(machine);
 return machine->kernel_start;
}

static inline 
# 98 "util/machine.h" 3 4
             _Bool 
# 98 "util/machine.h"
                  machine__kernel_ip(struct machine *machine, u64 ip)
{
 u64 kernel_start = machine__kernel_start(machine);

 return ip >= kernel_start;
}

u8 machine__addr_cpumode(struct machine *machine, u8 cpumode, u64 addr);

struct thread *machine__find_thread(struct machine *machine, pid_t pid,
        pid_t tid);
struct comm *machine__thread_exec_comm(struct machine *machine,
           struct thread *thread);

int machine__process_comm_event(struct machine *machine, union perf_event *event,
    struct perf_sample *sample);
int machine__process_exit_event(struct machine *machine, union perf_event *event,
    struct perf_sample *sample);
int machine__process_fork_event(struct machine *machine, union perf_event *event,
    struct perf_sample *sample);
int machine__process_lost_event(struct machine *machine, union perf_event *event,
    struct perf_sample *sample);
int machine__process_lost_samples_event(struct machine *machine, union perf_event *event,
     struct perf_sample *sample);
int machine__process_aux_event(struct machine *machine,
          union perf_event *event);
int machine__process_itrace_start_event(struct machine *machine,
     union perf_event *event);
int machine__process_switch_event(struct machine *machine,
      union perf_event *event);
int machine__process_namespaces_event(struct machine *machine,
          union perf_event *event,
          struct perf_sample *sample);
int machine__process_mmap_event(struct machine *machine, union perf_event *event,
    struct perf_sample *sample);
int machine__process_mmap2_event(struct machine *machine, union perf_event *event,
     struct perf_sample *sample);
int machine__process_ksymbol(struct machine *machine,
        union perf_event *event,
        struct perf_sample *sample);
int machine__process_event(struct machine *machine, union perf_event *event,
    struct perf_sample *sample);

typedef void (*machine__process_t)(struct machine *machine, void *data);

struct machines {
 struct machine host;
 struct rb_root_cached guests;
};

void machines__init(struct machines *machines);
void machines__exit(struct machines *machines);

void machines__process_guests(struct machines *machines,
         machine__process_t process, void *data);

struct machine *machines__add(struct machines *machines, pid_t pid,
         const char *root_dir);
struct machine *machines__find_host(struct machines *machines);
struct machine *machines__find(struct machines *machines, pid_t pid);
struct machine *machines__findnew(struct machines *machines, pid_t pid);

void machines__set_id_hdr_size(struct machines *machines, u16 id_hdr_size);
void machines__set_comm_exec(struct machines *machines, 
# 161 "util/machine.h" 3 4
                                                       _Bool 
# 161 "util/machine.h"
                                                            comm_exec);

struct machine *machine__new_host(void);
struct machine *machine__new_kallsyms(void);
int machine__init(struct machine *machine, const char *root_dir, pid_t pid);
void machine__exit(struct machine *machine);
void machine__delete_threads(struct machine *machine);
void machine__delete(struct machine *machine);
void machine__remove_thread(struct machine *machine, struct thread *th);

struct branch_info *sample__resolve_bstack(struct perf_sample *sample,
        struct addr_location *al);
struct mem_info *sample__resolve_mem(struct perf_sample *sample,
         struct addr_location *al);

struct callchain_cursor;

int thread__resolve_callchain(struct thread *thread,
         struct callchain_cursor *cursor,
         struct evsel *evsel,
         struct perf_sample *sample,
         struct symbol **parent,
         struct addr_location *root_al,
         int max_stack);





static inline 
# 190 "util/machine.h" 3 4
             _Bool 
# 190 "util/machine.h"
                  machine__is_default_guest(struct machine *machine)
{
 return machine ? machine->pid == (0) : 
# 192 "util/machine.h" 3 4
                                                           0
# 192 "util/machine.h"
                                                                ;
}

static inline 
# 195 "util/machine.h" 3 4
             _Bool 
# 195 "util/machine.h"
                  machine__is_host(struct machine *machine)
{
 return machine ? machine->pid == (-1) : 
# 197 "util/machine.h" 3 4
                                                  0
# 197 "util/machine.h"
                                                       ;
}


# 200 "util/machine.h" 3 4
_Bool 
# 200 "util/machine.h"
    machine__is(struct machine *machine, const char *arch);
int machine__nr_cpus_avail(struct machine *machine);

struct thread *__machine__findnew_thread(struct machine *machine, pid_t pid, pid_t tid);
struct thread *machine__findnew_thread(struct machine *machine, pid_t pid, pid_t tid);

struct dso *machine__findnew_dso_id(struct machine *machine, const char *filename, struct dso_id *id);
struct dso *machine__findnew_dso(struct machine *machine, const char *filename);

size_t machine__fprintf(struct machine *machine, FILE *fp);

static inline
struct symbol *machine__find_kernel_symbol(struct machine *machine, u64 addr,
        struct map **mapp)
{
 return maps__find_symbol(&machine->kmaps, addr, mapp);
}

static inline
struct symbol *machine__find_kernel_symbol_by_name(struct machine *machine,
         const char *name,
         struct map **mapp)
{
 return maps__find_symbol_by_name(&machine->kmaps, name, mapp);
}

int arch__fix_module_text_start(u64 *start, u64 *size, const char *name);

int machine__load_kallsyms(struct machine *machine, const char *filename);

int machine__load_vmlinux_path(struct machine *machine);

size_t machine__fprintf_dsos_buildid(struct machine *machine, FILE *fp,
         
# 233 "util/machine.h" 3 4
        _Bool 
# 233 "util/machine.h"
             (skip)(struct dso *dso, int parm), int parm);
size_t machines__fprintf_dsos(struct machines *machines, FILE *fp);
size_t machines__fprintf_dsos_buildid(struct machines *machines, FILE *fp,
         
# 236 "util/machine.h" 3 4
        _Bool 
# 236 "util/machine.h"
             (skip)(struct dso *dso, int parm), int parm);

void machine__destroy_kernel_maps(struct machine *machine);
int machine__create_kernel_maps(struct machine *machine);

int machines__create_kernel_maps(struct machines *machines, pid_t pid);
int machines__create_guest_kernel_maps(struct machines *machines);
void machines__destroy_kernel_maps(struct machines *machines);

size_t machine__fprintf_vmlinux_path(struct machine *machine, FILE *fp);

int machine__for_each_thread(struct machine *machine,
        int (*fn)(struct thread *thread, void *p),
        void *priv);
int machines__for_each_thread(struct machines *machines,
         int (*fn)(struct thread *thread, void *p),
         void *priv);

pid_t machine__get_current_tid(struct machine *machine, int cpu);
int machine__set_current_tid(struct machine *machine, int cpu, pid_t pid,
        pid_t tid);



char *machine__resolve_kernel_addr(void *vmachine, unsigned long long *addrp, char **modp);

void machine__get_kallsyms_filename(struct machine *machine, char *buf,
        size_t bufsz);

int machine__create_extra_kernel_maps(struct machine *machine,
          struct dso *kernel);


struct extra_kernel_map {
 u64 start;
 u64 end;
 u64 pgoff;
 char name[256];
};

int machine__create_extra_kernel_map(struct machine *machine,
         struct dso *kernel,
         struct extra_kernel_map *xm);

int machine__map_x86_64_entry_trampolines(struct machine *machine,
       struct dso *kernel);
# 40 "builtin-trace.c" 2
# 1 "util/map.h" 1


#define __PERF_MAP_H 
# 14 "util/map.h"
struct dso;
struct maps;
struct machine;

struct map {
 union {
  struct rb_node rb_node;
  struct list_head node;
 };
 u64 start;
 u64 end;
 
# 25 "util/map.h" 3 4
_Bool 
# 25 "util/map.h"
       erange_warned:1;
 
# 26 "util/map.h" 3 4
_Bool 
# 26 "util/map.h"
       priv:1;
 u32 prot;
 u64 pgoff;
 u64 reloc;


 u64 (*map_ip)(struct map *, u64);

 u64 (*unmap_ip)(struct map *, u64);

 struct dso *dso;
 refcount_t refcnt;
 u32 flags;
};

struct kmap;

struct kmap *__map__kmap(struct map *map);
struct kmap *map__kmap(struct map *map);
struct maps *map__kmaps(struct map *map);

static inline u64 map__map_ip(struct map *map, u64 ip)
{
 return ip - map->start + map->pgoff;
}

static inline u64 map__unmap_ip(struct map *map, u64 ip)
{
 return ip + map->start - map->pgoff;
}

static inline u64 identity__map_ip(struct map *map __attribute__((unused)), u64 ip)
{
 return ip;
}

static inline size_t map__size(const struct map *map)
{
 return map->end - map->start;
}


u64 map__rip_2objdump(struct map *map, u64 rip);


u64 map__objdump_2mem(struct map *map, u64 ip);

struct symbol;
struct thread;
# 83 "util/map.h"
#define map__for_each_symbol(map,pos,n) dso__for_each_symbol(map->dso, pos, n)
# 93 "util/map.h"
#define __map__for_each_symbol_by_name(map,sym_name,pos) for (pos = map__find_symbol_by_name(map, sym_name); pos && !symbol__match_symbol_name(pos->name, sym_name, SYMBOL_TAG_INCLUDE__DEFAULT_ONLY); pos = symbol__next_by_name(pos))






#define map__for_each_symbol_by_name(map,sym_name,pos) __map__for_each_symbol_by_name(map, sym_name, (pos))


void map__init(struct map *map,
        u64 start, u64 end, u64 pgoff, struct dso *dso);

struct dso_id;

struct map *map__new(struct machine *machine, u64 start, u64 len,
       u64 pgoff, struct dso_id *id, u32 prot, u32 flags,
       char *filename, struct thread *thread);
struct map *map__new2(u64 start, struct dso *dso);
void map__delete(struct map *map);
struct map *map__clone(struct map *map);

static inline struct map *map__get(struct map *map)
{
 if (map)
  refcount_inc(&map->refcnt);
 return map;
}

void map__put(struct map *map);

static inline void __map__zput(struct map **map)
{
 map__put(*map);
 *map = 
# 127 "util/map.h" 3 4
       ((void *)0)
# 127 "util/map.h"
           ;
}

#define map__zput(map) __map__zput(&map)

size_t map__fprintf(struct map *map, FILE *fp);
size_t map__fprintf_dsoname(struct map *map, FILE *fp);
char *map__srcline(struct map *map, u64 addr, struct symbol *sym);
int map__fprintf_srcline(struct map *map, u64 addr, const char *prefix,
    FILE *fp);

int map__load(struct map *map);
struct symbol *map__find_symbol(struct map *map, u64 addr);
struct symbol *map__find_symbol_by_name(struct map *map, const char *name);
void map__fixup_start(struct map *map);
void map__fixup_end(struct map *map);

int map__set_kallsyms_ref_reloc_sym(struct map *map, const char *symbol_name,
        u64 addr);


# 147 "util/map.h" 3 4
_Bool 
# 147 "util/map.h"
    __map__is_kernel(const struct map *map);

# 148 "util/map.h" 3 4
_Bool 
# 148 "util/map.h"
    __map__is_extra_kernel_map(const struct map *map);

# 149 "util/map.h" 3 4
_Bool 
# 149 "util/map.h"
    __map__is_bpf_prog(const struct map *map);

static inline 
# 151 "util/map.h" 3 4
             _Bool 
# 151 "util/map.h"
                  __map__is_kmodule(const struct map *map)
{
 return !__map__is_kernel(map) && !__map__is_extra_kernel_map(map) &&
        !__map__is_bpf_prog(map);
}


# 157 "util/map.h" 3 4
_Bool 
# 157 "util/map.h"
    map__has_symbols(const struct map *map);

#define ENTRY_TRAMPOLINE_NAME "__entry_SYSCALL_64_trampoline"

static inline 
# 161 "util/map.h" 3 4
             _Bool 
# 161 "util/map.h"
                  is_entry_trampoline(const char *name)
{
 return !
# 163 "util/map.h" 3 4
        __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) && __builtin_constant_p (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) && (__s1_len = __builtin_strlen (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ), __s2_len = __builtin_strlen (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ), (!((size_t)(const void *)((
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) + 1) - (size_t)(const void *)(
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) + 1) - (size_t)(const void *)(
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        , 
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) : (__builtin_constant_p (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) && ((size_t)(const void *)((
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) + 1) - (size_t)(const void *)(
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) == 1) && (__s1_len = __builtin_strlen (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ), __s1_len < 4) ? (__builtin_constant_p (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) && ((size_t)(const void *)((
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) + 1) - (size_t)(const void *)(
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) == 1) ? __builtin_strcmp (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        , 
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ); int __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) && ((size_t)(const void *)((
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) + 1) - (size_t)(const void *)(
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) == 1) && (__s2_len = __builtin_strlen (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ), __s2_len < 4) ? (__builtin_constant_p (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) && ((size_t)(const void *)((
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) + 1) - (size_t)(const void *)(
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ) == 1) ? __builtin_strcmp (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        , 
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        ); int __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 163 "util/map.h"
        name
# 163 "util/map.h" 3 4
        , 
# 163 "util/map.h"
        "__entry_SYSCALL_64_trampoline"
# 163 "util/map.h" 3 4
        )))); })
# 163 "util/map.h"
                                           ;
}
# 41 "builtin-trace.c" 2
# 1 "util/symbol.h" 1


#define __PERF_SYMBOL 1
# 12 "util/symbol.h"
# 1 "util/path.h" 1


#define _PERF_PATH_H 

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 6 "util/path.h" 2


struct dirent;

int path__join(char *bf, size_t size, const char *path1, const char *path2);
int path__join3(char *bf, size_t size, const char *path1, const char *path2, const char *path3);


# 13 "util/path.h" 3 4
_Bool 
# 13 "util/path.h"
    is_regular_file(const char *file);

# 14 "util/path.h" 3 4
_Bool 
# 14 "util/path.h"
    is_directory(const char *base_path, const struct dirent *dent);
# 13 "util/symbol.h" 2

# 1 "util/spark.h" 1

#define SPARK_H 1

#define NUM_SPARKS 8

int print_spark(char *bf, int size, unsigned long *val, int numval);
# 15 "util/symbol.h" 2


# 1 "/usr/include/libelf.h" 1 3 4
# 30 "/usr/include/libelf.h" 3 4
#define _LIBELF_H 1





# 1 "/usr/include/elf.h" 1 3 4
# 20 "/usr/include/elf.h" 3 4
#define _ELF_H 1











# 31 "/usr/include/elf.h" 3 4
typedef uint16_t Elf32_Half;
typedef uint16_t Elf64_Half;


typedef uint32_t Elf32_Word;
typedef int32_t Elf32_Sword;
typedef uint32_t Elf64_Word;
typedef int32_t Elf64_Sword;


typedef uint64_t Elf32_Xword;
typedef int64_t Elf32_Sxword;
typedef uint64_t Elf64_Xword;
typedef int64_t Elf64_Sxword;


typedef uint32_t Elf32_Addr;
typedef uint64_t Elf64_Addr;


typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;


typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;


typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;




#define EI_NIDENT (16)

typedef struct
{
  unsigned char e_ident[(16)];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct
{
  unsigned char e_ident[(16)];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;





#define EI_MAG0 0
#define ELFMAG0 0x7f

#define EI_MAG1 1
#define ELFMAG1 'E'

#define EI_MAG2 2
#define ELFMAG2 'L'

#define EI_MAG3 3
#define ELFMAG3 'F'


#define ELFMAG "\177ELF"
#define SELFMAG 4

#define EI_CLASS 4
#define ELFCLASSNONE 0
#define ELFCLASS32 1
#define ELFCLASS64 2
#define ELFCLASSNUM 3

#define EI_DATA 5
#define ELFDATANONE 0
#define ELFDATA2LSB 1
#define ELFDATA2MSB 2
#define ELFDATANUM 3

#define EI_VERSION 6


#define EI_OSABI 7
#define ELFOSABI_NONE 0
#define ELFOSABI_SYSV 0
#define ELFOSABI_HPUX 1
#define ELFOSABI_NETBSD 2
#define ELFOSABI_GNU 3
#define ELFOSABI_LINUX ELFOSABI_GNU
#define ELFOSABI_SOLARIS 6
#define ELFOSABI_AIX 7
#define ELFOSABI_IRIX 8
#define ELFOSABI_FREEBSD 9
#define ELFOSABI_TRU64 10
#define ELFOSABI_MODESTO 11
#define ELFOSABI_OPENBSD 12
#define ELFOSABI_ARM_AEABI 64
#define ELFOSABI_ARM 97
#define ELFOSABI_STANDALONE 255

#define EI_ABIVERSION 8

#define EI_PAD 9



#define ET_NONE 0
#define ET_REL 1
#define ET_EXEC 2
#define ET_DYN 3
#define ET_CORE 4
#define ET_NUM 5
#define ET_LOOS 0xfe00
#define ET_HIOS 0xfeff
#define ET_LOPROC 0xff00
#define ET_HIPROC 0xffff



#define EM_NONE 0
#define EM_M32 1
#define EM_SPARC 2
#define EM_386 3
#define EM_68K 4
#define EM_88K 5
#define EM_IAMCU 6
#define EM_860 7
#define EM_MIPS 8
#define EM_S370 9
#define EM_MIPS_RS3_LE 10

#define EM_PARISC 15

#define EM_VPP500 17
#define EM_SPARC32PLUS 18
#define EM_960 19
#define EM_PPC 20
#define EM_PPC64 21
#define EM_S390 22
#define EM_SPU 23

#define EM_V800 36
#define EM_FR20 37
#define EM_RH32 38
#define EM_RCE 39
#define EM_ARM 40
#define EM_FAKE_ALPHA 41
#define EM_SH 42
#define EM_SPARCV9 43
#define EM_TRICORE 44
#define EM_ARC 45
#define EM_H8_300 46
#define EM_H8_300H 47
#define EM_H8S 48
#define EM_H8_500 49
#define EM_IA_64 50
#define EM_MIPS_X 51
#define EM_COLDFIRE 52
#define EM_68HC12 53
#define EM_MMA 54
#define EM_PCP 55
#define EM_NCPU 56
#define EM_NDR1 57
#define EM_STARCORE 58
#define EM_ME16 59
#define EM_ST100 60
#define EM_TINYJ 61
#define EM_X86_64 62
#define EM_PDSP 63
#define EM_PDP10 64
#define EM_PDP11 65
#define EM_FX66 66
#define EM_ST9PLUS 67
#define EM_ST7 68
#define EM_68HC16 69
#define EM_68HC11 70
#define EM_68HC08 71
#define EM_68HC05 72
#define EM_SVX 73
#define EM_ST19 74
#define EM_VAX 75
#define EM_CRIS 76
#define EM_JAVELIN 77
#define EM_FIREPATH 78
#define EM_ZSP 79
#define EM_MMIX 80
#define EM_HUANY 81
#define EM_PRISM 82
#define EM_AVR 83
#define EM_FR30 84
#define EM_D10V 85
#define EM_D30V 86
#define EM_V850 87
#define EM_M32R 88
#define EM_MN10300 89
#define EM_MN10200 90
#define EM_PJ 91
#define EM_OPENRISC 92
#define EM_ARC_COMPACT 93
#define EM_XTENSA 94
#define EM_VIDEOCORE 95
#define EM_TMM_GPP 96
#define EM_NS32K 97
#define EM_TPC 98
#define EM_SNP1K 99
#define EM_ST200 100
#define EM_IP2K 101
#define EM_MAX 102
#define EM_CR 103
#define EM_F2MC16 104
#define EM_MSP430 105
#define EM_BLACKFIN 106
#define EM_SE_C33 107
#define EM_SEP 108
#define EM_ARCA 109
#define EM_UNICORE 110
#define EM_EXCESS 111
#define EM_DXP 112
#define EM_ALTERA_NIOS2 113
#define EM_CRX 114
#define EM_XGATE 115
#define EM_C166 116
#define EM_M16C 117
#define EM_DSPIC30F 118
#define EM_CE 119
#define EM_M32C 120

#define EM_TSK3000 131
#define EM_RS08 132
#define EM_SHARC 133
#define EM_ECOG2 134
#define EM_SCORE7 135
#define EM_DSP24 136
#define EM_VIDEOCORE3 137
#define EM_LATTICEMICO32 138
#define EM_SE_C17 139
#define EM_TI_C6000 140
#define EM_TI_C2000 141
#define EM_TI_C5500 142
#define EM_TI_ARP32 143
#define EM_TI_PRU 144

#define EM_MMDSP_PLUS 160
#define EM_CYPRESS_M8C 161
#define EM_R32C 162
#define EM_TRIMEDIA 163
#define EM_QDSP6 164
#define EM_8051 165
#define EM_STXP7X 166
#define EM_NDS32 167
#define EM_ECOG1X 168
#define EM_MAXQ30 169
#define EM_XIMO16 170
#define EM_MANIK 171
#define EM_CRAYNV2 172
#define EM_RX 173
#define EM_METAG 174
#define EM_MCST_ELBRUS 175
#define EM_ECOG16 176
#define EM_CR16 177
#define EM_ETPU 178
#define EM_SLE9X 179
#define EM_L10M 180
#define EM_K10M 181

#define EM_AARCH64 183

#define EM_AVR32 185
#define EM_STM8 186
#define EM_TILE64 187
#define EM_TILEPRO 188
#define EM_MICROBLAZE 189
#define EM_CUDA 190
#define EM_TILEGX 191
#define EM_CLOUDSHIELD 192
#define EM_COREA_1ST 193
#define EM_COREA_2ND 194
#define EM_ARC_COMPACT2 195
#define EM_OPEN8 196
#define EM_RL78 197
#define EM_VIDEOCORE5 198
#define EM_78KOR 199
#define EM_56800EX 200
#define EM_BA1 201
#define EM_BA2 202
#define EM_XCORE 203
#define EM_MCHP_PIC 204

#define EM_KM32 210
#define EM_KMX32 211
#define EM_EMX16 212
#define EM_EMX8 213
#define EM_KVARC 214
#define EM_CDP 215
#define EM_COGE 216
#define EM_COOL 217
#define EM_NORC 218
#define EM_CSR_KALIMBA 219
#define EM_Z80 220
#define EM_VISIUM 221
#define EM_FT32 222
#define EM_MOXIE 223
#define EM_AMDGPU 224

#define EM_RISCV 243

#define EM_BPF 247

#define EM_NUM 248



#define EM_ARC_A5 EM_ARC_COMPACT





#define EM_ALPHA 0x9026



#define EV_NONE 0
#define EV_CURRENT 1
#define EV_NUM 2



typedef struct
{
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct
{
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;



#define SHN_UNDEF 0
#define SHN_LORESERVE 0xff00
#define SHN_LOPROC 0xff00
#define SHN_BEFORE 0xff00

#define SHN_AFTER 0xff01

#define SHN_HIPROC 0xff1f
#define SHN_LOOS 0xff20
#define SHN_HIOS 0xff3f
#define SHN_ABS 0xfff1
#define SHN_COMMON 0xfff2
#define SHN_XINDEX 0xffff
#define SHN_HIRESERVE 0xffff



#define SHT_NULL 0
#define SHT_PROGBITS 1
#define SHT_SYMTAB 2
#define SHT_STRTAB 3
#define SHT_RELA 4
#define SHT_HASH 5
#define SHT_DYNAMIC 6
#define SHT_NOTE 7
#define SHT_NOBITS 8
#define SHT_REL 9
#define SHT_SHLIB 10
#define SHT_DYNSYM 11
#define SHT_INIT_ARRAY 14
#define SHT_FINI_ARRAY 15
#define SHT_PREINIT_ARRAY 16
#define SHT_GROUP 17
#define SHT_SYMTAB_SHNDX 18
#define SHT_NUM 19
#define SHT_LOOS 0x60000000
#define SHT_GNU_ATTRIBUTES 0x6ffffff5
#define SHT_GNU_HASH 0x6ffffff6
#define SHT_GNU_LIBLIST 0x6ffffff7
#define SHT_CHECKSUM 0x6ffffff8
#define SHT_LOSUNW 0x6ffffffa
#define SHT_SUNW_move 0x6ffffffa
#define SHT_SUNW_COMDAT 0x6ffffffb
#define SHT_SUNW_syminfo 0x6ffffffc
#define SHT_GNU_verdef 0x6ffffffd
#define SHT_GNU_verneed 0x6ffffffe
#define SHT_GNU_versym 0x6fffffff
#define SHT_HISUNW 0x6fffffff
#define SHT_HIOS 0x6fffffff
#define SHT_LOPROC 0x70000000
#define SHT_HIPROC 0x7fffffff
#define SHT_LOUSER 0x80000000
#define SHT_HIUSER 0x8fffffff



#define SHF_WRITE (1 << 0)
#define SHF_ALLOC (1 << 1)
#define SHF_EXECINSTR (1 << 2)
#define SHF_MERGE (1 << 4)
#define SHF_STRINGS (1 << 5)
#define SHF_INFO_LINK (1 << 6)
#define SHF_LINK_ORDER (1 << 7)
#define SHF_OS_NONCONFORMING (1 << 8)

#define SHF_GROUP (1 << 9)
#define SHF_TLS (1 << 10)
#define SHF_COMPRESSED (1 << 11)
#define SHF_MASKOS 0x0ff00000
#define SHF_MASKPROC 0xf0000000
#define SHF_ORDERED (1 << 30)

#define SHF_EXCLUDE (1U << 31)




typedef struct
{
  Elf32_Word ch_type;
  Elf32_Word ch_size;
  Elf32_Word ch_addralign;
} Elf32_Chdr;

typedef struct
{
  Elf64_Word ch_type;
  Elf64_Word ch_reserved;
  Elf64_Xword ch_size;
  Elf64_Xword ch_addralign;
} Elf64_Chdr;


#define ELFCOMPRESS_ZLIB 1
#define ELFCOMPRESS_LOOS 0x60000000
#define ELFCOMPRESS_HIOS 0x6fffffff
#define ELFCOMPRESS_LOPROC 0x70000000
#define ELFCOMPRESS_HIPROC 0x7fffffff


#define GRP_COMDAT 0x1



typedef struct
{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Section st_shndx;
} Elf32_Sym;

typedef struct
{
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Section st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct
{
  Elf32_Half si_boundto;
  Elf32_Half si_flags;
} Elf32_Syminfo;

typedef struct
{
  Elf64_Half si_boundto;
  Elf64_Half si_flags;
} Elf64_Syminfo;


#define SYMINFO_BT_SELF 0xffff
#define SYMINFO_BT_PARENT 0xfffe
#define SYMINFO_BT_LOWRESERVE 0xff00


#define SYMINFO_FLG_DIRECT 0x0001
#define SYMINFO_FLG_PASSTHRU 0x0002
#define SYMINFO_FLG_COPY 0x0004
#define SYMINFO_FLG_LAZYLOAD 0x0008


#define SYMINFO_NONE 0
#define SYMINFO_CURRENT 1
#define SYMINFO_NUM 2




#define ELF32_ST_BIND(val) (((unsigned char) (val)) >> 4)
#define ELF32_ST_TYPE(val) ((val) & 0xf)
#define ELF32_ST_INFO(bind,type) (((bind) << 4) + ((type) & 0xf))


#define ELF64_ST_BIND(val) ELF32_ST_BIND (val)
#define ELF64_ST_TYPE(val) ELF32_ST_TYPE (val)
#define ELF64_ST_INFO(bind,type) ELF32_ST_INFO ((bind), (type))



#define STB_LOCAL 0
#define STB_GLOBAL 1
#define STB_WEAK 2
#define STB_NUM 3
#define STB_LOOS 10
#define STB_GNU_UNIQUE 10
#define STB_HIOS 12
#define STB_LOPROC 13
#define STB_HIPROC 15



#define STT_NOTYPE 0
#define STT_OBJECT 1
#define STT_FUNC 2
#define STT_SECTION 3
#define STT_FILE 4
#define STT_COMMON 5
#define STT_TLS 6
#define STT_NUM 7
#define STT_LOOS 10
#define STT_GNU_IFUNC 10
#define STT_HIOS 12
#define STT_LOPROC 13
#define STT_HIPROC 15






#define STN_UNDEF 0




#define ELF32_ST_VISIBILITY(o) ((o) & 0x03)


#define ELF64_ST_VISIBILITY(o) ELF32_ST_VISIBILITY (o)


#define STV_DEFAULT 0
#define STV_INTERNAL 1
#define STV_HIDDEN 2
#define STV_PROTECTED 3




typedef struct
{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;






typedef struct
{
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;



typedef struct
{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct
{
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;



#define ELF32_R_SYM(val) ((val) >> 8)
#define ELF32_R_TYPE(val) ((val) & 0xff)
#define ELF32_R_INFO(sym,type) (((sym) << 8) + ((type) & 0xff))

#define ELF64_R_SYM(i) ((i) >> 32)
#define ELF64_R_TYPE(i) ((i) & 0xffffffff)
#define ELF64_R_INFO(sym,type) ((((Elf64_Xword) (sym)) << 32) + (type))



typedef struct
{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct
{
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;





#define PN_XNUM 0xffff



#define PT_NULL 0
#define PT_LOAD 1
#define PT_DYNAMIC 2
#define PT_INTERP 3
#define PT_NOTE 4
#define PT_SHLIB 5
#define PT_PHDR 6
#define PT_TLS 7
#define PT_NUM 8
#define PT_LOOS 0x60000000
#define PT_GNU_EH_FRAME 0x6474e550
#define PT_GNU_STACK 0x6474e551
#define PT_GNU_RELRO 0x6474e552
#define PT_LOSUNW 0x6ffffffa
#define PT_SUNWBSS 0x6ffffffa
#define PT_SUNWSTACK 0x6ffffffb
#define PT_HISUNW 0x6fffffff
#define PT_HIOS 0x6fffffff
#define PT_LOPROC 0x70000000
#define PT_HIPROC 0x7fffffff



#define PF_X (1 << 0)
#define PF_W (1 << 1)
#define PF_R (1 << 2)
#define PF_MASKOS 0x0ff00000
#define PF_MASKPROC 0xf0000000



#define NT_PRSTATUS 1
#define NT_FPREGSET 2
#define NT_PRPSINFO 3
#define NT_PRXREG 4
#define NT_TASKSTRUCT 4
#define NT_PLATFORM 5
#define NT_AUXV 6
#define NT_GWINDOWS 7
#define NT_ASRS 8
#define NT_PSTATUS 10
#define NT_PSINFO 13
#define NT_PRCRED 14
#define NT_UTSNAME 15
#define NT_LWPSTATUS 16
#define NT_LWPSINFO 17
#define NT_PRFPXREG 20
#define NT_SIGINFO 0x53494749

#define NT_FILE 0x46494c45

#define NT_PRXFPREG 0x46e62b7f
#define NT_PPC_VMX 0x100
#define NT_PPC_SPE 0x101
#define NT_PPC_VSX 0x102
#define NT_386_TLS 0x200
#define NT_386_IOPERM 0x201
#define NT_X86_XSTATE 0x202
#define NT_S390_HIGH_GPRS 0x300
#define NT_S390_TIMER 0x301
#define NT_S390_TODCMP 0x302
#define NT_S390_TODPREG 0x303
#define NT_S390_CTRS 0x304
#define NT_S390_PREFIX 0x305
#define NT_S390_LAST_BREAK 0x306
#define NT_S390_SYSTEM_CALL 0x307
#define NT_S390_TDB 0x308
#define NT_ARM_VFP 0x400
#define NT_ARM_TLS 0x401
#define NT_ARM_HW_BREAK 0x402
#define NT_ARM_HW_WATCH 0x403
#define NT_ARM_SYSTEM_CALL 0x404



#define NT_VERSION 1




typedef struct
{
  Elf32_Sword d_tag;
  union
    {
      Elf32_Word d_val;
      Elf32_Addr d_ptr;
    } d_un;
} Elf32_Dyn;

typedef struct
{
  Elf64_Sxword d_tag;
  union
    {
      Elf64_Xword d_val;
      Elf64_Addr d_ptr;
    } d_un;
} Elf64_Dyn;



#define DT_NULL 0
#define DT_NEEDED 1
#define DT_PLTRELSZ 2
#define DT_PLTGOT 3
#define DT_HASH 4
#define DT_STRTAB 5
#define DT_SYMTAB 6
#define DT_RELA 7
#define DT_RELASZ 8
#define DT_RELAENT 9
#define DT_STRSZ 10
#define DT_SYMENT 11
#define DT_INIT 12
#define DT_FINI 13
#define DT_SONAME 14
#define DT_RPATH 15
#define DT_SYMBOLIC 16
#define DT_REL 17
#define DT_RELSZ 18
#define DT_RELENT 19
#define DT_PLTREL 20
#define DT_DEBUG 21
#define DT_TEXTREL 22
#define DT_JMPREL 23
#define DT_BIND_NOW 24
#define DT_INIT_ARRAY 25
#define DT_FINI_ARRAY 26
#define DT_INIT_ARRAYSZ 27
#define DT_FINI_ARRAYSZ 28
#define DT_RUNPATH 29
#define DT_FLAGS 30
#define DT_ENCODING 32
#define DT_PREINIT_ARRAY 32
#define DT_PREINIT_ARRAYSZ 33
#define DT_NUM 34
#define DT_LOOS 0x6000000d
#define DT_HIOS 0x6ffff000
#define DT_LOPROC 0x70000000
#define DT_HIPROC 0x7fffffff
#define DT_PROCNUM DT_MIPS_NUM




#define DT_VALRNGLO 0x6ffffd00
#define DT_GNU_PRELINKED 0x6ffffdf5
#define DT_GNU_CONFLICTSZ 0x6ffffdf6
#define DT_GNU_LIBLISTSZ 0x6ffffdf7
#define DT_CHECKSUM 0x6ffffdf8
#define DT_PLTPADSZ 0x6ffffdf9
#define DT_MOVEENT 0x6ffffdfa
#define DT_MOVESZ 0x6ffffdfb
#define DT_FEATURE_1 0x6ffffdfc
#define DT_POSFLAG_1 0x6ffffdfd

#define DT_SYMINSZ 0x6ffffdfe
#define DT_SYMINENT 0x6ffffdff
#define DT_VALRNGHI 0x6ffffdff
#define DT_VALTAGIDX(tag) (DT_VALRNGHI - (tag))
#define DT_VALNUM 12






#define DT_ADDRRNGLO 0x6ffffe00
#define DT_GNU_HASH 0x6ffffef5
#define DT_TLSDESC_PLT 0x6ffffef6
#define DT_TLSDESC_GOT 0x6ffffef7
#define DT_GNU_CONFLICT 0x6ffffef8
#define DT_GNU_LIBLIST 0x6ffffef9
#define DT_CONFIG 0x6ffffefa
#define DT_DEPAUDIT 0x6ffffefb
#define DT_AUDIT 0x6ffffefc
#define DT_PLTPAD 0x6ffffefd
#define DT_MOVETAB 0x6ffffefe
#define DT_SYMINFO 0x6ffffeff
#define DT_ADDRRNGHI 0x6ffffeff
#define DT_ADDRTAGIDX(tag) (DT_ADDRRNGHI - (tag))
#define DT_ADDRNUM 11



#define DT_VERSYM 0x6ffffff0

#define DT_RELACOUNT 0x6ffffff9
#define DT_RELCOUNT 0x6ffffffa


#define DT_FLAGS_1 0x6ffffffb
#define DT_VERDEF 0x6ffffffc

#define DT_VERDEFNUM 0x6ffffffd
#define DT_VERNEED 0x6ffffffe

#define DT_VERNEEDNUM 0x6fffffff
#define DT_VERSIONTAGIDX(tag) (DT_VERNEEDNUM - (tag))
#define DT_VERSIONTAGNUM 16



#define DT_AUXILIARY 0x7ffffffd
#define DT_FILTER 0x7fffffff
#define DT_EXTRATAGIDX(tag) ((Elf32_Word)-((Elf32_Sword) (tag) <<1>>1)-1)
#define DT_EXTRANUM 3


#define DF_ORIGIN 0x00000001
#define DF_SYMBOLIC 0x00000002
#define DF_TEXTREL 0x00000004
#define DF_BIND_NOW 0x00000008
#define DF_STATIC_TLS 0x00000010



#define DF_1_NOW 0x00000001
#define DF_1_GLOBAL 0x00000002
#define DF_1_GROUP 0x00000004
#define DF_1_NODELETE 0x00000008
#define DF_1_LOADFLTR 0x00000010
#define DF_1_INITFIRST 0x00000020
#define DF_1_NOOPEN 0x00000040
#define DF_1_ORIGIN 0x00000080
#define DF_1_DIRECT 0x00000100
#define DF_1_TRANS 0x00000200
#define DF_1_INTERPOSE 0x00000400
#define DF_1_NODEFLIB 0x00000800
#define DF_1_NODUMP 0x00001000
#define DF_1_CONFALT 0x00002000
#define DF_1_ENDFILTEE 0x00004000
#define DF_1_DISPRELDNE 0x00008000
#define DF_1_DISPRELPND 0x00010000
#define DF_1_NODIRECT 0x00020000
#define DF_1_IGNMULDEF 0x00040000
#define DF_1_NOKSYMS 0x00080000
#define DF_1_NOHDR 0x00100000
#define DF_1_EDITED 0x00200000
#define DF_1_NORELOC 0x00400000
#define DF_1_SYMINTPOSE 0x00800000
#define DF_1_GLOBAUDIT 0x01000000
#define DF_1_SINGLETON 0x02000000


#define DTF_1_PARINIT 0x00000001
#define DTF_1_CONFEXP 0x00000002


#define DF_P1_LAZYLOAD 0x00000001
#define DF_P1_GROUPPERM 0x00000002




typedef struct
{
  Elf32_Half vd_version;
  Elf32_Half vd_flags;
  Elf32_Half vd_ndx;
  Elf32_Half vd_cnt;
  Elf32_Word vd_hash;
  Elf32_Word vd_aux;
  Elf32_Word vd_next;

} Elf32_Verdef;

typedef struct
{
  Elf64_Half vd_version;
  Elf64_Half vd_flags;
  Elf64_Half vd_ndx;
  Elf64_Half vd_cnt;
  Elf64_Word vd_hash;
  Elf64_Word vd_aux;
  Elf64_Word vd_next;

} Elf64_Verdef;



#define VER_DEF_NONE 0
#define VER_DEF_CURRENT 1
#define VER_DEF_NUM 2


#define VER_FLG_BASE 0x1
#define VER_FLG_WEAK 0x2


#define VER_NDX_LOCAL 0
#define VER_NDX_GLOBAL 1
#define VER_NDX_LORESERVE 0xff00
#define VER_NDX_ELIMINATE 0xff01



typedef struct
{
  Elf32_Word vda_name;
  Elf32_Word vda_next;

} Elf32_Verdaux;

typedef struct
{
  Elf64_Word vda_name;
  Elf64_Word vda_next;

} Elf64_Verdaux;




typedef struct
{
  Elf32_Half vn_version;
  Elf32_Half vn_cnt;
  Elf32_Word vn_file;

  Elf32_Word vn_aux;
  Elf32_Word vn_next;

} Elf32_Verneed;

typedef struct
{
  Elf64_Half vn_version;
  Elf64_Half vn_cnt;
  Elf64_Word vn_file;

  Elf64_Word vn_aux;
  Elf64_Word vn_next;

} Elf64_Verneed;



#define VER_NEED_NONE 0
#define VER_NEED_CURRENT 1
#define VER_NEED_NUM 2



typedef struct
{
  Elf32_Word vna_hash;
  Elf32_Half vna_flags;
  Elf32_Half vna_other;
  Elf32_Word vna_name;
  Elf32_Word vna_next;

} Elf32_Vernaux;

typedef struct
{
  Elf64_Word vna_hash;
  Elf64_Half vna_flags;
  Elf64_Half vna_other;
  Elf64_Word vna_name;
  Elf64_Word vna_next;

} Elf64_Vernaux;



#define VER_FLG_WEAK 0x2
# 1089 "/usr/include/elf.h" 3 4
typedef struct
{
  uint32_t a_type;
  union
    {
      uint32_t a_val;



    } a_un;
} Elf32_auxv_t;

typedef struct
{
  uint64_t a_type;
  union
    {
      uint64_t a_val;



    } a_un;
} Elf64_auxv_t;

# 1 "/usr/include/x86_64-linux-gnu/bits/auxv.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/auxv.h" 3 4
#define AT_NULL 0
#define AT_IGNORE 1
#define AT_EXECFD 2
#define AT_PHDR 3
#define AT_PHENT 4
#define AT_PHNUM 5
#define AT_PAGESZ 6
#define AT_BASE 7
#define AT_FLAGS 8
#define AT_ENTRY 9
#define AT_NOTELF 10
#define AT_UID 11
#define AT_EUID 12
#define AT_GID 13
#define AT_EGID 14
#define AT_CLKTCK 17


#define AT_PLATFORM 15
#define AT_HWCAP 16




#define AT_FPUCW 18


#define AT_DCACHEBSIZE 19
#define AT_ICACHEBSIZE 20
#define AT_UCACHEBSIZE 21



#define AT_IGNOREPPC 22

#define AT_SECURE 23

#define AT_BASE_PLATFORM 24

#define AT_RANDOM 25

#define AT_HWCAP2 26


#define AT_EXECFN 31



#define AT_SYSINFO 32
#define AT_SYSINFO_EHDR 33



#define AT_L1I_CACHESHAPE 34
#define AT_L1D_CACHESHAPE 35
#define AT_L2_CACHESHAPE 36
#define AT_L3_CACHESHAPE 37
# 1114 "/usr/include/elf.h" 2 3 4



typedef struct
{
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;

typedef struct
{
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;




#define ELF_NOTE_SOLARIS "SUNW Solaris"


#define ELF_NOTE_GNU "GNU"





#define ELF_NOTE_PAGESIZE_HINT 1
# 1154 "/usr/include/elf.h" 3 4
#define NT_GNU_ABI_TAG 1
#define ELF_NOTE_ABI NT_GNU_ABI_TAG



#define ELF_NOTE_OS_LINUX 0
#define ELF_NOTE_OS_GNU 1
#define ELF_NOTE_OS_SOLARIS2 2
#define ELF_NOTE_OS_FREEBSD 3







#define NT_GNU_HWCAP 2



#define NT_GNU_BUILD_ID 3


#define NT_GNU_GOLD_VERSION 4



typedef struct
{
  Elf32_Xword m_value;
  Elf32_Word m_info;
  Elf32_Word m_poffset;
  Elf32_Half m_repeat;
  Elf32_Half m_stride;
} Elf32_Move;

typedef struct
{
  Elf64_Xword m_value;
  Elf64_Xword m_info;
  Elf64_Xword m_poffset;
  Elf64_Half m_repeat;
  Elf64_Half m_stride;
} Elf64_Move;


#define ELF32_M_SYM(info) ((info) >> 8)
#define ELF32_M_SIZE(info) ((unsigned char) (info))
#define ELF32_M_INFO(sym,size) (((sym) << 8) + (unsigned char) (size))

#define ELF64_M_SYM(info) ELF32_M_SYM (info)
#define ELF64_M_SIZE(info) ELF32_M_SIZE (info)
#define ELF64_M_INFO(sym,size) ELF32_M_INFO (sym, size)





#define EF_CPU32 0x00810000



#define R_68K_NONE 0
#define R_68K_32 1
#define R_68K_16 2
#define R_68K_8 3
#define R_68K_PC32 4
#define R_68K_PC16 5
#define R_68K_PC8 6
#define R_68K_GOT32 7
#define R_68K_GOT16 8
#define R_68K_GOT8 9
#define R_68K_GOT32O 10
#define R_68K_GOT16O 11
#define R_68K_GOT8O 12
#define R_68K_PLT32 13
#define R_68K_PLT16 14
#define R_68K_PLT8 15
#define R_68K_PLT32O 16
#define R_68K_PLT16O 17
#define R_68K_PLT8O 18
#define R_68K_COPY 19
#define R_68K_GLOB_DAT 20
#define R_68K_JMP_SLOT 21
#define R_68K_RELATIVE 22
#define R_68K_TLS_GD32 25
#define R_68K_TLS_GD16 26
#define R_68K_TLS_GD8 27
#define R_68K_TLS_LDM32 28
#define R_68K_TLS_LDM16 29
#define R_68K_TLS_LDM8 30
#define R_68K_TLS_LDO32 31
#define R_68K_TLS_LDO16 32
#define R_68K_TLS_LDO8 33
#define R_68K_TLS_IE32 34
#define R_68K_TLS_IE16 35
#define R_68K_TLS_IE8 36
#define R_68K_TLS_LE32 37

#define R_68K_TLS_LE16 38

#define R_68K_TLS_LE8 39

#define R_68K_TLS_DTPMOD32 40
#define R_68K_TLS_DTPREL32 41
#define R_68K_TLS_TPREL32 42

#define R_68K_NUM 43





#define R_386_NONE 0
#define R_386_32 1
#define R_386_PC32 2
#define R_386_GOT32 3
#define R_386_PLT32 4
#define R_386_COPY 5
#define R_386_GLOB_DAT 6
#define R_386_JMP_SLOT 7
#define R_386_RELATIVE 8
#define R_386_GOTOFF 9
#define R_386_GOTPC 10
#define R_386_32PLT 11
#define R_386_TLS_TPOFF 14
#define R_386_TLS_IE 15

#define R_386_TLS_GOTIE 16

#define R_386_TLS_LE 17

#define R_386_TLS_GD 18

#define R_386_TLS_LDM 19


#define R_386_16 20
#define R_386_PC16 21
#define R_386_8 22
#define R_386_PC8 23
#define R_386_TLS_GD_32 24

#define R_386_TLS_GD_PUSH 25
#define R_386_TLS_GD_CALL 26

#define R_386_TLS_GD_POP 27
#define R_386_TLS_LDM_32 28

#define R_386_TLS_LDM_PUSH 29
#define R_386_TLS_LDM_CALL 30

#define R_386_TLS_LDM_POP 31
#define R_386_TLS_LDO_32 32
#define R_386_TLS_IE_32 33

#define R_386_TLS_LE_32 34

#define R_386_TLS_DTPMOD32 35
#define R_386_TLS_DTPOFF32 36
#define R_386_TLS_TPOFF32 37
#define R_386_SIZE32 38
#define R_386_TLS_GOTDESC 39
#define R_386_TLS_DESC_CALL 40


#define R_386_TLS_DESC 41



#define R_386_IRELATIVE 42
#define R_386_GOT32X 43


#define R_386_NUM 44





#define STT_SPARC_REGISTER 13



#define EF_SPARCV9_MM 3
#define EF_SPARCV9_TSO 0
#define EF_SPARCV9_PSO 1
#define EF_SPARCV9_RMO 2
#define EF_SPARC_LEDATA 0x800000
#define EF_SPARC_EXT_MASK 0xFFFF00
#define EF_SPARC_32PLUS 0x000100
#define EF_SPARC_SUN_US1 0x000200
#define EF_SPARC_HAL_R1 0x000400
#define EF_SPARC_SUN_US3 0x000800



#define R_SPARC_NONE 0
#define R_SPARC_8 1
#define R_SPARC_16 2
#define R_SPARC_32 3
#define R_SPARC_DISP8 4
#define R_SPARC_DISP16 5
#define R_SPARC_DISP32 6
#define R_SPARC_WDISP30 7
#define R_SPARC_WDISP22 8
#define R_SPARC_HI22 9
#define R_SPARC_22 10
#define R_SPARC_13 11
#define R_SPARC_LO10 12
#define R_SPARC_GOT10 13
#define R_SPARC_GOT13 14
#define R_SPARC_GOT22 15
#define R_SPARC_PC10 16
#define R_SPARC_PC22 17
#define R_SPARC_WPLT30 18
#define R_SPARC_COPY 19
#define R_SPARC_GLOB_DAT 20
#define R_SPARC_JMP_SLOT 21
#define R_SPARC_RELATIVE 22
#define R_SPARC_UA32 23



#define R_SPARC_PLT32 24
#define R_SPARC_HIPLT22 25
#define R_SPARC_LOPLT10 26
#define R_SPARC_PCPLT32 27
#define R_SPARC_PCPLT22 28
#define R_SPARC_PCPLT10 29
#define R_SPARC_10 30
#define R_SPARC_11 31
#define R_SPARC_64 32
#define R_SPARC_OLO10 33
#define R_SPARC_HH22 34
#define R_SPARC_HM10 35
#define R_SPARC_LM22 36
#define R_SPARC_PC_HH22 37
#define R_SPARC_PC_HM10 38
#define R_SPARC_PC_LM22 39
#define R_SPARC_WDISP16 40
#define R_SPARC_WDISP19 41
#define R_SPARC_GLOB_JMP 42
#define R_SPARC_7 43
#define R_SPARC_5 44
#define R_SPARC_6 45
#define R_SPARC_DISP64 46
#define R_SPARC_PLT64 47
#define R_SPARC_HIX22 48
#define R_SPARC_LOX10 49
#define R_SPARC_H44 50
#define R_SPARC_M44 51
#define R_SPARC_L44 52
#define R_SPARC_REGISTER 53
#define R_SPARC_UA64 54
#define R_SPARC_UA16 55
#define R_SPARC_TLS_GD_HI22 56
#define R_SPARC_TLS_GD_LO10 57
#define R_SPARC_TLS_GD_ADD 58
#define R_SPARC_TLS_GD_CALL 59
#define R_SPARC_TLS_LDM_HI22 60
#define R_SPARC_TLS_LDM_LO10 61
#define R_SPARC_TLS_LDM_ADD 62
#define R_SPARC_TLS_LDM_CALL 63
#define R_SPARC_TLS_LDO_HIX22 64
#define R_SPARC_TLS_LDO_LOX10 65
#define R_SPARC_TLS_LDO_ADD 66
#define R_SPARC_TLS_IE_HI22 67
#define R_SPARC_TLS_IE_LO10 68
#define R_SPARC_TLS_IE_LD 69
#define R_SPARC_TLS_IE_LDX 70
#define R_SPARC_TLS_IE_ADD 71
#define R_SPARC_TLS_LE_HIX22 72
#define R_SPARC_TLS_LE_LOX10 73
#define R_SPARC_TLS_DTPMOD32 74
#define R_SPARC_TLS_DTPMOD64 75
#define R_SPARC_TLS_DTPOFF32 76
#define R_SPARC_TLS_DTPOFF64 77
#define R_SPARC_TLS_TPOFF32 78
#define R_SPARC_TLS_TPOFF64 79
#define R_SPARC_GOTDATA_HIX22 80
#define R_SPARC_GOTDATA_LOX10 81
#define R_SPARC_GOTDATA_OP_HIX22 82
#define R_SPARC_GOTDATA_OP_LOX10 83
#define R_SPARC_GOTDATA_OP 84
#define R_SPARC_H34 85
#define R_SPARC_SIZE32 86
#define R_SPARC_SIZE64 87
#define R_SPARC_WDISP10 88
#define R_SPARC_JMP_IREL 248
#define R_SPARC_IRELATIVE 249
#define R_SPARC_GNU_VTINHERIT 250
#define R_SPARC_GNU_VTENTRY 251
#define R_SPARC_REV32 252

#define R_SPARC_NUM 253



#define DT_SPARC_REGISTER 0x70000001
#define DT_SPARC_NUM 2





#define EF_MIPS_NOREORDER 1
#define EF_MIPS_PIC 2
#define EF_MIPS_CPIC 4
#define EF_MIPS_XGOT 8
#define EF_MIPS_64BIT_WHIRL 16
#define EF_MIPS_ABI2 32
#define EF_MIPS_ABI_ON32 64
#define EF_MIPS_FP64 512
#define EF_MIPS_NAN2008 1024
#define EF_MIPS_ARCH 0xf0000000



#define EF_MIPS_ARCH_1 0x00000000
#define EF_MIPS_ARCH_2 0x10000000
#define EF_MIPS_ARCH_3 0x20000000
#define EF_MIPS_ARCH_4 0x30000000
#define EF_MIPS_ARCH_5 0x40000000
#define EF_MIPS_ARCH_32 0x50000000
#define EF_MIPS_ARCH_64 0x60000000
#define EF_MIPS_ARCH_32R2 0x70000000
#define EF_MIPS_ARCH_64R2 0x80000000



#define E_MIPS_ARCH_1 EF_MIPS_ARCH_1
#define E_MIPS_ARCH_2 EF_MIPS_ARCH_2
#define E_MIPS_ARCH_3 EF_MIPS_ARCH_3
#define E_MIPS_ARCH_4 EF_MIPS_ARCH_4
#define E_MIPS_ARCH_5 EF_MIPS_ARCH_5
#define E_MIPS_ARCH_32 EF_MIPS_ARCH_32
#define E_MIPS_ARCH_64 EF_MIPS_ARCH_64



#define SHN_MIPS_ACOMMON 0xff00
#define SHN_MIPS_TEXT 0xff01
#define SHN_MIPS_DATA 0xff02
#define SHN_MIPS_SCOMMON 0xff03
#define SHN_MIPS_SUNDEFINED 0xff04



#define SHT_MIPS_LIBLIST 0x70000000
#define SHT_MIPS_MSYM 0x70000001
#define SHT_MIPS_CONFLICT 0x70000002
#define SHT_MIPS_GPTAB 0x70000003
#define SHT_MIPS_UCODE 0x70000004
#define SHT_MIPS_DEBUG 0x70000005
#define SHT_MIPS_REGINFO 0x70000006
#define SHT_MIPS_PACKAGE 0x70000007
#define SHT_MIPS_PACKSYM 0x70000008
#define SHT_MIPS_RELD 0x70000009
#define SHT_MIPS_IFACE 0x7000000b
#define SHT_MIPS_CONTENT 0x7000000c
#define SHT_MIPS_OPTIONS 0x7000000d
#define SHT_MIPS_SHDR 0x70000010
#define SHT_MIPS_FDESC 0x70000011
#define SHT_MIPS_EXTSYM 0x70000012
#define SHT_MIPS_DENSE 0x70000013
#define SHT_MIPS_PDESC 0x70000014
#define SHT_MIPS_LOCSYM 0x70000015
#define SHT_MIPS_AUXSYM 0x70000016
#define SHT_MIPS_OPTSYM 0x70000017
#define SHT_MIPS_LOCSTR 0x70000018
#define SHT_MIPS_LINE 0x70000019
#define SHT_MIPS_RFDESC 0x7000001a
#define SHT_MIPS_DELTASYM 0x7000001b
#define SHT_MIPS_DELTAINST 0x7000001c
#define SHT_MIPS_DELTACLASS 0x7000001d
#define SHT_MIPS_DWARF 0x7000001e
#define SHT_MIPS_DELTADECL 0x7000001f
#define SHT_MIPS_SYMBOL_LIB 0x70000020
#define SHT_MIPS_EVENTS 0x70000021
#define SHT_MIPS_TRANSLATE 0x70000022
#define SHT_MIPS_PIXIE 0x70000023
#define SHT_MIPS_XLATE 0x70000024
#define SHT_MIPS_XLATE_DEBUG 0x70000025
#define SHT_MIPS_WHIRL 0x70000026
#define SHT_MIPS_EH_REGION 0x70000027
#define SHT_MIPS_XLATE_OLD 0x70000028
#define SHT_MIPS_PDR_EXCEPTION 0x70000029



#define SHF_MIPS_GPREL 0x10000000
#define SHF_MIPS_MERGE 0x20000000
#define SHF_MIPS_ADDR 0x40000000
#define SHF_MIPS_STRINGS 0x80000000
#define SHF_MIPS_NOSTRIP 0x08000000
#define SHF_MIPS_LOCAL 0x04000000
#define SHF_MIPS_NAMES 0x02000000
#define SHF_MIPS_NODUPE 0x01000000





#define STO_MIPS_DEFAULT 0x0
#define STO_MIPS_INTERNAL 0x1
#define STO_MIPS_HIDDEN 0x2
#define STO_MIPS_PROTECTED 0x3
#define STO_MIPS_PLT 0x8
#define STO_MIPS_SC_ALIGN_UNUSED 0xff


#define STB_MIPS_SPLIT_COMMON 13



typedef union
{
  struct
    {
      Elf32_Word gt_current_g_value;
      Elf32_Word gt_unused;
    } gt_header;
  struct
    {
      Elf32_Word gt_g_value;
      Elf32_Word gt_bytes;
    } gt_entry;
} Elf32_gptab;



typedef struct
{
  Elf32_Word ri_gprmask;
  Elf32_Word ri_cprmask[4];
  Elf32_Sword ri_gp_value;
} Elf32_RegInfo;



typedef struct
{
  unsigned char kind;

  unsigned char size;
  Elf32_Section section;

  Elf32_Word info;
} Elf_Options;



#define ODK_NULL 0
#define ODK_REGINFO 1
#define ODK_EXCEPTIONS 2
#define ODK_PAD 3
#define ODK_HWPATCH 4
#define ODK_FILL 5
#define ODK_TAGS 6
#define ODK_HWAND 7
#define ODK_HWOR 8



#define OEX_FPU_MIN 0x1f
#define OEX_FPU_MAX 0x1f00
#define OEX_PAGE0 0x10000
#define OEX_SMM 0x20000
#define OEX_FPDBUG 0x40000
#define OEX_PRECISEFP OEX_FPDBUG
#define OEX_DISMISS 0x80000

#define OEX_FPU_INVAL 0x10
#define OEX_FPU_DIV0 0x08
#define OEX_FPU_OFLO 0x04
#define OEX_FPU_UFLO 0x02
#define OEX_FPU_INEX 0x01



#define OHW_R4KEOP 0x1
#define OHW_R8KPFETCH 0x2
#define OHW_R5KEOP 0x4
#define OHW_R5KCVTL 0x8

#define OPAD_PREFIX 0x1
#define OPAD_POSTFIX 0x2
#define OPAD_SYMBOL 0x4



typedef struct
{
  Elf32_Word hwp_flags1;
  Elf32_Word hwp_flags2;
} Elf_Options_Hw;



#define OHWA0_R4KEOP_CHECKED 0x00000001
#define OHWA1_R4KEOP_CLEAN 0x00000002



#define R_MIPS_NONE 0
#define R_MIPS_16 1
#define R_MIPS_32 2
#define R_MIPS_REL32 3
#define R_MIPS_26 4
#define R_MIPS_HI16 5
#define R_MIPS_LO16 6
#define R_MIPS_GPREL16 7
#define R_MIPS_LITERAL 8
#define R_MIPS_GOT16 9
#define R_MIPS_PC16 10
#define R_MIPS_CALL16 11
#define R_MIPS_GPREL32 12

#define R_MIPS_SHIFT5 16
#define R_MIPS_SHIFT6 17
#define R_MIPS_64 18
#define R_MIPS_GOT_DISP 19
#define R_MIPS_GOT_PAGE 20
#define R_MIPS_GOT_OFST 21
#define R_MIPS_GOT_HI16 22
#define R_MIPS_GOT_LO16 23
#define R_MIPS_SUB 24
#define R_MIPS_INSERT_A 25
#define R_MIPS_INSERT_B 26
#define R_MIPS_DELETE 27
#define R_MIPS_HIGHER 28
#define R_MIPS_HIGHEST 29
#define R_MIPS_CALL_HI16 30
#define R_MIPS_CALL_LO16 31
#define R_MIPS_SCN_DISP 32
#define R_MIPS_REL16 33
#define R_MIPS_ADD_IMMEDIATE 34
#define R_MIPS_PJUMP 35
#define R_MIPS_RELGOT 36
#define R_MIPS_JALR 37
#define R_MIPS_TLS_DTPMOD32 38
#define R_MIPS_TLS_DTPREL32 39
#define R_MIPS_TLS_DTPMOD64 40
#define R_MIPS_TLS_DTPREL64 41
#define R_MIPS_TLS_GD 42
#define R_MIPS_TLS_LDM 43
#define R_MIPS_TLS_DTPREL_HI16 44
#define R_MIPS_TLS_DTPREL_LO16 45
#define R_MIPS_TLS_GOTTPREL 46
#define R_MIPS_TLS_TPREL32 47
#define R_MIPS_TLS_TPREL64 48
#define R_MIPS_TLS_TPREL_HI16 49
#define R_MIPS_TLS_TPREL_LO16 50
#define R_MIPS_GLOB_DAT 51
#define R_MIPS_COPY 126
#define R_MIPS_JUMP_SLOT 127

#define R_MIPS_NUM 128



#define PT_MIPS_REGINFO 0x70000000
#define PT_MIPS_RTPROC 0x70000001
#define PT_MIPS_OPTIONS 0x70000002
#define PT_MIPS_ABIFLAGS 0x70000003



#define PF_MIPS_LOCAL 0x10000000



#define DT_MIPS_RLD_VERSION 0x70000001
#define DT_MIPS_TIME_STAMP 0x70000002
#define DT_MIPS_ICHECKSUM 0x70000003
#define DT_MIPS_IVERSION 0x70000004
#define DT_MIPS_FLAGS 0x70000005
#define DT_MIPS_BASE_ADDRESS 0x70000006
#define DT_MIPS_MSYM 0x70000007
#define DT_MIPS_CONFLICT 0x70000008
#define DT_MIPS_LIBLIST 0x70000009
#define DT_MIPS_LOCAL_GOTNO 0x7000000a
#define DT_MIPS_CONFLICTNO 0x7000000b
#define DT_MIPS_LIBLISTNO 0x70000010
#define DT_MIPS_SYMTABNO 0x70000011
#define DT_MIPS_UNREFEXTNO 0x70000012
#define DT_MIPS_GOTSYM 0x70000013
#define DT_MIPS_HIPAGENO 0x70000014
#define DT_MIPS_RLD_MAP 0x70000016
#define DT_MIPS_DELTA_CLASS 0x70000017
#define DT_MIPS_DELTA_CLASS_NO 0x70000018

#define DT_MIPS_DELTA_INSTANCE 0x70000019
#define DT_MIPS_DELTA_INSTANCE_NO 0x7000001a

#define DT_MIPS_DELTA_RELOC 0x7000001b
#define DT_MIPS_DELTA_RELOC_NO 0x7000001c

#define DT_MIPS_DELTA_SYM 0x7000001d

#define DT_MIPS_DELTA_SYM_NO 0x7000001e

#define DT_MIPS_DELTA_CLASSSYM 0x70000020

#define DT_MIPS_DELTA_CLASSSYM_NO 0x70000021

#define DT_MIPS_CXX_FLAGS 0x70000022
#define DT_MIPS_PIXIE_INIT 0x70000023
#define DT_MIPS_SYMBOL_LIB 0x70000024
#define DT_MIPS_LOCALPAGE_GOTIDX 0x70000025
#define DT_MIPS_LOCAL_GOTIDX 0x70000026
#define DT_MIPS_HIDDEN_GOTIDX 0x70000027
#define DT_MIPS_PROTECTED_GOTIDX 0x70000028
#define DT_MIPS_OPTIONS 0x70000029
#define DT_MIPS_INTERFACE 0x7000002a
#define DT_MIPS_DYNSTR_ALIGN 0x7000002b
#define DT_MIPS_INTERFACE_SIZE 0x7000002c
#define DT_MIPS_RLD_TEXT_RESOLVE_ADDR 0x7000002d

#define DT_MIPS_PERF_SUFFIX 0x7000002e

#define DT_MIPS_COMPACT_SIZE 0x7000002f
#define DT_MIPS_GP_VALUE 0x70000030
#define DT_MIPS_AUX_DYNAMIC 0x70000031

#define DT_MIPS_PLTGOT 0x70000032



#define DT_MIPS_RWPLT 0x70000034



#define DT_MIPS_RLD_MAP_REL 0x70000035
#define DT_MIPS_NUM 0x36



#define RHF_NONE 0
#define RHF_QUICKSTART (1 << 0)
#define RHF_NOTPOT (1 << 1)
#define RHF_NO_LIBRARY_REPLACEMENT (1 << 2)
#define RHF_NO_MOVE (1 << 3)
#define RHF_SGI_ONLY (1 << 4)
#define RHF_GUARANTEE_INIT (1 << 5)
#define RHF_DELTA_C_PLUS_PLUS (1 << 6)
#define RHF_GUARANTEE_START_INIT (1 << 7)
#define RHF_PIXIE (1 << 8)
#define RHF_DEFAULT_DELAY_LOAD (1 << 9)
#define RHF_REQUICKSTART (1 << 10)
#define RHF_REQUICKSTARTED (1 << 11)
#define RHF_CORD (1 << 12)
#define RHF_NO_UNRES_UNDEF (1 << 13)
#define RHF_RLD_ORDER_SAFE (1 << 14)



typedef struct
{
  Elf32_Word l_name;
  Elf32_Word l_time_stamp;
  Elf32_Word l_checksum;
  Elf32_Word l_version;
  Elf32_Word l_flags;
} Elf32_Lib;

typedef struct
{
  Elf64_Word l_name;
  Elf64_Word l_time_stamp;
  Elf64_Word l_checksum;
  Elf64_Word l_version;
  Elf64_Word l_flags;
} Elf64_Lib;




#define LL_NONE 0
#define LL_EXACT_MATCH (1 << 0)
#define LL_IGNORE_INT_VER (1 << 1)
#define LL_REQUIRE_MINOR (1 << 2)
#define LL_EXPORTS (1 << 3)
#define LL_DELAY_LOAD (1 << 4)
#define LL_DELTA (1 << 5)



typedef Elf32_Addr Elf32_Conflict;

typedef struct
{

  Elf32_Half version;

  unsigned char isa_level;

  unsigned char isa_rev;

  unsigned char gpr_size;

  unsigned char cpr1_size;

  unsigned char cpr2_size;

  unsigned char fp_abi;

  Elf32_Word isa_ext;

  Elf32_Word ases;

  Elf32_Word flags1;
  Elf32_Word flags2;
} Elf_MIPS_ABIFlags_v0;



#define MIPS_AFL_REG_NONE 0x00
#define MIPS_AFL_REG_32 0x01
#define MIPS_AFL_REG_64 0x02
#define MIPS_AFL_REG_128 0x03



#define MIPS_AFL_ASE_DSP 0x00000001
#define MIPS_AFL_ASE_DSPR2 0x00000002
#define MIPS_AFL_ASE_EVA 0x00000004
#define MIPS_AFL_ASE_MCU 0x00000008
#define MIPS_AFL_ASE_MDMX 0x00000010
#define MIPS_AFL_ASE_MIPS3D 0x00000020
#define MIPS_AFL_ASE_MT 0x00000040
#define MIPS_AFL_ASE_SMARTMIPS 0x00000080
#define MIPS_AFL_ASE_VIRT 0x00000100
#define MIPS_AFL_ASE_MSA 0x00000200
#define MIPS_AFL_ASE_MIPS16 0x00000400
#define MIPS_AFL_ASE_MICROMIPS 0x00000800
#define MIPS_AFL_ASE_XPA 0x00001000
#define MIPS_AFL_ASE_MASK 0x00001fff



#define MIPS_AFL_EXT_XLR 1
#define MIPS_AFL_EXT_OCTEON2 2
#define MIPS_AFL_EXT_OCTEONP 3
#define MIPS_AFL_EXT_LOONGSON_3A 4
#define MIPS_AFL_EXT_OCTEON 5
#define MIPS_AFL_EXT_5900 6
#define MIPS_AFL_EXT_4650 7
#define MIPS_AFL_EXT_4010 8
#define MIPS_AFL_EXT_4100 9
#define MIPS_AFL_EXT_3900 10
#define MIPS_AFL_EXT_10000 11
#define MIPS_AFL_EXT_SB1 12
#define MIPS_AFL_EXT_4111 13
#define MIPS_AFL_EXT_4120 14
#define MIPS_AFL_EXT_5400 15
#define MIPS_AFL_EXT_5500 16
#define MIPS_AFL_EXT_LOONGSON_2E 17
#define MIPS_AFL_EXT_LOONGSON_2F 18


#define MIPS_AFL_FLAGS1_ODDSPREG 1


enum
{

  Val_GNU_MIPS_ABI_FP_ANY = 0,

  Val_GNU_MIPS_ABI_FP_DOUBLE = 1,

  Val_GNU_MIPS_ABI_FP_SINGLE = 2,

  Val_GNU_MIPS_ABI_FP_SOFT = 3,

  Val_GNU_MIPS_ABI_FP_OLD_64 = 4,

  Val_GNU_MIPS_ABI_FP_XX = 5,

  Val_GNU_MIPS_ABI_FP_64 = 6,

  Val_GNU_MIPS_ABI_FP_64A = 7,

  Val_GNU_MIPS_ABI_FP_MAX = 7
};





#define EF_PARISC_TRAPNIL 0x00010000
#define EF_PARISC_EXT 0x00020000
#define EF_PARISC_LSB 0x00040000
#define EF_PARISC_WIDE 0x00080000
#define EF_PARISC_NO_KABP 0x00100000

#define EF_PARISC_LAZYSWAP 0x00400000
#define EF_PARISC_ARCH 0x0000ffff



#define EFA_PARISC_1_0 0x020b
#define EFA_PARISC_1_1 0x0210
#define EFA_PARISC_2_0 0x0214



#define SHN_PARISC_ANSI_COMMON 0xff00

#define SHN_PARISC_HUGE_COMMON 0xff01



#define SHT_PARISC_EXT 0x70000000
#define SHT_PARISC_UNWIND 0x70000001
#define SHT_PARISC_DOC 0x70000002



#define SHF_PARISC_SHORT 0x20000000
#define SHF_PARISC_HUGE 0x40000000
#define SHF_PARISC_SBP 0x80000000



#define STT_PARISC_MILLICODE 13

#define STT_HP_OPAQUE (STT_LOOS + 0x1)
#define STT_HP_STUB (STT_LOOS + 0x2)



#define R_PARISC_NONE 0
#define R_PARISC_DIR32 1
#define R_PARISC_DIR21L 2
#define R_PARISC_DIR17R 3
#define R_PARISC_DIR17F 4
#define R_PARISC_DIR14R 6
#define R_PARISC_PCREL32 9
#define R_PARISC_PCREL21L 10
#define R_PARISC_PCREL17R 11
#define R_PARISC_PCREL17F 12
#define R_PARISC_PCREL14R 14
#define R_PARISC_DPREL21L 18
#define R_PARISC_DPREL14R 22
#define R_PARISC_GPREL21L 26
#define R_PARISC_GPREL14R 30
#define R_PARISC_LTOFF21L 34
#define R_PARISC_LTOFF14R 38
#define R_PARISC_SECREL32 41
#define R_PARISC_SEGBASE 48
#define R_PARISC_SEGREL32 49
#define R_PARISC_PLTOFF21L 50
#define R_PARISC_PLTOFF14R 54
#define R_PARISC_LTOFF_FPTR32 57
#define R_PARISC_LTOFF_FPTR21L 58
#define R_PARISC_LTOFF_FPTR14R 62
#define R_PARISC_FPTR64 64
#define R_PARISC_PLABEL32 65
#define R_PARISC_PLABEL21L 66
#define R_PARISC_PLABEL14R 70
#define R_PARISC_PCREL64 72
#define R_PARISC_PCREL22F 74
#define R_PARISC_PCREL14WR 75
#define R_PARISC_PCREL14DR 76
#define R_PARISC_PCREL16F 77
#define R_PARISC_PCREL16WF 78
#define R_PARISC_PCREL16DF 79
#define R_PARISC_DIR64 80
#define R_PARISC_DIR14WR 83
#define R_PARISC_DIR14DR 84
#define R_PARISC_DIR16F 85
#define R_PARISC_DIR16WF 86
#define R_PARISC_DIR16DF 87
#define R_PARISC_GPREL64 88
#define R_PARISC_GPREL14WR 91
#define R_PARISC_GPREL14DR 92
#define R_PARISC_GPREL16F 93
#define R_PARISC_GPREL16WF 94
#define R_PARISC_GPREL16DF 95
#define R_PARISC_LTOFF64 96
#define R_PARISC_LTOFF14WR 99
#define R_PARISC_LTOFF14DR 100
#define R_PARISC_LTOFF16F 101
#define R_PARISC_LTOFF16WF 102
#define R_PARISC_LTOFF16DF 103
#define R_PARISC_SECREL64 104
#define R_PARISC_SEGREL64 112
#define R_PARISC_PLTOFF14WR 115
#define R_PARISC_PLTOFF14DR 116
#define R_PARISC_PLTOFF16F 117
#define R_PARISC_PLTOFF16WF 118
#define R_PARISC_PLTOFF16DF 119
#define R_PARISC_LTOFF_FPTR64 120
#define R_PARISC_LTOFF_FPTR14WR 123
#define R_PARISC_LTOFF_FPTR14DR 124
#define R_PARISC_LTOFF_FPTR16F 125
#define R_PARISC_LTOFF_FPTR16WF 126
#define R_PARISC_LTOFF_FPTR16DF 127
#define R_PARISC_LORESERVE 128
#define R_PARISC_COPY 128
#define R_PARISC_IPLT 129
#define R_PARISC_EPLT 130
#define R_PARISC_TPREL32 153
#define R_PARISC_TPREL21L 154
#define R_PARISC_TPREL14R 158
#define R_PARISC_LTOFF_TP21L 162
#define R_PARISC_LTOFF_TP14R 166
#define R_PARISC_LTOFF_TP14F 167
#define R_PARISC_TPREL64 216
#define R_PARISC_TPREL14WR 219
#define R_PARISC_TPREL14DR 220
#define R_PARISC_TPREL16F 221
#define R_PARISC_TPREL16WF 222
#define R_PARISC_TPREL16DF 223
#define R_PARISC_LTOFF_TP64 224
#define R_PARISC_LTOFF_TP14WR 227
#define R_PARISC_LTOFF_TP14DR 228
#define R_PARISC_LTOFF_TP16F 229
#define R_PARISC_LTOFF_TP16WF 230
#define R_PARISC_LTOFF_TP16DF 231
#define R_PARISC_GNU_VTENTRY 232
#define R_PARISC_GNU_VTINHERIT 233
#define R_PARISC_TLS_GD21L 234
#define R_PARISC_TLS_GD14R 235
#define R_PARISC_TLS_GDCALL 236
#define R_PARISC_TLS_LDM21L 237
#define R_PARISC_TLS_LDM14R 238
#define R_PARISC_TLS_LDMCALL 239
#define R_PARISC_TLS_LDO21L 240
#define R_PARISC_TLS_LDO14R 241
#define R_PARISC_TLS_DTPMOD32 242
#define R_PARISC_TLS_DTPMOD64 243
#define R_PARISC_TLS_DTPOFF32 244
#define R_PARISC_TLS_DTPOFF64 245
#define R_PARISC_TLS_LE21L R_PARISC_TPREL21L
#define R_PARISC_TLS_LE14R R_PARISC_TPREL14R
#define R_PARISC_TLS_IE21L R_PARISC_LTOFF_TP21L
#define R_PARISC_TLS_IE14R R_PARISC_LTOFF_TP14R
#define R_PARISC_TLS_TPREL32 R_PARISC_TPREL32
#define R_PARISC_TLS_TPREL64 R_PARISC_TPREL64
#define R_PARISC_HIRESERVE 255



#define PT_HP_TLS (PT_LOOS + 0x0)
#define PT_HP_CORE_NONE (PT_LOOS + 0x1)
#define PT_HP_CORE_VERSION (PT_LOOS + 0x2)
#define PT_HP_CORE_KERNEL (PT_LOOS + 0x3)
#define PT_HP_CORE_COMM (PT_LOOS + 0x4)
#define PT_HP_CORE_PROC (PT_LOOS + 0x5)
#define PT_HP_CORE_LOADABLE (PT_LOOS + 0x6)
#define PT_HP_CORE_STACK (PT_LOOS + 0x7)
#define PT_HP_CORE_SHM (PT_LOOS + 0x8)
#define PT_HP_CORE_MMF (PT_LOOS + 0x9)
#define PT_HP_PARALLEL (PT_LOOS + 0x10)
#define PT_HP_FASTBIND (PT_LOOS + 0x11)
#define PT_HP_OPT_ANNOT (PT_LOOS + 0x12)
#define PT_HP_HSL_ANNOT (PT_LOOS + 0x13)
#define PT_HP_STACK (PT_LOOS + 0x14)

#define PT_PARISC_ARCHEXT 0x70000000
#define PT_PARISC_UNWIND 0x70000001



#define PF_PARISC_SBP 0x08000000

#define PF_HP_PAGE_SIZE 0x00100000
#define PF_HP_FAR_SHARED 0x00200000
#define PF_HP_NEAR_SHARED 0x00400000
#define PF_HP_CODE 0x01000000
#define PF_HP_MODIFY 0x02000000
#define PF_HP_LAZYSWAP 0x04000000
#define PF_HP_SBP 0x08000000






#define EF_ALPHA_32BIT 1
#define EF_ALPHA_CANRELAX 2




#define SHT_ALPHA_DEBUG 0x70000001
#define SHT_ALPHA_REGINFO 0x70000002



#define SHF_ALPHA_GPREL 0x10000000


#define STO_ALPHA_NOPV 0x80
#define STO_ALPHA_STD_GPLOAD 0x88



#define R_ALPHA_NONE 0
#define R_ALPHA_REFLONG 1
#define R_ALPHA_REFQUAD 2
#define R_ALPHA_GPREL32 3
#define R_ALPHA_LITERAL 4
#define R_ALPHA_LITUSE 5
#define R_ALPHA_GPDISP 6
#define R_ALPHA_BRADDR 7
#define R_ALPHA_HINT 8
#define R_ALPHA_SREL16 9
#define R_ALPHA_SREL32 10
#define R_ALPHA_SREL64 11
#define R_ALPHA_GPRELHIGH 17
#define R_ALPHA_GPRELLOW 18
#define R_ALPHA_GPREL16 19
#define R_ALPHA_COPY 24
#define R_ALPHA_GLOB_DAT 25
#define R_ALPHA_JMP_SLOT 26
#define R_ALPHA_RELATIVE 27
#define R_ALPHA_TLS_GD_HI 28
#define R_ALPHA_TLSGD 29
#define R_ALPHA_TLS_LDM 30
#define R_ALPHA_DTPMOD64 31
#define R_ALPHA_GOTDTPREL 32
#define R_ALPHA_DTPREL64 33
#define R_ALPHA_DTPRELHI 34
#define R_ALPHA_DTPRELLO 35
#define R_ALPHA_DTPREL16 36
#define R_ALPHA_GOTTPREL 37
#define R_ALPHA_TPREL64 38
#define R_ALPHA_TPRELHI 39
#define R_ALPHA_TPRELLO 40
#define R_ALPHA_TPREL16 41

#define R_ALPHA_NUM 46


#define LITUSE_ALPHA_ADDR 0
#define LITUSE_ALPHA_BASE 1
#define LITUSE_ALPHA_BYTOFF 2
#define LITUSE_ALPHA_JSR 3
#define LITUSE_ALPHA_TLS_GD 4
#define LITUSE_ALPHA_TLS_LDM 5


#define DT_ALPHA_PLTRO (DT_LOPROC + 0)
#define DT_ALPHA_NUM 1




#define EF_PPC_EMB 0x80000000


#define EF_PPC_RELOCATABLE 0x00010000
#define EF_PPC_RELOCATABLE_LIB 0x00008000



#define R_PPC_NONE 0
#define R_PPC_ADDR32 1
#define R_PPC_ADDR24 2
#define R_PPC_ADDR16 3
#define R_PPC_ADDR16_LO 4
#define R_PPC_ADDR16_HI 5
#define R_PPC_ADDR16_HA 6
#define R_PPC_ADDR14 7
#define R_PPC_ADDR14_BRTAKEN 8
#define R_PPC_ADDR14_BRNTAKEN 9
#define R_PPC_REL24 10
#define R_PPC_REL14 11
#define R_PPC_REL14_BRTAKEN 12
#define R_PPC_REL14_BRNTAKEN 13
#define R_PPC_GOT16 14
#define R_PPC_GOT16_LO 15
#define R_PPC_GOT16_HI 16
#define R_PPC_GOT16_HA 17
#define R_PPC_PLTREL24 18
#define R_PPC_COPY 19
#define R_PPC_GLOB_DAT 20
#define R_PPC_JMP_SLOT 21
#define R_PPC_RELATIVE 22
#define R_PPC_LOCAL24PC 23
#define R_PPC_UADDR32 24
#define R_PPC_UADDR16 25
#define R_PPC_REL32 26
#define R_PPC_PLT32 27
#define R_PPC_PLTREL32 28
#define R_PPC_PLT16_LO 29
#define R_PPC_PLT16_HI 30
#define R_PPC_PLT16_HA 31
#define R_PPC_SDAREL16 32
#define R_PPC_SECTOFF 33
#define R_PPC_SECTOFF_LO 34
#define R_PPC_SECTOFF_HI 35
#define R_PPC_SECTOFF_HA 36


#define R_PPC_TLS 67
#define R_PPC_DTPMOD32 68
#define R_PPC_TPREL16 69
#define R_PPC_TPREL16_LO 70
#define R_PPC_TPREL16_HI 71
#define R_PPC_TPREL16_HA 72
#define R_PPC_TPREL32 73
#define R_PPC_DTPREL16 74
#define R_PPC_DTPREL16_LO 75
#define R_PPC_DTPREL16_HI 76
#define R_PPC_DTPREL16_HA 77
#define R_PPC_DTPREL32 78
#define R_PPC_GOT_TLSGD16 79
#define R_PPC_GOT_TLSGD16_LO 80
#define R_PPC_GOT_TLSGD16_HI 81
#define R_PPC_GOT_TLSGD16_HA 82
#define R_PPC_GOT_TLSLD16 83
#define R_PPC_GOT_TLSLD16_LO 84
#define R_PPC_GOT_TLSLD16_HI 85
#define R_PPC_GOT_TLSLD16_HA 86
#define R_PPC_GOT_TPREL16 87
#define R_PPC_GOT_TPREL16_LO 88
#define R_PPC_GOT_TPREL16_HI 89
#define R_PPC_GOT_TPREL16_HA 90
#define R_PPC_GOT_DTPREL16 91
#define R_PPC_GOT_DTPREL16_LO 92
#define R_PPC_GOT_DTPREL16_HI 93
#define R_PPC_GOT_DTPREL16_HA 94
#define R_PPC_TLSGD 95
#define R_PPC_TLSLD 96



#define R_PPC_EMB_NADDR32 101
#define R_PPC_EMB_NADDR16 102
#define R_PPC_EMB_NADDR16_LO 103
#define R_PPC_EMB_NADDR16_HI 104
#define R_PPC_EMB_NADDR16_HA 105
#define R_PPC_EMB_SDAI16 106
#define R_PPC_EMB_SDA2I16 107
#define R_PPC_EMB_SDA2REL 108
#define R_PPC_EMB_SDA21 109
#define R_PPC_EMB_MRKREF 110
#define R_PPC_EMB_RELSEC16 111
#define R_PPC_EMB_RELST_LO 112
#define R_PPC_EMB_RELST_HI 113
#define R_PPC_EMB_RELST_HA 114
#define R_PPC_EMB_BIT_FLD 115
#define R_PPC_EMB_RELSDA 116


#define R_PPC_DIAB_SDA21_LO 180
#define R_PPC_DIAB_SDA21_HI 181
#define R_PPC_DIAB_SDA21_HA 182
#define R_PPC_DIAB_RELSDA_LO 183
#define R_PPC_DIAB_RELSDA_HI 184
#define R_PPC_DIAB_RELSDA_HA 185


#define R_PPC_IRELATIVE 248


#define R_PPC_REL16 249
#define R_PPC_REL16_LO 250
#define R_PPC_REL16_HI 251
#define R_PPC_REL16_HA 252



#define R_PPC_TOC16 255


#define DT_PPC_GOT (DT_LOPROC + 0)
#define DT_PPC_OPT (DT_LOPROC + 1)
#define DT_PPC_NUM 2


#define PPC_OPT_TLS 1


#define R_PPC64_NONE R_PPC_NONE
#define R_PPC64_ADDR32 R_PPC_ADDR32
#define R_PPC64_ADDR24 R_PPC_ADDR24
#define R_PPC64_ADDR16 R_PPC_ADDR16
#define R_PPC64_ADDR16_LO R_PPC_ADDR16_LO
#define R_PPC64_ADDR16_HI R_PPC_ADDR16_HI
#define R_PPC64_ADDR16_HA R_PPC_ADDR16_HA
#define R_PPC64_ADDR14 R_PPC_ADDR14
#define R_PPC64_ADDR14_BRTAKEN R_PPC_ADDR14_BRTAKEN
#define R_PPC64_ADDR14_BRNTAKEN R_PPC_ADDR14_BRNTAKEN
#define R_PPC64_REL24 R_PPC_REL24
#define R_PPC64_REL14 R_PPC_REL14
#define R_PPC64_REL14_BRTAKEN R_PPC_REL14_BRTAKEN
#define R_PPC64_REL14_BRNTAKEN R_PPC_REL14_BRNTAKEN
#define R_PPC64_GOT16 R_PPC_GOT16
#define R_PPC64_GOT16_LO R_PPC_GOT16_LO
#define R_PPC64_GOT16_HI R_PPC_GOT16_HI
#define R_PPC64_GOT16_HA R_PPC_GOT16_HA

#define R_PPC64_COPY R_PPC_COPY
#define R_PPC64_GLOB_DAT R_PPC_GLOB_DAT
#define R_PPC64_JMP_SLOT R_PPC_JMP_SLOT
#define R_PPC64_RELATIVE R_PPC_RELATIVE

#define R_PPC64_UADDR32 R_PPC_UADDR32
#define R_PPC64_UADDR16 R_PPC_UADDR16
#define R_PPC64_REL32 R_PPC_REL32
#define R_PPC64_PLT32 R_PPC_PLT32
#define R_PPC64_PLTREL32 R_PPC_PLTREL32
#define R_PPC64_PLT16_LO R_PPC_PLT16_LO
#define R_PPC64_PLT16_HI R_PPC_PLT16_HI
#define R_PPC64_PLT16_HA R_PPC_PLT16_HA

#define R_PPC64_SECTOFF R_PPC_SECTOFF
#define R_PPC64_SECTOFF_LO R_PPC_SECTOFF_LO
#define R_PPC64_SECTOFF_HI R_PPC_SECTOFF_HI
#define R_PPC64_SECTOFF_HA R_PPC_SECTOFF_HA
#define R_PPC64_ADDR30 37
#define R_PPC64_ADDR64 38
#define R_PPC64_ADDR16_HIGHER 39
#define R_PPC64_ADDR16_HIGHERA 40
#define R_PPC64_ADDR16_HIGHEST 41
#define R_PPC64_ADDR16_HIGHESTA 42
#define R_PPC64_UADDR64 43
#define R_PPC64_REL64 44
#define R_PPC64_PLT64 45
#define R_PPC64_PLTREL64 46
#define R_PPC64_TOC16 47
#define R_PPC64_TOC16_LO 48
#define R_PPC64_TOC16_HI 49
#define R_PPC64_TOC16_HA 50
#define R_PPC64_TOC 51
#define R_PPC64_PLTGOT16 52
#define R_PPC64_PLTGOT16_LO 53
#define R_PPC64_PLTGOT16_HI 54
#define R_PPC64_PLTGOT16_HA 55

#define R_PPC64_ADDR16_DS 56
#define R_PPC64_ADDR16_LO_DS 57
#define R_PPC64_GOT16_DS 58
#define R_PPC64_GOT16_LO_DS 59
#define R_PPC64_PLT16_LO_DS 60
#define R_PPC64_SECTOFF_DS 61
#define R_PPC64_SECTOFF_LO_DS 62
#define R_PPC64_TOC16_DS 63
#define R_PPC64_TOC16_LO_DS 64
#define R_PPC64_PLTGOT16_DS 65
#define R_PPC64_PLTGOT16_LO_DS 66


#define R_PPC64_TLS 67
#define R_PPC64_DTPMOD64 68
#define R_PPC64_TPREL16 69
#define R_PPC64_TPREL16_LO 70
#define R_PPC64_TPREL16_HI 71
#define R_PPC64_TPREL16_HA 72
#define R_PPC64_TPREL64 73
#define R_PPC64_DTPREL16 74
#define R_PPC64_DTPREL16_LO 75
#define R_PPC64_DTPREL16_HI 76
#define R_PPC64_DTPREL16_HA 77
#define R_PPC64_DTPREL64 78
#define R_PPC64_GOT_TLSGD16 79
#define R_PPC64_GOT_TLSGD16_LO 80
#define R_PPC64_GOT_TLSGD16_HI 81
#define R_PPC64_GOT_TLSGD16_HA 82
#define R_PPC64_GOT_TLSLD16 83
#define R_PPC64_GOT_TLSLD16_LO 84
#define R_PPC64_GOT_TLSLD16_HI 85
#define R_PPC64_GOT_TLSLD16_HA 86
#define R_PPC64_GOT_TPREL16_DS 87
#define R_PPC64_GOT_TPREL16_LO_DS 88
#define R_PPC64_GOT_TPREL16_HI 89
#define R_PPC64_GOT_TPREL16_HA 90
#define R_PPC64_GOT_DTPREL16_DS 91
#define R_PPC64_GOT_DTPREL16_LO_DS 92
#define R_PPC64_GOT_DTPREL16_HI 93
#define R_PPC64_GOT_DTPREL16_HA 94
#define R_PPC64_TPREL16_DS 95
#define R_PPC64_TPREL16_LO_DS 96
#define R_PPC64_TPREL16_HIGHER 97
#define R_PPC64_TPREL16_HIGHERA 98
#define R_PPC64_TPREL16_HIGHEST 99
#define R_PPC64_TPREL16_HIGHESTA 100
#define R_PPC64_DTPREL16_DS 101
#define R_PPC64_DTPREL16_LO_DS 102
#define R_PPC64_DTPREL16_HIGHER 103
#define R_PPC64_DTPREL16_HIGHERA 104
#define R_PPC64_DTPREL16_HIGHEST 105
#define R_PPC64_DTPREL16_HIGHESTA 106
#define R_PPC64_TLSGD 107
#define R_PPC64_TLSLD 108
#define R_PPC64_TOCSAVE 109


#define R_PPC64_ADDR16_HIGH 110
#define R_PPC64_ADDR16_HIGHA 111
#define R_PPC64_TPREL16_HIGH 112
#define R_PPC64_TPREL16_HIGHA 113
#define R_PPC64_DTPREL16_HIGH 114
#define R_PPC64_DTPREL16_HIGHA 115


#define R_PPC64_JMP_IREL 247
#define R_PPC64_IRELATIVE 248
#define R_PPC64_REL16 249
#define R_PPC64_REL16_LO 250
#define R_PPC64_REL16_HI 251
#define R_PPC64_REL16_HA 252





#define EF_PPC64_ABI 3


#define DT_PPC64_GLINK (DT_LOPROC + 0)
#define DT_PPC64_OPD (DT_LOPROC + 1)
#define DT_PPC64_OPDSZ (DT_LOPROC + 2)
#define DT_PPC64_OPT (DT_LOPROC + 3)
#define DT_PPC64_NUM 4


#define PPC64_OPT_TLS 1
#define PPC64_OPT_MULTI_TOC 2


#define STO_PPC64_LOCAL_BIT 5
#define STO_PPC64_LOCAL_MASK (7 << STO_PPC64_LOCAL_BIT)
#define PPC64_LOCAL_ENTRY_OFFSET(other) (((1 << (((other) & STO_PPC64_LOCAL_MASK) >> STO_PPC64_LOCAL_BIT)) >> 2) << 2)






#define EF_ARM_RELEXEC 0x01
#define EF_ARM_HASENTRY 0x02
#define EF_ARM_INTERWORK 0x04
#define EF_ARM_APCS_26 0x08
#define EF_ARM_APCS_FLOAT 0x10
#define EF_ARM_PIC 0x20
#define EF_ARM_ALIGN8 0x40
#define EF_ARM_NEW_ABI 0x80
#define EF_ARM_OLD_ABI 0x100
#define EF_ARM_SOFT_FLOAT 0x200
#define EF_ARM_VFP_FLOAT 0x400
#define EF_ARM_MAVERICK_FLOAT 0x800

#define EF_ARM_ABI_FLOAT_SOFT 0x200
#define EF_ARM_ABI_FLOAT_HARD 0x400




#define EF_ARM_SYMSARESORTED 0x04
#define EF_ARM_DYNSYMSUSESEGIDX 0x08
#define EF_ARM_MAPSYMSFIRST 0x10
#define EF_ARM_EABIMASK 0XFF000000


#define EF_ARM_BE8 0x00800000
#define EF_ARM_LE8 0x00400000

#define EF_ARM_EABI_VERSION(flags) ((flags) & EF_ARM_EABIMASK)
#define EF_ARM_EABI_UNKNOWN 0x00000000
#define EF_ARM_EABI_VER1 0x01000000
#define EF_ARM_EABI_VER2 0x02000000
#define EF_ARM_EABI_VER3 0x03000000
#define EF_ARM_EABI_VER4 0x04000000
#define EF_ARM_EABI_VER5 0x05000000


#define STT_ARM_TFUNC STT_LOPROC
#define STT_ARM_16BIT STT_HIPROC


#define SHF_ARM_ENTRYSECT 0x10000000
#define SHF_ARM_COMDEF 0x80000000



#define PF_ARM_SB 0x10000000

#define PF_ARM_PI 0x20000000
#define PF_ARM_ABS 0x40000000


#define PT_ARM_EXIDX (PT_LOPROC + 1)


#define SHT_ARM_EXIDX (SHT_LOPROC + 1)
#define SHT_ARM_PREEMPTMAP (SHT_LOPROC + 2)
#define SHT_ARM_ATTRIBUTES (SHT_LOPROC + 3)




#define R_AARCH64_NONE 0


#define R_AARCH64_P32_ABS32 1
#define R_AARCH64_P32_COPY 180
#define R_AARCH64_P32_GLOB_DAT 181
#define R_AARCH64_P32_JUMP_SLOT 182
#define R_AARCH64_P32_RELATIVE 183
#define R_AARCH64_P32_TLS_DTPMOD 184
#define R_AARCH64_P32_TLS_DTPREL 185
#define R_AARCH64_P32_TLS_TPREL 186
#define R_AARCH64_P32_TLSDESC 187
#define R_AARCH64_P32_IRELATIVE 188


#define R_AARCH64_ABS64 257
#define R_AARCH64_ABS32 258
#define R_AARCH64_ABS16 259
#define R_AARCH64_PREL64 260
#define R_AARCH64_PREL32 261
#define R_AARCH64_PREL16 262
#define R_AARCH64_MOVW_UABS_G0 263
#define R_AARCH64_MOVW_UABS_G0_NC 264
#define R_AARCH64_MOVW_UABS_G1 265
#define R_AARCH64_MOVW_UABS_G1_NC 266
#define R_AARCH64_MOVW_UABS_G2 267
#define R_AARCH64_MOVW_UABS_G2_NC 268
#define R_AARCH64_MOVW_UABS_G3 269
#define R_AARCH64_MOVW_SABS_G0 270
#define R_AARCH64_MOVW_SABS_G1 271
#define R_AARCH64_MOVW_SABS_G2 272
#define R_AARCH64_LD_PREL_LO19 273
#define R_AARCH64_ADR_PREL_LO21 274
#define R_AARCH64_ADR_PREL_PG_HI21 275
#define R_AARCH64_ADR_PREL_PG_HI21_NC 276
#define R_AARCH64_ADD_ABS_LO12_NC 277
#define R_AARCH64_LDST8_ABS_LO12_NC 278
#define R_AARCH64_TSTBR14 279
#define R_AARCH64_CONDBR19 280
#define R_AARCH64_JUMP26 282
#define R_AARCH64_CALL26 283
#define R_AARCH64_LDST16_ABS_LO12_NC 284
#define R_AARCH64_LDST32_ABS_LO12_NC 285
#define R_AARCH64_LDST64_ABS_LO12_NC 286
#define R_AARCH64_MOVW_PREL_G0 287
#define R_AARCH64_MOVW_PREL_G0_NC 288
#define R_AARCH64_MOVW_PREL_G1 289
#define R_AARCH64_MOVW_PREL_G1_NC 290
#define R_AARCH64_MOVW_PREL_G2 291
#define R_AARCH64_MOVW_PREL_G2_NC 292
#define R_AARCH64_MOVW_PREL_G3 293
#define R_AARCH64_LDST128_ABS_LO12_NC 299
#define R_AARCH64_MOVW_GOTOFF_G0 300
#define R_AARCH64_MOVW_GOTOFF_G0_NC 301
#define R_AARCH64_MOVW_GOTOFF_G1 302
#define R_AARCH64_MOVW_GOTOFF_G1_NC 303
#define R_AARCH64_MOVW_GOTOFF_G2 304
#define R_AARCH64_MOVW_GOTOFF_G2_NC 305
#define R_AARCH64_MOVW_GOTOFF_G3 306
#define R_AARCH64_GOTREL64 307
#define R_AARCH64_GOTREL32 308
#define R_AARCH64_GOT_LD_PREL19 309
#define R_AARCH64_LD64_GOTOFF_LO15 310
#define R_AARCH64_ADR_GOT_PAGE 311
#define R_AARCH64_LD64_GOT_LO12_NC 312
#define R_AARCH64_LD64_GOTPAGE_LO15 313
#define R_AARCH64_TLSGD_ADR_PREL21 512
#define R_AARCH64_TLSGD_ADR_PAGE21 513
#define R_AARCH64_TLSGD_ADD_LO12_NC 514
#define R_AARCH64_TLSGD_MOVW_G1 515
#define R_AARCH64_TLSGD_MOVW_G0_NC 516
#define R_AARCH64_TLSLD_ADR_PREL21 517
#define R_AARCH64_TLSLD_ADR_PAGE21 518
#define R_AARCH64_TLSLD_ADD_LO12_NC 519
#define R_AARCH64_TLSLD_MOVW_G1 520
#define R_AARCH64_TLSLD_MOVW_G0_NC 521
#define R_AARCH64_TLSLD_LD_PREL19 522
#define R_AARCH64_TLSLD_MOVW_DTPREL_G2 523
#define R_AARCH64_TLSLD_MOVW_DTPREL_G1 524
#define R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC 525
#define R_AARCH64_TLSLD_MOVW_DTPREL_G0 526
#define R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC 527
#define R_AARCH64_TLSLD_ADD_DTPREL_HI12 528
#define R_AARCH64_TLSLD_ADD_DTPREL_LO12 529
#define R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC 530
#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12 531
#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC 532
#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12 533
#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC 534
#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12 535
#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC 536
#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12 537
#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC 538
#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 539
#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC 540
#define R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 541
#define R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC 542
#define R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 543
#define R_AARCH64_TLSLE_MOVW_TPREL_G2 544
#define R_AARCH64_TLSLE_MOVW_TPREL_G1 545
#define R_AARCH64_TLSLE_MOVW_TPREL_G1_NC 546
#define R_AARCH64_TLSLE_MOVW_TPREL_G0 547
#define R_AARCH64_TLSLE_MOVW_TPREL_G0_NC 548
#define R_AARCH64_TLSLE_ADD_TPREL_HI12 549
#define R_AARCH64_TLSLE_ADD_TPREL_LO12 550
#define R_AARCH64_TLSLE_ADD_TPREL_LO12_NC 551
#define R_AARCH64_TLSLE_LDST8_TPREL_LO12 552
#define R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC 553
#define R_AARCH64_TLSLE_LDST16_TPREL_LO12 554
#define R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC 555
#define R_AARCH64_TLSLE_LDST32_TPREL_LO12 556
#define R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC 557
#define R_AARCH64_TLSLE_LDST64_TPREL_LO12 558
#define R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC 559
#define R_AARCH64_TLSDESC_LD_PREL19 560
#define R_AARCH64_TLSDESC_ADR_PREL21 561
#define R_AARCH64_TLSDESC_ADR_PAGE21 562
#define R_AARCH64_TLSDESC_LD64_LO12 563
#define R_AARCH64_TLSDESC_ADD_LO12 564
#define R_AARCH64_TLSDESC_OFF_G1 565
#define R_AARCH64_TLSDESC_OFF_G0_NC 566
#define R_AARCH64_TLSDESC_LDR 567
#define R_AARCH64_TLSDESC_ADD 568
#define R_AARCH64_TLSDESC_CALL 569
#define R_AARCH64_TLSLE_LDST128_TPREL_LO12 570
#define R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC 571
#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12 572
#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC 573
#define R_AARCH64_COPY 1024
#define R_AARCH64_GLOB_DAT 1025
#define R_AARCH64_JUMP_SLOT 1026
#define R_AARCH64_RELATIVE 1027
#define R_AARCH64_TLS_DTPMOD 1028
#define R_AARCH64_TLS_DTPREL 1029
#define R_AARCH64_TLS_TPREL 1030
#define R_AARCH64_TLSDESC 1031
#define R_AARCH64_IRELATIVE 1032



#define R_ARM_NONE 0
#define R_ARM_PC24 1

#define R_ARM_ABS32 2
#define R_ARM_REL32 3
#define R_ARM_PC13 4
#define R_ARM_ABS16 5
#define R_ARM_ABS12 6
#define R_ARM_THM_ABS5 7
#define R_ARM_ABS8 8
#define R_ARM_SBREL32 9
#define R_ARM_THM_PC22 10
#define R_ARM_THM_PC8 11

#define R_ARM_AMP_VCALL9 12
#define R_ARM_SWI24 13
#define R_ARM_TLS_DESC 13
#define R_ARM_THM_SWI8 14
#define R_ARM_XPC25 15
#define R_ARM_THM_XPC22 16
#define R_ARM_TLS_DTPMOD32 17
#define R_ARM_TLS_DTPOFF32 18
#define R_ARM_TLS_TPOFF32 19
#define R_ARM_COPY 20
#define R_ARM_GLOB_DAT 21
#define R_ARM_JUMP_SLOT 22
#define R_ARM_RELATIVE 23
#define R_ARM_GOTOFF 24
#define R_ARM_GOTPC 25
#define R_ARM_GOT32 26
#define R_ARM_PLT32 27
#define R_ARM_CALL 28
#define R_ARM_JUMP24 29

#define R_ARM_THM_JUMP24 30
#define R_ARM_BASE_ABS 31
#define R_ARM_ALU_PCREL_7_0 32
#define R_ARM_ALU_PCREL_15_8 33
#define R_ARM_ALU_PCREL_23_15 34
#define R_ARM_LDR_SBREL_11_0 35
#define R_ARM_ALU_SBREL_19_12 36
#define R_ARM_ALU_SBREL_27_20 37
#define R_ARM_TARGET1 38
#define R_ARM_SBREL31 39
#define R_ARM_V4BX 40
#define R_ARM_TARGET2 41
#define R_ARM_PREL31 42
#define R_ARM_MOVW_ABS_NC 43
#define R_ARM_MOVT_ABS 44
#define R_ARM_MOVW_PREL_NC 45
#define R_ARM_MOVT_PREL 46
#define R_ARM_THM_MOVW_ABS_NC 47
#define R_ARM_THM_MOVT_ABS 48

#define R_ARM_THM_MOVW_PREL_NC 49

#define R_ARM_THM_MOVT_PREL 50

#define R_ARM_THM_JUMP19 51

#define R_ARM_THM_JUMP6 52

#define R_ARM_THM_ALU_PREL_11_0 53

#define R_ARM_THM_PC12 54

#define R_ARM_ABS32_NOI 55
#define R_ARM_REL32_NOI 56
#define R_ARM_ALU_PC_G0_NC 57
#define R_ARM_ALU_PC_G0 58
#define R_ARM_ALU_PC_G1_NC 59
#define R_ARM_ALU_PC_G1 60
#define R_ARM_ALU_PC_G2 61
#define R_ARM_LDR_PC_G1 62
#define R_ARM_LDR_PC_G2 63
#define R_ARM_LDRS_PC_G0 64

#define R_ARM_LDRS_PC_G1 65

#define R_ARM_LDRS_PC_G2 66

#define R_ARM_LDC_PC_G0 67
#define R_ARM_LDC_PC_G1 68
#define R_ARM_LDC_PC_G2 69
#define R_ARM_ALU_SB_G0_NC 70
#define R_ARM_ALU_SB_G0 71
#define R_ARM_ALU_SB_G1_NC 72
#define R_ARM_ALU_SB_G1 73
#define R_ARM_ALU_SB_G2 74
#define R_ARM_LDR_SB_G0 75

#define R_ARM_LDR_SB_G1 76

#define R_ARM_LDR_SB_G2 77

#define R_ARM_LDRS_SB_G0 78

#define R_ARM_LDRS_SB_G1 79

#define R_ARM_LDRS_SB_G2 80

#define R_ARM_LDC_SB_G0 81
#define R_ARM_LDC_SB_G1 82
#define R_ARM_LDC_SB_G2 83
#define R_ARM_MOVW_BREL_NC 84

#define R_ARM_MOVT_BREL 85

#define R_ARM_MOVW_BREL 86

#define R_ARM_THM_MOVW_BREL_NC 87

#define R_ARM_THM_MOVT_BREL 88

#define R_ARM_THM_MOVW_BREL 89

#define R_ARM_TLS_GOTDESC 90
#define R_ARM_TLS_CALL 91
#define R_ARM_TLS_DESCSEQ 92
#define R_ARM_THM_TLS_CALL 93
#define R_ARM_PLT32_ABS 94
#define R_ARM_GOT_ABS 95
#define R_ARM_GOT_PREL 96
#define R_ARM_GOT_BREL12 97

#define R_ARM_GOTOFF12 98

#define R_ARM_GOTRELAX 99
#define R_ARM_GNU_VTENTRY 100
#define R_ARM_GNU_VTINHERIT 101
#define R_ARM_THM_PC11 102
#define R_ARM_THM_PC9 103

#define R_ARM_TLS_GD32 104

#define R_ARM_TLS_LDM32 105

#define R_ARM_TLS_LDO32 106

#define R_ARM_TLS_IE32 107

#define R_ARM_TLS_LE32 108

#define R_ARM_TLS_LDO12 109

#define R_ARM_TLS_LE12 110

#define R_ARM_TLS_IE12GP 111

#define R_ARM_ME_TOO 128
#define R_ARM_THM_TLS_DESCSEQ 129
#define R_ARM_THM_TLS_DESCSEQ16 129
#define R_ARM_THM_TLS_DESCSEQ32 130
#define R_ARM_THM_GOT_BREL12 131

#define R_ARM_IRELATIVE 160
#define R_ARM_RXPC25 249
#define R_ARM_RSBREL32 250
#define R_ARM_THM_RPC22 251
#define R_ARM_RREL32 252
#define R_ARM_RABS22 253
#define R_ARM_RPC24 254
#define R_ARM_RBASE 255

#define R_ARM_NUM 256




#define EF_IA_64_MASKOS 0x0000000f
#define EF_IA_64_ABI64 0x00000010
#define EF_IA_64_ARCH 0xff000000


#define PT_IA_64_ARCHEXT (PT_LOPROC + 0)
#define PT_IA_64_UNWIND (PT_LOPROC + 1)
#define PT_IA_64_HP_OPT_ANOT (PT_LOOS + 0x12)
#define PT_IA_64_HP_HSL_ANOT (PT_LOOS + 0x13)
#define PT_IA_64_HP_STACK (PT_LOOS + 0x14)


#define PF_IA_64_NORECOV 0x80000000


#define SHT_IA_64_EXT (SHT_LOPROC + 0)
#define SHT_IA_64_UNWIND (SHT_LOPROC + 1)


#define SHF_IA_64_SHORT 0x10000000
#define SHF_IA_64_NORECOV 0x20000000


#define DT_IA_64_PLT_RESERVE (DT_LOPROC + 0)
#define DT_IA_64_NUM 1


#define R_IA64_NONE 0x00
#define R_IA64_IMM14 0x21
#define R_IA64_IMM22 0x22
#define R_IA64_IMM64 0x23
#define R_IA64_DIR32MSB 0x24
#define R_IA64_DIR32LSB 0x25
#define R_IA64_DIR64MSB 0x26
#define R_IA64_DIR64LSB 0x27
#define R_IA64_GPREL22 0x2a
#define R_IA64_GPREL64I 0x2b
#define R_IA64_GPREL32MSB 0x2c
#define R_IA64_GPREL32LSB 0x2d
#define R_IA64_GPREL64MSB 0x2e
#define R_IA64_GPREL64LSB 0x2f
#define R_IA64_LTOFF22 0x32
#define R_IA64_LTOFF64I 0x33
#define R_IA64_PLTOFF22 0x3a
#define R_IA64_PLTOFF64I 0x3b
#define R_IA64_PLTOFF64MSB 0x3e
#define R_IA64_PLTOFF64LSB 0x3f
#define R_IA64_FPTR64I 0x43
#define R_IA64_FPTR32MSB 0x44
#define R_IA64_FPTR32LSB 0x45
#define R_IA64_FPTR64MSB 0x46
#define R_IA64_FPTR64LSB 0x47
#define R_IA64_PCREL60B 0x48
#define R_IA64_PCREL21B 0x49
#define R_IA64_PCREL21M 0x4a
#define R_IA64_PCREL21F 0x4b
#define R_IA64_PCREL32MSB 0x4c
#define R_IA64_PCREL32LSB 0x4d
#define R_IA64_PCREL64MSB 0x4e
#define R_IA64_PCREL64LSB 0x4f
#define R_IA64_LTOFF_FPTR22 0x52
#define R_IA64_LTOFF_FPTR64I 0x53
#define R_IA64_LTOFF_FPTR32MSB 0x54
#define R_IA64_LTOFF_FPTR32LSB 0x55
#define R_IA64_LTOFF_FPTR64MSB 0x56
#define R_IA64_LTOFF_FPTR64LSB 0x57
#define R_IA64_SEGREL32MSB 0x5c
#define R_IA64_SEGREL32LSB 0x5d
#define R_IA64_SEGREL64MSB 0x5e
#define R_IA64_SEGREL64LSB 0x5f
#define R_IA64_SECREL32MSB 0x64
#define R_IA64_SECREL32LSB 0x65
#define R_IA64_SECREL64MSB 0x66
#define R_IA64_SECREL64LSB 0x67
#define R_IA64_REL32MSB 0x6c
#define R_IA64_REL32LSB 0x6d
#define R_IA64_REL64MSB 0x6e
#define R_IA64_REL64LSB 0x6f
#define R_IA64_LTV32MSB 0x74
#define R_IA64_LTV32LSB 0x75
#define R_IA64_LTV64MSB 0x76
#define R_IA64_LTV64LSB 0x77
#define R_IA64_PCREL21BI 0x79
#define R_IA64_PCREL22 0x7a
#define R_IA64_PCREL64I 0x7b
#define R_IA64_IPLTMSB 0x80
#define R_IA64_IPLTLSB 0x81
#define R_IA64_COPY 0x84
#define R_IA64_SUB 0x85
#define R_IA64_LTOFF22X 0x86
#define R_IA64_LDXMOV 0x87
#define R_IA64_TPREL14 0x91
#define R_IA64_TPREL22 0x92
#define R_IA64_TPREL64I 0x93
#define R_IA64_TPREL64MSB 0x96
#define R_IA64_TPREL64LSB 0x97
#define R_IA64_LTOFF_TPREL22 0x9a
#define R_IA64_DTPMOD64MSB 0xa6
#define R_IA64_DTPMOD64LSB 0xa7
#define R_IA64_LTOFF_DTPMOD22 0xaa
#define R_IA64_DTPREL14 0xb1
#define R_IA64_DTPREL22 0xb2
#define R_IA64_DTPREL64I 0xb3
#define R_IA64_DTPREL32MSB 0xb4
#define R_IA64_DTPREL32LSB 0xb5
#define R_IA64_DTPREL64MSB 0xb6
#define R_IA64_DTPREL64LSB 0xb7
#define R_IA64_LTOFF_DTPREL22 0xba




#define EF_SH_MACH_MASK 0x1f
#define EF_SH_UNKNOWN 0x0
#define EF_SH1 0x1
#define EF_SH2 0x2
#define EF_SH3 0x3
#define EF_SH_DSP 0x4
#define EF_SH3_DSP 0x5
#define EF_SH4AL_DSP 0x6
#define EF_SH3E 0x8
#define EF_SH4 0x9
#define EF_SH2E 0xb
#define EF_SH4A 0xc
#define EF_SH2A 0xd
#define EF_SH4_NOFPU 0x10
#define EF_SH4A_NOFPU 0x11
#define EF_SH4_NOMMU_NOFPU 0x12
#define EF_SH2A_NOFPU 0x13
#define EF_SH3_NOMMU 0x14
#define EF_SH2A_SH4_NOFPU 0x15
#define EF_SH2A_SH3_NOFPU 0x16
#define EF_SH2A_SH4 0x17
#define EF_SH2A_SH3E 0x18


#define R_SH_NONE 0
#define R_SH_DIR32 1
#define R_SH_REL32 2
#define R_SH_DIR8WPN 3
#define R_SH_IND12W 4
#define R_SH_DIR8WPL 5
#define R_SH_DIR8WPZ 6
#define R_SH_DIR8BP 7
#define R_SH_DIR8W 8
#define R_SH_DIR8L 9
#define R_SH_SWITCH16 25
#define R_SH_SWITCH32 26
#define R_SH_USES 27
#define R_SH_COUNT 28
#define R_SH_ALIGN 29
#define R_SH_CODE 30
#define R_SH_DATA 31
#define R_SH_LABEL 32
#define R_SH_SWITCH8 33
#define R_SH_GNU_VTINHERIT 34
#define R_SH_GNU_VTENTRY 35
#define R_SH_TLS_GD_32 144
#define R_SH_TLS_LD_32 145
#define R_SH_TLS_LDO_32 146
#define R_SH_TLS_IE_32 147
#define R_SH_TLS_LE_32 148
#define R_SH_TLS_DTPMOD32 149
#define R_SH_TLS_DTPOFF32 150
#define R_SH_TLS_TPOFF32 151
#define R_SH_GOT32 160
#define R_SH_PLT32 161
#define R_SH_COPY 162
#define R_SH_GLOB_DAT 163
#define R_SH_JMP_SLOT 164
#define R_SH_RELATIVE 165
#define R_SH_GOTOFF 166
#define R_SH_GOTPC 167

#define R_SH_NUM 256





#define EF_S390_HIGH_GPRS 0x00000001



#define R_390_NONE 0
#define R_390_8 1
#define R_390_12 2
#define R_390_16 3
#define R_390_32 4
#define R_390_PC32 5
#define R_390_GOT12 6
#define R_390_GOT32 7
#define R_390_PLT32 8
#define R_390_COPY 9
#define R_390_GLOB_DAT 10
#define R_390_JMP_SLOT 11
#define R_390_RELATIVE 12
#define R_390_GOTOFF32 13
#define R_390_GOTPC 14
#define R_390_GOT16 15
#define R_390_PC16 16
#define R_390_PC16DBL 17
#define R_390_PLT16DBL 18
#define R_390_PC32DBL 19
#define R_390_PLT32DBL 20
#define R_390_GOTPCDBL 21
#define R_390_64 22
#define R_390_PC64 23
#define R_390_GOT64 24
#define R_390_PLT64 25
#define R_390_GOTENT 26
#define R_390_GOTOFF16 27
#define R_390_GOTOFF64 28
#define R_390_GOTPLT12 29
#define R_390_GOTPLT16 30
#define R_390_GOTPLT32 31
#define R_390_GOTPLT64 32
#define R_390_GOTPLTENT 33
#define R_390_PLTOFF16 34
#define R_390_PLTOFF32 35
#define R_390_PLTOFF64 36
#define R_390_TLS_LOAD 37
#define R_390_TLS_GDCALL 38

#define R_390_TLS_LDCALL 39

#define R_390_TLS_GD32 40

#define R_390_TLS_GD64 41

#define R_390_TLS_GOTIE12 42

#define R_390_TLS_GOTIE32 43

#define R_390_TLS_GOTIE64 44

#define R_390_TLS_LDM32 45

#define R_390_TLS_LDM64 46

#define R_390_TLS_IE32 47

#define R_390_TLS_IE64 48

#define R_390_TLS_IEENT 49

#define R_390_TLS_LE32 50

#define R_390_TLS_LE64 51

#define R_390_TLS_LDO32 52

#define R_390_TLS_LDO64 53

#define R_390_TLS_DTPMOD 54
#define R_390_TLS_DTPOFF 55
#define R_390_TLS_TPOFF 56

#define R_390_20 57
#define R_390_GOT20 58
#define R_390_GOTPLT20 59
#define R_390_TLS_GOTIE20 60

#define R_390_IRELATIVE 61

#define R_390_NUM 62



#define R_CRIS_NONE 0
#define R_CRIS_8 1
#define R_CRIS_16 2
#define R_CRIS_32 3
#define R_CRIS_8_PCREL 4
#define R_CRIS_16_PCREL 5
#define R_CRIS_32_PCREL 6
#define R_CRIS_GNU_VTINHERIT 7
#define R_CRIS_GNU_VTENTRY 8
#define R_CRIS_COPY 9
#define R_CRIS_GLOB_DAT 10
#define R_CRIS_JUMP_SLOT 11
#define R_CRIS_RELATIVE 12
#define R_CRIS_16_GOT 13
#define R_CRIS_32_GOT 14
#define R_CRIS_16_GOTPLT 15
#define R_CRIS_32_GOTPLT 16
#define R_CRIS_32_GOTREL 17
#define R_CRIS_32_PLT_GOTREL 18
#define R_CRIS_32_PLT_PCREL 19

#define R_CRIS_NUM 20



#define R_X86_64_NONE 0
#define R_X86_64_64 1
#define R_X86_64_PC32 2
#define R_X86_64_GOT32 3
#define R_X86_64_PLT32 4
#define R_X86_64_COPY 5
#define R_X86_64_GLOB_DAT 6
#define R_X86_64_JUMP_SLOT 7
#define R_X86_64_RELATIVE 8
#define R_X86_64_GOTPCREL 9

#define R_X86_64_32 10
#define R_X86_64_32S 11
#define R_X86_64_16 12
#define R_X86_64_PC16 13
#define R_X86_64_8 14
#define R_X86_64_PC8 15
#define R_X86_64_DTPMOD64 16
#define R_X86_64_DTPOFF64 17
#define R_X86_64_TPOFF64 18
#define R_X86_64_TLSGD 19

#define R_X86_64_TLSLD 20

#define R_X86_64_DTPOFF32 21
#define R_X86_64_GOTTPOFF 22

#define R_X86_64_TPOFF32 23
#define R_X86_64_PC64 24
#define R_X86_64_GOTOFF64 25
#define R_X86_64_GOTPC32 26

#define R_X86_64_GOT64 27
#define R_X86_64_GOTPCREL64 28

#define R_X86_64_GOTPC64 29
#define R_X86_64_GOTPLT64 30
#define R_X86_64_PLTOFF64 31

#define R_X86_64_SIZE32 32
#define R_X86_64_SIZE64 33
#define R_X86_64_GOTPC32_TLSDESC 34
#define R_X86_64_TLSDESC_CALL 35

#define R_X86_64_TLSDESC 36
#define R_X86_64_IRELATIVE 37
#define R_X86_64_RELATIVE64 38


#define R_X86_64_GOTPCRELX 41


#define R_X86_64_REX_GOTPCRELX 42


#define R_X86_64_NUM 43



#define R_MN10300_NONE 0
#define R_MN10300_32 1
#define R_MN10300_16 2
#define R_MN10300_8 3
#define R_MN10300_PCREL32 4
#define R_MN10300_PCREL16 5
#define R_MN10300_PCREL8 6
#define R_MN10300_GNU_VTINHERIT 7
#define R_MN10300_GNU_VTENTRY 8
#define R_MN10300_24 9
#define R_MN10300_GOTPC32 10
#define R_MN10300_GOTPC16 11
#define R_MN10300_GOTOFF32 12
#define R_MN10300_GOTOFF24 13
#define R_MN10300_GOTOFF16 14
#define R_MN10300_PLT32 15
#define R_MN10300_PLT16 16
#define R_MN10300_GOT32 17
#define R_MN10300_GOT24 18
#define R_MN10300_GOT16 19
#define R_MN10300_COPY 20
#define R_MN10300_GLOB_DAT 21
#define R_MN10300_JMP_SLOT 22
#define R_MN10300_RELATIVE 23
#define R_MN10300_TLS_GD 24
#define R_MN10300_TLS_LD 25
#define R_MN10300_TLS_LDO 26
#define R_MN10300_TLS_GOTIE 27

#define R_MN10300_TLS_IE 28

#define R_MN10300_TLS_LE 29

#define R_MN10300_TLS_DTPMOD 30
#define R_MN10300_TLS_DTPOFF 31
#define R_MN10300_TLS_TPOFF 32
#define R_MN10300_SYM_DIFF 33

#define R_MN10300_ALIGN 34

#define R_MN10300_NUM 35



#define R_M32R_NONE 0
#define R_M32R_16 1
#define R_M32R_32 2
#define R_M32R_24 3
#define R_M32R_10_PCREL 4
#define R_M32R_18_PCREL 5
#define R_M32R_26_PCREL 6
#define R_M32R_HI16_ULO 7
#define R_M32R_HI16_SLO 8
#define R_M32R_LO16 9
#define R_M32R_SDA16 10
#define R_M32R_GNU_VTINHERIT 11
#define R_M32R_GNU_VTENTRY 12

#define R_M32R_16_RELA 33
#define R_M32R_32_RELA 34
#define R_M32R_24_RELA 35
#define R_M32R_10_PCREL_RELA 36
#define R_M32R_18_PCREL_RELA 37
#define R_M32R_26_PCREL_RELA 38
#define R_M32R_HI16_ULO_RELA 39
#define R_M32R_HI16_SLO_RELA 40
#define R_M32R_LO16_RELA 41
#define R_M32R_SDA16_RELA 42
#define R_M32R_RELA_GNU_VTINHERIT 43
#define R_M32R_RELA_GNU_VTENTRY 44
#define R_M32R_REL32 45

#define R_M32R_GOT24 48
#define R_M32R_26_PLTREL 49
#define R_M32R_COPY 50
#define R_M32R_GLOB_DAT 51
#define R_M32R_JMP_SLOT 52
#define R_M32R_RELATIVE 53
#define R_M32R_GOTOFF 54
#define R_M32R_GOTPC24 55
#define R_M32R_GOT16_HI_ULO 56

#define R_M32R_GOT16_HI_SLO 57

#define R_M32R_GOT16_LO 58
#define R_M32R_GOTPC_HI_ULO 59

#define R_M32R_GOTPC_HI_SLO 60

#define R_M32R_GOTPC_LO 61

#define R_M32R_GOTOFF_HI_ULO 62

#define R_M32R_GOTOFF_HI_SLO 63

#define R_M32R_GOTOFF_LO 64
#define R_M32R_NUM 256


#define R_MICROBLAZE_NONE 0
#define R_MICROBLAZE_32 1
#define R_MICROBLAZE_32_PCREL 2
#define R_MICROBLAZE_64_PCREL 3
#define R_MICROBLAZE_32_PCREL_LO 4
#define R_MICROBLAZE_64 5
#define R_MICROBLAZE_32_LO 6
#define R_MICROBLAZE_SRO32 7
#define R_MICROBLAZE_SRW32 8
#define R_MICROBLAZE_64_NONE 9
#define R_MICROBLAZE_32_SYM_OP_SYM 10
#define R_MICROBLAZE_GNU_VTINHERIT 11
#define R_MICROBLAZE_GNU_VTENTRY 12
#define R_MICROBLAZE_GOTPC_64 13
#define R_MICROBLAZE_GOT_64 14
#define R_MICROBLAZE_PLT_64 15
#define R_MICROBLAZE_REL 16
#define R_MICROBLAZE_JUMP_SLOT 17
#define R_MICROBLAZE_GLOB_DAT 18
#define R_MICROBLAZE_GOTOFF_64 19
#define R_MICROBLAZE_GOTOFF_32 20
#define R_MICROBLAZE_COPY 21
#define R_MICROBLAZE_TLS 22
#define R_MICROBLAZE_TLSGD 23
#define R_MICROBLAZE_TLSLD 24
#define R_MICROBLAZE_TLSDTPMOD32 25
#define R_MICROBLAZE_TLSDTPREL32 26
#define R_MICROBLAZE_TLSDTPREL64 27
#define R_MICROBLAZE_TLSGOTTPREL32 28
#define R_MICROBLAZE_TLSTPREL32 29


#define DT_NIOS2_GP 0x70000002


#define R_NIOS2_NONE 0
#define R_NIOS2_S16 1
#define R_NIOS2_U16 2
#define R_NIOS2_PCREL16 3
#define R_NIOS2_CALL26 4
#define R_NIOS2_IMM5 5
#define R_NIOS2_CACHE_OPX 6
#define R_NIOS2_IMM6 7
#define R_NIOS2_IMM8 8
#define R_NIOS2_HI16 9
#define R_NIOS2_LO16 10
#define R_NIOS2_HIADJ16 11
#define R_NIOS2_BFD_RELOC_32 12
#define R_NIOS2_BFD_RELOC_16 13
#define R_NIOS2_BFD_RELOC_8 14
#define R_NIOS2_GPREL 15
#define R_NIOS2_GNU_VTINHERIT 16
#define R_NIOS2_GNU_VTENTRY 17
#define R_NIOS2_UJMP 18
#define R_NIOS2_CJMP 19
#define R_NIOS2_CALLR 20
#define R_NIOS2_ALIGN 21

#define R_NIOS2_GOT16 22
#define R_NIOS2_CALL16 23
#define R_NIOS2_GOTOFF_LO 24
#define R_NIOS2_GOTOFF_HA 25
#define R_NIOS2_PCREL_LO 26
#define R_NIOS2_PCREL_HA 27
#define R_NIOS2_TLS_GD16 28
#define R_NIOS2_TLS_LDM16 29
#define R_NIOS2_TLS_LDO16 30
#define R_NIOS2_TLS_IE16 31
#define R_NIOS2_TLS_LE16 32
#define R_NIOS2_TLS_DTPMOD 33
#define R_NIOS2_TLS_DTPREL 34
#define R_NIOS2_TLS_TPREL 35
#define R_NIOS2_COPY 36
#define R_NIOS2_GLOB_DAT 37
#define R_NIOS2_JUMP_SLOT 38
#define R_NIOS2_RELATIVE 39
#define R_NIOS2_GOTOFF 40
#define R_NIOS2_CALL26_NOAT 41
#define R_NIOS2_GOT_LO 42
#define R_NIOS2_GOT_HA 43
#define R_NIOS2_CALL_LO 44
#define R_NIOS2_CALL_HA 45


#define R_TILEPRO_NONE 0
#define R_TILEPRO_32 1
#define R_TILEPRO_16 2
#define R_TILEPRO_8 3
#define R_TILEPRO_32_PCREL 4
#define R_TILEPRO_16_PCREL 5
#define R_TILEPRO_8_PCREL 6
#define R_TILEPRO_LO16 7
#define R_TILEPRO_HI16 8
#define R_TILEPRO_HA16 9
#define R_TILEPRO_COPY 10
#define R_TILEPRO_GLOB_DAT 11
#define R_TILEPRO_JMP_SLOT 12
#define R_TILEPRO_RELATIVE 13
#define R_TILEPRO_BROFF_X1 14
#define R_TILEPRO_JOFFLONG_X1 15
#define R_TILEPRO_JOFFLONG_X1_PLT 16
#define R_TILEPRO_IMM8_X0 17
#define R_TILEPRO_IMM8_Y0 18
#define R_TILEPRO_IMM8_X1 19
#define R_TILEPRO_IMM8_Y1 20
#define R_TILEPRO_MT_IMM15_X1 21
#define R_TILEPRO_MF_IMM15_X1 22
#define R_TILEPRO_IMM16_X0 23
#define R_TILEPRO_IMM16_X1 24
#define R_TILEPRO_IMM16_X0_LO 25
#define R_TILEPRO_IMM16_X1_LO 26
#define R_TILEPRO_IMM16_X0_HI 27
#define R_TILEPRO_IMM16_X1_HI 28
#define R_TILEPRO_IMM16_X0_HA 29
#define R_TILEPRO_IMM16_X1_HA 30
#define R_TILEPRO_IMM16_X0_PCREL 31
#define R_TILEPRO_IMM16_X1_PCREL 32
#define R_TILEPRO_IMM16_X0_LO_PCREL 33
#define R_TILEPRO_IMM16_X1_LO_PCREL 34
#define R_TILEPRO_IMM16_X0_HI_PCREL 35
#define R_TILEPRO_IMM16_X1_HI_PCREL 36
#define R_TILEPRO_IMM16_X0_HA_PCREL 37
#define R_TILEPRO_IMM16_X1_HA_PCREL 38
#define R_TILEPRO_IMM16_X0_GOT 39
#define R_TILEPRO_IMM16_X1_GOT 40
#define R_TILEPRO_IMM16_X0_GOT_LO 41
#define R_TILEPRO_IMM16_X1_GOT_LO 42
#define R_TILEPRO_IMM16_X0_GOT_HI 43
#define R_TILEPRO_IMM16_X1_GOT_HI 44
#define R_TILEPRO_IMM16_X0_GOT_HA 45
#define R_TILEPRO_IMM16_X1_GOT_HA 46
#define R_TILEPRO_MMSTART_X0 47
#define R_TILEPRO_MMEND_X0 48
#define R_TILEPRO_MMSTART_X1 49
#define R_TILEPRO_MMEND_X1 50
#define R_TILEPRO_SHAMT_X0 51
#define R_TILEPRO_SHAMT_X1 52
#define R_TILEPRO_SHAMT_Y0 53
#define R_TILEPRO_SHAMT_Y1 54
#define R_TILEPRO_DEST_IMM8_X1 55

#define R_TILEPRO_TLS_GD_CALL 60
#define R_TILEPRO_IMM8_X0_TLS_GD_ADD 61
#define R_TILEPRO_IMM8_X1_TLS_GD_ADD 62
#define R_TILEPRO_IMM8_Y0_TLS_GD_ADD 63
#define R_TILEPRO_IMM8_Y1_TLS_GD_ADD 64
#define R_TILEPRO_TLS_IE_LOAD 65
#define R_TILEPRO_IMM16_X0_TLS_GD 66
#define R_TILEPRO_IMM16_X1_TLS_GD 67
#define R_TILEPRO_IMM16_X0_TLS_GD_LO 68
#define R_TILEPRO_IMM16_X1_TLS_GD_LO 69
#define R_TILEPRO_IMM16_X0_TLS_GD_HI 70
#define R_TILEPRO_IMM16_X1_TLS_GD_HI 71
#define R_TILEPRO_IMM16_X0_TLS_GD_HA 72
#define R_TILEPRO_IMM16_X1_TLS_GD_HA 73
#define R_TILEPRO_IMM16_X0_TLS_IE 74
#define R_TILEPRO_IMM16_X1_TLS_IE 75
#define R_TILEPRO_IMM16_X0_TLS_IE_LO 76
#define R_TILEPRO_IMM16_X1_TLS_IE_LO 77
#define R_TILEPRO_IMM16_X0_TLS_IE_HI 78
#define R_TILEPRO_IMM16_X1_TLS_IE_HI 79
#define R_TILEPRO_IMM16_X0_TLS_IE_HA 80
#define R_TILEPRO_IMM16_X1_TLS_IE_HA 81
#define R_TILEPRO_TLS_DTPMOD32 82
#define R_TILEPRO_TLS_DTPOFF32 83
#define R_TILEPRO_TLS_TPOFF32 84
#define R_TILEPRO_IMM16_X0_TLS_LE 85
#define R_TILEPRO_IMM16_X1_TLS_LE 86
#define R_TILEPRO_IMM16_X0_TLS_LE_LO 87
#define R_TILEPRO_IMM16_X1_TLS_LE_LO 88
#define R_TILEPRO_IMM16_X0_TLS_LE_HI 89
#define R_TILEPRO_IMM16_X1_TLS_LE_HI 90
#define R_TILEPRO_IMM16_X0_TLS_LE_HA 91
#define R_TILEPRO_IMM16_X1_TLS_LE_HA 92

#define R_TILEPRO_GNU_VTINHERIT 128
#define R_TILEPRO_GNU_VTENTRY 129

#define R_TILEPRO_NUM 130



#define R_TILEGX_NONE 0
#define R_TILEGX_64 1
#define R_TILEGX_32 2
#define R_TILEGX_16 3
#define R_TILEGX_8 4
#define R_TILEGX_64_PCREL 5
#define R_TILEGX_32_PCREL 6
#define R_TILEGX_16_PCREL 7
#define R_TILEGX_8_PCREL 8
#define R_TILEGX_HW0 9
#define R_TILEGX_HW1 10
#define R_TILEGX_HW2 11
#define R_TILEGX_HW3 12
#define R_TILEGX_HW0_LAST 13
#define R_TILEGX_HW1_LAST 14
#define R_TILEGX_HW2_LAST 15
#define R_TILEGX_COPY 16
#define R_TILEGX_GLOB_DAT 17
#define R_TILEGX_JMP_SLOT 18
#define R_TILEGX_RELATIVE 19
#define R_TILEGX_BROFF_X1 20
#define R_TILEGX_JUMPOFF_X1 21
#define R_TILEGX_JUMPOFF_X1_PLT 22
#define R_TILEGX_IMM8_X0 23
#define R_TILEGX_IMM8_Y0 24
#define R_TILEGX_IMM8_X1 25
#define R_TILEGX_IMM8_Y1 26
#define R_TILEGX_DEST_IMM8_X1 27
#define R_TILEGX_MT_IMM14_X1 28
#define R_TILEGX_MF_IMM14_X1 29
#define R_TILEGX_MMSTART_X0 30
#define R_TILEGX_MMEND_X0 31
#define R_TILEGX_SHAMT_X0 32
#define R_TILEGX_SHAMT_X1 33
#define R_TILEGX_SHAMT_Y0 34
#define R_TILEGX_SHAMT_Y1 35
#define R_TILEGX_IMM16_X0_HW0 36
#define R_TILEGX_IMM16_X1_HW0 37
#define R_TILEGX_IMM16_X0_HW1 38
#define R_TILEGX_IMM16_X1_HW1 39
#define R_TILEGX_IMM16_X0_HW2 40
#define R_TILEGX_IMM16_X1_HW2 41
#define R_TILEGX_IMM16_X0_HW3 42
#define R_TILEGX_IMM16_X1_HW3 43
#define R_TILEGX_IMM16_X0_HW0_LAST 44
#define R_TILEGX_IMM16_X1_HW0_LAST 45
#define R_TILEGX_IMM16_X0_HW1_LAST 46
#define R_TILEGX_IMM16_X1_HW1_LAST 47
#define R_TILEGX_IMM16_X0_HW2_LAST 48
#define R_TILEGX_IMM16_X1_HW2_LAST 49
#define R_TILEGX_IMM16_X0_HW0_PCREL 50
#define R_TILEGX_IMM16_X1_HW0_PCREL 51
#define R_TILEGX_IMM16_X0_HW1_PCREL 52
#define R_TILEGX_IMM16_X1_HW1_PCREL 53
#define R_TILEGX_IMM16_X0_HW2_PCREL 54
#define R_TILEGX_IMM16_X1_HW2_PCREL 55
#define R_TILEGX_IMM16_X0_HW3_PCREL 56
#define R_TILEGX_IMM16_X1_HW3_PCREL 57
#define R_TILEGX_IMM16_X0_HW0_LAST_PCREL 58
#define R_TILEGX_IMM16_X1_HW0_LAST_PCREL 59
#define R_TILEGX_IMM16_X0_HW1_LAST_PCREL 60
#define R_TILEGX_IMM16_X1_HW1_LAST_PCREL 61
#define R_TILEGX_IMM16_X0_HW2_LAST_PCREL 62
#define R_TILEGX_IMM16_X1_HW2_LAST_PCREL 63
#define R_TILEGX_IMM16_X0_HW0_GOT 64
#define R_TILEGX_IMM16_X1_HW0_GOT 65
#define R_TILEGX_IMM16_X0_HW0_PLT_PCREL 66
#define R_TILEGX_IMM16_X1_HW0_PLT_PCREL 67
#define R_TILEGX_IMM16_X0_HW1_PLT_PCREL 68
#define R_TILEGX_IMM16_X1_HW1_PLT_PCREL 69
#define R_TILEGX_IMM16_X0_HW2_PLT_PCREL 70
#define R_TILEGX_IMM16_X1_HW2_PLT_PCREL 71
#define R_TILEGX_IMM16_X0_HW0_LAST_GOT 72
#define R_TILEGX_IMM16_X1_HW0_LAST_GOT 73
#define R_TILEGX_IMM16_X0_HW1_LAST_GOT 74
#define R_TILEGX_IMM16_X1_HW1_LAST_GOT 75
#define R_TILEGX_IMM16_X0_HW3_PLT_PCREL 76
#define R_TILEGX_IMM16_X1_HW3_PLT_PCREL 77
#define R_TILEGX_IMM16_X0_HW0_TLS_GD 78
#define R_TILEGX_IMM16_X1_HW0_TLS_GD 79
#define R_TILEGX_IMM16_X0_HW0_TLS_LE 80
#define R_TILEGX_IMM16_X1_HW0_TLS_LE 81
#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE 82
#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE 83
#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE 84
#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE 85
#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD 86
#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD 87
#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD 88
#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD 89

#define R_TILEGX_IMM16_X0_HW0_TLS_IE 92
#define R_TILEGX_IMM16_X1_HW0_TLS_IE 93
#define R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL 94
#define R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL 95
#define R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL 96
#define R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL 97
#define R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL 98
#define R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL 99
#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE 100
#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE 101
#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE 102
#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE 103

#define R_TILEGX_TLS_DTPMOD64 106
#define R_TILEGX_TLS_DTPOFF64 107
#define R_TILEGX_TLS_TPOFF64 108
#define R_TILEGX_TLS_DTPMOD32 109
#define R_TILEGX_TLS_DTPOFF32 110
#define R_TILEGX_TLS_TPOFF32 111
#define R_TILEGX_TLS_GD_CALL 112
#define R_TILEGX_IMM8_X0_TLS_GD_ADD 113
#define R_TILEGX_IMM8_X1_TLS_GD_ADD 114
#define R_TILEGX_IMM8_Y0_TLS_GD_ADD 115
#define R_TILEGX_IMM8_Y1_TLS_GD_ADD 116
#define R_TILEGX_TLS_IE_LOAD 117
#define R_TILEGX_IMM8_X0_TLS_ADD 118
#define R_TILEGX_IMM8_X1_TLS_ADD 119
#define R_TILEGX_IMM8_Y0_TLS_ADD 120
#define R_TILEGX_IMM8_Y1_TLS_ADD 121

#define R_TILEGX_GNU_VTINHERIT 128
#define R_TILEGX_GNU_VTENTRY 129

#define R_TILEGX_NUM 130



#define R_BPF_NONE 0
#define R_BPF_MAP_FD 1



#define R_METAG_HIADDR16 0
#define R_METAG_LOADDR16 1
#define R_METAG_ADDR32 2
#define R_METAG_NONE 3
#define R_METAG_RELBRANCH 4
#define R_METAG_GETSETOFF 5


#define R_METAG_REG32OP1 6
#define R_METAG_REG32OP2 7
#define R_METAG_REG32OP3 8
#define R_METAG_REG16OP1 9
#define R_METAG_REG16OP2 10
#define R_METAG_REG16OP3 11
#define R_METAG_REG32OP4 12

#define R_METAG_HIOG 13
#define R_METAG_LOOG 14

#define R_METAG_REL8 15
#define R_METAG_REL16 16


#define R_METAG_GNU_VTINHERIT 30
#define R_METAG_GNU_VTENTRY 31


#define R_METAG_HI16_GOTOFF 32
#define R_METAG_LO16_GOTOFF 33
#define R_METAG_GETSET_GOTOFF 34
#define R_METAG_GETSET_GOT 35
#define R_METAG_HI16_GOTPC 36
#define R_METAG_LO16_GOTPC 37
#define R_METAG_HI16_PLT 38
#define R_METAG_LO16_PLT 39
#define R_METAG_RELBRANCH_PLT 40
#define R_METAG_GOTOFF 41
#define R_METAG_PLT 42
#define R_METAG_COPY 43
#define R_METAG_JMP_SLOT 44
#define R_METAG_RELATIVE 45
#define R_METAG_GLOB_DAT 46


#define R_METAG_TLS_GD 47
#define R_METAG_TLS_LDM 48
#define R_METAG_TLS_LDO_HI16 49
#define R_METAG_TLS_LDO_LO16 50
#define R_METAG_TLS_LDO 51
#define R_METAG_TLS_IE 52
#define R_METAG_TLS_IENONPIC 53
#define R_METAG_TLS_IENONPIC_HI16 54
#define R_METAG_TLS_IENONPIC_LO16 55
#define R_METAG_TLS_TPOFF 56
#define R_METAG_TLS_DTPMOD 57
#define R_METAG_TLS_DTPOFF 58
#define R_METAG_TLS_LE 59
#define R_METAG_TLS_LE_HI16 60
#define R_METAG_TLS_LE_LO16 61


# 37 "/usr/include/libelf.h" 2 3 4
# 68 "/usr/include/libelf.h" 3 4
typedef enum
{
  ELF_T_BYTE,
  ELF_T_ADDR,
  ELF_T_DYN,
  ELF_T_EHDR,
  ELF_T_HALF,
  ELF_T_OFF,
  ELF_T_PHDR,
  ELF_T_RELA,
  ELF_T_REL,
  ELF_T_SHDR,
  ELF_T_SWORD,
  ELF_T_SYM,
  ELF_T_WORD,
  ELF_T_XWORD,
  ELF_T_SXWORD,
  ELF_T_VDEF,
  ELF_T_VDAUX,
  ELF_T_VNEED,
  ELF_T_VNAUX,
  ELF_T_NHDR,
  ELF_T_SYMINFO,
  ELF_T_MOVE,
  ELF_T_LIB,
  ELF_T_GNUHASH,
  ELF_T_AUXV,
  ELF_T_CHDR,

  ELF_T_NUM
} Elf_Type;


typedef struct
{
  void *d_buf;
  Elf_Type d_type;
  unsigned int d_version;
  size_t d_size;
  int64_t d_off;
  size_t d_align;
} Elf_Data;



typedef enum
{
  ELF_C_NULL,
  ELF_C_READ,
  ELF_C_RDWR,
  ELF_C_WRITE,
  ELF_C_CLR,
  ELF_C_SET,
  ELF_C_FDDONE,

  ELF_C_FDREAD,


  ELF_C_READ_MMAP,
  ELF_C_RDWR_MMAP,
  ELF_C_WRITE_MMAP,
  ELF_C_READ_MMAP_PRIVATE,

  ELF_C_EMPTY,

  ELF_C_NUM
} Elf_Cmd;



enum
{
  ELF_F_DIRTY = 0x1,
#define ELF_F_DIRTY ELF_F_DIRTY
  ELF_F_LAYOUT = 0x4,
#define ELF_F_LAYOUT ELF_F_LAYOUT
  ELF_F_PERMISSIVE = 0x8
#define ELF_F_PERMISSIVE ELF_F_PERMISSIVE
};


enum
{
  ELF_CHF_FORCE = 0x1
#define ELF_CHF_FORCE ELF_CHF_FORCE
};


typedef enum
{
  ELF_K_NONE,
  ELF_K_AR,
  ELF_K_COFF,
  ELF_K_ELF,

  ELF_K_NUM
} Elf_Kind;



typedef struct
{
  char *ar_name;
  time_t ar_date;
  uid_t ar_uid;
  gid_t ar_gid;
  mode_t ar_mode;
  int64_t ar_size;
  char *ar_rawname;
} Elf_Arhdr;



typedef struct
{
  char *as_name;
  size_t as_off;
  unsigned long int as_hash;
} Elf_Arsym;



typedef struct Elf Elf;


typedef struct Elf_Scn Elf_Scn;







extern Elf *elf_begin (int __fildes, Elf_Cmd __cmd, Elf *__ref);


  extern Elf *elf_clone (Elf *__elf, Elf_Cmd __cmd);


extern Elf *elf_memory (char *__image, size_t __size);


extern Elf_Cmd elf_next (Elf *__elf);


extern int elf_end (Elf *__elf);


extern int64_t elf_update (Elf *__elf, Elf_Cmd __cmd);


extern Elf_Kind elf_kind (Elf *__elf) __attribute__ ((__pure__));


extern int64_t elf_getbase (Elf *__elf);



extern char *elf_getident (Elf *__elf, size_t *__nbytes);


extern Elf32_Ehdr *elf32_getehdr (Elf *__elf);

extern Elf64_Ehdr *elf64_getehdr (Elf *__elf);


extern Elf32_Ehdr *elf32_newehdr (Elf *__elf);

extern Elf64_Ehdr *elf64_newehdr (Elf *__elf);





extern int elf_getphdrnum (Elf *__elf, size_t *__dst);


extern Elf32_Phdr *elf32_getphdr (Elf *__elf);

extern Elf64_Phdr *elf64_getphdr (Elf *__elf);


extern Elf32_Phdr *elf32_newphdr (Elf *__elf, size_t __cnt);

extern Elf64_Phdr *elf64_newphdr (Elf *__elf, size_t __cnt);



extern Elf_Scn *elf_getscn (Elf *__elf, size_t __index);


extern Elf_Scn *elf32_offscn (Elf *__elf, Elf32_Off __offset);

extern Elf_Scn *elf64_offscn (Elf *__elf, Elf64_Off __offset);


extern size_t elf_ndxscn (Elf_Scn *__scn);


extern Elf_Scn *elf_nextscn (Elf *__elf, Elf_Scn *__scn);


extern Elf_Scn *elf_newscn (Elf *__elf);



extern int elf_scnshndx (Elf_Scn *__scn);





extern int elf_getshdrnum (Elf *__elf, size_t *__dst);



extern int elf_getshnum (Elf *__elf, size_t *__dst)
     __attribute__ ((__deprecated__));






extern int elf_getshdrstrndx (Elf *__elf, size_t *__dst);



extern int elf_getshstrndx (Elf *__elf, size_t *__dst)
     __attribute__ ((__deprecated__));



extern Elf32_Shdr *elf32_getshdr (Elf_Scn *__scn);

extern Elf64_Shdr *elf64_getshdr (Elf_Scn *__scn);




extern Elf32_Chdr *elf32_getchdr (Elf_Scn *__scn);
extern Elf64_Chdr *elf64_getchdr (Elf_Scn *__scn);
# 359 "/usr/include/libelf.h" 3 4
extern int elf_compress (Elf_Scn *scn, int type, unsigned int flags);
extern int elf_compress_gnu (Elf_Scn *scn, int compress, unsigned int flags);


extern unsigned int elf_flagelf (Elf *__elf, Elf_Cmd __cmd,
     unsigned int __flags);

extern unsigned int elf_flagehdr (Elf *__elf, Elf_Cmd __cmd,
      unsigned int __flags);

extern unsigned int elf_flagphdr (Elf *__elf, Elf_Cmd __cmd,
      unsigned int __flags);

extern unsigned int elf_flagscn (Elf_Scn *__scn, Elf_Cmd __cmd,
     unsigned int __flags);

extern unsigned int elf_flagdata (Elf_Data *__data, Elf_Cmd __cmd,
      unsigned int __flags);

extern unsigned int elf_flagshdr (Elf_Scn *__scn, Elf_Cmd __cmd,
      unsigned int __flags);







extern Elf_Data *elf_getdata (Elf_Scn *__scn, Elf_Data *__data);


extern Elf_Data *elf_rawdata (Elf_Scn *__scn, Elf_Data *__data);


extern Elf_Data *elf_newdata (Elf_Scn *__scn);




extern Elf_Data *elf_getdata_rawchunk (Elf *__elf,
           int64_t __offset, size_t __size,
           Elf_Type __type);



extern char *elf_strptr (Elf *__elf, size_t __index, size_t __offset);



extern Elf_Arhdr *elf_getarhdr (Elf *__elf);


extern int64_t elf_getaroff (Elf *__elf);


extern size_t elf_rand (Elf *__elf, size_t __offset);


extern Elf_Arsym *elf_getarsym (Elf *__elf, size_t *__narsyms);



extern int elf_cntl (Elf *__elf, Elf_Cmd __cmd);


extern char *elf_rawfile (Elf *__elf, size_t *__nbytes);





extern size_t elf32_fsize (Elf_Type __type, size_t __count,
      unsigned int __version)
       __attribute__ ((__const__));

extern size_t elf64_fsize (Elf_Type __type, size_t __count,
      unsigned int __version)
       __attribute__ ((__const__));




extern Elf_Data *elf32_xlatetom (Elf_Data *__dest, const Elf_Data *__src,
     unsigned int __encode);

extern Elf_Data *elf64_xlatetom (Elf_Data *__dest, const Elf_Data *__src,
     unsigned int __encode);



extern Elf_Data *elf32_xlatetof (Elf_Data *__dest, const Elf_Data *__src,
     unsigned int __encode);

extern Elf_Data *elf64_xlatetof (Elf_Data *__dest, const Elf_Data *__src,
     unsigned int __encode);




extern int elf_errno (void);





extern const char *elf_errmsg (int __error);



extern unsigned int elf_version (unsigned int __version);


extern void elf_fill (int __fill);


extern unsigned long int elf_hash (const char *__string)
       __attribute__ ((__pure__));


extern unsigned long int elf_gnu_hash (const char *__string)
       __attribute__ ((__pure__));



extern long int elf32_checksum (Elf *__elf);

extern long int elf64_checksum (Elf *__elf);
# 18 "util/symbol.h" 2
# 1 "/usr/include/gelf.h" 1 3 4
# 30 "/usr/include/gelf.h" 3 4
#define _GELF_H 1
# 44 "/usr/include/gelf.h" 3 4
typedef Elf64_Half GElf_Half;


typedef Elf64_Word GElf_Word;
typedef Elf64_Sword GElf_Sword;


typedef Elf64_Xword GElf_Xword;
typedef Elf64_Sxword GElf_Sxword;


typedef Elf64_Addr GElf_Addr;


typedef Elf64_Off GElf_Off;



typedef Elf64_Ehdr GElf_Ehdr;


typedef Elf64_Shdr GElf_Shdr;




typedef Elf64_Section GElf_Section;


typedef Elf64_Sym GElf_Sym;



typedef Elf64_Syminfo GElf_Syminfo;


typedef Elf64_Rel GElf_Rel;


typedef Elf64_Rela GElf_Rela;


typedef Elf64_Phdr GElf_Phdr;


typedef Elf64_Chdr GElf_Chdr;


typedef Elf64_Dyn GElf_Dyn;



typedef Elf64_Verdef GElf_Verdef;


typedef Elf64_Verdaux GElf_Verdaux;


typedef Elf64_Verneed GElf_Verneed;


typedef Elf64_Vernaux GElf_Vernaux;



typedef Elf64_Versym GElf_Versym;



typedef Elf64_auxv_t GElf_auxv_t;



typedef Elf64_Nhdr GElf_Nhdr;



typedef Elf64_Move GElf_Move;



typedef Elf64_Lib GElf_Lib;




#define GELF_ST_BIND(val) ELF64_ST_BIND (val)
#define GELF_ST_TYPE(val) ELF64_ST_TYPE (val)
#define GELF_ST_INFO(bind,type) ELF64_ST_INFO (bind, type)



#define GELF_ST_VISIBILITY(val) ELF64_ST_VISIBILITY (val)




#define GELF_R_SYM(info) ELF64_R_SYM (info)
#define GELF_R_TYPE(info) ELF64_R_TYPE (info)
#define GELF_R_INFO(sym,type) ELF64_R_INFO (sym, type)



#define GELF_M_SYM(info) ELF64_M_SYM (info)
#define GELF_M_SIZE(info) ELF64_M_SIZE (info)
#define GELF_M_INFO(sym,size) ELF64_M_INFO (sym, size)



extern int gelf_getclass (Elf *__elf);





extern size_t gelf_fsize (Elf *__elf, Elf_Type __type, size_t __count,
     unsigned int __version);


extern GElf_Ehdr *gelf_getehdr (Elf *__elf, GElf_Ehdr *__dest);


extern int gelf_update_ehdr (Elf *__elf, GElf_Ehdr *__src);




extern void *gelf_newehdr (Elf *__elf, int __class);


extern Elf_Scn *gelf_offscn (Elf *__elf, GElf_Off __offset);


extern GElf_Shdr *gelf_getshdr (Elf_Scn *__scn, GElf_Shdr *__dst);


extern int gelf_update_shdr (Elf_Scn *__scn, GElf_Shdr *__src);


extern GElf_Phdr *gelf_getphdr (Elf *__elf, int __ndx, GElf_Phdr *__dst);


extern int gelf_update_phdr (Elf *__elf, int __ndx, GElf_Phdr *__src);




extern void *gelf_newphdr (Elf *__elf, size_t __phnum);



extern GElf_Chdr *gelf_getchdr (Elf_Scn *__scn, GElf_Chdr *__dst);



extern Elf_Data *gelf_xlatetom (Elf *__elf, Elf_Data *__dest,
    const Elf_Data *__src, unsigned int __encode);



extern Elf_Data *gelf_xlatetof (Elf *__elf, Elf_Data *__dest,
    const Elf_Data *__src, unsigned int __encode);



extern GElf_Rel *gelf_getrel (Elf_Data *__data, int __ndx, GElf_Rel *__dst);


extern GElf_Rela *gelf_getrela (Elf_Data *__data, int __ndx, GElf_Rela *__dst);


extern int gelf_update_rel (Elf_Data *__dst, int __ndx, GElf_Rel *__src);


extern int gelf_update_rela (Elf_Data *__dst, int __ndx, GElf_Rela *__src);



extern GElf_Sym *gelf_getsym (Elf_Data *__data, int __ndx, GElf_Sym *__dst);


extern int gelf_update_sym (Elf_Data *__data, int __ndx, GElf_Sym *__src);




extern GElf_Sym *gelf_getsymshndx (Elf_Data *__symdata, Elf_Data *__shndxdata,
       int __ndx, GElf_Sym *__sym,
       Elf32_Word *__xshndx);



extern int gelf_update_symshndx (Elf_Data *__symdata, Elf_Data *__shndxdata,
     int __ndx, GElf_Sym *__sym,
     Elf32_Word __xshndx);




extern GElf_Syminfo *gelf_getsyminfo (Elf_Data *__data, int __ndx,
          GElf_Syminfo *__dst);



extern int gelf_update_syminfo (Elf_Data *__data, int __ndx,
    GElf_Syminfo *__src);



extern GElf_Dyn *gelf_getdyn (Elf_Data *__data, int __ndx, GElf_Dyn *__dst);


extern int gelf_update_dyn (Elf_Data *__dst, int __ndx, GElf_Dyn *__src);



extern GElf_Move *gelf_getmove (Elf_Data *__data, int __ndx, GElf_Move *__dst);


extern int gelf_update_move (Elf_Data *__data, int __ndx,
        GElf_Move *__src);



extern GElf_Lib *gelf_getlib (Elf_Data *__data, int __ndx, GElf_Lib *__dst);


extern int gelf_update_lib (Elf_Data *__data, int __ndx, GElf_Lib *__src);




extern GElf_Versym *gelf_getversym (Elf_Data *__data, int __ndx,
        GElf_Versym *__dst);


extern int gelf_update_versym (Elf_Data *__data, int __ndx,
          GElf_Versym *__src);



extern GElf_Verneed *gelf_getverneed (Elf_Data *__data, int __offset,
          GElf_Verneed *__dst);


extern int gelf_update_verneed (Elf_Data *__data, int __offset,
    GElf_Verneed *__src);


extern GElf_Vernaux *gelf_getvernaux (Elf_Data *__data, int __offset,
          GElf_Vernaux *__dst);


extern int gelf_update_vernaux (Elf_Data *__data, int __offset,
    GElf_Vernaux *__src);



extern GElf_Verdef *gelf_getverdef (Elf_Data *__data, int __offset,
        GElf_Verdef *__dst);


extern int gelf_update_verdef (Elf_Data *__data, int __offset,
          GElf_Verdef *__src);



extern GElf_Verdaux *gelf_getverdaux (Elf_Data *__data, int __offset,
          GElf_Verdaux *__dst);


extern int gelf_update_verdaux (Elf_Data *__data, int __offset,
    GElf_Verdaux *__src);



extern GElf_auxv_t *gelf_getauxv (Elf_Data *__data, int __ndx,
      GElf_auxv_t *__dst);


extern int gelf_update_auxv (Elf_Data *__data, int __ndx, GElf_auxv_t *__src);





extern size_t gelf_getnote (Elf_Data *__data, size_t __offset,
       GElf_Nhdr *__result,
       size_t *__name_offset, size_t *__desc_offset);



extern long int gelf_checksum (Elf *__elf);
# 19 "util/symbol.h" 2




# 22 "util/symbol.h"
struct dso;
struct map;
struct maps;
struct option;






#define PERF_ELF_C_READ_MMAP ELF_C_READ_MMAP





Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,
        GElf_Shdr *shp, const char *name, size_t *idx);






struct symbol {
 struct rb_node rb_node;
 u64 start;
 u64 end;
 u16 namelen;
 u8 type:4;
 u8 binding:4;
 u8 idle:1;
 u8 ignore:1;
 u8 inlined:1;
 u8 arch_sym;
 
# 57 "util/symbol.h" 3 4
_Bool 
# 57 "util/symbol.h"
      annotate2;
 char name[0];
};

void symbol__delete(struct symbol *sym);
void symbols__delete(struct rb_root_cached *symbols);







#define symbols__for_each_entry(symbols,pos,nd) for (nd = rb_first_cached(symbols); nd && (pos = rb_entry(nd, struct symbol, rb_node)); nd = rb_next(nd))




static inline size_t symbol__size(const struct symbol *sym)
{
 return sym->end - sym->start;
}

struct strlist;
struct intlist;

struct symbol_name_rb_node {
 struct rb_node rb_node;
 struct symbol sym;
};

static inline int __symbol__join_symfs(char *bf, size_t size, const char *path)
{
 return path__join(bf, size, symbol_conf.symfs, path);
}

#define symbol__join_symfs(bf,path) __symbol__join_symfs(bf, sizeof(bf), path)

extern int vmlinux_path__nr_entries;
extern char **vmlinux_path;

static inline void *symbol__priv(struct symbol *sym)
{
 return ((void *)sym) - symbol_conf.priv_size;
}

struct ref_reloc_sym {
 const char *name;
 u64 addr;
 u64 unrelocated_addr;
};

struct addr_location {
 struct thread *thread;
 struct maps *maps;
 struct map *map;
 struct symbol *sym;
 const char *srcline;
 u64 addr;
 char level;
 u8 filtered;
 u8 cpumode;
 s32 cpu;
 s32 socket;
};

int dso__load(struct dso *dso, struct map *map);
int dso__load_vmlinux(struct dso *dso, struct map *map,
        const char *vmlinux, 
# 125 "util/symbol.h" 3 4
                            _Bool 
# 125 "util/symbol.h"
                                 vmlinux_allocated);
int dso__load_vmlinux_path(struct dso *dso, struct map *map);
int __dso__load_kallsyms(struct dso *dso, const char *filename, struct map *map,
    
# 128 "util/symbol.h" 3 4
   _Bool 
# 128 "util/symbol.h"
        no_kcore);
int dso__load_kallsyms(struct dso *dso, const char *filename, struct map *map);

void dso__insert_symbol(struct dso *dso,
   struct symbol *sym);

struct symbol *dso__find_symbol(struct dso *dso, u64 addr);
struct symbol *dso__find_symbol_by_name(struct dso *dso, const char *name);

struct symbol *symbol__next_by_name(struct symbol *sym);

struct symbol *dso__first_symbol(struct dso *dso);
struct symbol *dso__last_symbol(struct dso *dso);
struct symbol *dso__next_symbol(struct symbol *sym);

enum dso_type dso__type_fd(int fd);

int filename__read_build_id(const char *filename, void *bf, size_t size);
int sysfs__read_build_id(const char *filename, void *bf, size_t size);
int modules__parse(const char *filename, void *arg,
     int (*process_module)(void *arg, const char *name,
      u64 start, u64 size));
int filename__read_debuglink(const char *filename, char *debuglink,
        size_t size);

struct perf_env;
int symbol__init(struct perf_env *env);
void symbol__exit(void);
void symbol__elf_init(void);
int symbol__annotation_init(void);

struct symbol *symbol__new(u64 start, u64 len, u8 binding, u8 type, const char *name);
size_t __symbol__fprintf_symname_offs(const struct symbol *sym,
          const struct addr_location *al,
          
# 162 "util/symbol.h" 3 4
         _Bool 
# 162 "util/symbol.h"
              unknown_as_addr,
          
# 163 "util/symbol.h" 3 4
         _Bool 
# 163 "util/symbol.h"
              print_offsets, FILE *fp);
size_t symbol__fprintf_symname_offs(const struct symbol *sym,
        const struct addr_location *al, FILE *fp);
size_t __symbol__fprintf_symname(const struct symbol *sym,
     const struct addr_location *al,
     
# 168 "util/symbol.h" 3 4
    _Bool 
# 168 "util/symbol.h"
         unknown_as_addr, FILE *fp);
size_t symbol__fprintf_symname(const struct symbol *sym, FILE *fp);
size_t symbol__fprintf(struct symbol *sym, FILE *fp);

# 171 "util/symbol.h" 3 4
_Bool 
# 171 "util/symbol.h"
    symbol__restricted_filename(const char *filename,
     const char *restricted_filename);
int symbol__config_symfs(const struct option *opt __attribute__((unused)),
    const char *dir, int unset __attribute__((unused)));

struct symsrc;

int dso__load_sym(struct dso *dso, struct map *map, struct symsrc *syms_ss,
    struct symsrc *runtime_ss, int kmodule);
int dso__synthesize_plt_symbols(struct dso *dso, struct symsrc *ss);

char *dso__demangle_sym(struct dso *dso, int kmodule, const char *elf_name);

void __symbols__insert(struct rb_root_cached *symbols, struct symbol *sym,
         
# 185 "util/symbol.h" 3 4
        _Bool 
# 185 "util/symbol.h"
             kernel);
void symbols__insert(struct rb_root_cached *symbols, struct symbol *sym);
void symbols__fixup_duplicate(struct rb_root_cached *symbols);
void symbols__fixup_end(struct rb_root_cached *symbols);
void maps__fixup_end(struct maps *maps);

typedef int (*mapfn_t)(u64 start, u64 len, u64 pgoff, void *data);
int file__read_maps(int fd, 
# 192 "util/symbol.h" 3 4
                           _Bool 
# 192 "util/symbol.h"
                                exe, mapfn_t mapfn, void *data,
      
# 193 "util/symbol.h" 3 4
     _Bool 
# 193 "util/symbol.h"
          *is_64_bit);

#define PERF_KCORE_EXTRACT "/tmp/perf-kcore-XXXXXX"

struct kcore_extract {
 char *kcore_filename;
 u64 addr;
 u64 offs;
 u64 len;
 char extract_filename[sizeof("/tmp/perf-kcore-XXXXXX")];
 int fd;
};

int kcore_extract__create(struct kcore_extract *kce);
void kcore_extract__delete(struct kcore_extract *kce);

int kcore_copy(const char *from_dir, const char *to_dir);
int compare_proc_modules(const char *from, const char *to);

int setup_list(struct strlist **list, const char *list_str,
        const char *list_name);
int setup_intlist(struct intlist **list, const char *list_str,
    const char *list_name);



# 218 "util/symbol.h" 3 4
_Bool 
# 218 "util/symbol.h"
    elf__needs_adjust_symbols(GElf_Ehdr ehdr);
void arch__sym_update(struct symbol *s, GElf_Sym *sym);


const char *arch__normalize_symbol_name(const char *name);
#define SYMBOL_A 0
#define SYMBOL_B 1

void arch__symbols__fixup_end(struct symbol *p, struct symbol *c);
int arch__compare_symbol_names(const char *namea, const char *nameb);
int arch__compare_symbol_names_n(const char *namea, const char *nameb,
     unsigned int n);
int arch__choose_best_symbol(struct symbol *syma, struct symbol *symb);

enum symbol_tag_include {
 SYMBOL_TAG_INCLUDE__NONE = 0,
 SYMBOL_TAG_INCLUDE__DEFAULT_ONLY
};

int symbol__match_symbol_name(const char *namea, const char *nameb,
         enum symbol_tag_include includes);


struct sdt_note {
 char *name;
 char *provider;
 char *args;
 
# 245 "util/symbol.h" 3 4
_Bool 
# 245 "util/symbol.h"
     bit32;
 union {
  Elf64_Addr a64[3];
  Elf32_Addr a32[3];
 } addr;
 struct list_head note_list;
};

int get_sdt_note_list(struct list_head *head, const char *target);
int cleanup_sdt_note_list(struct list_head *sdt_notes);
int sdt_notes__get_count(struct list_head *start);

#define SDT_PROBES_SCN ".probes"
#define SDT_BASE_SCN ".stapsdt.base"
#define SDT_NOTE_SCN ".note.stapsdt"
#define SDT_NOTE_TYPE 3
#define SDT_NOTE_NAME "stapsdt"
#define NR_ADDR 3

enum {
 SDT_NOTE_IDX_LOC = 0,
 SDT_NOTE_IDX_BASE,
 SDT_NOTE_IDX_REFCTR,
};

struct mem_info *mem_info__new(void);
struct mem_info *mem_info__get(struct mem_info *mi);
void mem_info__put(struct mem_info *mi);

static inline void __mem_info__zput(struct mem_info **mi)
{
 mem_info__put(*mi);
 *mi = 
# 277 "util/symbol.h" 3 4
      ((void *)0)
# 277 "util/symbol.h"
          ;
}

#define mem_info__zput(mi) __mem_info__zput(&mi)
# 42 "builtin-trace.c" 2
# 1 "util/path.h" 1
# 43 "builtin-trace.c" 2
# 1 "util/session.h" 1


#define __PERF_SESSION_H 

# 1 "util/trace-event.h" 1


#define _PERF_UTIL_TRACE_EVENT_H 


# 1 "util/parse-events.h" 1


#define __PERF_PARSE_EVENTS_H 
# 14 "util/parse-events.h"
struct list_head;
struct evsel;
struct evlist;
struct parse_events_error;

struct option;

struct tracepoint_path {
 char *system;
 char *name;
 struct tracepoint_path *next;
};

struct tracepoint_path *tracepoint_id_to_path(u64 config);
struct tracepoint_path *tracepoint_name_to_path(const char *name);

# 29 "util/parse-events.h" 3 4
_Bool 
# 29 "util/parse-events.h"
    have_tracepoints(struct list_head *evlist);

const char *event_type(int type);

int parse_events_option(const struct option *opt, const char *str, int unset);
int parse_events(struct evlist *evlist, const char *str,
   struct parse_events_error *error);
int parse_events_terms(struct list_head *terms, const char *str);
int parse_filter(const struct option *opt, const char *str, int unset);
int exclude_perf(const struct option *opt, const char *arg, int unset);

#define EVENTS_HELP_MAX (128*1024)

enum perf_pmu_event_symbol_type {
 PMU_EVENT_SYMBOL_ERR,
 PMU_EVENT_SYMBOL,
 PMU_EVENT_SYMBOL_PREFIX,
 PMU_EVENT_SYMBOL_SUFFIX,
};

struct perf_pmu_event_symbol {
 char *symbol;
 enum perf_pmu_event_symbol_type type;
};

enum {
 PARSE_EVENTS__TERM_TYPE_NUM,
 PARSE_EVENTS__TERM_TYPE_STR,
};

enum {
 PARSE_EVENTS__TERM_TYPE_USER,
 PARSE_EVENTS__TERM_TYPE_CONFIG,
 PARSE_EVENTS__TERM_TYPE_CONFIG1,
 PARSE_EVENTS__TERM_TYPE_CONFIG2,
 PARSE_EVENTS__TERM_TYPE_NAME,
 PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD,
 PARSE_EVENTS__TERM_TYPE_SAMPLE_FREQ,
 PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE,
 PARSE_EVENTS__TERM_TYPE_TIME,
 PARSE_EVENTS__TERM_TYPE_CALLGRAPH,
 PARSE_EVENTS__TERM_TYPE_STACKSIZE,
 PARSE_EVENTS__TERM_TYPE_NOINHERIT,
 PARSE_EVENTS__TERM_TYPE_INHERIT,
 PARSE_EVENTS__TERM_TYPE_MAX_STACK,
 PARSE_EVENTS__TERM_TYPE_MAX_EVENTS,
 PARSE_EVENTS__TERM_TYPE_NOOVERWRITE,
 PARSE_EVENTS__TERM_TYPE_OVERWRITE,
 PARSE_EVENTS__TERM_TYPE_DRV_CFG,
 PARSE_EVENTS__TERM_TYPE_PERCORE,
 PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT,
 PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE,
 __PARSE_EVENTS__TERM_TYPE_NR,
};

struct parse_events_array {
 size_t nr_ranges;
 struct {
  unsigned int start;
  size_t length;
 } *ranges;
};

struct parse_events_term {
 char *config;
 struct parse_events_array array;
 union {
  char *str;
  u64 num;
 } val;
 int type_val;
 int type_term;
 struct list_head list;
 
# 102 "util/parse-events.h" 3 4
_Bool 
# 102 "util/parse-events.h"
     used;
 
# 103 "util/parse-events.h" 3 4
_Bool 
# 103 "util/parse-events.h"
     no_value;


 int err_term;
 int err_val;


 
# 110 "util/parse-events.h" 3 4
_Bool 
# 110 "util/parse-events.h"
     weak;
};

struct parse_events_error {
 int num_errors;
 int idx;
 char *str;
 char *help;
 int first_idx;
 char *first_str;
 char *first_help;
};

struct parse_events_state {
 struct list_head list;
 int idx;
 int nr_groups;
 struct parse_events_error *error;
 struct evlist *evlist;
 struct list_head *terms;
};

void parse_events__handle_error(struct parse_events_error *err, int idx,
    char *str, char *help);
void parse_events__shrink_config_terms(void);
int parse_events__is_hardcoded_term(struct parse_events_term *term);
int parse_events_term__num(struct parse_events_term **term,
      int type_term, char *config, u64 num,
      
# 138 "util/parse-events.h" 3 4
     _Bool 
# 138 "util/parse-events.h"
          novalue,
      void *loc_term, void *loc_val);
int parse_events_term__str(struct parse_events_term **term,
      int type_term, char *config, char *str,
      void *loc_term, void *loc_val);
int parse_events_term__sym_hw(struct parse_events_term **term,
         char *config, unsigned idx);
int parse_events_term__clone(struct parse_events_term **new,
        struct parse_events_term *term);
void parse_events_term__delete(struct parse_events_term *term);
void parse_events_terms__delete(struct list_head *terms);
void parse_events_terms__purge(struct list_head *terms);
void parse_events__clear_array(struct parse_events_array *a);
int parse_events__modifier_event(struct list_head *list, char *str, 
# 151 "util/parse-events.h" 3 4
                                                                   _Bool 
# 151 "util/parse-events.h"
                                                                        add);
int parse_events__modifier_group(struct list_head *list, char *event_mod);
int parse_events_name(struct list_head *list, char *name);
int parse_events_add_tracepoint(struct list_head *list, int *idx,
    const char *sys, const char *event,
    struct parse_events_error *error,
    struct list_head *head_config);
int parse_events_load_bpf(struct parse_events_state *parse_state,
     struct list_head *list,
     char *bpf_file_name,
     
# 161 "util/parse-events.h" 3 4
    _Bool 
# 161 "util/parse-events.h"
         source,
     struct list_head *head_config);

struct bpf_object;
int parse_events_load_bpf_obj(struct parse_events_state *parse_state,
         struct list_head *list,
         struct bpf_object *obj,
         struct list_head *head_config);
int parse_events_add_numeric(struct parse_events_state *parse_state,
        struct list_head *list,
        u32 type, u64 config,
        struct list_head *head_config);
enum perf_tool_event;
int parse_events_add_tool(struct parse_events_state *parse_state,
     struct list_head *list,
     enum perf_tool_event tool_event);
int parse_events_add_cache(struct list_head *list, int *idx,
      char *type, char *op_result1, char *op_result2,
      struct parse_events_error *error,
      struct list_head *head_config);
int parse_events_add_breakpoint(struct list_head *list, int *idx,
    void *ptr, char *type, u64 len);
int parse_events_add_pmu(struct parse_events_state *parse_state,
    struct list_head *list, char *name,
    struct list_head *head_config,
    
# 186 "util/parse-events.h" 3 4
   _Bool 
# 186 "util/parse-events.h"
        auto_merge_stats,
    
# 187 "util/parse-events.h" 3 4
   _Bool 
# 187 "util/parse-events.h"
        use_alias);

int parse_events_multi_pmu_add(struct parse_events_state *parse_state,
          char *str,
          struct list_head **listp);

int parse_events_copy_term_list(struct list_head *old,
     struct list_head **new);

enum perf_pmu_event_symbol_type
perf_pmu__parse_check(const char *name);
void parse_events__set_leader(char *name, struct list_head *list,
         struct parse_events_state *parse_state);
void parse_events_update_lists(struct list_head *list_event,
          struct list_head *list_all);
void parse_events_evlist_error(struct parse_events_state *parse_state,
          int idx, const char *str);

void print_events(const char *event_glob, 
# 205 "util/parse-events.h" 3 4
                                         _Bool 
# 205 "util/parse-events.h"
                                              name_only, 
# 205 "util/parse-events.h" 3 4
                                                         _Bool 
# 205 "util/parse-events.h"
                                                              quiet,
    
# 206 "util/parse-events.h" 3 4
   _Bool 
# 206 "util/parse-events.h"
        long_desc, 
# 206 "util/parse-events.h" 3 4
                   _Bool 
# 206 "util/parse-events.h"
                        details_flag, 
# 206 "util/parse-events.h" 3 4
                                      _Bool 
# 206 "util/parse-events.h"
                                           deprecated);

struct event_symbol {
 const char *symbol;
 const char *alias;
};
extern struct event_symbol event_symbols_hw[];
extern struct event_symbol event_symbols_sw[];
void print_symbol_events(const char *event_glob, unsigned type,
    struct event_symbol *syms, unsigned max,
    
# 216 "util/parse-events.h" 3 4
   _Bool 
# 216 "util/parse-events.h"
        name_only);
void print_tool_events(const char *event_glob, 
# 217 "util/parse-events.h" 3 4
                                              _Bool 
# 217 "util/parse-events.h"
                                                   name_only);
void print_tracepoint_events(const char *subsys_glob, const char *event_glob,
        
# 219 "util/parse-events.h" 3 4
       _Bool 
# 219 "util/parse-events.h"
            name_only);
int print_hwcache_events(const char *event_glob, 
# 220 "util/parse-events.h" 3 4
                                                _Bool 
# 220 "util/parse-events.h"
                                                     name_only);
void print_sdt_events(const char *subsys_glob, const char *event_glob,
        
# 222 "util/parse-events.h" 3 4
       _Bool 
# 222 "util/parse-events.h"
            name_only);
int is_valid_tracepoint(const char *event_string);

int valid_event_mount(const char *eventfs);
char *parse_events_formats_error_string(char *additional_terms);

void parse_events_print_error(struct parse_events_error *err,
         const char *event);







static inline 
# 237 "util/parse-events.h" 3 4
             _Bool 
# 237 "util/parse-events.h"
                  is_sdt_event(char *str)
{
 return (str[0] == '%' ||
  (!
# 240 "util/parse-events.h" 3 4
   (__extension__ (__builtin_constant_p (
# 240 "util/parse-events.h"
   4
# 240 "util/parse-events.h" 3 4
   ) && ((__builtin_constant_p (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) && strlen (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) < ((size_t) (
# 240 "util/parse-events.h"
   4
# 240 "util/parse-events.h" 3 4
   ))) || (__builtin_constant_p (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) && strlen (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) < ((size_t) (
# 240 "util/parse-events.h"
   4
# 240 "util/parse-events.h" 3 4
   )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) && __builtin_constant_p (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) && (__s1_len = __builtin_strlen (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ), __s2_len = __builtin_strlen (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ), (!((size_t)(const void *)((
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) + 1) - (size_t)(const void *)(
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) + 1) - (size_t)(const void *)(
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   , 
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) : (__builtin_constant_p (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) && ((size_t)(const void *)((
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) + 1) - (size_t)(const void *)(
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) == 1) && (__s1_len = __builtin_strlen (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ), __s1_len < 4) ? (__builtin_constant_p (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) && ((size_t)(const void *)((
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) + 1) - (size_t)(const void *)(
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) == 1) ? __builtin_strcmp (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   , 
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ); int __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) && ((size_t)(const void *)((
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) + 1) - (size_t)(const void *)(
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) == 1) && (__s2_len = __builtin_strlen (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ), __s2_len < 4) ? (__builtin_constant_p (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) && ((size_t)(const void *)((
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) + 1) - (size_t)(const void *)(
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ) == 1) ? __builtin_strcmp (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   , 
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   ); int __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   , 
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   )))); }) : strncmp (
# 240 "util/parse-events.h"
   str
# 240 "util/parse-events.h" 3 4
   , 
# 240 "util/parse-events.h"
   "sdt_"
# 240 "util/parse-events.h" 3 4
   , 
# 240 "util/parse-events.h"
   4
# 240 "util/parse-events.h" 3 4
   ))) 
# 240 "util/parse-events.h"
                           &&
   !!
# 241 "util/parse-events.h" 3 4
    (__extension__ (__builtin_constant_p (
# 241 "util/parse-events.h"
    ':'
# 241 "util/parse-events.h" 3 4
    ) && !__builtin_constant_p (
# 241 "util/parse-events.h"
    str
# 241 "util/parse-events.h" 3 4
    ) && (
# 241 "util/parse-events.h"
    ':'
# 241 "util/parse-events.h" 3 4
    ) == '\0' ? (char *) __rawmemchr (
# 241 "util/parse-events.h"
    str
# 241 "util/parse-events.h" 3 4
    , 
# 241 "util/parse-events.h"
    ':'
# 241 "util/parse-events.h" 3 4
    ) : __builtin_strchr (
# 241 "util/parse-events.h"
    str
# 241 "util/parse-events.h" 3 4
    , 
# 241 "util/parse-events.h"
    ':'
# 241 "util/parse-events.h" 3 4
    ))) 
# 241 "util/parse-events.h"
                     && !
# 241 "util/parse-events.h" 3 4
                         (__extension__ (__builtin_constant_p (
# 241 "util/parse-events.h"
                         '='
# 241 "util/parse-events.h" 3 4
                         ) && !__builtin_constant_p (
# 241 "util/parse-events.h"
                         str
# 241 "util/parse-events.h" 3 4
                         ) && (
# 241 "util/parse-events.h"
                         '='
# 241 "util/parse-events.h" 3 4
                         ) == '\0' ? (char *) __rawmemchr (
# 241 "util/parse-events.h"
                         str
# 241 "util/parse-events.h" 3 4
                         , 
# 241 "util/parse-events.h"
                         '='
# 241 "util/parse-events.h" 3 4
                         ) : __builtin_strchr (
# 241 "util/parse-events.h"
                         str
# 241 "util/parse-events.h" 3 4
                         , 
# 241 "util/parse-events.h"
                         '='
# 241 "util/parse-events.h" 3 4
                         )))
# 241 "util/parse-events.h"
                                         ));
}
# 7 "util/trace-event.h" 2

struct machine;
struct perf_sample;
union perf_event;
struct perf_tool;
struct thread;
struct tep_plugin_list;

struct trace_event {
 struct tep_handle *pevent;
 struct tep_plugin_list *plugin_list;
};

int trace_event__init(struct trace_event *t);
void trace_event__cleanup(struct trace_event *t);
int trace_event__register_resolver(struct machine *machine,
       tep_func_resolver_t *func);
struct tep_event*
trace_event__tp_format(const char *sys, const char *name);

struct tep_event *trace_event__tp_format_id(int id);

int bigendian(void);

void event_format__fprintf(struct tep_event *event,
      int cpu, void *data, int size, FILE *fp);

void event_format__print(struct tep_event *event,
    int cpu, void *data, int size);

int parse_ftrace_file(struct tep_handle *pevent, char *buf, unsigned long size);
int parse_event_file(struct tep_handle *pevent,
       char *buf, unsigned long size, char *sys);

unsigned long long
raw_field_value(struct tep_event *event, const char *name, void *data);

void parse_proc_kallsyms(struct tep_handle *pevent, char *file, unsigned int size);
void parse_ftrace_printk(struct tep_handle *pevent, char *file, unsigned int size);
void parse_saved_cmdline(struct tep_handle *pevent, char *file, unsigned int size);

ssize_t trace_report(int fd, struct trace_event *tevent, 
# 48 "util/trace-event.h" 3 4
                                                        _Bool 
# 48 "util/trace-event.h"
                                                             repipe);

unsigned long long read_size(struct tep_event *event, void *ptr, int size);
unsigned long long eval_flag(const char *flag);

int read_tracing_data(int fd, struct list_head *pattrs);

struct tracing_data {

 ssize_t size;
 
# 58 "util/trace-event.h" 3 4
_Bool 
# 58 "util/trace-event.h"
     temp;
 char temp_file[50];
};

struct tracing_data *tracing_data_get(struct list_head *pattrs,
          int fd, 
# 63 "util/trace-event.h" 3 4
                 _Bool 
# 63 "util/trace-event.h"
                      temp);
int tracing_data_put(struct tracing_data *tdata);


struct addr_location;

struct perf_session;
struct perf_stat_config;

struct scripting_ops {
 const char *name;
 int (*start_script) (const char *script, int argc, const char **argv);
 int (*flush_script) (void);
 int (*stop_script) (void);
 void (*process_event) (union perf_event *event,
          struct perf_sample *sample,
          struct evsel *evsel,
          struct addr_location *al);
 void (*process_switch)(union perf_event *event,
          struct perf_sample *sample,
          struct machine *machine);
 void (*process_stat)(struct perf_stat_config *config,
        struct evsel *evsel, u64 tstamp);
 void (*process_stat_interval)(u64 tstamp);
 int (*generate_script) (struct tep_handle *pevent, const char *outfile);
};

extern unsigned int scripting_max_stack;

int script_spec_register(const char *spec, struct scripting_ops *ops);

void setup_perl_scripting(void);
void setup_python_scripting(void);

struct scripting_context {
 struct tep_handle *pevent;
 void *event_data;
};

int common_pc(struct scripting_context *context);
int common_flags(struct scripting_context *context);
int common_lock_depth(struct scripting_context *context);
# 6 "util/session.h" 2

# 1 "util/header.h" 1


#define __PERF_HEADER_H 






# 1 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 1


#define _PERF_BITOPS_H 






#define DECLARE_BITMAP(name,bits) unsigned long name[BITS_TO_LONGS(bits)]


int __bitmap_weight(const unsigned long *bitmap, int bits);
void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, int bits);
int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int bits);
void bitmap_clear(unsigned long *map, unsigned int start, int len);

#define BITMAP_FIRST_WORD_MASK(start) (~0UL << ((start) & (BITS_PER_LONG - 1)))

#define BITMAP_LAST_WORD_MASK(nbits) ( ((nbits) % BITS_PER_LONG) ? (1UL<<((nbits) % BITS_PER_LONG))-1 : ~0UL )





#define small_const_nbits(nbits) (__builtin_constant_p(nbits) && (nbits) <= BITS_PER_LONG)


static inline void bitmap_zero(unsigned long *dst, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 
# 33 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
    (8 * 8)
# 33 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
    ))
  *dst = 0UL;
 else {
  int len = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long);
  memset(dst, 0, len);
 }
}

static inline void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int nlongs = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)));
 if (!(__builtin_constant_p(nbits) && (nbits) <= 
# 44 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
     (8 * 8)
# 44 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
     )) {
  unsigned int len = (nlongs - 1) * sizeof(unsigned long);
  memset(dst, 0xff, len);
 }
 dst[nlongs - 1] = ( ((nbits) % 
# 48 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                  (8 * 8)
# 48 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                  ) ? (1UL<<((nbits) % 
# 48 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                  (8 * 8)
# 48 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                  ))-1 : ~0UL );
}

static inline int bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 
# 53 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
    (8 * 8)
# 53 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
    ))
  return ! (*src & ( ((nbits) % 
# 54 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                  (8 * 8)
# 54 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                  ) ? (1UL<<((nbits) % 
# 54 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                  (8 * 8)
# 54 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                  ))-1 : ~0UL ));

 return find_first_bit(src, nbits) == nbits;
}

static inline int bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 
# 61 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
    (8 * 8)
# 61 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
    ))
  return ! (~(*src) & ( ((nbits) % 
# 62 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                     (8 * 8)
# 62 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                     ) ? (1UL<<((nbits) % 
# 62 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                     (8 * 8)
# 62 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                     ))-1 : ~0UL ));

 return find_first_zero_bit(src, nbits) == nbits;
}

static inline int bitmap_weight(const unsigned long *src, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 
# 69 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
    (8 * 8)
# 69 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
    ))
  return hweight_long(*src & ( ((nbits) % 
# 70 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                            (8 * 8)
# 70 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                            ) ? (1UL<<((nbits) % 
# 70 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                            (8 * 8)
# 70 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                            ))-1 : ~0UL ));
 return __bitmap_weight(src, nbits);
}

static inline void bitmap_or(unsigned long *dst, const unsigned long *src1,
        const unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 
# 77 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
    (8 * 8)
# 77 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
    ))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}






static inline int test_and_set_bit(int nr, unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 90 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                     (8 * 8)
# 90 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 91 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                                             (8 * 8)
# 91 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                                             );
 unsigned long old;

 old = *p;
 *p = old | mask;

 return (old & mask) != 0;
}






static inline int test_and_clear_bit(int nr, unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 107 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                     (8 * 8)
# 107 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 108 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                                             (8 * 8)
# 108 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                                             );
 unsigned long old;

 old = *p;
 *p = old & ~mask;

 return (old & mask) != 0;
}





static inline unsigned long *bitmap_alloc(int nbits)
{
 return calloc(1, (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long));
}
# 133 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
size_t bitmap_scnprintf(unsigned long *bitmap, int nbits,
   char *buf, size_t size);
# 143 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
static inline int bitmap_and(unsigned long *dst, const unsigned long *src1,
        const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 
# 146 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
    (8 * 8)
# 146 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
    ))
  return (*dst = *src1 & *src2 & ( ((nbits) % 
# 147 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                                (8 * 8)
# 147 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                                ) ? (1UL<<((nbits) % 
# 147 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h" 3 4
                                (8 * 8)
# 147 "/home/jmikedupont2/linux/tools/include/linux/bitmap.h"
                                ))-1 : ~0UL )) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}
# 11 "util/header.h" 2

# 1 "util/env.h" 1
# 13 "util/header.h" 2
# 1 "util/pmu.h" 1


#define __PMU_H 







struct perf_evsel_config_term;

enum {
 PERF_PMU_FORMAT_VALUE_CONFIG,
 PERF_PMU_FORMAT_VALUE_CONFIG1,
 PERF_PMU_FORMAT_VALUE_CONFIG2,
};

#define PERF_PMU_FORMAT_BITS 64
#define EVENT_SOURCE_DEVICE_PATH "/bus/event_source/devices/"

struct perf_event_attr;

struct perf_pmu {
 char *name;
 __u32 type;
 
# 27 "util/pmu.h" 3 4
_Bool 
# 27 "util/pmu.h"
     selectable;
 
# 28 "util/pmu.h" 3 4
_Bool 
# 28 "util/pmu.h"
     is_uncore;
 
# 29 "util/pmu.h" 3 4
_Bool 
# 29 "util/pmu.h"
     auxtrace;
 int max_precise;
 struct perf_event_attr *default_config;
 struct perf_cpu_map *cpus;
 struct list_head format;
 struct list_head aliases;
 struct list_head list;
};

struct perf_pmu_info {
 const char *unit;
 const char *metric_expr;
 const char *metric_name;
 double scale;
 
# 43 "util/pmu.h" 3 4
_Bool 
# 43 "util/pmu.h"
     per_pkg;
 
# 44 "util/pmu.h" 3 4
_Bool 
# 44 "util/pmu.h"
     snapshot;
};

#define UNIT_MAX_LEN 31

struct perf_pmu_alias {
 char *name;
 char *desc;
 char *long_desc;
 char *topic;
 char *str;
 struct list_head terms;
 struct list_head list;
 char unit[31 +1];
 double scale;
 
# 59 "util/pmu.h" 3 4
_Bool 
# 59 "util/pmu.h"
     per_pkg;
 
# 60 "util/pmu.h" 3 4
_Bool 
# 60 "util/pmu.h"
     snapshot;
 
# 61 "util/pmu.h" 3 4
_Bool 
# 61 "util/pmu.h"
     deprecated;
 char *metric_expr;
 char *metric_name;
};

struct perf_pmu *perf_pmu__find(const char *name);
int perf_pmu__config(struct perf_pmu *pmu, struct perf_event_attr *attr,
       struct list_head *head_terms,
       struct parse_events_error *error);
int perf_pmu__config_terms(struct list_head *formats,
      struct perf_event_attr *attr,
      struct list_head *head_terms,
      
# 73 "util/pmu.h" 3 4
     _Bool 
# 73 "util/pmu.h"
          zero, struct parse_events_error *error);
__u64 perf_pmu__format_bits(struct list_head *formats, const char *name);
int perf_pmu__format_type(struct list_head *formats, const char *name);
int perf_pmu__check_alias(struct perf_pmu *pmu, struct list_head *head_terms,
     struct perf_pmu_info *info);
struct list_head *perf_pmu__alias(struct perf_pmu *pmu,
      struct list_head *head_terms);
int perf_pmu_wrap(void);
void perf_pmu_error(struct list_head *list, char *name, char const *msg);

int perf_pmu__new_format(struct list_head *list, char *name,
    int config, unsigned long *bits);
void perf_pmu__set_format(unsigned long *bits, long from, long to);
int perf_pmu__format_parse(char *dir, struct list_head *head);

struct perf_pmu *perf_pmu__scan(struct perf_pmu *pmu);

void print_pmu_events(const char *event_glob, 
# 90 "util/pmu.h" 3 4
                                             _Bool 
# 90 "util/pmu.h"
                                                  name_only, 
# 90 "util/pmu.h" 3 4
                                                             _Bool 
# 90 "util/pmu.h"
                                                                  quiet,
        
# 91 "util/pmu.h" 3 4
       _Bool 
# 91 "util/pmu.h"
            long_desc, 
# 91 "util/pmu.h" 3 4
                       _Bool 
# 91 "util/pmu.h"
                            details_flag,
        
# 92 "util/pmu.h" 3 4
       _Bool 
# 92 "util/pmu.h"
            deprecated);

# 93 "util/pmu.h" 3 4
_Bool 
# 93 "util/pmu.h"
    pmu_have_event(const char *pname, const char *name);

int perf_pmu__scan_file(struct perf_pmu *pmu, const char *name, const char *fmt, ...) __attribute__((format(scanf, 3, 4)));

int perf_pmu__test(void);

struct perf_event_attr *perf_pmu__get_default_config(struct perf_pmu *pmu);

struct pmu_events_map *perf_pmu__find_map(struct perf_pmu *pmu);

int perf_pmu__convert_scale(const char *scale, char **end, double *sval);
# 14 "util/header.h" 2

enum {
 HEADER_RESERVED = 0,
 HEADER_FIRST_FEATURE = 1,
 HEADER_TRACING_DATA = 1,
 HEADER_BUILD_ID,

 HEADER_HOSTNAME,
 HEADER_OSRELEASE,
 HEADER_VERSION,
 HEADER_ARCH,
 HEADER_NRCPUS,
 HEADER_CPUDESC,
 HEADER_CPUID,
 HEADER_TOTAL_MEM,
 HEADER_CMDLINE,
 HEADER_EVENT_DESC,
 HEADER_CPU_TOPOLOGY,
 HEADER_NUMA_TOPOLOGY,
 HEADER_BRANCH_STACK,
 HEADER_PMU_MAPPINGS,
 HEADER_GROUP_DESC,
 HEADER_AUXTRACE,
 HEADER_STAT,
 HEADER_CACHE,
 HEADER_SAMPLE_TIME,
 HEADER_MEM_TOPOLOGY,
 HEADER_CLOCKID,
 HEADER_DIR_FORMAT,
 HEADER_BPF_PROG_INFO,
 HEADER_BPF_BTF,
 HEADER_COMPRESSED,
 HEADER_LAST_FEATURE,
 HEADER_FEAT_BITS = 256,
};

enum perf_header_version {
 PERF_HEADER_VERSION_1,
 PERF_HEADER_VERSION_2,
};

struct perf_file_section {
 u64 offset;
 u64 size;
};

struct perf_file_header {
 u64 magic;
 u64 size;
 u64 attr_size;
 struct perf_file_section attrs;
 struct perf_file_section data;

 struct perf_file_section event_types;
 unsigned long adds_features[(((HEADER_FEAT_BITS) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
};

struct perf_pipe_file_header {
 u64 magic;
 u64 size;
};

struct perf_header;

int perf_file_header__read(struct perf_file_header *header,
      struct perf_header *ph, int fd);

struct perf_header {
 enum perf_header_version version;
 
# 83 "util/header.h" 3 4
_Bool 
# 83 "util/header.h"
        needs_swap;
 u64 data_offset;
 u64 data_size;
 u64 feat_offset;
 unsigned long adds_features[(((HEADER_FEAT_BITS) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 struct perf_env env;
};

struct feat_fd {
 struct perf_header *ph;
 int fd;
 void *buf;
 ssize_t offset;
 size_t size;
 struct evsel *events;
};

struct perf_header_feature_ops {
 int (*write)(struct feat_fd *ff, struct evlist *evlist);
 void (*print)(struct feat_fd *ff, FILE *fp);
 int (*process)(struct feat_fd *ff, void *data);
 const char *name;
 
# 105 "util/header.h" 3 4
_Bool 
# 105 "util/header.h"
        full_only;
 
# 106 "util/header.h" 3 4
_Bool 
# 106 "util/header.h"
        synthesize;
};

struct evlist;
struct perf_session;
struct perf_tool;
union perf_event;

int perf_session__read_header(struct perf_session *session);
int perf_session__write_header(struct perf_session *session,
          struct evlist *evlist,
          int fd, 
# 117 "util/header.h" 3 4
                 _Bool 
# 117 "util/header.h"
                      at_exit);
int perf_header__write_pipe(int fd);

void perf_header__set_feat(struct perf_header *header, int feat);
void perf_header__clear_feat(struct perf_header *header, int feat);

# 122 "util/header.h" 3 4
_Bool 
# 122 "util/header.h"
    perf_header__has_feat(const struct perf_header *header, int feat);

int perf_header__set_cmdline(int argc, const char **argv);

int perf_header__process_sections(struct perf_header *header, int fd,
      void *data,
      int (*process)(struct perf_file_section *section,
      struct perf_header *ph,
      int feat, int fd, void *data));

int perf_header__fprintf_info(struct perf_session *s, FILE *fp, 
# 132 "util/header.h" 3 4
                                                               _Bool 
# 132 "util/header.h"
                                                                    full);

int perf_event__process_feature(struct perf_session *session,
    union perf_event *event);
int perf_event__process_attr(struct perf_tool *tool, union perf_event *event,
        struct evlist **pevlist);
int perf_event__process_event_update(struct perf_tool *tool,
         union perf_event *event,
         struct evlist **pevlist);
size_t perf_event__fprintf_event_update(union perf_event *event, FILE *fp);
int perf_event__process_tracing_data(struct perf_session *session,
         union perf_event *event);
int perf_event__process_build_id(struct perf_session *session,
     union perf_event *event);

# 146 "util/header.h" 3 4
_Bool 
# 146 "util/header.h"
    is_perf_magic(u64 magic);

#define NAME_ALIGN 64

struct feat_fd;

int do_write(struct feat_fd *fd, const void *buf, size_t size);

int write_padded(struct feat_fd *fd, const void *bf,
   size_t count, size_t count_aligned);




int get_cpuid(char *buffer, size_t sz);

char *get_cpuid_str(struct perf_pmu *pmu __attribute__((unused)));
int strcmp_cpuid_str(const char *s1, const char *s2);
# 8 "util/session.h" 2
# 1 "util/machine.h" 1
# 9 "util/session.h" 2
# 1 "util/data.h" 1


#define __PERF_DATA_H 



enum perf_data_mode {
 PERF_DATA_MODE_WRITE,
 PERF_DATA_MODE_READ,
};

enum perf_dir_version {
 PERF_DIR_SINGLE_FILE = 0,
 PERF_DIR_VERSION = 1,
};

struct perf_data_file {
 char *path;
 int fd;
 unsigned long size;
};

struct perf_data {
 const char *path;
 struct perf_data_file file;
 
# 26 "util/data.h" 3 4
_Bool 
# 26 "util/data.h"
        is_pipe;
 
# 27 "util/data.h" 3 4
_Bool 
# 27 "util/data.h"
        is_dir;
 
# 28 "util/data.h" 3 4
_Bool 
# 28 "util/data.h"
        force;
 enum perf_data_mode mode;

 struct {
  u64 version;
  struct perf_data_file *files;
  int nr;
 } dir;
};

static inline 
# 38 "util/data.h" 3 4
             _Bool 
# 38 "util/data.h"
                  perf_data__is_read(struct perf_data *data)
{
 return data->mode == PERF_DATA_MODE_READ;
}

static inline 
# 43 "util/data.h" 3 4
             _Bool 
# 43 "util/data.h"
                  perf_data__is_write(struct perf_data *data)
{
 return data->mode == PERF_DATA_MODE_WRITE;
}

static inline int perf_data__is_pipe(struct perf_data *data)
{
 return data->is_pipe;
}

static inline 
# 53 "util/data.h" 3 4
             _Bool 
# 53 "util/data.h"
                  perf_data__is_dir(struct perf_data *data)
{
 return data->is_dir;
}

static inline 
# 58 "util/data.h" 3 4
             _Bool 
# 58 "util/data.h"
                  perf_data__is_single_file(struct perf_data *data)
{
 return data->dir.version == PERF_DIR_SINGLE_FILE;
}

static inline int perf_data__fd(struct perf_data *data)
{
 return data->file.fd;
}

int perf_data__open(struct perf_data *data);
void perf_data__close(struct perf_data *data);
ssize_t perf_data__write(struct perf_data *data,
         void *buf, size_t size);
ssize_t perf_data_file__write(struct perf_data_file *file,
         void *buf, size_t size);







int perf_data__switch(struct perf_data *data,
      const char *postfix,
      size_t pos, 
# 83 "util/data.h" 3 4
                 _Bool 
# 83 "util/data.h"
                      at_exit, char **new_filepath);

int perf_data__create_dir(struct perf_data *data, int nr);
int perf_data__open_dir(struct perf_data *data);
void perf_data__close_dir(struct perf_data *data);
int perf_data__update_dir(struct perf_data *data);
unsigned long perf_data__size(struct perf_data *data);
int perf_data__make_kcore_dir(struct perf_data *data, char *buf, size_t buf_sz);
char *perf_data__kallsyms_name(struct perf_data *data);
# 10 "util/session.h" 2
# 1 "util/ordered-events.h" 1


#define __ORDERED_EVENTS_H 



struct perf_sample;

struct ordered_event {
 u64 timestamp;
 u64 file_offset;
 union perf_event *event;
 struct list_head list;
};

enum oe_flush {
 OE_FLUSH__NONE,
 OE_FLUSH__FINAL,
 OE_FLUSH__ROUND,
 OE_FLUSH__HALF,
 OE_FLUSH__TOP,
 OE_FLUSH__TIME,
};

struct ordered_events;

typedef int (*ordered_events__deliver_t)(struct ordered_events *oe,
      struct ordered_event *event);

struct ordered_events_buffer {
 struct list_head list;
 struct ordered_event event[0];
};

struct ordered_events {
 u64 last_flush;
 u64 next_flush;
 u64 max_timestamp;
 u64 max_alloc_size;
 u64 cur_alloc_size;
 struct list_head events;
 struct list_head cache;
 struct list_head to_free;
 struct ordered_events_buffer *buffer;
 struct ordered_event *last;
 ordered_events__deliver_t deliver;
 int buffer_idx;
 unsigned int nr_events;
 enum oe_flush last_flush_type;
 u32 nr_unordered_events;
 
# 51 "util/ordered-events.h" 3 4
_Bool 
# 51 "util/ordered-events.h"
         copy_on_queue;
 void *data;
};

int ordered_events__queue(struct ordered_events *oe, union perf_event *event,
     u64 timestamp, u64 file_offset);
void ordered_events__delete(struct ordered_events *oe, struct ordered_event *event);
int ordered_events__flush(struct ordered_events *oe, enum oe_flush how);
int ordered_events__flush_time(struct ordered_events *oe, u64 timestamp);
void ordered_events__init(struct ordered_events *oe, ordered_events__deliver_t deliver,
     void *data);
void ordered_events__free(struct ordered_events *oe);
void ordered_events__reinit(struct ordered_events *oe);
u64 ordered_events__first_time(struct ordered_events *oe);

static inline
void ordered_events__set_alloc_size(struct ordered_events *oe, u64 size)
{
 oe->max_alloc_size = size;
}

static inline
void ordered_events__set_copy_on_queue(struct ordered_events *oe, 
# 73 "util/ordered-events.h" 3 4
                                                                 _Bool 
# 73 "util/ordered-events.h"
                                                                      copy)
{
 oe->copy_on_queue = copy;
}
# 11 "util/session.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/compress.h" 1


#define PERF_COMPRESS_H 







int gzip_decompress_to_file(const char *input, int output_fd);

# 12 "/home/jmikedupont2/linux/tools/perf/util/compress.h" 3 4
_Bool 
# 12 "/home/jmikedupont2/linux/tools/perf/util/compress.h"
    gzip_is_compressed(const char *input);







struct zstd_data {




};
# 40 "/home/jmikedupont2/linux/tools/perf/util/compress.h"
static inline int zstd_init(struct zstd_data *data __attribute__((unused)), int level __attribute__((unused)))
{
 return 0;
}

static inline int zstd_fini(struct zstd_data *data __attribute__((unused)))
{
 return 0;
}

static inline
size_t zstd_compress_stream_to_records(struct zstd_data *data __attribute__((unused)),
           void *dst __attribute__((unused)), size_t dst_size __attribute__((unused)),
           void *src __attribute__((unused)), size_t src_size __attribute__((unused)),
           size_t max_record_size __attribute__((unused)),
           size_t process_header(void *record, size_t increment) __attribute__((unused)))
{
 return 0;
}

static inline size_t zstd_decompress_stream(struct zstd_data *data __attribute__((unused)), void *src __attribute__((unused)),
         size_t src_size __attribute__((unused)), void *dst __attribute__((unused)),
         size_t dst_size __attribute__((unused)))
{
 return 0;
}
# 12 "util/session.h" 2




struct ip_callchain;
struct symbol;
struct thread;

struct auxtrace;
struct itrace_synth_opts;

struct perf_session {
 struct perf_header header;
 struct machines machines;
 struct evlist *evlist;
 struct auxtrace *auxtrace;
 struct itrace_synth_opts *itrace_synth_opts;
 struct list_head auxtrace_index;
 struct trace_event tevent;
 struct perf_record_time_conv time_conv;
 
# 32 "util/session.h" 3 4
_Bool 
# 32 "util/session.h"
       repipe;
 
# 33 "util/session.h" 3 4
_Bool 
# 33 "util/session.h"
       one_mmap;
 void *one_mmap_addr;
 u64 one_mmap_offset;
 struct ordered_events ordered_events;
 struct perf_data *data;
 struct perf_tool *tool;
 u64 bytes_transferred;
 u64 bytes_compressed;
 struct zstd_data zstd_data;
 struct decomp *decomp;
 struct decomp *decomp_last;
};

struct decomp {
 struct decomp *next;
 u64 file_pos;
 size_t mmap_len;
 u64 head;
 size_t size;
 char data[];
};

struct perf_tool;

struct perf_session *perf_session__new(struct perf_data *data,
           
# 58 "util/session.h" 3 4
          _Bool 
# 58 "util/session.h"
               repipe, struct perf_tool *tool);
void perf_session__delete(struct perf_session *session);

void perf_event_header__bswap(struct perf_event_header *hdr);

int perf_session__peek_event(struct perf_session *session, off_t file_offset,
        void *buf, size_t buf_sz,
        union perf_event **event_ptr,
        struct perf_sample *sample);
typedef int (*peek_events_cb_t)(struct perf_session *session,
    union perf_event *event, u64 offset,
    void *data);
int perf_session__peek_events(struct perf_session *session, u64 offset,
         u64 size, peek_events_cb_t cb, void *data);

int perf_session__process_events(struct perf_session *session);

int perf_session__queue_event(struct perf_session *s, union perf_event *event,
         u64 timestamp, u64 file_offset);

void perf_tool__fill_defaults(struct perf_tool *tool);

int perf_session__resolve_callchain(struct perf_session *session,
        struct evsel *evsel,
        struct thread *thread,
        struct ip_callchain *chain,
        struct symbol **parent);


# 86 "util/session.h" 3 4
_Bool 
# 86 "util/session.h"
    perf_session__has_traces(struct perf_session *session, const char *msg);

void perf_event__attr_swap(struct perf_event_attr *attr);

int perf_session__create_kernel_maps(struct perf_session *session);

void perf_session__set_id_hdr_size(struct perf_session *session);

static inline
struct machine *perf_session__find_machine(struct perf_session *session, pid_t pid)
{
 return machines__find(&session->machines, pid);
}

static inline
struct machine *perf_session__findnew_machine(struct perf_session *session, pid_t pid)
{
 return machines__findnew(&session->machines, pid);
}

struct thread *perf_session__findnew(struct perf_session *session, pid_t pid);
int perf_session__register_idle_thread(struct perf_session *session);

size_t perf_session__fprintf(struct perf_session *session, FILE *fp);

size_t perf_session__fprintf_dsos(struct perf_session *session, FILE *fp);

size_t perf_session__fprintf_dsos_buildid(struct perf_session *session, FILE *fp,
       
# 114 "util/session.h" 3 4
      _Bool 
# 114 "util/session.h"
           (fn)(struct dso *dso, int parm), int parm);

size_t perf_session__fprintf_nr_events(struct perf_session *session, FILE *fp);

struct evsel *perf_session__find_first_evtype(struct perf_session *session,
         unsigned int type);

int perf_session__cpu_bitmap(struct perf_session *session,
        const char *cpu_list, unsigned long *cpu_bitmap);

void perf_session__fprintf_info(struct perf_session *s, FILE *fp, 
# 124 "util/session.h" 3 4
                                                                 _Bool 
# 124 "util/session.h"
                                                                      full);

struct evsel_str_handler;

#define perf_session__set_tracepoints_handlers(session,array) __evlist__set_tracepoints_handlers(session->evlist, array, ARRAY_SIZE(array))


extern volatile int session_done;

#define session_done() READ_ONCE(session_done)

int perf_session__deliver_synth_event(struct perf_session *session,
          union perf_event *event,
          struct perf_sample *sample);

int perf_event__process_id_index(struct perf_session *session,
     union perf_event *event);
# 44 "builtin-trace.c" 2
# 1 "util/thread.h" 1


#define __PERF_THREAD_H 







# 1 "util/srccode.h" 1

#define SRCCODE_H 1

struct srccode_state {
 char *srcfile;
 unsigned line;
};

static inline void srccode_state_init(struct srccode_state *state)
{
 state->srcfile = 
# 11 "util/srccode.h" 3 4
                 ((void *)0)
# 11 "util/srccode.h"
                     ;
 state->line = 0;
}

void srccode_state_free(struct srccode_state *state);


char *find_sourceline(char *fn, unsigned line, int *lenp);
# 12 "util/thread.h" 2

# 1 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 1


#define __PERF_STRLIST_H 




# 1 "/home/jmikedupont2/linux/tools/perf/util/rblist.h" 1


#define __PERF_RBLIST_H 
# 22 "/home/jmikedupont2/linux/tools/perf/util/rblist.h"
struct rblist {
 struct rb_root_cached entries;
 unsigned int nr_entries;

 int (*node_cmp)(struct rb_node *rbn, const void *entry);
 struct rb_node *(*node_new)(struct rblist *rlist, const void *new_entry);
 void (*node_delete)(struct rblist *rblist, struct rb_node *rb_node);
};

void rblist__init(struct rblist *rblist);
void rblist__exit(struct rblist *rblist);
void rblist__delete(struct rblist *rblist);
int rblist__add_node(struct rblist *rblist, const void *new_entry);
void rblist__remove_node(struct rblist *rblist, struct rb_node *rb_node);
struct rb_node *rblist__find(struct rblist *rblist, const void *entry);
struct rb_node *rblist__findnew(struct rblist *rblist, const void *entry);
struct rb_node *rblist__entry(const struct rblist *rblist, unsigned int idx);

static inline 
# 40 "/home/jmikedupont2/linux/tools/perf/util/rblist.h" 3 4
             _Bool 
# 40 "/home/jmikedupont2/linux/tools/perf/util/rblist.h"
                  rblist__empty(const struct rblist *rblist)
{
 return rblist->nr_entries == 0;
}

static inline unsigned int rblist__nr_entries(const struct rblist *rblist)
{
 return rblist->nr_entries;
}
# 9 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 2

struct str_node {
 struct rb_node rb_node;
 const char *s;
};

struct strlist {
 struct rblist rblist;
 
# 17 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
_Bool 
# 17 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
           dupstr;
 
# 18 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
_Bool 
# 18 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
           file_only;
};






struct strlist_config {
 
# 27 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
_Bool 
# 27 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
     dont_dupstr;
 
# 28 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
_Bool 
# 28 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
     file_only;
 const char *dirname;
};

struct strlist *strlist__new(const char *slist, const struct strlist_config *config);
void strlist__delete(struct strlist *slist);

void strlist__remove(struct strlist *slist, struct str_node *sn);
int strlist__load(struct strlist *slist, const char *filename);
int strlist__add(struct strlist *slist, const char *str);

struct str_node *strlist__entry(const struct strlist *slist, unsigned int idx);
struct str_node *strlist__find(struct strlist *slist, const char *entry);

static inline 
# 42 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
             _Bool 
# 42 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
                  strlist__has_entry(struct strlist *slist, const char *entry)
{
 return strlist__find(slist, entry) != 
# 44 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
                                      ((void *)0)
# 44 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
                                          ;
}

static inline 
# 47 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
             _Bool 
# 47 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
                  strlist__empty(const struct strlist *slist)
{
 return rblist__empty(&slist->rblist);
}

static inline unsigned int strlist__nr_entries(const struct strlist *slist)
{
 return rblist__nr_entries(&slist->rblist);
}


static inline struct str_node *strlist__first(struct strlist *slist)
{
 struct rb_node *rn = (&slist->rblist.entries)->rb_leftmost;
 return rn ? ({ const typeof(((struct str_node *)0)->rb_node) * __mptr = (rn); (struct str_node *)((char *)__mptr - 
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
            __builtin_offsetof (
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
            struct str_node
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
            , 
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
            rb_node
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
            )
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
            ); }) : 
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
                                                     ((void *)0)
# 61 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
                                                         ;
}
static inline struct str_node *strlist__next(struct str_node *sn)
{
 struct rb_node *rn;
 if (!sn)
  return 
# 67 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
        ((void *)0)
# 67 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
            ;
 rn = rb_next(&sn->rb_node);
 return rn ? ({ const typeof(((struct str_node *)0)->rb_node) * __mptr = (rn); (struct str_node *)((char *)__mptr - 
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
            __builtin_offsetof (
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
            struct str_node
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
            , 
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
            rb_node
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
            )
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
            ); }) : 
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h" 3 4
                                                     ((void *)0)
# 69 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
                                                         ;
}






#define strlist__for_each_entry(pos,slist) for (pos = strlist__first(slist); pos; pos = strlist__next(pos))
# 87 "/home/jmikedupont2/linux/tools/perf/util/strlist.h"
#define strlist__for_each_entry_safe(pos,n,slist) for (pos = strlist__first(slist), n = strlist__next(pos); pos; pos = n, n = strlist__next(n))
# 14 "util/thread.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 1


#define __PERF_INTLIST_H 






struct int_node {
 struct rb_node rb_node;
 int i;
 void *priv;
};

struct intlist {
 struct rblist rblist;
};

struct intlist *intlist__new(const char *slist);
void intlist__delete(struct intlist *ilist);

void intlist__remove(struct intlist *ilist, struct int_node *in);
int intlist__add(struct intlist *ilist, int i);

struct int_node *intlist__entry(const struct intlist *ilist, unsigned int idx);
struct int_node *intlist__find(struct intlist *ilist, int i);
struct int_node *intlist__findnew(struct intlist *ilist, int i);

static inline 
# 30 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
             _Bool 
# 30 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
                  intlist__has_entry(struct intlist *ilist, int i)
{
 return intlist__find(ilist, i) != 
# 32 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
                                  ((void *)0)
# 32 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
                                      ;
}

static inline 
# 35 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
             _Bool 
# 35 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
                  intlist__empty(const struct intlist *ilist)
{
 return rblist__empty(&ilist->rblist);
}

static inline unsigned int intlist__nr_entries(const struct intlist *ilist)
{
 return rblist__nr_entries(&ilist->rblist);
}


static inline struct int_node *intlist__first(struct intlist *ilist)
{
 struct rb_node *rn = (&ilist->rblist.entries)->rb_leftmost;
 return rn ? ({ const typeof(((struct int_node *)0)->rb_node) * __mptr = (rn); (struct int_node *)((char *)__mptr - 
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
            __builtin_offsetof (
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
            struct int_node
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
            , 
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
            rb_node
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
            )
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
            ); }) : 
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
                                                     ((void *)0)
# 49 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
                                                         ;
}
static inline struct int_node *intlist__next(struct int_node *in)
{
 struct rb_node *rn;
 if (!in)
  return 
# 55 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
        ((void *)0)
# 55 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
            ;
 rn = rb_next(&in->rb_node);
 return rn ? ({ const typeof(((struct int_node *)0)->rb_node) * __mptr = (rn); (struct int_node *)((char *)__mptr - 
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
            __builtin_offsetof (
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
            struct int_node
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
            , 
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
            rb_node
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
            )
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
            ); }) : 
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h" 3 4
                                                     ((void *)0)
# 57 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
                                                         ;
}






#define intlist__for_each_entry(pos,ilist) for (pos = intlist__first(ilist); pos; pos = intlist__next(pos))
# 75 "/home/jmikedupont2/linux/tools/perf/util/intlist.h"
#define intlist__for_each_entry_safe(pos,n,ilist) for (pos = intlist__first(ilist), n = intlist__next(pos); pos; pos = n, n = intlist__next(n))
# 15 "util/thread.h" 2


struct addr_location;
struct map;
struct perf_record_namespaces;
struct thread_stack;
struct unwind_libunwind_ops;

struct thread {
 union {
  struct rb_node rb_node;
  struct list_head node;
 };
 struct maps *maps;
 pid_t pid_;
 pid_t tid;
 pid_t ppid;
 int cpu;
 refcount_t refcnt;
 
# 34 "util/thread.h" 3 4
_Bool 
# 34 "util/thread.h"
       comm_set;
 int comm_len;
 
# 36 "util/thread.h" 3 4
_Bool 
# 36 "util/thread.h"
       dead;
 struct list_head namespaces_list;
 struct rw_semaphore namespaces_lock;
 struct list_head comm_list;
 struct rw_semaphore comm_lock;
 u64 db_id;

 void *priv;
 struct thread_stack *ts;
 struct nsinfo *nsinfo;
 struct srccode_state srccode_state;
 
# 47 "util/thread.h" 3 4
_Bool 
# 47 "util/thread.h"
       filter;
 int filter_entry_depth;
};

struct machine;
struct namespaces;
struct comm;

struct thread *thread__new(pid_t pid, pid_t tid);
int thread__init_maps(struct thread *thread, struct machine *machine);
void thread__delete(struct thread *thread);

struct thread *thread__get(struct thread *thread);
void thread__put(struct thread *thread);

static inline void __thread__zput(struct thread **thread)
{
 thread__put(*thread);
 *thread = 
# 65 "util/thread.h" 3 4
          ((void *)0)
# 65 "util/thread.h"
              ;
}

#define thread__zput(thread) __thread__zput(&thread)

static inline void thread__exited(struct thread *thread)
{
 thread->dead = 
# 72 "util/thread.h" 3 4
               1
# 72 "util/thread.h"
                   ;
}

struct namespaces *thread__namespaces(struct thread *thread);
int thread__set_namespaces(struct thread *thread, u64 timestamp,
      struct perf_record_namespaces *event);

int __thread__set_comm(struct thread *thread, const char *comm, u64 timestamp,
         
# 80 "util/thread.h" 3 4
        _Bool 
# 80 "util/thread.h"
             exec);
static inline int thread__set_comm(struct thread *thread, const char *comm,
       u64 timestamp)
{
 return __thread__set_comm(thread, comm, timestamp, 
# 84 "util/thread.h" 3 4
                                                   0
# 84 "util/thread.h"
                                                        );
}

int thread__set_comm_from_proc(struct thread *thread);

int thread__comm_len(struct thread *thread);
struct comm *thread__comm(const struct thread *thread);
struct comm *thread__exec_comm(const struct thread *thread);
const char *thread__comm_str(struct thread *thread);
int thread__insert_map(struct thread *thread, struct map *map);
int thread__fork(struct thread *thread, struct thread *parent, u64 timestamp, 
# 94 "util/thread.h" 3 4
                                                                             _Bool 
# 94 "util/thread.h"
                                                                                  do_maps_clone);
size_t thread__fprintf(struct thread *thread, FILE *fp);

struct thread *thread__main_thread(struct machine *machine, struct thread *thread);

struct map *thread__find_map(struct thread *thread, u8 cpumode, u64 addr,
        struct addr_location *al);
struct map *thread__find_map_fb(struct thread *thread, u8 cpumode, u64 addr,
    struct addr_location *al);

struct symbol *thread__find_symbol(struct thread *thread, u8 cpumode,
       u64 addr, struct addr_location *al);
struct symbol *thread__find_symbol_fb(struct thread *thread, u8 cpumode,
          u64 addr, struct addr_location *al);

void thread__find_cpumode_addr_location(struct thread *thread, u64 addr,
     struct addr_location *al);

int thread__memcpy(struct thread *thread, struct machine *machine,
     void *buf, u64 ip, int len, 
# 113 "util/thread.h" 3 4
                                _Bool 
# 113 "util/thread.h"
                                     *is64bit);

static inline void *thread__priv(struct thread *thread)
{
 return thread->priv;
}

static inline void thread__set_priv(struct thread *thread, void *p)
{
 thread->priv = p;
}

static inline 
# 125 "util/thread.h" 3 4
             _Bool 
# 125 "util/thread.h"
                  thread__is_filtered(struct thread *thread)
{
 if (symbol_conf.comm_list &&
     !strlist__has_entry(symbol_conf.comm_list, thread__comm_str(thread))) {
  return 
# 129 "util/thread.h" 3 4
        1
# 129 "util/thread.h"
            ;
 }

 if (symbol_conf.pid_list &&
     !intlist__has_entry(symbol_conf.pid_list, thread->pid_)) {
  return 
# 134 "util/thread.h" 3 4
        1
# 134 "util/thread.h"
            ;
 }

 if (symbol_conf.tid_list &&
     !intlist__has_entry(symbol_conf.tid_list, thread->tid)) {
  return 
# 139 "util/thread.h" 3 4
        1
# 139 "util/thread.h"
            ;
 }

 return 
# 142 "util/thread.h" 3 4
       0
# 142 "util/thread.h"
            ;
}
# 45 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h" 1


#define __SUBCMD_PARSE_OPTIONS_H 






#define NORETURN __attribute__((__noreturn__))


enum parse_opt_type {

 OPTION_END,
 OPTION_ARGUMENT,
 OPTION_GROUP,

 OPTION_BIT,
 OPTION_BOOLEAN,
 OPTION_INCR,
 OPTION_SET_UINT,
 OPTION_SET_PTR,

 OPTION_STRING,
 OPTION_INTEGER,
 OPTION_LONG,
 OPTION_ULONG,
 OPTION_CALLBACK,
 OPTION_U64,
 OPTION_UINTEGER,
};

enum parse_opt_flags {
 PARSE_OPT_KEEP_DASHDASH = 1,
 PARSE_OPT_STOP_AT_NON_OPTION = 2,
 PARSE_OPT_KEEP_ARGV0 = 4,
 PARSE_OPT_KEEP_UNKNOWN = 8,
 PARSE_OPT_NO_INTERNAL_HELP = 16,
};

enum parse_opt_option_flags {
 PARSE_OPT_OPTARG = 1,
 PARSE_OPT_NOARG = 2,
 PARSE_OPT_NONEG = 4,
 PARSE_OPT_HIDDEN = 8,
 PARSE_OPT_LASTARG_DEFAULT = 16,
 PARSE_OPT_DISABLED = 32,
 PARSE_OPT_EXCLUSIVE = 64,
 PARSE_OPT_NOEMPTY = 128,
 PARSE_OPT_NOBUILD = 256,
 PARSE_OPT_CANSKIP = 512,
};

struct option;
typedef int parse_opt_cb(const struct option *, const char *arg, int unset);
# 101 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h"
struct option {
 enum parse_opt_type type;
 int short_name;
 const char *long_name;
 void *value;
 const char *argh;
 const char *help;
 const char *build_opt;

 int flags;
 parse_opt_cb *callback;
 intptr_t defval;
 
# 113 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h" 3 4
_Bool 
# 113 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h"
     *set;
 void *data;
 const struct option *parent;
};

#define check_vtype(v,type) ( BUILD_BUG_ON_ZERO(!__builtin_types_compatible_p(typeof(v), type)) + v )

#define OPT_END() { .type = OPTION_END }
#define OPT_PARENT(p) { .type = OPTION_END, .parent = (p) }
#define OPT_ARGUMENT(l,h) { .type = OPTION_ARGUMENT, .long_name = (l), .help = (h) }
#define OPT_GROUP(h) { .type = OPTION_GROUP, .help = (h) }
#define OPT_BIT(s,l,v,h,b) { .type = OPTION_BIT, .short_name = (s), .long_name = (l), .value = check_vtype(v, int *), .help = (h), .defval = (b) }
#define OPT_BOOLEAN(s,l,v,h) { .type = OPTION_BOOLEAN, .short_name = (s), .long_name = (l), .value = check_vtype(v, bool *), .help = (h) }
#define OPT_BOOLEAN_FLAG(s,l,v,h,f) { .type = OPTION_BOOLEAN, .short_name = (s), .long_name = (l), .value = check_vtype(v, bool *), .help = (h), .flags = (f) }
#define OPT_BOOLEAN_SET(s,l,v,os,h) { .type = OPTION_BOOLEAN, .short_name = (s), .long_name = (l), .value = check_vtype(v, bool *), .help = (h), .set = check_vtype(os, bool *)}



#define OPT_INCR(s,l,v,h) { .type = OPTION_INCR, .short_name = (s), .long_name = (l), .value = check_vtype(v, int *), .help = (h) }
#define OPT_SET_UINT(s,l,v,h,i) { .type = OPTION_SET_UINT, .short_name = (s), .long_name = (l), .value = check_vtype(v, unsigned int *), .help = (h), .defval = (i) }
#define OPT_SET_PTR(s,l,v,h,p) { .type = OPTION_SET_PTR, .short_name = (s), .long_name = (l), .value = (v), .help = (h), .defval = (p) }
#define OPT_INTEGER(s,l,v,h) { .type = OPTION_INTEGER, .short_name = (s), .long_name = (l), .value = check_vtype(v, int *), .help = (h) }
#define OPT_UINTEGER(s,l,v,h) { .type = OPTION_UINTEGER, .short_name = (s), .long_name = (l), .value = check_vtype(v, unsigned int *), .help = (h) }
#define OPT_LONG(s,l,v,h) { .type = OPTION_LONG, .short_name = (s), .long_name = (l), .value = check_vtype(v, long *), .help = (h) }
#define OPT_ULONG(s,l,v,h) { .type = OPTION_ULONG, .short_name = (s), .long_name = (l), .value = check_vtype(v, unsigned long *), .help = (h) }
#define OPT_U64(s,l,v,h) { .type = OPTION_U64, .short_name = (s), .long_name = (l), .value = check_vtype(v, u64 *), .help = (h) }
#define OPT_STRING(s,l,v,a,h) { .type = OPTION_STRING, .short_name = (s), .long_name = (l), .value = check_vtype(v, const char **), .argh = (a), .help = (h) }
#define OPT_STRING_OPTARG(s,l,v,a,h,d) { .type = OPTION_STRING, .short_name = (s), .long_name = (l), .value = check_vtype(v, const char **), .argh =(a), .help = (h), .flags = PARSE_OPT_OPTARG, .defval = (intptr_t)(d) }



#define OPT_STRING_OPTARG_SET(s,l,v,os,a,h,d) { .type = OPTION_STRING, .short_name = (s), .long_name = (l), .value = check_vtype(v, const char **), .argh = (a), .help = (h), .flags = PARSE_OPT_OPTARG, .defval = (intptr_t)(d), .set = check_vtype(os, bool *)}




#define OPT_STRING_NOEMPTY(s,l,v,a,h) { .type = OPTION_STRING, .short_name = (s), .long_name = (l), .value = check_vtype(v, const char **), .argh = (a), .help = (h), .flags = PARSE_OPT_NOEMPTY}
#define OPT_DATE(s,l,v,h) { .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .argh = "time", .help = (h), .callback = parse_opt_approxidate_cb }

#define OPT_CALLBACK(s,l,v,a,h,f) { .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .argh = (a), .help = (h), .callback = (f) }

#define OPT_CALLBACK_NOOPT(s,l,v,a,h,f) { .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .argh = (a), .help = (h), .callback = (f), .flags = PARSE_OPT_NOARG }

#define OPT_CALLBACK_DEFAULT(s,l,v,a,h,f,d) { .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .argh = (a), .help = (h), .callback = (f), .defval = (intptr_t)d, .flags = PARSE_OPT_LASTARG_DEFAULT }

#define OPT_CALLBACK_DEFAULT_NOOPT(s,l,v,a,h,f,d) { .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .arg = (a), .help = (h), .callback = (f), .defval = (intptr_t)d, .flags = PARSE_OPT_LASTARG_DEFAULT | PARSE_OPT_NOARG}



#define OPT_CALLBACK_OPTARG(s,l,v,d,a,h,f) { .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .argh = (a), .help = (h), .callback = (f), .flags = PARSE_OPT_OPTARG, .data = (d) }
# 174 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h"
extern int parse_options(int argc, const char **argv,
                         const struct option *options,
                         const char * const usagestr[], int flags);

extern int parse_options_subcommand(int argc, const char **argv,
    const struct option *options,
    const char *const subcommands[],
    const char *usagestr[], int flags);

extern __attribute__((__noreturn__)) void usage_with_options(const char * const *usagestr,
                                        const struct option *options);
extern __attribute__((__noreturn__)) __attribute__((format(printf,3,4)))
void usage_with_options_msg(const char * const *usagestr,
       const struct option *options,
       const char *fmt, ...);



enum {
 PARSE_OPT_HELP = -1,
 PARSE_OPT_DONE,
 PARSE_OPT_LIST_OPTS,
 PARSE_OPT_LIST_SUBCMDS,
 PARSE_OPT_UNKNOWN,
};






struct parse_opt_ctx_t {
 const char **argv;
 const char **out;
 int argc, cpidx;
 const char *opt;
 const struct option *excl_opt;
 int flags;
};

extern int parse_options_usage(const char * const *usagestr,
          const struct option *opts,
          const char *optstr,
          
# 217 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h" 3 4
         _Bool 
# 217 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h"
              short_opt);



extern int parse_opt_abbrev_cb(const struct option *, const char *, int);
extern int parse_opt_approxidate_cb(const struct option *, const char *, int);
extern int parse_opt_verbosity_cb(const struct option *, const char *, int);

#define OPT__VERBOSE(var) OPT_BOOLEAN('v', "verbose", (var), "be verbose")
#define OPT__QUIET(var) OPT_BOOLEAN('q', "quiet", (var), "be quiet")
#define OPT__VERBOSITY(var) { OPTION_CALLBACK, 'v', "verbose", (var), NULL, "be more verbose", PARSE_OPT_NOARG, &parse_opt_verbosity_cb, 0 }, { OPTION_CALLBACK, 'q', "quiet", (var), NULL, "be more quiet", PARSE_OPT_NOARG, &parse_opt_verbosity_cb, 0 }




#define OPT__DRY_RUN(var) OPT_BOOLEAN('n', "dry-run", (var), "dry run")
#define OPT__ABBREV(var) { OPTION_CALLBACK, 0, "abbrev", (var), "n", "use <n> digits to display SHA-1s", PARSE_OPT_OPTARG, &parse_opt_abbrev_cb, 0 }




extern const char *parse_options_fix_filename(const char *prefix, const char *file);

void set_option_flag(struct option *opts, int sopt, const char *lopt, int flag);
void set_option_nobuild(struct option *opts, int shortopt, const char *longopt,
   const char *build_opt, 
# 242 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h" 3 4
                         _Bool 
# 242 "/home/jmikedupont2/linux/tools/lib/subcmd/parse-options.h"
                              can_skip);
# 46 "builtin-trace.c" 2
# 1 "util/strlist.h" 1
# 47 "builtin-trace.c" 2
# 1 "util/intlist.h" 1
# 48 "builtin-trace.c" 2
# 1 "util/thread_map.h" 1


#define __PERF_THREAD_MAP_H 




# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/internal/threadmap.h" 1


#define __LIBPERF_INTERNAL_THREADMAP_H 





struct thread_map_data {
 pid_t pid;
 char *comm;
};

struct perf_thread_map {
 refcount_t refcnt;
 int nr;
 int err_thread;
 struct thread_map_data map[];
};

struct perf_thread_map *perf_thread_map__realloc(struct perf_thread_map *map, int nr);
# 9 "util/thread_map.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/threadmap.h" 1


#define __LIBPERF_THREADMAP_H 




struct perf_thread_map;

__attribute__((visibility("default"))) struct perf_thread_map *perf_thread_map__new_dummy(void);

__attribute__((visibility("default"))) void perf_thread_map__set_pid(struct perf_thread_map *map, int thread, pid_t pid);
__attribute__((visibility("default"))) char *perf_thread_map__comm(struct perf_thread_map *map, int thread);
__attribute__((visibility("default"))) int perf_thread_map__nr(struct perf_thread_map *threads);
__attribute__((visibility("default"))) pid_t perf_thread_map__pid(struct perf_thread_map *map, int thread);

__attribute__((visibility("default"))) struct perf_thread_map *perf_thread_map__get(struct perf_thread_map *map);
__attribute__((visibility("default"))) void perf_thread_map__put(struct perf_thread_map *map);
# 10 "util/thread_map.h" 2

struct perf_record_thread_map;

struct perf_thread_map *thread_map__new_dummy(void);
struct perf_thread_map *thread_map__new_by_pid(pid_t pid);
struct perf_thread_map *thread_map__new_by_tid(pid_t tid);
struct perf_thread_map *thread_map__new_by_uid(uid_t uid);
struct perf_thread_map *thread_map__new_all_cpus(void);
struct perf_thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
struct perf_thread_map *thread_map__new_event(struct perf_record_thread_map *event);

struct perf_thread_map *thread_map__new_str(const char *pid,
  const char *tid, uid_t uid, 
# 22 "util/thread_map.h" 3 4
                             _Bool 
# 22 "util/thread_map.h"
                                  all_threads);

struct perf_thread_map *thread_map__new_by_tid_str(const char *tid_str);

size_t thread_map__fprintf(struct perf_thread_map *threads, FILE *fp);

void thread_map__read_comms(struct perf_thread_map *threads);

# 29 "util/thread_map.h" 3 4
_Bool 
# 29 "util/thread_map.h"
    thread_map__has(struct perf_thread_map *threads, pid_t pid);
int thread_map__remove(struct perf_thread_map *threads, int idx);
# 49 "builtin-trace.c" 2
# 1 "util/stat.h" 1


#define __PERF_STATS_H 




# 1 "/usr/include/x86_64-linux-gnu/sys/resource.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
#define _SYS_RESOURCE_H 1




# 1 "/usr/include/x86_64-linux-gnu/bits/resource.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4

# 31 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,
#define RLIMIT_CPU RLIMIT_CPU


  RLIMIT_FSIZE = 1,
#define RLIMIT_FSIZE RLIMIT_FSIZE


  RLIMIT_DATA = 2,
#define RLIMIT_DATA RLIMIT_DATA


  RLIMIT_STACK = 3,
#define RLIMIT_STACK RLIMIT_STACK


  RLIMIT_CORE = 4,
#define RLIMIT_CORE RLIMIT_CORE





  __RLIMIT_RSS = 5,
#define RLIMIT_RSS __RLIMIT_RSS


  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,
#define RLIMIT_NOFILE RLIMIT_NOFILE
#define RLIMIT_OFILE __RLIMIT_OFILE


  RLIMIT_AS = 9,
#define RLIMIT_AS RLIMIT_AS


  __RLIMIT_NPROC = 6,
#define RLIMIT_NPROC __RLIMIT_NPROC


  __RLIMIT_MEMLOCK = 8,
#define RLIMIT_MEMLOCK __RLIMIT_MEMLOCK


  __RLIMIT_LOCKS = 10,
#define RLIMIT_LOCKS __RLIMIT_LOCKS


  __RLIMIT_SIGPENDING = 11,
#define RLIMIT_SIGPENDING __RLIMIT_SIGPENDING


  __RLIMIT_MSGQUEUE = 12,
#define RLIMIT_MSGQUEUE __RLIMIT_MSGQUEUE




  __RLIMIT_NICE = 13,
#define RLIMIT_NICE __RLIMIT_NICE



  __RLIMIT_RTPRIO = 14,
#define RLIMIT_RTPRIO __RLIMIT_RTPRIO




  __RLIMIT_RTTIME = 15,
#define RLIMIT_RTTIME __RLIMIT_RTTIME

  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS
#define RLIMIT_NLIMITS __RLIMIT_NLIMITS
#define RLIM_NLIMITS __RLIM_NLIMITS
};





#define RLIM_INFINITY 0xffffffffffffffffuLL



#define RLIM64_INFINITY 0xffffffffffffffffuLL



#define RLIM_SAVED_MAX RLIM_INFINITY
#define RLIM_SAVED_CUR RLIM_INFINITY






typedef __rlim64_t rlim_t;


typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,
#define RUSAGE_SELF RUSAGE_SELF


  RUSAGE_CHILDREN = -1
#define RUSAGE_CHILDREN RUSAGE_CHILDREN


  ,

  RUSAGE_THREAD = 1
#define RUSAGE_THREAD RUSAGE_THREAD

#define RUSAGE_LWP RUSAGE_THREAD

};

#define __need_timeval 
# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 101 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
#undef __need_timeval
# 180 "/usr/include/x86_64-linux-gnu/bits/resource.h" 2 3 4







struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };



    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };


#define PRIO_MIN -20
#define PRIO_MAX 20



enum __priority_which
{
  PRIO_PROCESS = 0,
#define PRIO_PROCESS PRIO_PROCESS
  PRIO_PGRP = 1,
#define PRIO_PGRP PRIO_PGRP
  PRIO_USER = 2
#define PRIO_USER PRIO_USER
};



# 313 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource, const struct rlimit *__new_limit, struct rlimit *__old_limit) __asm__ ("" "prlimit64") __attribute__ ((__nothrow__ , __leaf__))


                                                ;





extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) __attribute__ ((__nothrow__ , __leaf__));




# 25 "/usr/include/x86_64-linux-gnu/sys/resource.h" 2 3 4













typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
# 54 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit (__rlimit_resource_t __resource, struct rlimit *__rlimits) __asm__ ("" "getrlimit64") __attribute__ ((__nothrow__ , __leaf__))
                                                  ;





extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) __attribute__ ((__nothrow__ , __leaf__));
# 73 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int setrlimit (__rlimit_resource_t __resource, const struct rlimit *__rlimits) __asm__ ("" "setrlimit64") __attribute__ ((__nothrow__ , __leaf__))

                  ;





extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) __attribute__ ((__nothrow__ , __leaf__));




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) __attribute__ ((__nothrow__ , __leaf__));





extern int getpriority (__priority_which_t __which, id_t __who) __attribute__ ((__nothrow__ , __leaf__));



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));


# 9 "util/stat.h" 2
# 1 "util/rblist.h" 1
# 10 "util/stat.h" 2


# 11 "util/stat.h"
struct perf_cpu_map;
struct perf_stat_config;
struct timespec;

struct stats {
 double n, mean, M2;
 u64 max, min;
};

enum perf_stat_evsel_id {
 PERF_STAT_EVSEL_ID__NONE = 0,
 PERF_STAT_EVSEL_ID__CYCLES_IN_TX,
 PERF_STAT_EVSEL_ID__TRANSACTION_START,
 PERF_STAT_EVSEL_ID__ELISION_START,
 PERF_STAT_EVSEL_ID__CYCLES_IN_TX_CP,
 PERF_STAT_EVSEL_ID__TOPDOWN_TOTAL_SLOTS,
 PERF_STAT_EVSEL_ID__TOPDOWN_SLOTS_ISSUED,
 PERF_STAT_EVSEL_ID__TOPDOWN_SLOTS_RETIRED,
 PERF_STAT_EVSEL_ID__TOPDOWN_FETCH_BUBBLES,
 PERF_STAT_EVSEL_ID__TOPDOWN_RECOVERY_BUBBLES,
 PERF_STAT_EVSEL_ID__SMI_NUM,
 PERF_STAT_EVSEL_ID__APERF,
 PERF_STAT_EVSEL_ID__MAX,
};

struct perf_stat_evsel {
 struct stats res_stats[3];
 enum perf_stat_evsel_id id;
 u64 *group_data;
};

enum aggr_mode {
 AGGR_NONE,
 AGGR_GLOBAL,
 AGGR_SOCKET,
 AGGR_DIE,
 AGGR_CORE,
 AGGR_THREAD,
 AGGR_UNSET,
 AGGR_NODE,
};

enum {
 CTX_BIT_USER = 1 << 0,
 CTX_BIT_KERNEL = 1 << 1,
 CTX_BIT_HV = 1 << 2,
 CTX_BIT_HOST = 1 << 3,
 CTX_BIT_IDLE = 1 << 4,
 CTX_BIT_MAX = 1 << 5,
};

#define NUM_CTX CTX_BIT_MAX

enum stat_type {
 STAT_NONE = 0,
 STAT_NSECS,
 STAT_CYCLES,
 STAT_STALLED_CYCLES_FRONT,
 STAT_STALLED_CYCLES_BACK,
 STAT_BRANCHES,
 STAT_CACHEREFS,
 STAT_L1_DCACHE,
 STAT_L1_ICACHE,
 STAT_LL_CACHE,
 STAT_ITLB_CACHE,
 STAT_DTLB_CACHE,
 STAT_CYCLES_IN_TX,
 STAT_TRANSACTION,
 STAT_ELISION,
 STAT_TOPDOWN_TOTAL_SLOTS,
 STAT_TOPDOWN_SLOTS_ISSUED,
 STAT_TOPDOWN_SLOTS_RETIRED,
 STAT_TOPDOWN_FETCH_BUBBLES,
 STAT_TOPDOWN_RECOVERY_BUBBLES,
 STAT_SMI_NUM,
 STAT_APERF,
 STAT_MAX
};

struct runtime_stat {
 struct rblist value_list;
};

typedef int (*aggr_get_id_t)(struct perf_stat_config *config,
        struct perf_cpu_map *m, int cpu);

struct perf_stat_config {
 enum aggr_mode aggr_mode;
 
# 99 "util/stat.h" 3 4
_Bool 
# 99 "util/stat.h"
        scale;
 
# 100 "util/stat.h" 3 4
_Bool 
# 100 "util/stat.h"
        no_inherit;
 
# 101 "util/stat.h" 3 4
_Bool 
# 101 "util/stat.h"
        identifier;
 
# 102 "util/stat.h" 3 4
_Bool 
# 102 "util/stat.h"
        csv_output;
 
# 103 "util/stat.h" 3 4
_Bool 
# 103 "util/stat.h"
        interval_clear;
 
# 104 "util/stat.h" 3 4
_Bool 
# 104 "util/stat.h"
        metric_only;
 
# 105 "util/stat.h" 3 4
_Bool 
# 105 "util/stat.h"
        null_run;
 
# 106 "util/stat.h" 3 4
_Bool 
# 106 "util/stat.h"
        ru_display;
 
# 107 "util/stat.h" 3 4
_Bool 
# 107 "util/stat.h"
        big_num;
 
# 108 "util/stat.h" 3 4
_Bool 
# 108 "util/stat.h"
        no_merge;
 
# 109 "util/stat.h" 3 4
_Bool 
# 109 "util/stat.h"
        walltime_run_table;
 
# 110 "util/stat.h" 3 4
_Bool 
# 110 "util/stat.h"
        all_kernel;
 
# 111 "util/stat.h" 3 4
_Bool 
# 111 "util/stat.h"
        all_user;
 FILE *output;
 unsigned int interval;
 unsigned int timeout;
 unsigned int initial_delay;
 unsigned int unit_width;
 unsigned int metric_only_len;
 int times;
 int run_count;
 int print_free_counters_hint;
 int print_mixed_hw_group_error;
 struct runtime_stat *stats;
 int stats_num;
 const char *csv_sep;
 struct stats *walltime_nsecs_stats;
 struct rusage ru_data;
 struct perf_cpu_map *aggr_map;
 aggr_get_id_t aggr_get_id;
 struct perf_cpu_map *cpus_aggr_map;
 u64 *walltime_run;
 struct rblist metric_events;
};

void update_stats(struct stats *stats, u64 val);
double avg_stats(struct stats *stats);
double stddev_stats(struct stats *stats);
double rel_stddev_stats(double stddev, double avg);

static inline void init_stats(struct stats *stats)
{
 stats->n = 0.0;
 stats->mean = 0.0;
 stats->M2 = 0.0;
 stats->min = (u64) -1;
 stats->max = 0;
}

struct evsel;
struct evlist;

struct perf_aggr_thread_value {
 struct evsel *counter;
 int id;
 double uval;
 u64 val;
 u64 run;
 u64 ena;
};


# 160 "util/stat.h" 3 4
_Bool 
# 160 "util/stat.h"
    __perf_evsel_stat__is(struct evsel *evsel,
      enum perf_stat_evsel_id id);

#define perf_stat_evsel__is(evsel,id) __perf_evsel_stat__is(evsel, PERF_STAT_EVSEL_ID__ ## id)


extern struct runtime_stat rt_stat;
extern struct stats walltime_nsecs_stats;

typedef void (*print_metric_t)(struct perf_stat_config *config,
          void *ctx, const char *color, const char *unit,
          const char *fmt, double val);
typedef void (*new_line_t)(struct perf_stat_config *config, void *ctx);

void runtime_stat__init(struct runtime_stat *st);
void runtime_stat__exit(struct runtime_stat *st);
void perf_stat__init_shadow_stats(void);
void perf_stat__reset_shadow_stats(void);
void perf_stat__reset_shadow_per_stat(struct runtime_stat *st);
void perf_stat__update_shadow_stats(struct evsel *counter, u64 count,
        int cpu, struct runtime_stat *st);
struct perf_stat_output_ctx {
 void *ctx;
 print_metric_t print_metric;
 new_line_t new_line;
 
# 185 "util/stat.h" 3 4
_Bool 
# 185 "util/stat.h"
     force_header;
};

void perf_stat__print_shadow_stats(struct perf_stat_config *config,
       struct evsel *evsel,
       double avg, int cpu,
       struct perf_stat_output_ctx *out,
       struct rblist *metric_events,
       struct runtime_stat *st);
void perf_stat__collect_metric_expr(struct evlist *);

int perf_evlist__alloc_stats(struct evlist *evlist, 
# 196 "util/stat.h" 3 4
                                                   _Bool 
# 196 "util/stat.h"
                                                        alloc_raw);
void perf_evlist__free_stats(struct evlist *evlist);
void perf_evlist__reset_stats(struct evlist *evlist);
void perf_evlist__reset_prev_raw_counts(struct evlist *evlist);

int perf_stat_process_counter(struct perf_stat_config *config,
         struct evsel *counter);
struct perf_tool;
union perf_event;
struct perf_session;
struct target;

int perf_event__process_stat_event(struct perf_session *session,
       union perf_event *event);

size_t perf_event__fprintf_stat(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_stat_round(union perf_event *event, FILE *fp);
size_t perf_event__fprintf_stat_config(union perf_event *event, FILE *fp);

int create_perf_stat_counter(struct evsel *evsel,
        struct perf_stat_config *config,
        struct target *target,
        int cpu);
void
perf_evlist__print_counters(struct evlist *evlist,
       struct perf_stat_config *config,
       struct target *_target,
       struct timespec *ts,
       int argc, const char **argv);
# 50 "builtin-trace.c" 2
# 1 "util/tool.h" 1
# 51 "builtin-trace.c" 2
# 1 "util/util.h" 1


#define GIT_COMPAT_UTIL_H 

#define _BSD_SOURCE 1

#define _DEFAULT_SOURCE 1

# 1 "/usr/include/fcntl.h" 1 3 4
# 23 "/usr/include/fcntl.h" 3 4
#define _FCNTL_H 1











# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
#define __O_LARGEFILE 0




#define F_GETLK64 5
#define F_SETLK64 6
#define F_SETLKW64 7




# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;




    __off64_t l_start;
    __off64_t l_len;

    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/uio.h" 3 4
#define _BITS_UIO_H 1
# 39 "/usr/include/x86_64-linux-gnu/bits/uio.h" 3 4
#define UIO_MAXIOV 1024



struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



#define O_ACCMODE 0003
#define O_RDONLY 00
#define O_WRONLY 01
#define O_RDWR 02

#define O_CREAT 0100


#define O_EXCL 0200


#define O_NOCTTY 0400


#define O_TRUNC 01000


#define O_APPEND 02000


#define O_NONBLOCK 04000


#define O_NDELAY O_NONBLOCK


#define O_SYNC 04010000

#define O_FSYNC O_SYNC

#define O_ASYNC 020000






#define __O_DIRECTORY 0200000


#define __O_NOFOLLOW 0400000


#define __O_CLOEXEC 02000000


#define __O_DIRECT 040000


#define __O_NOATIME 01000000


#define __O_PATH 010000000


#define __O_DSYNC 010000


#define __O_TMPFILE (020000000 | __O_DIRECTORY)
# 109 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
#define F_GETLK F_GETLK64
#define F_SETLK F_SETLK64
#define F_SETLKW F_SETLKW64
# 132 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
#define F_OFD_GETLK 36
#define F_OFD_SETLK 37
#define F_OFD_SETLKW 38



#define O_LARGEFILE __O_LARGEFILE



#define O_DIRECTORY __O_DIRECTORY
#define O_NOFOLLOW __O_NOFOLLOW
#define O_CLOEXEC __O_CLOEXEC



#define O_DIRECT __O_DIRECT
#define O_NOATIME __O_NOATIME
#define O_PATH __O_PATH
#define O_TMPFILE __O_TMPFILE






#define O_DSYNC __O_DSYNC



#define O_RSYNC O_SYNC




#define F_DUPFD 0
#define F_GETFD 1
#define F_SETFD 2
#define F_GETFL 3
#define F_SETFL 4


#define __F_SETOWN 8
#define __F_GETOWN 9



#define F_SETOWN __F_SETOWN
#define F_GETOWN __F_GETOWN



#define __F_SETSIG 10
#define __F_GETSIG 11


#define __F_SETOWN_EX 15
#define __F_GETOWN_EX 16



#define F_SETSIG __F_SETSIG
#define F_GETSIG __F_GETSIG
#define F_SETOWN_EX __F_SETOWN_EX
#define F_GETOWN_EX __F_GETOWN_EX



#define F_SETLEASE 1024
#define F_GETLEASE 1025
#define F_NOTIFY 1026
#define F_SETPIPE_SZ 1031
#define F_GETPIPE_SZ 1032


#define F_DUPFD_CLOEXEC 1030




#define FD_CLOEXEC 1



#define F_RDLCK 0
#define F_WRLCK 1
#define F_UNLCK 2





#define F_EXLCK 4
#define F_SHLCK 8




#define LOCK_SH 1
#define LOCK_EX 2
#define LOCK_NB 4

#define LOCK_UN 8



#define LOCK_MAND 32
#define LOCK_READ 64
#define LOCK_WRITE 128
#define LOCK_RW 192




#define DN_ACCESS 0x00000001
#define DN_MODIFY 0x00000002
#define DN_CREATE 0x00000004
#define DN_DELETE 0x00000008
#define DN_RENAME 0x00000010
#define DN_ATTRIB 0x00000020
#define DN_MULTISHOT 0x80000000





enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };





#define FAPPEND O_APPEND
#define FFSYNC O_FSYNC
#define FASYNC O_ASYNC
#define FNONBLOCK O_NONBLOCK
#define FNDELAY O_NDELAY



#define __POSIX_FADV_DONTNEED 4
#define __POSIX_FADV_NOREUSE 5



#define POSIX_FADV_NORMAL 0
#define POSIX_FADV_RANDOM 1
#define POSIX_FADV_SEQUENTIAL 2
#define POSIX_FADV_WILLNEED 3
#define POSIX_FADV_DONTNEED __POSIX_FADV_DONTNEED
#define POSIX_FADV_NOREUSE __POSIX_FADV_NOREUSE





#define SYNC_FILE_RANGE_WAIT_BEFORE 1


#define SYNC_FILE_RANGE_WRITE 2


#define SYNC_FILE_RANGE_WAIT_AFTER 4




#define SPLICE_F_MOVE 1
#define SPLICE_F_NONBLOCK 2


#define SPLICE_F_MORE 4
#define SPLICE_F_GIFT 8



#define FALLOC_FL_KEEP_SIZE 1


#define FALLOC_FL_PUNCH_HOLE 2
#define FALLOC_FL_COLLAPSE_RANGE 8


#define FALLOC_FL_ZERO_RANGE 16




struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};


#define MAX_HANDLE_SZ 128




#define AT_FDCWD -100


#define AT_SYMLINK_NOFOLLOW 0x100
#define AT_REMOVEDIR 0x200

#define AT_SYMLINK_FOLLOW 0x400

#define AT_NO_AUTOMOUNT 0x800

#define AT_EMPTY_PATH 0x1000

#define AT_EACCESS 0x200








extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    __attribute__ ((__nothrow__ , __leaf__));






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern ssize_t vmsplice (int __fdout, const struct iovec *__iov,
    size_t __count, unsigned int __flags);





extern ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
         __off64_t *__offout, size_t __len,
         unsigned int __flags);





extern ssize_t tee (int __fdin, int __fdout, size_t __len,
      unsigned int __flags);
# 410 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate (int __fd, int __mode, __off64_t __offset, __off64_t __len) __asm__ ("" "fallocate64")

                     ;





extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) __attribute__ ((__nothrow__ , __leaf__));





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);




# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4




#define __OPEN_NEEDS_MODE(oflag) (((oflag) & O_CREAT) != 0 || ((oflag) & __O_TMPFILE) == __O_TMPFILE)
# 75 "/usr/include/fcntl.h" 3 4
#define __need_timespec 



# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
#define _BITS_STAT_H 1
# 37 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
#define _STAT_VER_KERNEL 0
#define _STAT_VER_LINUX 1


#define _MKNOD_VER_LINUX 0


#define _STAT_VER _STAT_VER_LINUX

struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
#define st_atime st_atim.tv_sec
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };



#define _STATBUF_ST_BLKSIZE 
#define _STATBUF_ST_RDEV 

#define _STATBUF_ST_NSEC 



#define __S_IFMT 0170000


#define __S_IFDIR 0040000
#define __S_IFCHR 0020000
#define __S_IFBLK 0060000
#define __S_IFREG 0100000
#define __S_IFIFO 0010000
#define __S_IFLNK 0120000
#define __S_IFSOCK 0140000



#define __S_TYPEISMQ(buf) ((buf)->st_mode - (buf)->st_mode)
#define __S_TYPEISSEM(buf) ((buf)->st_mode - (buf)->st_mode)
#define __S_TYPEISSHM(buf) ((buf)->st_mode - (buf)->st_mode)



#define __S_ISUID 04000
#define __S_ISGID 02000
#define __S_ISVTX 01000
#define __S_IREAD 0400
#define __S_IWRITE 0200
#define __S_IEXEC 0100


#define UTIME_NOW ((1l << 30) - 1l)
#define UTIME_OMIT ((1l << 30) - 2l)
# 80 "/usr/include/fcntl.h" 2 3 4

#define S_IFMT __S_IFMT
#define S_IFDIR __S_IFDIR
#define S_IFCHR __S_IFCHR
#define S_IFBLK __S_IFBLK
#define S_IFREG __S_IFREG

#define S_IFIFO __S_IFIFO


#define S_IFLNK __S_IFLNK


#define S_IFSOCK __S_IFSOCK




#define S_ISUID __S_ISUID
#define S_ISGID __S_ISGID



#define S_ISVTX __S_ISVTX


#define S_IRUSR __S_IREAD
#define S_IWUSR __S_IWRITE
#define S_IXUSR __S_IEXEC

#define S_IRWXU (__S_IREAD|__S_IWRITE|__S_IEXEC)

#define S_IRGRP (S_IRUSR >> 3)
#define S_IWGRP (S_IWUSR >> 3)
#define S_IXGRP (S_IXUSR >> 3)

#define S_IRWXG (S_IRWXU >> 3)

#define S_IROTH (S_IRGRP >> 3)
#define S_IWOTH (S_IWGRP >> 3)
#define S_IXOTH (S_IXGRP >> 3)

#define S_IRWXO (S_IRWXG >> 3)
# 138 "/usr/include/fcntl.h" 3 4
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2







extern int fcntl (int __fd, int __cmd, ...);
# 161 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __asm__ ("" "open64")
     __attribute__ ((__nonnull__ (1)));





extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 186 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...) __asm__ ("" "openat64")
                    __attribute__ ((__nonnull__ (2)));





extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 207 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __asm__ ("" "creat64")
                  __attribute__ ((__nonnull__ (1)));





extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 254 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off64_t __offset, __off64_t __len, int __advise) __asm__ ("" "posix_fadvise64") __attribute__ ((__nothrow__ , __leaf__))

                      ;





extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 275 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off64_t __offset, __off64_t __len) __asm__ ("" "posix_fallocate64")

                           ;





extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern int __open_2 (const char *__path, int __oflag) __asm__ ("" "__open64_2")
                     __attribute__ ((__nonnull__ (1)));
extern int __open_alias (const char *__path, int __oflag, ...) __asm__ ("" "open64")
                 __attribute__ ((__nonnull__ (1)));

extern void __open_too_many_args (void) __attribute__((__error__ ("open can be called either with 2 or 3 arguments, not more")))
                                                                  ;
extern void __open_missing_mode (void) __attribute__((__error__ ("open with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open_missing_mode ();
   return __open_2 (__path, __oflag);
 }
      return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open_2 (__path, __oflag);

  return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
}



extern int __open64_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open64_alias (const char *__path, int __oflag, ...) __asm__ ("" "open64")
                   __attribute__ ((__nonnull__ (1)));
extern void __open64_too_many_args (void) __attribute__((__error__ ("open64 can be called either with 2 or 3 arguments, not more")))
                                                                    ;
extern void __open64_missing_mode (void) __attribute__((__error__ ("open64 with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open64 (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open64_missing_mode ();
   return __open64_2 (__path, __oflag);
 }
      return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open64_2 (__path, __oflag);

  return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
}
# 104 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern int __openat_2 (int __fd, const char *__path, int __oflag) __asm__ ("" "__openat64_2")

     __attribute__ ((__nonnull__ (2)));
extern int __openat_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat64")

     __attribute__ ((__nonnull__ (2)));

extern void __openat_too_many_args (void) __attribute__((__error__ ("openat can be called either with 3 or 4 arguments, not more")))
                                                                    ;
extern void __openat_missing_mode (void) __attribute__((__error__ ("openat with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                             ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat_missing_mode ();
   return __openat_2 (__fd, __path, __oflag);
 }
      return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat_2 (__fd, __path, __oflag);

  return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}



extern int __openat64_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat64_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat64")

     __attribute__ ((__nonnull__ (2)));
extern void __openat64_too_many_args (void) __attribute__((__error__ ("openat64 can be called either with 3 or 4 arguments, not more")))
                                                                      ;
extern void __openat64_missing_mode (void) __attribute__((__error__ ("openat64 with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                               ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat64 (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat64_missing_mode ();
   return __openat64_2 (__fd, __path, __oflag);
 }
      return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat64_2 (__fd, __path, __oflag);

  return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}
# 292 "/usr/include/fcntl.h" 2 3 4



# 10 "util/util.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 12 "util/util.h" 2





# 16 "util/util.h"
void usage(const char *err) __attribute__((noreturn));
void die(const char *err, ...) __attribute__((noreturn)) __attribute__((format(printf, 1, 2)));

struct dirent;
struct strlist;

int mkdir_p(char *path, mode_t mode);
int rm_rf(const char *path);
int rm_rf_perf_data(const char *path);
struct strlist *lsdir(const char *name, 
# 25 "util/util.h" 3 4
                                       _Bool 
# 25 "util/util.h"
                                            (*filter)(const char *, struct dirent *));

# 26 "util/util.h" 3 4
_Bool 
# 26 "util/util.h"
    lsdir_no_dot_filter(const char *name, struct dirent *d);

size_t hex_width(u64 v);

int sysctl__max_stack(void);

int fetch_kernel_version(unsigned int *puint,
    char *str, size_t str_sz);
#define KVER_VERSION(x) (((x) >> 16) & 0xff)
#define KVER_PATCHLEVEL(x) (((x) >> 8) & 0xff)
#define KVER_SUBLEVEL(x) ((x) & 0xff)
#define KVER_FMT "%d.%d.%d"
#define KVER_PARAM(x) KVER_VERSION(x), KVER_PATCHLEVEL(x), KVER_SUBLEVEL(x)

const char *perf_tip(const char *dirpath);





extern 
# 46 "util/util.h" 3 4
      _Bool 
# 46 "util/util.h"
           perf_singlethreaded;

void perf_set_singlethreaded(void);
void perf_set_multithreaded(void);

char *perf_exe(char *buf, int len);
# 52 "builtin-trace.c" 2
# 1 "trace/beauty/beauty.h" 1


#define _PERF_TRACE_BEAUTY_H 






struct strarray {
 u64 offset;
 int nr_entries;
 const char *prefix;
 const char **entries;
};

#define DEFINE_STRARRAY(array,_prefix) struct strarray strarray__ ##array = { .nr_entries = ARRAY_SIZE(array), .entries = array, .prefix = _prefix, }





#define DEFINE_STRARRAY_OFFSET(array,_prefix,off) struct strarray strarray__ ##array = { .offset = off, .nr_entries = ARRAY_SIZE(array), .entries = array, .prefix = _prefix, }






size_t strarray__scnprintf(struct strarray *sa, char *bf, size_t size, const char *intfmt, 
# 30 "trace/beauty/beauty.h" 3 4
                                                                                          _Bool 
# 30 "trace/beauty/beauty.h"
                                                                                               show_prefix, int val);
size_t strarray__scnprintf_suffix(struct strarray *sa, char *bf, size_t size, const char *intfmt, 
# 31 "trace/beauty/beauty.h" 3 4
                                                                                                 _Bool 
# 31 "trace/beauty/beauty.h"
                                                                                                      show_suffix, int val);
size_t strarray__scnprintf_flags(struct strarray *sa, char *bf, size_t size, 
# 32 "trace/beauty/beauty.h" 3 4
                                                                            _Bool 
# 32 "trace/beauty/beauty.h"
                                                                                 show_prefix, unsigned long flags);


# 34 "trace/beauty/beauty.h" 3 4
_Bool 
# 34 "trace/beauty/beauty.h"
    strarray__strtoul(struct strarray *sa, char *bf, size_t size, u64 *ret);

# 35 "trace/beauty/beauty.h" 3 4
_Bool 
# 35 "trace/beauty/beauty.h"
    strarray__strtoul_flags(struct strarray *sa, char *bf, size_t size, u64 *ret);

struct trace;
struct thread;

struct file {
 char *pathname;
 int dev_maj;
};

struct file *thread__files_entry(struct thread *thread, int fd);

struct strarrays {
 int nr_entries;
 struct strarray **entries;
};

#define DEFINE_STRARRAYS(array) struct strarrays strarrays__ ##array = { .nr_entries = ARRAY_SIZE(array), .entries = array, }




size_t strarrays__scnprintf(struct strarrays *sas, char *bf, size_t size, const char *intfmt, 
# 57 "trace/beauty/beauty.h" 3 4
                                                                                             _Bool 
# 57 "trace/beauty/beauty.h"
                                                                                                  show_prefix, int val);


# 59 "trace/beauty/beauty.h" 3 4
_Bool 
# 59 "trace/beauty/beauty.h"
    strarrays__strtoul(struct strarrays *sas, char *bf, size_t size, u64 *ret);

size_t pid__scnprintf_fd(struct trace *trace, pid_t pid, int fd, char *bf, size_t size);

extern struct strarray strarray__socket_families;
# 82 "trace/beauty/beauty.h"
struct augmented_arg {
 int size;
 int int_arg;
 u64 value[];
};

struct syscall_arg_fmt;
# 104 "trace/beauty/beauty.h"
struct syscall_arg {
 unsigned long val;
 unsigned char *args;
 struct syscall_arg_fmt *fmt;
 struct {
  struct augmented_arg *args;
  int size;
 } augmented;
 struct thread *thread;
 struct trace *trace;
 void *parm;
 u16 len;
 u8 idx;
 u8 mask;
 
# 118 "trace/beauty/beauty.h" 3 4
_Bool 
# 118 "trace/beauty/beauty.h"
           show_string_prefix;
};

unsigned long syscall_arg__val(struct syscall_arg *arg, u8 idx);

size_t syscall_arg__scnprintf_strarray_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_STRARRAY_FLAGS syscall_arg__scnprintf_strarray_flags


# 126 "trace/beauty/beauty.h" 3 4
_Bool 
# 126 "trace/beauty/beauty.h"
    syscall_arg__strtoul_strarray(char *bf, size_t size, struct syscall_arg *arg, u64 *ret);
#define STUL_STRARRAY syscall_arg__strtoul_strarray


# 129 "trace/beauty/beauty.h" 3 4
_Bool 
# 129 "trace/beauty/beauty.h"
    syscall_arg__strtoul_strarray_flags(char *bf, size_t size, struct syscall_arg *arg, u64 *ret);
#define STUL_STRARRAY_FLAGS syscall_arg__strtoul_strarray_flags


# 132 "trace/beauty/beauty.h" 3 4
_Bool 
# 132 "trace/beauty/beauty.h"
    syscall_arg__strtoul_strarrays(char *bf, size_t size, struct syscall_arg *arg, u64 *ret);
#define STUL_STRARRAYS syscall_arg__strtoul_strarrays

size_t syscall_arg__scnprintf_x86_irq_vectors(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_X86_IRQ_VECTORS syscall_arg__scnprintf_x86_irq_vectors


# 138 "trace/beauty/beauty.h" 3 4
_Bool 
# 138 "trace/beauty/beauty.h"
    syscall_arg__strtoul_x86_irq_vectors(char *bf, size_t size, struct syscall_arg *arg, u64 *ret);
#define STUL_X86_IRQ_VECTORS syscall_arg__strtoul_x86_irq_vectors

size_t syscall_arg__scnprintf_x86_MSR(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_X86_MSR syscall_arg__scnprintf_x86_MSR


# 144 "trace/beauty/beauty.h" 3 4
_Bool 
# 144 "trace/beauty/beauty.h"
    syscall_arg__strtoul_x86_MSR(char *bf, size_t size, struct syscall_arg *arg, u64 *ret);
#define STUL_X86_MSR syscall_arg__strtoul_x86_MSR

size_t syscall_arg__scnprintf_strarrays(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_STRARRAYS syscall_arg__scnprintf_strarrays

size_t syscall_arg__scnprintf_fd(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_FD syscall_arg__scnprintf_fd

size_t syscall_arg__scnprintf_hex(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_HEX syscall_arg__scnprintf_hex

size_t syscall_arg__scnprintf_ptr(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_PTR syscall_arg__scnprintf_ptr

size_t syscall_arg__scnprintf_int(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_INT syscall_arg__scnprintf_int

size_t syscall_arg__scnprintf_long(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_LONG syscall_arg__scnprintf_long

size_t syscall_arg__scnprintf_pid(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_PID syscall_arg__scnprintf_pid

size_t syscall_arg__scnprintf_clone_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_CLONE_FLAGS syscall_arg__scnprintf_clone_flags

size_t syscall_arg__scnprintf_fcntl_cmd(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_FCNTL_CMD syscall_arg__scnprintf_fcntl_cmd

size_t syscall_arg__scnprintf_fcntl_arg(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_FCNTL_ARG syscall_arg__scnprintf_fcntl_arg

size_t syscall_arg__scnprintf_flock(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_FLOCK syscall_arg__scnprintf_flock

size_t syscall_arg__scnprintf_fsmount_attr_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_FSMOUNT_ATTR_FLAGS syscall_arg__scnprintf_fsmount_attr_flags

size_t syscall_arg__scnprintf_fspick_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_FSPICK_FLAGS syscall_arg__scnprintf_fspick_flags

size_t syscall_arg__scnprintf_ioctl_cmd(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_IOCTL_CMD syscall_arg__scnprintf_ioctl_cmd

size_t syscall_arg__scnprintf_kcmp_type(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_KCMP_TYPE syscall_arg__scnprintf_kcmp_type

size_t syscall_arg__scnprintf_kcmp_idx(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_KCMP_IDX syscall_arg__scnprintf_kcmp_idx

unsigned long syscall_arg__mask_val_mount_flags(struct syscall_arg *arg, unsigned long flags);
#define SCAMV_MOUNT_FLAGS syscall_arg__mask_val_mount_flags

size_t syscall_arg__scnprintf_mount_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_MOUNT_FLAGS syscall_arg__scnprintf_mount_flags

size_t syscall_arg__scnprintf_move_mount_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_MOVE_MOUNT_FLAGS syscall_arg__scnprintf_move_mount_flags

size_t syscall_arg__scnprintf_pkey_alloc_access_rights(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_PKEY_ALLOC_ACCESS_RIGHTS syscall_arg__scnprintf_pkey_alloc_access_rights

size_t syscall_arg__scnprintf_open_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_OPEN_FLAGS syscall_arg__scnprintf_open_flags

size_t syscall_arg__scnprintf_x86_arch_prctl_code(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_X86_ARCH_PRCTL_CODE syscall_arg__scnprintf_x86_arch_prctl_code

size_t syscall_arg__scnprintf_prctl_option(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_PRCTL_OPTION syscall_arg__scnprintf_prctl_option

size_t syscall_arg__scnprintf_prctl_arg2(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_PRCTL_ARG2 syscall_arg__scnprintf_prctl_arg2

size_t syscall_arg__scnprintf_prctl_arg3(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_PRCTL_ARG3 syscall_arg__scnprintf_prctl_arg3

size_t syscall_arg__scnprintf_renameat2_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_RENAMEAT2_FLAGS syscall_arg__scnprintf_renameat2_flags

size_t syscall_arg__scnprintf_sockaddr(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_SOCKADDR syscall_arg__scnprintf_sockaddr

size_t syscall_arg__scnprintf_socket_protocol(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_SK_PROTO syscall_arg__scnprintf_socket_protocol

size_t syscall_arg__scnprintf_statx_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_STATX_FLAGS syscall_arg__scnprintf_statx_flags

size_t syscall_arg__scnprintf_statx_mask(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_STATX_MASK syscall_arg__scnprintf_statx_mask

size_t syscall_arg__scnprintf_sync_file_range_flags(char *bf, size_t size, struct syscall_arg *arg);
#define SCA_SYNC_FILE_RANGE_FLAGS syscall_arg__scnprintf_sync_file_range_flags

size_t open__scnprintf_flags(unsigned long flags, char *bf, size_t size, 
# 240 "trace/beauty/beauty.h" 3 4
                                                                        _Bool 
# 240 "trace/beauty/beauty.h"
                                                                             show_prefix);

void syscall_arg__set_ret_scnprintf(struct syscall_arg *arg,
        size_t (*ret_scnprintf)(char *bf, size_t size, struct syscall_arg *arg));

const char *arch_syscalls__strerrno(const char *arch, int err);
# 53 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/trace-event.h" 1
# 54 "builtin-trace.c" 2
# 1 "util/parse-events.h" 1
# 55 "builtin-trace.c" 2
# 1 "util/bpf-loader.h" 1






#define __BPF_LOADER_H 


# 1 "/home/jmikedupont2/linux/tools/include/linux/err.h" 1


#define __TOOLS_LINUX_ERR_H 




# 1 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/errno.h" 1
# 9 "/home/jmikedupont2/linux/tools/include/linux/err.h" 2
# 31 "/home/jmikedupont2/linux/tools/include/linux/err.h"
#define MAX_ERRNO 4095

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * ERR_PTR(long error_)
{
 return (void *) error_;
}

static inline long PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline 
# 45 "/home/jmikedupont2/linux/tools/include/linux/err.h" 3 4
             _Bool 
# 45 "/home/jmikedupont2/linux/tools/include/linux/err.h"
                               IS_ERR( const void *ptr)
{
 return __builtin_expect(!!(((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline 
# 50 "/home/jmikedupont2/linux/tools/include/linux/err.h" 3 4
             _Bool 
# 50 "/home/jmikedupont2/linux/tools/include/linux/err.h"
                               IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!(((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline int PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 70 "/home/jmikedupont2/linux/tools/include/linux/err.h"
static inline void * ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}
# 11 "util/bpf-loader.h" 2
# 1 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 1
# 11 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
#define __LIBBPF_LIBBPF_H 
# 28 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
enum libbpf_errno {
 __LIBBPF_ERRNO__START = 4000,


 LIBBPF_ERRNO__LIBELF = __LIBBPF_ERRNO__START,
 LIBBPF_ERRNO__FORMAT,
 LIBBPF_ERRNO__KVERSION,
 LIBBPF_ERRNO__ENDIAN,
 LIBBPF_ERRNO__INTERNAL,
 LIBBPF_ERRNO__RELOC,
 LIBBPF_ERRNO__LOAD,
 LIBBPF_ERRNO__VERIFY,
 LIBBPF_ERRNO__PROG2BIG,
 LIBBPF_ERRNO__KVER,
 LIBBPF_ERRNO__PROGTYPE,
 LIBBPF_ERRNO__WRNGPID,
 LIBBPF_ERRNO__INVSEQ,
 LIBBPF_ERRNO__NLPARSE,
 __LIBBPF_ERRNO__END,
};

__attribute__((visibility("default"))) int libbpf_strerror(int err, char *buf, size_t size);

enum libbpf_print_level {
        LIBBPF_WARN,
        LIBBPF_INFO,
        LIBBPF_DEBUG,
};

typedef int (*libbpf_print_fn_t)(enum libbpf_print_level level,
     const char *, va_list ap);

__attribute__((visibility("default"))) libbpf_print_fn_t libbpf_set_print(libbpf_print_fn_t fn);


struct bpf_object;

struct bpf_object_open_attr {
 const char *file;
 enum bpf_prog_type prog_type;
};
# 83 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
#define DECLARE_LIBBPF_OPTS(TYPE,NAME,...) struct TYPE NAME = ({ memset(&NAME, 0, sizeof(struct TYPE)); (struct TYPE) { .sz = sizeof(struct TYPE), __VA_ARGS__ }; })
# 92 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
struct bpf_object_open_opts {

 size_t sz;






 const char *object_name;

 
# 103 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
_Bool 
# 103 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
     relaxed_maps;

 
# 105 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
_Bool 
# 105 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
     relaxed_core_relocs;




 const char *pin_root_path;
 __u32 attach_prog_fd;
};
#define bpf_object_open_opts__last_field attach_prog_fd

__attribute__((visibility("default"))) struct bpf_object *bpf_object__open(const char *path);
__attribute__((visibility("default"))) struct bpf_object *
bpf_object__open_file(const char *path, struct bpf_object_open_opts *opts);
__attribute__((visibility("default"))) struct bpf_object *
bpf_object__open_mem(const void *obj_buf, size_t obj_buf_sz,
       struct bpf_object_open_opts *opts);


__attribute__((visibility("default"))) struct bpf_object *
bpf_object__open_buffer(const void *obj_buf, size_t obj_buf_sz,
   const char *name);
__attribute__((visibility("default"))) struct bpf_object *
bpf_object__open_xattr(struct bpf_object_open_attr *attr);

int bpf_object__section_size(const struct bpf_object *obj, const char *name,
        __u32 *size);
int bpf_object__variable_offset(const struct bpf_object *obj, const char *name,
    __u32 *off);

enum libbpf_pin_type {
 LIBBPF_PIN_NONE,

 LIBBPF_PIN_BY_NAME,
};





__attribute__((visibility("default"))) int bpf_object__pin_maps(struct bpf_object *obj, const char *path);
__attribute__((visibility("default"))) int bpf_object__unpin_maps(struct bpf_object *obj,
          const char *path);
__attribute__((visibility("default"))) int bpf_object__pin_programs(struct bpf_object *obj,
     const char *path);
__attribute__((visibility("default"))) int bpf_object__unpin_programs(struct bpf_object *obj,
       const char *path);
__attribute__((visibility("default"))) int bpf_object__pin(struct bpf_object *object, const char *path);
__attribute__((visibility("default"))) void bpf_object__close(struct bpf_object *object);

struct bpf_object_load_attr {
 struct bpf_object *obj;
 int log_level;
 const char *target_btf_path;
};


__attribute__((visibility("default"))) int bpf_object__load(struct bpf_object *obj);
__attribute__((visibility("default"))) int bpf_object__load_xattr(struct bpf_object_load_attr *attr);
__attribute__((visibility("default"))) int bpf_object__unload(struct bpf_object *obj);
__attribute__((visibility("default"))) const char *bpf_object__name(const struct bpf_object *obj);
__attribute__((visibility("default"))) unsigned int bpf_object__kversion(const struct bpf_object *obj);

struct btf;
__attribute__((visibility("default"))) struct btf *bpf_object__btf(const struct bpf_object *obj);
__attribute__((visibility("default"))) int bpf_object__btf_fd(const struct bpf_object *obj);

__attribute__((visibility("default"))) struct bpf_program *
bpf_object__find_program_by_title(const struct bpf_object *obj,
      const char *title);

__attribute__((visibility("default"))) struct bpf_object *bpf_object__next(struct bpf_object *prev);
#define bpf_object__for_each_safe(pos,tmp) for ((pos) = bpf_object__next(NULL), (tmp) = bpf_object__next(pos); (pos) != NULL; (pos) = (tmp), (tmp) = bpf_object__next(tmp))





typedef void (*bpf_object_clear_priv_t)(struct bpf_object *, void *);
__attribute__((visibility("default"))) int bpf_object__set_priv(struct bpf_object *obj, void *priv,
        bpf_object_clear_priv_t clear_priv);
__attribute__((visibility("default"))) void *bpf_object__priv(const struct bpf_object *prog);

__attribute__((visibility("default"))) int
libbpf_prog_type_by_name(const char *name, enum bpf_prog_type *prog_type,
    enum bpf_attach_type *expected_attach_type);
__attribute__((visibility("default"))) int libbpf_attach_type_by_name(const char *name,
       enum bpf_attach_type *attach_type);
__attribute__((visibility("default"))) int libbpf_find_vmlinux_btf_id(const char *name,
       enum bpf_attach_type attach_type);


struct bpf_program;
__attribute__((visibility("default"))) struct bpf_program *bpf_program__next(struct bpf_program *prog,
       const struct bpf_object *obj);

#define bpf_object__for_each_program(pos,obj) for ((pos) = bpf_program__next(NULL, (obj)); (pos) != NULL; (pos) = bpf_program__next((pos), (obj)))




__attribute__((visibility("default"))) struct bpf_program *bpf_program__prev(struct bpf_program *prog,
       const struct bpf_object *obj);

typedef void (*bpf_program_clear_priv_t)(struct bpf_program *, void *);

__attribute__((visibility("default"))) int bpf_program__set_priv(struct bpf_program *prog, void *priv,
         bpf_program_clear_priv_t clear_priv);

__attribute__((visibility("default"))) void *bpf_program__priv(const struct bpf_program *prog);
__attribute__((visibility("default"))) void bpf_program__set_ifindex(struct bpf_program *prog,
      __u32 ifindex);

__attribute__((visibility("default"))) const char *bpf_program__title(const struct bpf_program *prog,
       
# 218 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
      _Bool 
# 218 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
           needs_copy);


__attribute__((visibility("default"))) size_t bpf_program__size(const struct bpf_program *prog);

__attribute__((visibility("default"))) int bpf_program__load(struct bpf_program *prog, char *license,
     __u32 kern_version);
__attribute__((visibility("default"))) int bpf_program__fd(const struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__pin_instance(struct bpf_program *prog,
      const char *path,
      int instance);
__attribute__((visibility("default"))) int bpf_program__unpin_instance(struct bpf_program *prog,
        const char *path,
        int instance);
__attribute__((visibility("default"))) int bpf_program__pin(struct bpf_program *prog, const char *path);
__attribute__((visibility("default"))) int bpf_program__unpin(struct bpf_program *prog, const char *path);
__attribute__((visibility("default"))) void bpf_program__unload(struct bpf_program *prog);

struct bpf_link;

__attribute__((visibility("default"))) int bpf_link__destroy(struct bpf_link *link);

__attribute__((visibility("default"))) struct bpf_link *
bpf_program__attach_perf_event(struct bpf_program *prog, int pfd);
__attribute__((visibility("default"))) struct bpf_link *
bpf_program__attach_kprobe(struct bpf_program *prog, 
# 243 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
                                                    _Bool 
# 243 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
                                                         retprobe,
      const char *func_name);
__attribute__((visibility("default"))) struct bpf_link *
bpf_program__attach_uprobe(struct bpf_program *prog, 
# 246 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
                                                    _Bool 
# 246 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
                                                         retprobe,
      pid_t pid, const char *binary_path,
      size_t func_offset);
__attribute__((visibility("default"))) struct bpf_link *
bpf_program__attach_tracepoint(struct bpf_program *prog,
          const char *tp_category,
          const char *tp_name);
__attribute__((visibility("default"))) struct bpf_link *
bpf_program__attach_raw_tracepoint(struct bpf_program *prog,
       const char *tp_name);

__attribute__((visibility("default"))) struct bpf_link *
bpf_program__attach_trace(struct bpf_program *prog);
struct bpf_insn;
# 290 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
struct bpf_prog_prep_result {




 struct bpf_insn *new_insn_ptr;
 int new_insn_cnt;


 int *pfd;
};
# 314 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
typedef int (*bpf_program_prep_t)(struct bpf_program *prog, int n,
      struct bpf_insn *insns, int insns_cnt,
      struct bpf_prog_prep_result *res);

__attribute__((visibility("default"))) int bpf_program__set_prep(struct bpf_program *prog, int nr_instance,
         bpf_program_prep_t prep);

__attribute__((visibility("default"))) int bpf_program__nth_fd(const struct bpf_program *prog, int n);




__attribute__((visibility("default"))) int bpf_program__set_socket_filter(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_tracepoint(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_raw_tracepoint(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_kprobe(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_sched_cls(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_sched_act(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_xdp(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_perf_event(struct bpf_program *prog);
__attribute__((visibility("default"))) int bpf_program__set_tracing(struct bpf_program *prog);

__attribute__((visibility("default"))) enum bpf_prog_type bpf_program__get_type(struct bpf_program *prog);
__attribute__((visibility("default"))) void bpf_program__set_type(struct bpf_program *prog,
          enum bpf_prog_type type);

__attribute__((visibility("default"))) enum bpf_attach_type
bpf_program__get_expected_attach_type(struct bpf_program *prog);
__attribute__((visibility("default"))) void
bpf_program__set_expected_attach_type(struct bpf_program *prog,
          enum bpf_attach_type type);

__attribute__((visibility("default"))) 
# 346 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 346 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_socket_filter(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 347 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 347 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_tracepoint(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 348 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 348 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_raw_tracepoint(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 349 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 349 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_kprobe(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 350 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 350 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_sched_cls(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 351 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 351 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_sched_act(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 352 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 352 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_xdp(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 353 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 353 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_perf_event(const struct bpf_program *prog);
__attribute__((visibility("default"))) 
# 354 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 354 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_program__is_tracing(const struct bpf_program *prog);







struct bpf_map_def {
 unsigned int type;
 unsigned int key_size;
 unsigned int value_size;
 unsigned int max_entries;
 unsigned int map_flags;
};





struct bpf_map;
__attribute__((visibility("default"))) struct bpf_map *
bpf_object__find_map_by_name(const struct bpf_object *obj, const char *name);

__attribute__((visibility("default"))) int
bpf_object__find_map_fd_by_name(const struct bpf_object *obj, const char *name);





__attribute__((visibility("default"))) struct bpf_map *
bpf_object__find_map_by_offset(struct bpf_object *obj, size_t offset);

__attribute__((visibility("default"))) struct bpf_map *
bpf_map__next(const struct bpf_map *map, const struct bpf_object *obj);
#define bpf_object__for_each_map(pos,obj) for ((pos) = bpf_map__next(NULL, (obj)); (pos) != NULL; (pos) = bpf_map__next((pos), (obj)))



#define bpf_map__for_each bpf_object__for_each_map

__attribute__((visibility("default"))) struct bpf_map *
bpf_map__prev(const struct bpf_map *map, const struct bpf_object *obj);

__attribute__((visibility("default"))) int bpf_map__fd(const struct bpf_map *map);
__attribute__((visibility("default"))) const struct bpf_map_def *bpf_map__def(const struct bpf_map *map);
__attribute__((visibility("default"))) const char *bpf_map__name(const struct bpf_map *map);
__attribute__((visibility("default"))) __u32 bpf_map__btf_key_type_id(const struct bpf_map *map);
__attribute__((visibility("default"))) __u32 bpf_map__btf_value_type_id(const struct bpf_map *map);

typedef void (*bpf_map_clear_priv_t)(struct bpf_map *, void *);
__attribute__((visibility("default"))) int bpf_map__set_priv(struct bpf_map *map, void *priv,
     bpf_map_clear_priv_t clear_priv);
__attribute__((visibility("default"))) void *bpf_map__priv(const struct bpf_map *map);
__attribute__((visibility("default"))) int bpf_map__reuse_fd(struct bpf_map *map, int fd);
__attribute__((visibility("default"))) int bpf_map__resize(struct bpf_map *map, __u32 max_entries);
__attribute__((visibility("default"))) 
# 411 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 411 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_map__is_offload_neutral(const struct bpf_map *map);
__attribute__((visibility("default"))) 
# 412 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 412 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_map__is_internal(const struct bpf_map *map);
__attribute__((visibility("default"))) void bpf_map__set_ifindex(struct bpf_map *map, __u32 ifindex);
__attribute__((visibility("default"))) int bpf_map__set_pin_path(struct bpf_map *map, const char *path);
__attribute__((visibility("default"))) const char *bpf_map__get_pin_path(const struct bpf_map *map);
__attribute__((visibility("default"))) 
# 416 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 416 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_map__is_pinned(const struct bpf_map *map);
__attribute__((visibility("default"))) int bpf_map__pin(struct bpf_map *map, const char *path);
__attribute__((visibility("default"))) int bpf_map__unpin(struct bpf_map *map, const char *path);

__attribute__((visibility("default"))) int bpf_map__set_inner_map_fd(struct bpf_map *map, int fd);

__attribute__((visibility("default"))) long libbpf_get_error(const void *ptr);

struct bpf_prog_load_attr {
 const char *file;
 enum bpf_prog_type prog_type;
 enum bpf_attach_type expected_attach_type;
 int ifindex;
 int log_level;
 int prog_flags;
};

__attribute__((visibility("default"))) int bpf_prog_load_xattr(const struct bpf_prog_load_attr *attr,
       struct bpf_object **pobj, int *prog_fd);
__attribute__((visibility("default"))) int bpf_prog_load(const char *file, enum bpf_prog_type type,
        struct bpf_object **pobj, int *prog_fd);

struct xdp_link_info {
 __u32 prog_id;
 __u32 drv_prog_id;
 __u32 hw_prog_id;
 __u32 skb_prog_id;
 __u8 attach_mode;
};

__attribute__((visibility("default"))) int bpf_set_link_xdp_fd(int ifindex, int fd, __u32 flags);
__attribute__((visibility("default"))) int bpf_get_link_xdp_id(int ifindex, __u32 *prog_id, __u32 flags);
__attribute__((visibility("default"))) int bpf_get_link_xdp_info(int ifindex, struct xdp_link_info *info,
         size_t info_size, __u32 flags);

struct perf_buffer;

typedef void (*perf_buffer_sample_fn)(void *ctx, int cpu,
          void *data, __u32 size);
typedef void (*perf_buffer_lost_fn)(void *ctx, int cpu, __u64 cnt);


struct perf_buffer_opts {

 perf_buffer_sample_fn sample_cb;

 perf_buffer_lost_fn lost_cb;

 void *ctx;
};

__attribute__((visibility("default"))) struct perf_buffer *
perf_buffer__new(int map_fd, size_t page_cnt,
   const struct perf_buffer_opts *opts);

enum bpf_perf_event_ret {
 LIBBPF_PERF_EVENT_DONE = 0,
 LIBBPF_PERF_EVENT_ERROR = -1,
 LIBBPF_PERF_EVENT_CONT = -2,
};

struct perf_event_header;

typedef enum bpf_perf_event_ret
(*perf_buffer_event_fn)(void *ctx, int cpu, struct perf_event_header *event);


struct perf_buffer_raw_opts {

 struct perf_event_attr *attr;

 perf_buffer_event_fn event_cb;

 void *ctx;



 int cpu_cnt;

 int *cpus;

 int *map_keys;
};

__attribute__((visibility("default"))) struct perf_buffer *
perf_buffer__new_raw(int map_fd, size_t page_cnt,
       const struct perf_buffer_raw_opts *opts);

__attribute__((visibility("default"))) void perf_buffer__free(struct perf_buffer *pb);
__attribute__((visibility("default"))) int perf_buffer__poll(struct perf_buffer *pb, int timeout_ms);

typedef enum bpf_perf_event_ret
 (*bpf_perf_event_print_t)(struct perf_event_header *hdr,
      void *private_data);
__attribute__((visibility("default"))) enum bpf_perf_event_ret
bpf_perf_event_read_simple(void *mmap_mem, size_t mmap_size, size_t page_size,
      void **copy_mem, size_t *copy_size,
      bpf_perf_event_print_t fn, void *private_data);

struct nlattr;
typedef int (*libbpf_dump_nlmsg_t)(void *cookie, void *msg, struct nlattr **tb);
int libbpf_netlink_open(unsigned int *nl_pid);
int libbpf_nl_get_link(int sock, unsigned int nl_pid,
         libbpf_dump_nlmsg_t dump_link_nlmsg, void *cookie);
int libbpf_nl_get_class(int sock, unsigned int nl_pid, int ifindex,
   libbpf_dump_nlmsg_t dump_class_nlmsg, void *cookie);
int libbpf_nl_get_qdisc(int sock, unsigned int nl_pid, int ifindex,
   libbpf_dump_nlmsg_t dump_qdisc_nlmsg, void *cookie);
int libbpf_nl_get_filter(int sock, unsigned int nl_pid, int ifindex, int handle,
    libbpf_dump_nlmsg_t dump_filter_nlmsg, void *cookie);

struct bpf_prog_linfo;
struct bpf_prog_info;

__attribute__((visibility("default"))) void bpf_prog_linfo__free(struct bpf_prog_linfo *prog_linfo);
__attribute__((visibility("default"))) struct bpf_prog_linfo *
bpf_prog_linfo__new(const struct bpf_prog_info *info);
__attribute__((visibility("default"))) const struct bpf_line_info *
bpf_prog_linfo__lfind_addr_func(const struct bpf_prog_linfo *prog_linfo,
    __u64 addr, __u32 func_idx, __u32 nr_skip);
__attribute__((visibility("default"))) const struct bpf_line_info *
bpf_prog_linfo__lfind(const struct bpf_prog_linfo *prog_linfo,
        __u32 insn_off, __u32 nr_skip);
# 548 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
__attribute__((visibility("default"))) 
# 548 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 548 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_probe_prog_type(enum bpf_prog_type prog_type,
        __u32 ifindex);
__attribute__((visibility("default"))) 
# 550 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 550 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_probe_map_type(enum bpf_map_type map_type, __u32 ifindex);
__attribute__((visibility("default"))) 
# 551 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h" 3 4
          _Bool 
# 551 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
               bpf_probe_helper(enum bpf_func_id id,
     enum bpf_prog_type prog_type, __u32 ifindex);
# 583 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
enum bpf_prog_info_array {
 BPF_PROG_INFO_FIRST_ARRAY = 0,
 BPF_PROG_INFO_JITED_INSNS = 0,
 BPF_PROG_INFO_XLATED_INSNS,
 BPF_PROG_INFO_MAP_IDS,
 BPF_PROG_INFO_JITED_KSYMS,
 BPF_PROG_INFO_JITED_FUNC_LENS,
 BPF_PROG_INFO_FUNC_INFO,
 BPF_PROG_INFO_LINE_INFO,
 BPF_PROG_INFO_JITED_LINE_INFO,
 BPF_PROG_INFO_PROG_TAGS,
 BPF_PROG_INFO_LAST_ARRAY,
};

struct bpf_prog_info_linear {

 __u32 info_len;

 __u32 data_len;

 __u64 arrays;
 struct bpf_prog_info info;
 __u8 data[];
};

__attribute__((visibility("default"))) struct bpf_prog_info_linear *
bpf_program__get_prog_info_linear(int fd, __u64 arrays);

__attribute__((visibility("default"))) void
bpf_program__bpil_addr_to_offs(struct bpf_prog_info_linear *info_linear);

__attribute__((visibility("default"))) void
bpf_program__bpil_offs_to_addr(struct bpf_prog_info_linear *info_linear);
# 631 "/home/jmikedupont2/linux/tools/lib/bpf/libbpf.h"
__attribute__((visibility("default"))) int libbpf_num_possible_cpus(void);
# 12 "util/bpf-loader.h" 2

enum bpf_loader_errno {
 __BPF_LOADER_ERRNO__START = __LIBBPF_ERRNO__START - 100,

 BPF_LOADER_ERRNO__CONFIG = __BPF_LOADER_ERRNO__START,
 BPF_LOADER_ERRNO__GROUP,
 BPF_LOADER_ERRNO__EVENTNAME,
 BPF_LOADER_ERRNO__INTERNAL,
 BPF_LOADER_ERRNO__COMPILE,
 BPF_LOADER_ERRNO__PROGCONF_TERM,
 BPF_LOADER_ERRNO__PROLOGUE,
 BPF_LOADER_ERRNO__PROLOGUE2BIG,
 BPF_LOADER_ERRNO__PROLOGUEOOB,
 BPF_LOADER_ERRNO__OBJCONF_OPT,
 BPF_LOADER_ERRNO__OBJCONF_CONF,
 BPF_LOADER_ERRNO__OBJCONF_MAP_OPT,
 BPF_LOADER_ERRNO__OBJCONF_MAP_NOTEXIST,
 BPF_LOADER_ERRNO__OBJCONF_MAP_VALUE,
 BPF_LOADER_ERRNO__OBJCONF_MAP_TYPE,
 BPF_LOADER_ERRNO__OBJCONF_MAP_KEYSIZE,
 BPF_LOADER_ERRNO__OBJCONF_MAP_VALUESIZE,
 BPF_LOADER_ERRNO__OBJCONF_MAP_NOEVT,
 BPF_LOADER_ERRNO__OBJCONF_MAP_MAPSIZE,
 BPF_LOADER_ERRNO__OBJCONF_MAP_EVTDIM,
 BPF_LOADER_ERRNO__OBJCONF_MAP_EVTINH,
 BPF_LOADER_ERRNO__OBJCONF_MAP_EVTTYPE,
 BPF_LOADER_ERRNO__OBJCONF_MAP_IDX2BIG,
 __BPF_LOADER_ERRNO__END,
};

struct evsel;
struct evlist;
struct bpf_object;
struct parse_events_term;
#define PERF_BPF_PROBE_GROUP "perf_bpf_probe"

typedef int (*bpf_prog_iter_callback_t)(const char *group, const char *event,
     int fd, struct bpf_object *obj, void *arg);


struct bpf_object *bpf__prepare_load(const char *filename, 
# 52 "util/bpf-loader.h" 3 4
                                                          _Bool 
# 52 "util/bpf-loader.h"
                                                               source);
int bpf__strerror_prepare_load(const char *filename, 
# 53 "util/bpf-loader.h" 3 4
                                                    _Bool 
# 53 "util/bpf-loader.h"
                                                         source,
          int err, char *buf, size_t size);

struct bpf_object *bpf__prepare_load_buffer(void *obj_buf, size_t obj_buf_sz,
         const char *name);

void bpf__clear(void);

int bpf__probe(struct bpf_object *obj);
int bpf__unprobe(struct bpf_object *obj);
int bpf__strerror_probe(struct bpf_object *obj, int err,
   char *buf, size_t size);

int bpf__load(struct bpf_object *obj);
int bpf__strerror_load(struct bpf_object *obj, int err,
         char *buf, size_t size);
int bpf__foreach_event(struct bpf_object *obj,
         bpf_prog_iter_callback_t func, void *arg);

int bpf__config_obj(struct bpf_object *obj, struct parse_events_term *term,
      struct evlist *evlist, int *error_pos);
int bpf__strerror_config_obj(struct bpf_object *obj,
        struct parse_events_term *term,
        struct evlist *evlist,
        int *error_pos, int err, char *buf,
        size_t size);
int bpf__apply_obj_config(void);
int bpf__strerror_apply_obj_config(int err, char *buf, size_t size);

int bpf__setup_stdout(struct evlist *evlist);
struct evsel *bpf__setup_output_event(struct evlist *evlist, const char *name);
int bpf__strerror_setup_output_event(struct evlist *evlist, int err, char *buf, size_t size);
# 209 "util/bpf-loader.h"
static inline int bpf__strerror_setup_stdout(struct evlist *evlist, int err, char *buf, size_t size)
{
 return bpf__strerror_setup_output_event(evlist, err, buf, size);
}
# 56 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 1


#define __PERF_CALLCHAIN_H 



# 1 "/home/jmikedupont2/linux/tools/perf/util/map_symbol.h" 1


#define __PERF_MAP_SYMBOL 1



struct maps;
struct map;
struct symbol;

struct map_symbol {
 struct maps *maps;
 struct map *map;
 struct symbol *sym;
};

struct addr_map_symbol {
 struct map_symbol ms;
 u64 addr;
 u64 al_addr;
 u64 phys_addr;
};
# 8 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/branch.h" 1

#define _PERF_BRANCH_H 1
# 16 "/home/jmikedupont2/linux/tools/perf/util/branch.h"
struct branch_flags {
 u64 mispred:1;
 u64 predicted:1;
 u64 in_tx:1;
 u64 abort:1;
 u64 cycles:16;
 u64 type:4;
 u64 reserved:40;
};

struct branch_info {
 struct addr_map_symbol from;
 struct addr_map_symbol to;
 struct branch_flags flags;
 char *srcline_from;
 char *srcline_to;
};

struct branch_entry {
 u64 from;
 u64 to;
 struct branch_flags flags;
};

struct branch_stack {
 u64 nr;
 struct branch_entry entries[0];
};

struct branch_type_stat {
 
# 46 "/home/jmikedupont2/linux/tools/perf/util/branch.h" 3 4
_Bool 
# 46 "/home/jmikedupont2/linux/tools/perf/util/branch.h"
     branch_to;
 u64 counts[PERF_BR_MAX];
 u64 cond_fwd;
 u64 cond_bwd;
 u64 cross_4k;
 u64 cross_2m;
};

void branch_type_count(struct branch_type_stat *st, struct branch_flags *flags,
         u64 from, u64 to);

const char *branch_type_name(int type);
void branch_type_stat_display(FILE *fp, struct branch_type_stat *st);
int branch_type_str(struct branch_type_stat *st, char *bf, int bfsize);
# 9 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 2

struct addr_location;
struct evsel;
struct ip_callchain;
struct map;
struct perf_sample;
struct thread;

#define HELP_PAD "\t\t\t\t"

#define CALLCHAIN_HELP "setup and enables call-graph (stack chain/backtrace):\n\n"

#define RECORD_MODE_HELP HELP_PAD "record_mode:\tcall graph recording mode (fp|dwarf|lbr)\n"

#define RECORD_SIZE_HELP HELP_PAD "record_size:\tif record_mode is 'dwarf', max size of stack recording (<bytes>)\n" HELP_PAD "\t\tdefault: 8192 (bytes)\n"



#define CALLCHAIN_RECORD_HELP CALLCHAIN_HELP RECORD_MODE_HELP RECORD_SIZE_HELP

#define CALLCHAIN_REPORT_HELP HELP_PAD "print_type:\tcall graph printing style (graph|flat|fractal|folded|none)\n" HELP_PAD "threshold:\tminimum call graph inclusion threshold (<percent>)\n" HELP_PAD "print_limit:\tmaximum number of call graph entry (<number>)\n" HELP_PAD "order:\t\tcall graph order (caller|callee)\n" HELP_PAD "sort_key:\tcall graph sort key (function|address)\n" HELP_PAD "branch:\t\tinclude last branch info to call graph (branch)\n" HELP_PAD "value:\t\tcall graph value (percent|period|count)\n"
# 38 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
enum perf_call_graph_mode {
 CALLCHAIN_NONE,
 CALLCHAIN_FP,
 CALLCHAIN_DWARF,
 CALLCHAIN_LBR,
 CALLCHAIN_MAX
};

enum chain_mode {
 CHAIN_NONE,
 CHAIN_FLAT,
 CHAIN_GRAPH_ABS,
 CHAIN_GRAPH_REL,
 CHAIN_FOLDED,
};

enum chain_order {
 ORDER_CALLER,
 ORDER_CALLEE
};

struct callchain_node {
 struct callchain_node *parent;
 struct list_head val;
 struct list_head parent_val;
 struct rb_node rb_node_in;
 struct rb_node rb_node;
 struct rb_root rb_root_in;
 struct rb_root rb_root;
 unsigned int val_nr;
 unsigned int count;
 unsigned int children_count;
 u64 hit;
 u64 children_hit;
};

struct callchain_root {
 u64 max_depth;
 struct callchain_node node;
};

struct callchain_param;

typedef void (*sort_chain_func_t)(struct rb_root *, struct callchain_root *,
     u64, struct callchain_param *);

enum chain_key {
 CCKEY_FUNCTION,
 CCKEY_ADDRESS,
 CCKEY_SRCLINE
};

enum chain_value {
 CCVAL_PERCENT,
 CCVAL_PERIOD,
 CCVAL_COUNT,
};

extern 
# 96 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
      _Bool 
# 96 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
           dwarf_callchain_users;

struct callchain_param {
 
# 99 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
_Bool 
# 99 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
       enabled;
 enum perf_call_graph_mode record_mode;
 u32 dump_size;
 enum chain_mode mode;
 u16 max_stack;
 u32 print_limit;
 double min_percent;
 sort_chain_func_t sort;
 enum chain_order order;
 
# 108 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
_Bool 
# 108 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
       order_set;
 enum chain_key key;
 
# 110 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
_Bool 
# 110 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
       branch_callstack;
 enum chain_value value;
};

extern struct callchain_param callchain_param;
extern struct callchain_param callchain_param_default;

struct callchain_list {
 u64 ip;
 struct map_symbol ms;
 struct {
  
# 121 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
 _Bool 
# 121 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
       unfolded;
  
# 122 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
 _Bool 
# 122 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
       has_children;
 };
 u64 branch_count;
 u64 from_count;
 u64 predicted_count;
 u64 abort_count;
 u64 cycles_count;
 u64 iter_count;
 u64 iter_cycles;
 struct branch_type_stat brtype_stat;
 const char *srcline;
 struct list_head list;
};







struct callchain_cursor_node {
 u64 ip;
 struct map_symbol ms;
 const char *srcline;
 
# 146 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
_Bool 
# 146 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
        branch;
 struct branch_flags branch_flags;
 u64 branch_from;
 int nr_loop_iter;
 u64 iter_cycles;
 struct callchain_cursor_node *next;
};

struct callchain_cursor {
 u64 nr;
 struct callchain_cursor_node *first;
 struct callchain_cursor_node **last;
 u64 pos;
 struct callchain_cursor_node *curr;
};

extern __thread struct callchain_cursor callchain_cursor;

static inline void callchain_init(struct callchain_root *root)
{
 INIT_LIST_HEAD(&root->node.val);
 INIT_LIST_HEAD(&root->node.parent_val);

 root->node.parent = 
# 169 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
                    ((void *)0)
# 169 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
                        ;
 root->node.hit = 0;
 root->node.children_hit = 0;
 root->node.rb_root_in = (struct rb_root) { 
# 172 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
                        ((void *)0)
# 172 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
                        , };
 root->max_depth = 0;
}

static inline u64 callchain_cumul_hits(struct callchain_node *node)
{
 return node->hit + node->children_hit;
}

static inline unsigned callchain_cumul_counts(struct callchain_node *node)
{
 return node->count + node->children_count;
}

int callchain_register_param(struct callchain_param *param);
int callchain_append(struct callchain_root *root,
       struct callchain_cursor *cursor,
       u64 period);

int callchain_merge(struct callchain_cursor *cursor,
      struct callchain_root *dst, struct callchain_root *src);

void callchain_cursor_reset(struct callchain_cursor *cursor);

int callchain_cursor_append(struct callchain_cursor *cursor, u64 ip,
       struct map_symbol *ms,
       
# 198 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
      _Bool 
# 198 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
           branch, struct branch_flags *flags,
       int nr_loop_iter, u64 iter_cycles, u64 branch_from,
       const char *srcline);


static inline void callchain_cursor_commit(struct callchain_cursor *cursor)
{
 cursor->curr = cursor->first;
 cursor->pos = 0;
}


static inline struct callchain_cursor_node *
callchain_cursor_current(struct callchain_cursor *cursor)
{
 if (cursor->pos == cursor->nr)
  return 
# 214 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
        ((void *)0)
# 214 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
            ;

 return cursor->curr;
}

static inline void callchain_cursor_advance(struct callchain_cursor *cursor)
{
 cursor->curr = cursor->curr->next;
 cursor->pos++;
}

int callchain_cursor__copy(struct callchain_cursor *dst,
      struct callchain_cursor *src);

struct option;
struct hist_entry;

int record_parse_callchain_opt(const struct option *opt, const char *arg, int unset);
int record_callchain_opt(const struct option *opt, const char *arg, int unset);

struct record_opts;

int record_opts__parse_callchain(struct record_opts *record,
     struct callchain_param *callchain,
     const char *arg, 
# 238 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
                     _Bool 
# 238 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
                          unset);

int sample__resolve_callchain(struct perf_sample *sample,
         struct callchain_cursor *cursor, struct symbol **parent,
         struct evsel *evsel, struct addr_location *al,
         int max_stack);
int hist_entry__append_callchain(struct hist_entry *he, struct perf_sample *sample);
int fill_callchain_info(struct addr_location *al, struct callchain_cursor_node *node,
   
# 246 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
  _Bool 
# 246 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
       hide_unresolved);

extern const char record_callchain_help[];
int parse_callchain_record(const char *arg, struct callchain_param *param);
int parse_callchain_record_opt(const char *arg, struct callchain_param *param);
int parse_callchain_report_opt(const char *arg);
int parse_callchain_top_opt(const char *arg);
int perf_callchain_config(const char *var, const char *value);

static inline void callchain_cursor_snapshot(struct callchain_cursor *dest,
          struct callchain_cursor *src)
{
 *dest = *src;

 dest->first = src->curr;
 dest->nr -= src->pos;
}




static inline int arch_skip_callchain_idx(struct thread *thread __attribute__((unused)),
   struct ip_callchain *chain __attribute__((unused)))
{
 return -1;
}


char *callchain_list__sym_name(struct callchain_list *cl,
          char *bf, size_t bfsize, 
# 275 "/home/jmikedupont2/linux/tools/perf/util/callchain.h" 3 4
                                  _Bool 
# 275 "/home/jmikedupont2/linux/tools/perf/util/callchain.h"
                                       show_dso);
char *callchain_node__scnprintf_value(struct callchain_node *node,
          char *bf, size_t bfsize, u64 total);
int callchain_node__fprintf_value(struct callchain_node *node,
      FILE *fp, u64 total);

int callchain_list_counts__printf_value(struct callchain_list *clist,
     FILE *fp, char *bf, int bfsize);

void free_callchain(struct callchain_root *root);
void decay_callchain(struct callchain_root *root);
int callchain_node__make_parent_list(struct callchain_node *node);

int callchain_branch_counts(struct callchain_root *root,
       u64 *branch_count, u64 *predicted_count,
       u64 *abort_count, u64 *cycles_count);
# 57 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/print_binary.h" 1


#define PERF_PRINT_BINARY_H 

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 6 "/home/jmikedupont2/linux/tools/perf/util/print_binary.h" 2


enum binary_printer_ops {
 BINARY_PRINT_DATA_BEGIN,
 BINARY_PRINT_LINE_BEGIN,
 BINARY_PRINT_ADDR,
 BINARY_PRINT_NUM_DATA,
 BINARY_PRINT_NUM_PAD,
 BINARY_PRINT_SEP,
 BINARY_PRINT_CHAR_DATA,
 BINARY_PRINT_CHAR_PAD,
 BINARY_PRINT_LINE_END,
 BINARY_PRINT_DATA_END,
};

typedef int (*binary__fprintf_t)(enum binary_printer_ops op,
     unsigned int val, void *extra, FILE *fp);

int binary__fprintf(unsigned char *data, size_t len,
      size_t bytes_per_line, binary__fprintf_t printer,
      void *extra, FILE *fp);

static inline void print_binary(unsigned char *data, size_t len,
    size_t bytes_per_line, binary__fprintf_t printer,
    void *extra)
{
 binary__fprintf(data, len, bytes_per_line, printer, extra, 
# 32 "/home/jmikedupont2/linux/tools/perf/util/print_binary.h" 3 4
                                                           stdout
# 32 "/home/jmikedupont2/linux/tools/perf/util/print_binary.h"
                                                                 );
}

int is_printable_array(char *p, unsigned int len);
# 58 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 1


#define PERF_STRING_H 

# 1 "/home/jmikedupont2/linux/tools/include/linux/string.h" 1


#define _TOOLS_LINUX_STRING_H_ 




void *memdup(const void *src, size_t len);

char **argv_split(const char *str, int *argcp);
void argv_free(char **argv);

int strtobool(const char *s, 
# 13 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
                            _Bool 
# 13 "/home/jmikedupont2/linux/tools/include/linux/string.h"
                                 *res);






extern size_t strlcpy(char *dest, const char *src, size_t size);


char *str_error_r(int errnum, char *buf, size_t buflen);

char *strreplace(char *s, char old, char new);






static inline 
# 32 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
             _Bool 
# 32 "/home/jmikedupont2/linux/tools/include/linux/string.h"
                  strstarts(const char *str, const char *prefix)
{
 return 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       (__extension__ (__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       strlen(prefix)
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && ((__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && strlen (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) < ((size_t) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       strlen(prefix)
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))) || (__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && strlen (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) < ((size_t) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       strlen(prefix)
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && __builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && (__s1_len = __builtin_strlen (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ), __s2_len = __builtin_strlen (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ), (!((size_t)(const void *)((
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) + 1) - (size_t)(const void *)(
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) + 1) - (size_t)(const void *)(
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       , 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) : (__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && ((size_t)(const void *)((
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) + 1) - (size_t)(const void *)(
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) == 1) && (__s1_len = __builtin_strlen (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ), __s1_len < 4) ? (__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && ((size_t)(const void *)((
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) + 1) - (size_t)(const void *)(
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) == 1) ? __builtin_strcmp (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       , 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ); int __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && ((size_t)(const void *)((
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) + 1) - (size_t)(const void *)(
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) == 1) && (__s2_len = __builtin_strlen (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ), __s2_len < 4) ? (__builtin_constant_p (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) && ((size_t)(const void *)((
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) + 1) - (size_t)(const void *)(
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) == 1) ? __builtin_strcmp (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       , 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ); int __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       , 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       )))); }) : strncmp (
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       str
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       , 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       prefix
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       , 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
       strlen(prefix)
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h" 3 4
       ))) 
# 34 "/home/jmikedupont2/linux/tools/include/linux/string.h"
                                            == 0;
}

extern char * skip_spaces(const char *);

extern char *strim(char *);
# 6 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 9 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 2


extern const char *graph_dotted_line;
extern const char *dots;

s64 perf_atoll(const char *str);

# 15 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
_Bool 
# 15 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
    strglobmatch(const char *str, const char *pat);

# 16 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
_Bool 
# 16 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
    strglobmatch_nocase(const char *str, const char *pat);

# 17 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
_Bool 
# 17 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
    strlazymatch(const char *str, const char *pat);
static inline 
# 18 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
             _Bool 
# 18 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
                  strisglob(const char *str)
{
 return 
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
       __builtin_strpbrk (
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
       str
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
       , 
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
       "*?["
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
       ) 
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
                           != 
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
                              ((void *)0)
# 20 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
                                  ;
}
int strtailcmp(const char *s1, const char *s2);

char *asprintf_expr_inout_ints(const char *var, 
# 24 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
                                               _Bool 
# 24 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
                                                    in, size_t nints, int *ints);

static inline char *asprintf_expr_in_ints(const char *var, size_t nints, int *ints)
{
 return asprintf_expr_inout_ints(var, 
# 28 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
                                     1
# 28 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
                                         , nints, ints);
}

static inline char *asprintf_expr_not_in_ints(const char *var, size_t nints, int *ints)
{
 return asprintf_expr_inout_ints(var, 
# 33 "/home/jmikedupont2/linux/tools/perf/util/string2.h" 3 4
                                     0
# 33 "/home/jmikedupont2/linux/tools/perf/util/string2.h"
                                          , nints, ints);
}

char *asprintf__tp_filter_pids(size_t npids, pid_t *pids);

char *strpbrk_esc(char *str, const char *stopset);
char *strdup_esc(const char *str);
# 59 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/syscalltbl.h" 1


#define __PERF_SYSCALLTBL_H 

struct syscalltbl {
 union {
  int audit_machine;
  struct {
   int max_id;
   int nr_entries;
   void *entries;
  } syscalls;
 };
};

struct syscalltbl *syscalltbl__new(void);
void syscalltbl__delete(struct syscalltbl *tbl);

const char *syscalltbl__name(const struct syscalltbl *tbl, int id);
int syscalltbl__id(struct syscalltbl *tbl, const char *name);

int syscalltbl__strglobmatch_first(struct syscalltbl *tbl, const char *syscall_glob, int *idx);
int syscalltbl__strglobmatch_next(struct syscalltbl *tbl, const char *syscall_glob, int *idx);
# 60 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/rb_resort.h" 1


#define _PERF_RESORT_RB_H_ 
# 55 "/home/jmikedupont2/linux/tools/perf/util/rb_resort.h"
#define DEFINE_RESORT_RB(__name,__comp,...) struct __name ##_sorted_entry { struct rb_node rb_node; __VA_ARGS__ }; static void __name ##_sorted__init_entry(struct rb_node *nd, struct __name ##_sorted_entry *entry); static int __name ##_sorted__cmp(struct rb_node *nda, struct rb_node *ndb) { struct __name ##_sorted_entry *a, *b; a = rb_entry(nda, struct __name ##_sorted_entry, rb_node); b = rb_entry(ndb, struct __name ##_sorted_entry, rb_node); return __comp; } struct __name ##_sorted { struct rb_root entries; struct __name ##_sorted_entry nd[0]; }; static void __name ##_sorted__insert(struct __name ##_sorted *sorted, struct rb_node *sorted_nd) { struct rb_node **p = &sorted->entries.rb_node, *parent = NULL; while (*p != NULL) { parent = *p; if (__name ##_sorted__cmp(sorted_nd, parent)) p = &(*p)->rb_left; else p = &(*p)->rb_right; } rb_link_node(sorted_nd, parent, p); rb_insert_color(sorted_nd, &sorted->entries); } static void __name ##_sorted__sort(struct __name ##_sorted *sorted, struct rb_root *entries) { struct rb_node *nd; unsigned int i = 0; for (nd = rb_first(entries); nd; nd = rb_next(nd)) { struct __name ##_sorted_entry *snd = &sorted->nd[i++]; __name ##_sorted__init_entry(nd, snd); __name ##_sorted__insert(sorted, &snd->rb_node); } } static struct __name ##_sorted *__name ##_sorted__new(struct rb_root *entries, int nr_entries) { struct __name ##_sorted *sorted; sorted = malloc(sizeof(*sorted) + sizeof(sorted->nd[0]) * nr_entries); if (sorted) { sorted->entries = RB_ROOT; __name ##_sorted__sort(sorted, entries); } return sorted; } static void __name ##_sorted__delete(struct __name ##_sorted *sorted) { free(sorted); } static void __name ##_sorted__init_entry(struct rb_node *nd, struct __name ##_sorted_entry *entry)
# 123 "/home/jmikedupont2/linux/tools/perf/util/rb_resort.h"
#define DECLARE_RESORT_RB(__name) struct __name ##_sorted_entry *__name ##_entry; struct __name ##_sorted *__name = __name ##_sorted__new



#define resort_rb__for_each_entry(__nd,__name) for (__nd = rb_first(&__name->entries); __name ##_entry = rb_entry(__nd, struct __name ##_sorted_entry, rb_node), __nd; __nd = rb_next(__nd))





#define resort_rb__delete(__name) __name ##_sorted__delete(__name), __name = NULL
# 142 "/home/jmikedupont2/linux/tools/perf/util/rb_resort.h"
#define DECLARE_RESORT_RB_INTLIST(__name,__ilist) DECLARE_RESORT_RB(__name)(&__ilist->rblist.entries.rb_root, __ilist->rblist.nr_entries)




#define DECLARE_RESORT_RB_MACHINE_THREADS(__name,__machine,hash_bucket) DECLARE_RESORT_RB(__name)(&__machine->threads[hash_bucket].entries.rb_root, __machine->threads[hash_bucket].nr)
# 61 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/util/../perf.h" 1


#define _PERF_PERF_H 







extern const char *input_name;
extern 
# 12 "/home/jmikedupont2/linux/tools/perf/util/../perf.h" 3 4
      _Bool 
# 12 "/home/jmikedupont2/linux/tools/perf/util/../perf.h"
           perf_host, perf_guest;
extern const char perf_version_string[];

void pthread__unblock_sigwinch(void);

enum perf_affinity {
 PERF_AFFINITY_SYS = 0,
 PERF_AFFINITY_NODE,
 PERF_AFFINITY_CPU,
 PERF_AFFINITY_MAX
};

extern int version_verbose;
# 62 "builtin-trace.c" 2

# 1 "/usr/include/errno.h" 1 3 4
# 71 "/usr/include/errno.h" 3 4
#undef __need_error_t
# 64 "builtin-trace.c" 2
# 1 "/usr/include/inttypes.h" 1 3 4
# 23 "/usr/include/inttypes.h" 3 4
#define _INTTYPES_H 1
# 34 "/usr/include/inttypes.h" 3 4

# 34 "/usr/include/inttypes.h" 3 4
typedef int __gwchar_t;





#define ____gwchar_t_defined 1



#define __PRI64_PREFIX "l"
#define __PRIPTR_PREFIX "l"
# 54 "/usr/include/inttypes.h" 3 4
#define PRId8 "d"
#define PRId16 "d"
#define PRId32 "d"
#define PRId64 __PRI64_PREFIX "d"

#define PRIdLEAST8 "d"
#define PRIdLEAST16 "d"
#define PRIdLEAST32 "d"
#define PRIdLEAST64 __PRI64_PREFIX "d"

#define PRIdFAST8 "d"
#define PRIdFAST16 __PRIPTR_PREFIX "d"
#define PRIdFAST32 __PRIPTR_PREFIX "d"
#define PRIdFAST64 __PRI64_PREFIX "d"


#define PRIi8 "i"
#define PRIi16 "i"
#define PRIi32 "i"
#define PRIi64 __PRI64_PREFIX "i"

#define PRIiLEAST8 "i"
#define PRIiLEAST16 "i"
#define PRIiLEAST32 "i"
#define PRIiLEAST64 __PRI64_PREFIX "i"

#define PRIiFAST8 "i"
#define PRIiFAST16 __PRIPTR_PREFIX "i"
#define PRIiFAST32 __PRIPTR_PREFIX "i"
#define PRIiFAST64 __PRI64_PREFIX "i"


#define PRIo8 "o"
#define PRIo16 "o"
#define PRIo32 "o"
#define PRIo64 __PRI64_PREFIX "o"

#define PRIoLEAST8 "o"
#define PRIoLEAST16 "o"
#define PRIoLEAST32 "o"
#define PRIoLEAST64 __PRI64_PREFIX "o"

#define PRIoFAST8 "o"
#define PRIoFAST16 __PRIPTR_PREFIX "o"
#define PRIoFAST32 __PRIPTR_PREFIX "o"
#define PRIoFAST64 __PRI64_PREFIX "o"


#define PRIu8 "u"
#define PRIu16 "u"
#define PRIu32 "u"
#define PRIu64 __PRI64_PREFIX "u"

#define PRIuLEAST8 "u"
#define PRIuLEAST16 "u"
#define PRIuLEAST32 "u"
#define PRIuLEAST64 __PRI64_PREFIX "u"

#define PRIuFAST8 "u"
#define PRIuFAST16 __PRIPTR_PREFIX "u"
#define PRIuFAST32 __PRIPTR_PREFIX "u"
#define PRIuFAST64 __PRI64_PREFIX "u"


#define PRIx8 "x"
#define PRIx16 "x"
#define PRIx32 "x"
#define PRIx64 __PRI64_PREFIX "x"

#define PRIxLEAST8 "x"
#define PRIxLEAST16 "x"
#define PRIxLEAST32 "x"
#define PRIxLEAST64 __PRI64_PREFIX "x"

#define PRIxFAST8 "x"
#define PRIxFAST16 __PRIPTR_PREFIX "x"
#define PRIxFAST32 __PRIPTR_PREFIX "x"
#define PRIxFAST64 __PRI64_PREFIX "x"


#define PRIX8 "X"
#define PRIX16 "X"
#define PRIX32 "X"
#define PRIX64 __PRI64_PREFIX "X"

#define PRIXLEAST8 "X"
#define PRIXLEAST16 "X"
#define PRIXLEAST32 "X"
#define PRIXLEAST64 __PRI64_PREFIX "X"

#define PRIXFAST8 "X"
#define PRIXFAST16 __PRIPTR_PREFIX "X"
#define PRIXFAST32 __PRIPTR_PREFIX "X"
#define PRIXFAST64 __PRI64_PREFIX "X"



#define PRIdMAX __PRI64_PREFIX "d"
#define PRIiMAX __PRI64_PREFIX "i"
#define PRIoMAX __PRI64_PREFIX "o"
#define PRIuMAX __PRI64_PREFIX "u"
#define PRIxMAX __PRI64_PREFIX "x"
#define PRIXMAX __PRI64_PREFIX "X"



#define PRIdPTR __PRIPTR_PREFIX "d"
#define PRIiPTR __PRIPTR_PREFIX "i"
#define PRIoPTR __PRIPTR_PREFIX "o"
#define PRIuPTR __PRIPTR_PREFIX "u"
#define PRIxPTR __PRIPTR_PREFIX "x"
#define PRIXPTR __PRIPTR_PREFIX "X"





#define SCNd8 "hhd"
#define SCNd16 "hd"
#define SCNd32 "d"
#define SCNd64 __PRI64_PREFIX "d"

#define SCNdLEAST8 "hhd"
#define SCNdLEAST16 "hd"
#define SCNdLEAST32 "d"
#define SCNdLEAST64 __PRI64_PREFIX "d"

#define SCNdFAST8 "hhd"
#define SCNdFAST16 __PRIPTR_PREFIX "d"
#define SCNdFAST32 __PRIPTR_PREFIX "d"
#define SCNdFAST64 __PRI64_PREFIX "d"


#define SCNi8 "hhi"
#define SCNi16 "hi"
#define SCNi32 "i"
#define SCNi64 __PRI64_PREFIX "i"

#define SCNiLEAST8 "hhi"
#define SCNiLEAST16 "hi"
#define SCNiLEAST32 "i"
#define SCNiLEAST64 __PRI64_PREFIX "i"

#define SCNiFAST8 "hhi"
#define SCNiFAST16 __PRIPTR_PREFIX "i"
#define SCNiFAST32 __PRIPTR_PREFIX "i"
#define SCNiFAST64 __PRI64_PREFIX "i"


#define SCNu8 "hhu"
#define SCNu16 "hu"
#define SCNu32 "u"
#define SCNu64 __PRI64_PREFIX "u"

#define SCNuLEAST8 "hhu"
#define SCNuLEAST16 "hu"
#define SCNuLEAST32 "u"
#define SCNuLEAST64 __PRI64_PREFIX "u"

#define SCNuFAST8 "hhu"
#define SCNuFAST16 __PRIPTR_PREFIX "u"
#define SCNuFAST32 __PRIPTR_PREFIX "u"
#define SCNuFAST64 __PRI64_PREFIX "u"


#define SCNo8 "hho"
#define SCNo16 "ho"
#define SCNo32 "o"
#define SCNo64 __PRI64_PREFIX "o"

#define SCNoLEAST8 "hho"
#define SCNoLEAST16 "ho"
#define SCNoLEAST32 "o"
#define SCNoLEAST64 __PRI64_PREFIX "o"

#define SCNoFAST8 "hho"
#define SCNoFAST16 __PRIPTR_PREFIX "o"
#define SCNoFAST32 __PRIPTR_PREFIX "o"
#define SCNoFAST64 __PRI64_PREFIX "o"


#define SCNx8 "hhx"
#define SCNx16 "hx"
#define SCNx32 "x"
#define SCNx64 __PRI64_PREFIX "x"

#define SCNxLEAST8 "hhx"
#define SCNxLEAST16 "hx"
#define SCNxLEAST32 "x"
#define SCNxLEAST64 __PRI64_PREFIX "x"

#define SCNxFAST8 "hhx"
#define SCNxFAST16 __PRIPTR_PREFIX "x"
#define SCNxFAST32 __PRIPTR_PREFIX "x"
#define SCNxFAST64 __PRI64_PREFIX "x"



#define SCNdMAX __PRI64_PREFIX "d"
#define SCNiMAX __PRI64_PREFIX "i"
#define SCNoMAX __PRI64_PREFIX "o"
#define SCNuMAX __PRI64_PREFIX "u"
#define SCNxMAX __PRI64_PREFIX "x"


#define SCNdPTR __PRIPTR_PREFIX "d"
#define SCNiPTR __PRIPTR_PREFIX "i"
#define SCNoPTR __PRIPTR_PREFIX "o"
#define SCNuPTR __PRIPTR_PREFIX "u"
#define SCNxPTR __PRIPTR_PREFIX "x"







typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__nothrow__ , __leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base)

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__nothrow__ , __leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base)

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const __gwchar_t * __restrict __nptr,
       __gwchar_t **__restrict __endptr,
       int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__nothrow__ , __leaf__)) wcstoimax (const __gwchar_t *__restrict nptr, __gwchar_t **__restrict endptr, int base)

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const __gwchar_t *
          __restrict __nptr,
          __gwchar_t **
          __restrict __endptr,
          int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__nothrow__ , __leaf__)) wcstoumax (const __gwchar_t *__restrict nptr, __gwchar_t **__restrict endptr, int base)

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4

# 65 "builtin-trace.c" 2
# 1 "/usr/include/poll.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/poll.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
#define _SYS_POLL_H 1




# 1 "/usr/include/x86_64-linux-gnu/bits/poll.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/poll.h" 3 4
#define POLLIN 0x001
#define POLLPRI 0x002
#define POLLOUT 0x004



#define POLLRDNORM 0x040
#define POLLRDBAND 0x080
#define POLLWRNORM 0x100
#define POLLWRBAND 0x200




#define POLLMSG 0x400
#define POLLREMOVE 0x1000
#define POLLRDHUP 0x2000





#define POLLERR 0x008
#define POLLHUP 0x010
#define POLLNVAL 0x020
# 26 "/usr/include/x86_64-linux-gnu/sys/poll.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/poll.h" 2 3 4

#define __need_timespec 





typedef unsigned long int nfds_t;


struct pollfd
  {
    int fd;
    short int events;
    short int revents;
  };



# 57 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout);
# 66 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
    const struct timespec *__timeout,
    const __sigset_t *__ss);







# 1 "/usr/include/x86_64-linux-gnu/bits/poll2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/poll2.h" 3 4


extern int __poll_alias (struct pollfd *__fds, nfds_t __nfds, int __timeout) __asm__ ("" "poll")
                               ;
extern int __poll_chk (struct pollfd *__fds, nfds_t __nfds, int __timeout,
         long unsigned int __fdslen);
extern int __poll_chk_warn (struct pollfd *__fds, nfds_t __nfds, int __timeout, long unsigned int __fdslen) __asm__ ("" "__poll_chk")


  __attribute__((__warning__ ("poll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
poll (struct pollfd *__fds, nfds_t __nfds, int __timeout)
{
  if (__builtin_object_size (__fds, 2 > 1) != (long unsigned int) -1)
    {
      if (! __builtin_constant_p (__nfds))
 return __poll_chk (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1));
      else if (__builtin_object_size (__fds, 2 > 1) / sizeof (*__fds) < __nfds)
 return __poll_chk_warn (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1));
    }

  return __poll_alias (__fds, __nfds, __timeout);
}



extern int __ppoll_alias (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss) __asm__ ("" "ppoll")

                                          ;
extern int __ppoll_chk (struct pollfd *__fds, nfds_t __nfds,
   const struct timespec *__timeout,
   const __sigset_t *__ss, long unsigned int __fdslen);
extern int __ppoll_chk_warn (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss, long unsigned int __fdslen) __asm__ ("" "__ppoll_chk")




  __attribute__((__warning__ ("ppoll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
ppoll (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout,
       const __sigset_t *__ss)
{
  if (__builtin_object_size (__fds, 2 > 1) != (long unsigned int) -1)
    {
      if (! __builtin_constant_p (__nfds))
 return __ppoll_chk (__fds, __nfds, __timeout, __ss, __builtin_object_size (__fds, 2 > 1));
      else if (__builtin_object_size (__fds, 2 > 1) / sizeof (*__fds) < __nfds)
 return __ppoll_chk_warn (__fds, __nfds, __timeout, __ss,
     __builtin_object_size (__fds, 2 > 1));
    }

  return __ppoll_alias (__fds, __nfds, __timeout, __ss);
}



# 77 "/usr/include/x86_64-linux-gnu/sys/poll.h" 2 3 4
# 1 "/usr/include/poll.h" 2 3 4
# 66 "builtin-trace.c" 2




# 1 "/home/jmikedupont2/linux/tools/include/linux/filter.h" 1





#define __TOOLS_LINUX_FILTER_H 







#define BPF_REG_ARG1 BPF_REG_1
#define BPF_REG_ARG2 BPF_REG_2
#define BPF_REG_ARG3 BPF_REG_3
#define BPF_REG_ARG4 BPF_REG_4
#define BPF_REG_ARG5 BPF_REG_5
#define BPF_REG_CTX BPF_REG_6
#define BPF_REG_FP BPF_REG_10


#define BPF_REG_A BPF_REG_0
#define BPF_REG_X BPF_REG_7
#define BPF_REG_TMP BPF_REG_8


#define MAX_BPF_STACK 512





#define BPF_ALU64_REG(OP,DST,SRC) ((struct bpf_insn) { .code = BPF_ALU64 | BPF_OP(OP) | BPF_X, .dst_reg = DST, .src_reg = SRC, .off = 0, .imm = 0 })







#define BPF_ALU32_REG(OP,DST,SRC) ((struct bpf_insn) { .code = BPF_ALU | BPF_OP(OP) | BPF_X, .dst_reg = DST, .src_reg = SRC, .off = 0, .imm = 0 })
# 52 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_ALU64_IMM(OP,DST,IMM) ((struct bpf_insn) { .code = BPF_ALU64 | BPF_OP(OP) | BPF_K, .dst_reg = DST, .src_reg = 0, .off = 0, .imm = IMM })







#define BPF_ALU32_IMM(OP,DST,IMM) ((struct bpf_insn) { .code = BPF_ALU | BPF_OP(OP) | BPF_K, .dst_reg = DST, .src_reg = 0, .off = 0, .imm = IMM })
# 70 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_ENDIAN(TYPE,DST,LEN) ((struct bpf_insn) { .code = BPF_ALU | BPF_END | BPF_SRC(TYPE), .dst_reg = DST, .src_reg = 0, .off = 0, .imm = LEN })
# 80 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_MOV64_REG(DST,SRC) ((struct bpf_insn) { .code = BPF_ALU64 | BPF_MOV | BPF_X, .dst_reg = DST, .src_reg = SRC, .off = 0, .imm = 0 })







#define BPF_MOV32_REG(DST,SRC) ((struct bpf_insn) { .code = BPF_ALU | BPF_MOV | BPF_X, .dst_reg = DST, .src_reg = SRC, .off = 0, .imm = 0 })
# 98 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_MOV64_IMM(DST,IMM) ((struct bpf_insn) { .code = BPF_ALU64 | BPF_MOV | BPF_K, .dst_reg = DST, .src_reg = 0, .off = 0, .imm = IMM })







#define BPF_MOV32_IMM(DST,IMM) ((struct bpf_insn) { .code = BPF_ALU | BPF_MOV | BPF_K, .dst_reg = DST, .src_reg = 0, .off = 0, .imm = IMM })
# 116 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_MOV64_RAW(TYPE,DST,SRC,IMM) ((struct bpf_insn) { .code = BPF_ALU64 | BPF_MOV | BPF_SRC(TYPE), .dst_reg = DST, .src_reg = SRC, .off = 0, .imm = IMM })







#define BPF_MOV32_RAW(TYPE,DST,SRC,IMM) ((struct bpf_insn) { .code = BPF_ALU | BPF_MOV | BPF_SRC(TYPE), .dst_reg = DST, .src_reg = SRC, .off = 0, .imm = IMM })
# 134 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_LD_ABS(SIZE,IMM) ((struct bpf_insn) { .code = BPF_LD | BPF_SIZE(SIZE) | BPF_ABS, .dst_reg = 0, .src_reg = 0, .off = 0, .imm = IMM })
# 144 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_LD_IND(SIZE,SRC,IMM) ((struct bpf_insn) { .code = BPF_LD | BPF_SIZE(SIZE) | BPF_IND, .dst_reg = 0, .src_reg = SRC, .off = 0, .imm = IMM })
# 154 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_LDX_MEM(SIZE,DST,SRC,OFF) ((struct bpf_insn) { .code = BPF_LDX | BPF_SIZE(SIZE) | BPF_MEM, .dst_reg = DST, .src_reg = SRC, .off = OFF, .imm = 0 })
# 164 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_STX_MEM(SIZE,DST,SRC,OFF) ((struct bpf_insn) { .code = BPF_STX | BPF_SIZE(SIZE) | BPF_MEM, .dst_reg = DST, .src_reg = SRC, .off = OFF, .imm = 0 })
# 174 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_STX_XADD(SIZE,DST,SRC,OFF) ((struct bpf_insn) { .code = BPF_STX | BPF_SIZE(SIZE) | BPF_XADD, .dst_reg = DST, .src_reg = SRC, .off = OFF, .imm = 0 })
# 184 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_ST_MEM(SIZE,DST,OFF,IMM) ((struct bpf_insn) { .code = BPF_ST | BPF_SIZE(SIZE) | BPF_MEM, .dst_reg = DST, .src_reg = 0, .off = OFF, .imm = IMM })
# 194 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_JMP_REG(OP,DST,SRC,OFF) ((struct bpf_insn) { .code = BPF_JMP | BPF_OP(OP) | BPF_X, .dst_reg = DST, .src_reg = SRC, .off = OFF, .imm = 0 })
# 204 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_JMP32_REG(OP,DST,SRC,OFF) ((struct bpf_insn) { .code = BPF_JMP32 | BPF_OP(OP) | BPF_X, .dst_reg = DST, .src_reg = SRC, .off = OFF, .imm = 0 })
# 214 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_JMP_IMM(OP,DST,IMM,OFF) ((struct bpf_insn) { .code = BPF_JMP | BPF_OP(OP) | BPF_K, .dst_reg = DST, .src_reg = 0, .off = OFF, .imm = IMM })
# 224 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_JMP32_IMM(OP,DST,IMM,OFF) ((struct bpf_insn) { .code = BPF_JMP32 | BPF_OP(OP) | BPF_K, .dst_reg = DST, .src_reg = 0, .off = OFF, .imm = IMM })
# 234 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_JMP_A(OFF) ((struct bpf_insn) { .code = BPF_JMP | BPF_JA, .dst_reg = 0, .src_reg = 0, .off = OFF, .imm = 0 })
# 244 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_EMIT_CALL(FUNC) ((struct bpf_insn) { .code = BPF_JMP | BPF_CALL, .dst_reg = 0, .src_reg = 0, .off = 0, .imm = ((FUNC) - BPF_FUNC_unspec) })
# 254 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_RAW_INSN(CODE,DST,SRC,OFF,IMM) ((struct bpf_insn) { .code = CODE, .dst_reg = DST, .src_reg = SRC, .off = OFF, .imm = IMM })
# 264 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_LD_IMM64(DST,IMM) BPF_LD_IMM64_RAW(DST, 0, IMM)


#define BPF_LD_IMM64_RAW(DST,SRC,IMM) ((struct bpf_insn) { .code = BPF_LD | BPF_DW | BPF_IMM, .dst_reg = DST, .src_reg = SRC, .off = 0, .imm = (__u32) (IMM) }), ((struct bpf_insn) { .code = 0, .dst_reg = 0, .src_reg = 0, .off = 0, .imm = ((__u64) (IMM)) >> 32 })
# 281 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_LD_IMM64_RAW_FULL(DST,SRC,OFF1,OFF2,IMM1,IMM2) ((struct bpf_insn) { .code = BPF_LD | BPF_DW | BPF_IMM, .dst_reg = DST, .src_reg = SRC, .off = OFF1, .imm = IMM1 }), ((struct bpf_insn) { .code = 0, .dst_reg = 0, .src_reg = 0, .off = OFF2, .imm = IMM2 })
# 297 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_LD_MAP_FD(DST,MAP_FD) BPF_LD_IMM64_RAW_FULL(DST, BPF_PSEUDO_MAP_FD, 0, 0, MAP_FD, 0)



#define BPF_LD_MAP_VALUE(DST,MAP_FD,VALUE_OFF) BPF_LD_IMM64_RAW_FULL(DST, BPF_PSEUDO_MAP_VALUE, 0, 0, MAP_FD, VALUE_OFF)





#define BPF_CALL_REL(TGT) ((struct bpf_insn) { .code = BPF_JMP | BPF_CALL, .dst_reg = 0, .src_reg = BPF_PSEUDO_CALL, .off = 0, .imm = TGT })
# 317 "/home/jmikedupont2/linux/tools/include/linux/filter.h"
#define BPF_EXIT_INSN() ((struct bpf_insn) { .code = BPF_JMP | BPF_EXIT, .dst_reg = 0, .src_reg = 0, .off = 0, .imm = 0 })
# 71 "builtin-trace.c" 2

# 1 "/usr/include/linux/random.h" 1 3 4







#define _LINUX_RANDOM_H 



# 1 "/usr/include/linux/irqnr.h" 1 3 4
# 13 "/usr/include/linux/random.h" 2 3 4




#define RNDGETENTCNT _IOR( 'R', 0x00, int )


#define RNDADDTOENTCNT _IOW( 'R', 0x01, int )


#define RNDGETPOOL _IOR( 'R', 0x02, int [2] )





#define RNDADDENTROPY _IOW( 'R', 0x03, int [2] )


#define RNDZAPENTCNT _IO( 'R', 0x04 )


#define RNDCLEARPOOL _IO( 'R', 0x06 )


#define RNDRESEEDCRNG _IO( 'R', 0x07 )

struct rand_pool_info {
 int entropy_count;
 int buf_size;
 __u32 buf[0];
};







#define GRND_NONBLOCK 0x0001
#define GRND_RANDOM 0x0002
# 73 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/include/linux/stringify.h" 1


#define __LINUX_STRINGIFY_H 






#define __stringify_1(x...) #x
#define __stringify(x...) __stringify_1(x)
# 74 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/include/linux/time64.h" 1


#define _TOOLS_LINUX_TIME64_H 

#define MSEC_PER_SEC 1000L
#define USEC_PER_MSEC 1000L
#define NSEC_PER_USEC 1000L
#define NSEC_PER_MSEC 1000000L
#define USEC_PER_SEC 1000000L
#define NSEC_PER_SEC 1000000000L
#define FSEC_PER_SEC 1000000000000000LL
# 75 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/include/linux/zalloc.h" 1


#define __TOOLS_LINUX_ZALLOC_H 

# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 6 "/home/jmikedupont2/linux/tools/include/linux/zalloc.h" 2


# 7 "/home/jmikedupont2/linux/tools/include/linux/zalloc.h"
void *zalloc(size_t size);
void __zfree(void **ptr);

#define zfree(ptr) __zfree((void **)(ptr))
# 76 "builtin-trace.c" 2



# 1 "/home/jmikedupont2/linux/tools/include/linux/ctype.h" 1


#define _LINUX_CTYPE_H 






#define _U 0x01
#define _L 0x02
#define _D 0x04
#define _C 0x08
#define _P 0x10
#define _S 0x20
#define _X 0x40
#define _SP 0x80

extern const unsigned char _ctype[];

#define __ismask(x) (_ctype[(int)(unsigned char)(x)])

#define isalnum(c) ((__ismask(c)&(_U|_L|_D)) != 0)
#define isalpha(c) ((__ismask(c)&(_U|_L)) != 0)
#define iscntrl(c) ((__ismask(c)&(_C)) != 0)
static inline int __isdigit(int c)
{
 return '0' <= c && c <= '9';
}
#define isdigit(c) __isdigit(c)
#define isgraph(c) ((__ismask(c)&(_P|_U|_L|_D)) != 0)
#define islower(c) ((__ismask(c)&(_L)) != 0)
#define isprint(c) ((__ismask(c)&(_P|_U|_L|_D|_SP)) != 0)
#define ispunct(c) ((__ismask(c)&(_P)) != 0)

#define isspace(c) ((__ismask(c)&(_S)) != 0)
#define isupper(c) ((__ismask(c)&(_U)) != 0)
#define isxdigit(c) ((__ismask(c)&(_D|_X)) != 0)

#define isascii(c) (((unsigned char)(c))<=0x7f)
#define toascii(c) (((unsigned char)(c))&0x7f)

static inline unsigned char __tolower(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x01)) != 0))
  c -= 'A'-'a';
 return c;
}

static inline unsigned char __toupper(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x02)) != 0))
  c -= 'a'-'A';
 return c;
}

#define tolower(c) __tolower(c)
#define toupper(c) __toupper(c)





static inline char _tolower(const char c)
{
 return c | 0x20;
}


static inline int isodigit(const char c)
{
 return c >= '0' && c <= '7';
}
# 80 "builtin-trace.c" 2
# 1 "/home/jmikedupont2/linux/tools/perf/lib/include/perf/mmap.h" 1


#define __LIBPERF_MMAP_H 



struct perf_mmap;
union perf_event;

__attribute__((visibility("default"))) void perf_mmap__consume(struct perf_mmap *map);
__attribute__((visibility("default"))) int perf_mmap__read_init(struct perf_mmap *map);
__attribute__((visibility("default"))) void perf_mmap__read_done(struct perf_mmap *map);
__attribute__((visibility("default"))) union perf_event *perf_mmap__read_event(struct perf_mmap *map);
# 81 "builtin-trace.c" 2






#define F_LINUX_SPECIFIC_BASE 1024





struct syscall_arg_fmt {
 size_t (*scnprintf)(char *bf, size_t size, struct syscall_arg *arg);
 
# 95 "builtin-trace.c" 3 4
_Bool 
# 95 "builtin-trace.c"
        (*strtoul)(char *bf, size_t size, struct syscall_arg *arg, u64 *val);
 unsigned long (*mask_val)(struct syscall_arg *arg, unsigned long val);
 void *parm;
 const char *name;
 u16 nr_entries;
 
# 100 "builtin-trace.c" 3 4
_Bool 
# 100 "builtin-trace.c"
        show_zero;
};

struct syscall_fmt {
 const char *name;
 const char *alias;
 struct {
  const char *sys_enter,
      *sys_exit;
 } bpf_prog_name;
 struct syscall_arg_fmt arg[6];
 u8 nr_args;
 
# 112 "builtin-trace.c" 3 4
_Bool 
# 112 "builtin-trace.c"
        errpid;
 
# 113 "builtin-trace.c" 3 4
_Bool 
# 113 "builtin-trace.c"
        timeout;
 
# 114 "builtin-trace.c" 3 4
_Bool 
# 114 "builtin-trace.c"
        hexret;
};

struct trace {
 struct perf_tool tool;
 struct syscalltbl *sctbl;
 struct {
  struct syscall *table;
  struct bpf_map *map;
  struct {
   struct bpf_map *sys_enter,
     *sys_exit;
  } prog_array;
  struct {
   struct evsel *sys_enter,
       *sys_exit,
       *augmented;
  } events;
  struct bpf_program *unaugmented_prog;
 } syscalls;
 struct {
  struct bpf_map *map;
 } dump;
 struct record_opts opts;
 struct evlist *evlist;
 struct machine *host;
 struct thread *current;
 struct bpf_object *bpf_obj;
 struct cgroup *cgroup;
 u64 base_time;
 FILE *output;
 unsigned long nr_events;
 unsigned long nr_events_printed;
 unsigned long max_events;
 struct evswitch evswitch;
 struct strlist *ev_qualifier;
 struct {
  size_t nr;
  int *entries;
 } ev_qualifier_ids;
 struct {
  size_t nr;
  pid_t *entries;
  struct bpf_map *map;
 } filter_pids;
 double duration_filter;
 double runtime_ms;
 struct {
  u64 vfs_getname,
    proc_getname;
 } stats;
 unsigned int max_stack;
 unsigned int min_stack;
 int raw_augmented_syscalls_args_size;
 
# 168 "builtin-trace.c" 3 4
_Bool 
# 168 "builtin-trace.c"
       raw_augmented_syscalls;
 
# 169 "builtin-trace.c" 3 4
_Bool 
# 169 "builtin-trace.c"
       fd_path_disabled;
 
# 170 "builtin-trace.c" 3 4
_Bool 
# 170 "builtin-trace.c"
       sort_events;
 
# 171 "builtin-trace.c" 3 4
_Bool 
# 171 "builtin-trace.c"
       not_ev_qualifier;
 
# 172 "builtin-trace.c" 3 4
_Bool 
# 172 "builtin-trace.c"
       live;
 
# 173 "builtin-trace.c" 3 4
_Bool 
# 173 "builtin-trace.c"
       full_time;
 
# 174 "builtin-trace.c" 3 4
_Bool 
# 174 "builtin-trace.c"
       sched;
 
# 175 "builtin-trace.c" 3 4
_Bool 
# 175 "builtin-trace.c"
       multiple_threads;
 
# 176 "builtin-trace.c" 3 4
_Bool 
# 176 "builtin-trace.c"
       summary;
 
# 177 "builtin-trace.c" 3 4
_Bool 
# 177 "builtin-trace.c"
       summary_only;
 
# 178 "builtin-trace.c" 3 4
_Bool 
# 178 "builtin-trace.c"
       errno_summary;
 
# 179 "builtin-trace.c" 3 4
_Bool 
# 179 "builtin-trace.c"
       failure_only;
 
# 180 "builtin-trace.c" 3 4
_Bool 
# 180 "builtin-trace.c"
       show_comm;
 
# 181 "builtin-trace.c" 3 4
_Bool 
# 181 "builtin-trace.c"
       print_sample;
 
# 182 "builtin-trace.c" 3 4
_Bool 
# 182 "builtin-trace.c"
       show_tool_stats;
 
# 183 "builtin-trace.c" 3 4
_Bool 
# 183 "builtin-trace.c"
       trace_syscalls;
 
# 184 "builtin-trace.c" 3 4
_Bool 
# 184 "builtin-trace.c"
       libtraceevent_print;
 
# 185 "builtin-trace.c" 3 4
_Bool 
# 185 "builtin-trace.c"
       kernel_syscallchains;
 s16 args_alignment;
 
# 187 "builtin-trace.c" 3 4
_Bool 
# 187 "builtin-trace.c"
       show_tstamp;
 
# 188 "builtin-trace.c" 3 4
_Bool 
# 188 "builtin-trace.c"
       show_duration;
 
# 189 "builtin-trace.c" 3 4
_Bool 
# 189 "builtin-trace.c"
       show_zeros;
 
# 190 "builtin-trace.c" 3 4
_Bool 
# 190 "builtin-trace.c"
       show_arg_names;
 
# 191 "builtin-trace.c" 3 4
_Bool 
# 191 "builtin-trace.c"
       show_string_prefix;
 
# 192 "builtin-trace.c" 3 4
_Bool 
# 192 "builtin-trace.c"
       force;
 
# 193 "builtin-trace.c" 3 4
_Bool 
# 193 "builtin-trace.c"
       vfs_getname;
 int trace_pgfaults;
 char *perfconfig_events;
 struct {
  struct ordered_events data;
  u64 last;
 } oe;
};

struct tp_field {
 int offset;
 union {
  u64 (*integer)(struct tp_field *field, struct perf_sample *sample);
  void *(*pointer)(struct tp_field *field, struct perf_sample *sample);
 };
};

#define TP_UINT_FIELD(bits) static u64 tp_field__u ##bits(struct tp_field *field, struct perf_sample *sample) { u ##bits value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return value; }







static u64 tp_field__u8(struct tp_field *field, struct perf_sample *sample) { u8 value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return value; };
static u64 tp_field__u16(struct tp_field *field, struct perf_sample *sample) { u16 value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return value; };
static u64 tp_field__u32(struct tp_field *field, struct perf_sample *sample) { u32 value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return value; };
static u64 tp_field__u64(struct tp_field *field, struct perf_sample *sample) { u64 value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return value; };

#define TP_UINT_FIELD__SWAPPED(bits) static u64 tp_field__swapped_u ##bits(struct tp_field *field, struct perf_sample *sample) { u ##bits value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return bswap_ ##bits(value);}







static u64 tp_field__swapped_u16(struct tp_field *field, struct perf_sample *sample) { u16 value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return 
# 231 "builtin-trace.c" 3 4
(__extension__ ({ unsigned short int __v, __x = (unsigned short int) (
# 231 "builtin-trace.c"
value
# 231 "builtin-trace.c" 3 4
); if (__builtin_constant_p (__x)) __v = ((unsigned short int) ((((__x) >> 8) & 0xff) | (((__x) & 0xff) << 8))); else __asm__ ("rorw $8, %w0" : "=r" (__v) : "0" (__x) : "cc"); __v; }))
# 231 "builtin-trace.c"
;};
static u64 tp_field__swapped_u32(struct tp_field *field, struct perf_sample *sample) { u32 value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return 
# 232 "builtin-trace.c" 3 4
__bswap_32 (
# 232 "builtin-trace.c"
value
# 232 "builtin-trace.c" 3 4
)
# 232 "builtin-trace.c"
;};
static u64 tp_field__swapped_u64(struct tp_field *field, struct perf_sample *sample) { u64 value; memcpy(&value, sample->raw_data + field->offset, sizeof(value)); return 
# 233 "builtin-trace.c" 3 4
__bswap_64 (
# 233 "builtin-trace.c"
value
# 233 "builtin-trace.c" 3 4
)
# 233 "builtin-trace.c"
;};

static int __tp_field__init_uint(struct tp_field *field, int size, int offset, 
# 235 "builtin-trace.c" 3 4
                                                                              _Bool 
# 235 "builtin-trace.c"
                                                                                   needs_swap)
{
 field->offset = offset;

 switch (size) {
 case 1:
  field->integer = tp_field__u8;
  break;
 case 2:
  field->integer = needs_swap ? tp_field__swapped_u16 : tp_field__u16;
  break;
 case 4:
  field->integer = needs_swap ? tp_field__swapped_u32 : tp_field__u32;
  break;
 case 8:
  field->integer = needs_swap ? tp_field__swapped_u64 : tp_field__u64;
  break;
 default:
  return -1;
 }

 return 0;
}

static int tp_field__init_uint(struct tp_field *field, struct tep_format_field *format_field, 
# 259 "builtin-trace.c" 3 4
                                                                                             _Bool 
# 259 "builtin-trace.c"
                                                                                                  needs_swap)
{
 return __tp_field__init_uint(field, format_field->size, format_field->offset, needs_swap);
}

static void *tp_field__ptr(struct tp_field *field, struct perf_sample *sample)
{
 return sample->raw_data + field->offset;
}

static int __tp_field__init_ptr(struct tp_field *field, int offset)
{
 field->offset = offset;
 field->pointer = tp_field__ptr;
 return 0;
}

static int tp_field__init_ptr(struct tp_field *field, struct tep_format_field *format_field)
{
 return __tp_field__init_ptr(field, format_field->offset);
}

struct syscall_tp {
 struct tp_field id;
 union {
  struct tp_field args, ret;
 };
};






struct evsel_trace {
 struct syscall_tp sc;
 struct syscall_arg_fmt *fmt;
};

static struct evsel_trace *evsel_trace__new(void)
{
 return zalloc(sizeof(struct evsel_trace));
}

static void evsel_trace__delete(struct evsel_trace *et)
{
 if (et == 
# 305 "builtin-trace.c" 3 4
          ((void *)0)
# 305 "builtin-trace.c"
              )
  return;

 __zfree((void **)(&et->fmt));
 free(et);
}





static inline struct syscall_tp *__evsel__syscall_tp(struct evsel *evsel)
{
 struct evsel_trace *et = evsel->priv;

 return &et->sc;
}

static struct syscall_tp *evsel__syscall_tp(struct evsel *evsel)
{
 if (evsel->priv == 
# 325 "builtin-trace.c" 3 4
                   ((void *)0)
# 325 "builtin-trace.c"
                       ) {
  evsel->priv = evsel_trace__new();
  if (evsel->priv == 
# 327 "builtin-trace.c" 3 4
                    ((void *)0)
# 327 "builtin-trace.c"
                        )
   return 
# 328 "builtin-trace.c" 3 4
         ((void *)0)
# 328 "builtin-trace.c"
             ;
 }

 return __evsel__syscall_tp(evsel);
}




static inline struct syscall_arg_fmt *__evsel__syscall_arg_fmt(struct evsel *evsel)
{
 struct evsel_trace *et = evsel->priv;

 return et->fmt;
}

static struct syscall_arg_fmt *evsel__syscall_arg_fmt(struct evsel *evsel)
{
 struct evsel_trace *et = evsel->priv;

 if (evsel->priv == 
# 348 "builtin-trace.c" 3 4
                   ((void *)0)
# 348 "builtin-trace.c"
                       ) {
  et = evsel->priv = evsel_trace__new();

  if (et == 
# 351 "builtin-trace.c" 3 4
           ((void *)0)
# 351 "builtin-trace.c"
               )
   return 
# 352 "builtin-trace.c" 3 4
         ((void *)0)
# 352 "builtin-trace.c"
             ;
 }

 if (et->fmt == 
# 355 "builtin-trace.c" 3 4
               ((void *)0)
# 355 "builtin-trace.c"
                   ) {
  et->fmt = calloc(evsel->tp_format->format.nr_fields, sizeof(struct syscall_arg_fmt));
  if (et->fmt == 
# 357 "builtin-trace.c" 3 4
                ((void *)0)
# 357 "builtin-trace.c"
                    )
   goto out_delete;
 }

 return __evsel__syscall_arg_fmt(evsel);

out_delete:
 evsel_trace__delete(evsel->priv);
 evsel->priv = 
# 365 "builtin-trace.c" 3 4
              ((void *)0)
# 365 "builtin-trace.c"
                  ;
 return 
# 366 "builtin-trace.c" 3 4
       ((void *)0)
# 366 "builtin-trace.c"
           ;
}

static int perf_evsel__init_tp_uint_field(struct evsel *evsel,
       struct tp_field *field,
       const char *name)
{
 struct tep_format_field *format_field = perf_evsel__field(evsel, name);

 if (format_field == 
# 375 "builtin-trace.c" 3 4
                    ((void *)0)
# 375 "builtin-trace.c"
                        )
  return -1;

 return tp_field__init_uint(field, format_field, evsel->needs_swap);
}

#define perf_evsel__init_sc_tp_uint_field(evsel,name) ({ struct syscall_tp *sc = __evsel__syscall_tp(evsel); perf_evsel__init_tp_uint_field(evsel, &sc->name, #name); })



static int perf_evsel__init_tp_ptr_field(struct evsel *evsel,
      struct tp_field *field,
      const char *name)
{
 struct tep_format_field *format_field = perf_evsel__field(evsel, name);

 if (format_field == 
# 391 "builtin-trace.c" 3 4
                    ((void *)0)
# 391 "builtin-trace.c"
                        )
  return -1;

 return tp_field__init_ptr(field, format_field);
}

#define perf_evsel__init_sc_tp_ptr_field(evsel,name) ({ struct syscall_tp *sc = __evsel__syscall_tp(evsel); perf_evsel__init_tp_ptr_field(evsel, &sc->name, #name); })



static void evsel__delete_priv(struct evsel *evsel)
{
 __zfree((void **)(&evsel->priv));
 evsel__delete(evsel);
}

static int perf_evsel__init_syscall_tp(struct evsel *evsel)
{
 struct syscall_tp *sc = evsel__syscall_tp(evsel);

 if (sc != 
# 411 "builtin-trace.c" 3 4
          ((void *)0)
# 411 "builtin-trace.c"
              ) {
  if (perf_evsel__init_tp_uint_field(evsel, &sc->id, "__syscall_nr") &&
      perf_evsel__init_tp_uint_field(evsel, &sc->id, "nr"))
   return -
# 414 "builtin-trace.c" 3 4
          2
# 414 "builtin-trace.c"
                ;
  return 0;
 }

 return -
# 418 "builtin-trace.c" 3 4
        12
# 418 "builtin-trace.c"
              ;
}

static int perf_evsel__init_augmented_syscall_tp(struct evsel *evsel, struct evsel *tp)
{
 struct syscall_tp *sc = evsel__syscall_tp(evsel);

 if (sc != 
# 425 "builtin-trace.c" 3 4
          ((void *)0)
# 425 "builtin-trace.c"
              ) {
  struct tep_format_field *syscall_id = perf_evsel__field(tp, "id");
  if (syscall_id == 
# 427 "builtin-trace.c" 3 4
                   ((void *)0)
# 427 "builtin-trace.c"
                       )
   syscall_id = perf_evsel__field(tp, "__syscall_nr");
  if (syscall_id == 
# 429 "builtin-trace.c" 3 4
                   ((void *)0) 
# 429 "builtin-trace.c"
                        ||
      __tp_field__init_uint(&sc->id, syscall_id->size, syscall_id->offset, evsel->needs_swap))
   return -
# 431 "builtin-trace.c" 3 4
          22
# 431 "builtin-trace.c"
                ;

  return 0;
 }

 return -
# 436 "builtin-trace.c" 3 4
        12
# 436 "builtin-trace.c"
              ;
}

static int perf_evsel__init_augmented_syscall_tp_args(struct evsel *evsel)
{
 struct syscall_tp *sc = __evsel__syscall_tp(evsel);

 return __tp_field__init_ptr(&sc->args, sc->id.offset + sizeof(u64));
}

static int perf_evsel__init_augmented_syscall_tp_ret(struct evsel *evsel)
{
 struct syscall_tp *sc = __evsel__syscall_tp(evsel);

 return __tp_field__init_uint(&sc->ret, sizeof(u64), sc->id.offset + sizeof(u64), evsel->needs_swap);
}

static int perf_evsel__init_raw_syscall_tp(struct evsel *evsel, void *handler)
{
 if (evsel__syscall_tp(evsel) != 
# 455 "builtin-trace.c" 3 4
                                ((void *)0)
# 455 "builtin-trace.c"
                                    ) {
  if (({ struct syscall_tp *sc = __evsel__syscall_tp(evsel); perf_evsel__init_tp_uint_field(evsel, &sc->id, "id"); }))
   return -
# 457 "builtin-trace.c" 3 4
          2
# 457 "builtin-trace.c"
                ;

  evsel->handler = handler;
  return 0;
 }

 return -
# 463 "builtin-trace.c" 3 4
        12
# 463 "builtin-trace.c"
              ;
}

static struct evsel *perf_evsel__raw_syscall_newtp(const char *direction, void *handler)
{
 struct evsel *evsel = perf_evsel__newtp("raw_syscalls", direction);


 if (IS_ERR(evsel))
  evsel = perf_evsel__newtp("syscalls", direction);

 if (IS_ERR(evsel))
  return 
# 475 "builtin-trace.c" 3 4
        ((void *)0)
# 475 "builtin-trace.c"
            ;

 if (perf_evsel__init_raw_syscall_tp(evsel, handler))
  goto out_delete;

 return evsel;

out_delete:
 evsel__delete_priv(evsel);
 return 
# 484 "builtin-trace.c" 3 4
       ((void *)0)
# 484 "builtin-trace.c"
           ;
}

#define perf_evsel__sc_tp_uint(evsel,name,sample) ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->name.integer(&fields->name, sample); })



#define perf_evsel__sc_tp_ptr(evsel,name,sample) ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->name.pointer(&fields->name, sample); })



size_t strarray__scnprintf_suffix(struct strarray *sa, char *bf, size_t size, const char *intfmt, 
# 495 "builtin-trace.c" 3 4
                                                                                                 _Bool 
# 495 "builtin-trace.c"
                                                                                                      show_suffix, int val)
{
 int idx = val - sa->offset;

 if (idx < 0 || idx >= sa->nr_entries || sa->entries[idx] == 
# 499 "builtin-trace.c" 3 4
                                                            ((void *)0)
# 499 "builtin-trace.c"
                                                                ) {
  size_t printed = scnprintf(bf, size, intfmt, val);
  if (show_suffix)
   printed += scnprintf(bf + printed, size - printed, " /* %s??? */", sa->prefix);
  return printed;
 }

 return scnprintf(bf, size, "%s%s", sa->entries[idx], show_suffix ? sa->prefix : "");
}

size_t strarray__scnprintf(struct strarray *sa, char *bf, size_t size, const char *intfmt, 
# 509 "builtin-trace.c" 3 4
                                                                                          _Bool 
# 509 "builtin-trace.c"
                                                                                               show_prefix, int val)
{
 int idx = val - sa->offset;

 if (idx < 0 || idx >= sa->nr_entries || sa->entries[idx] == 
# 513 "builtin-trace.c" 3 4
                                                            ((void *)0)
# 513 "builtin-trace.c"
                                                                ) {
  size_t printed = scnprintf(bf, size, intfmt, val);
  if (show_prefix)
   printed += scnprintf(bf + printed, size - printed, " /* %s??? */", sa->prefix);
  return printed;
 }

 return scnprintf(bf, size, "%s%s", show_prefix ? sa->prefix : "", sa->entries[idx]);
}

static size_t __syscall_arg__scnprintf_strarray(char *bf, size_t size,
      const char *intfmt,
             struct syscall_arg *arg)
{
 return strarray__scnprintf(arg->parm, bf, size, intfmt, arg->show_string_prefix, arg->val);
}

static size_t syscall_arg__scnprintf_strarray(char *bf, size_t size,
           struct syscall_arg *arg)
{
 return __syscall_arg__scnprintf_strarray(bf, size, "%d", arg);
}

#define SCA_STRARRAY syscall_arg__scnprintf_strarray


# 538 "builtin-trace.c" 3 4
_Bool 
# 538 "builtin-trace.c"
    syscall_arg__strtoul_strarray(char *bf, size_t size, struct syscall_arg *arg, u64 *ret)
{
 return strarray__strtoul(arg->parm, bf, size, ret);
}


# 543 "builtin-trace.c" 3 4
_Bool 
# 543 "builtin-trace.c"
    syscall_arg__strtoul_strarray_flags(char *bf, size_t size, struct syscall_arg *arg, u64 *ret)
{
 return strarray__strtoul_flags(arg->parm, bf, size, ret);
}


# 548 "builtin-trace.c" 3 4
_Bool 
# 548 "builtin-trace.c"
    syscall_arg__strtoul_strarrays(char *bf, size_t size, struct syscall_arg *arg, u64 *ret)
{
 return strarrays__strtoul(arg->parm, bf, size, ret);
}

size_t syscall_arg__scnprintf_strarray_flags(char *bf, size_t size, struct syscall_arg *arg)
{
 return strarray__scnprintf_flags(arg->parm, bf, size, arg->show_string_prefix, arg->val);
}

size_t strarrays__scnprintf(struct strarrays *sas, char *bf, size_t size, const char *intfmt, 
# 558 "builtin-trace.c" 3 4
                                                                                             _Bool 
# 558 "builtin-trace.c"
                                                                                                  show_prefix, int val)
{
 size_t printed;
 int i;

 for (i = 0; i < sas->nr_entries; ++i) {
  struct strarray *sa = sas->entries[i];
  int idx = val - sa->offset;

  if (idx >= 0 && idx < sa->nr_entries) {
   if (sa->entries[idx] == 
# 568 "builtin-trace.c" 3 4
                          ((void *)0)
# 568 "builtin-trace.c"
                              )
    break;
   return scnprintf(bf, size, "%s%s", show_prefix ? sa->prefix : "", sa->entries[idx]);
  }
 }

 printed = scnprintf(bf, size, intfmt, val);
 if (show_prefix)
  printed += scnprintf(bf + printed, size - printed, " /* %s??? */", sas->entries[0]->prefix);
 return printed;
}


# 580 "builtin-trace.c" 3 4
_Bool 
# 580 "builtin-trace.c"
    strarray__strtoul(struct strarray *sa, char *bf, size_t size, u64 *ret)
{
 int i;

 for (i = 0; i < sa->nr_entries; ++i) {
  if (sa->entries[i] && 
# 585 "builtin-trace.c" 3 4
                       (__extension__ (__builtin_constant_p (
# 585 "builtin-trace.c"
                       size
# 585 "builtin-trace.c" 3 4
                       ) && ((__builtin_constant_p (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) && strlen (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) < ((size_t) (
# 585 "builtin-trace.c"
                       size
# 585 "builtin-trace.c" 3 4
                       ))) || (__builtin_constant_p (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) && strlen (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) < ((size_t) (
# 585 "builtin-trace.c"
                       size
# 585 "builtin-trace.c" 3 4
                       )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) && __builtin_constant_p (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) && (__s1_len = __builtin_strlen (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ), __s2_len = __builtin_strlen (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ), (!((size_t)(const void *)((
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) + 1) - (size_t)(const void *)(
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) + 1) - (size_t)(const void *)(
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       , 
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) : (__builtin_constant_p (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) && ((size_t)(const void *)((
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) + 1) - (size_t)(const void *)(
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) == 1) && (__s1_len = __builtin_strlen (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ), __s1_len < 4) ? (__builtin_constant_p (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) && ((size_t)(const void *)((
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) + 1) - (size_t)(const void *)(
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) == 1) ? __builtin_strcmp (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       , 
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ); int __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) && ((size_t)(const void *)((
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) + 1) - (size_t)(const void *)(
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) == 1) && (__s2_len = __builtin_strlen (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ), __s2_len < 4) ? (__builtin_constant_p (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) && ((size_t)(const void *)((
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) + 1) - (size_t)(const void *)(
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ) == 1) ? __builtin_strcmp (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       , 
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       ); int __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       , 
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       )))); }) : strncmp (
# 585 "builtin-trace.c"
                       sa->entries[i]
# 585 "builtin-trace.c" 3 4
                       , 
# 585 "builtin-trace.c"
                       bf
# 585 "builtin-trace.c" 3 4
                       , 
# 585 "builtin-trace.c"
                       size
# 585 "builtin-trace.c" 3 4
                       ))) 
# 585 "builtin-trace.c"
                                                         == 0 && sa->entries[i][size] == '\0') {
   *ret = sa->offset + i;
   return 
# 587 "builtin-trace.c" 3 4
         1
# 587 "builtin-trace.c"
             ;
  }
 }

 return 
# 591 "builtin-trace.c" 3 4
       0
# 591 "builtin-trace.c"
            ;
}


# 594 "builtin-trace.c" 3 4
_Bool 
# 594 "builtin-trace.c"
    strarray__strtoul_flags(struct strarray *sa, char *bf, size_t size, u64 *ret)
{
 u64 val = 0;
 char *tok = bf, *sep, *end;

 *ret = 0;

 while (size != 0) {
  int toklen = size;

  sep = memchr(tok, '|', size);
  if (sep != 
# 605 "builtin-trace.c" 3 4
            ((void *)0)
# 605 "builtin-trace.c"
                ) {
   size -= sep - tok + 1;

   end = sep - 1;
   while (end > tok && (((_ctype[(int)(unsigned char)(*end)])&(0x20)) != 0))
    --end;

   toklen = end - tok + 1;
  }

  while ((((_ctype[(int)(unsigned char)(*tok)])&(0x20)) != 0))
   ++tok;

  if ((((_ctype[(int)(unsigned char)(*tok)])&(0x01|0x02)) != 0) || *tok == '_') {
   if (!strarray__strtoul(sa, tok, toklen, &val))
    return 
# 620 "builtin-trace.c" 3 4
          0
# 620 "builtin-trace.c"
               ;
  } else {
   
# 622 "builtin-trace.c" 3 4
  _Bool 
# 622 "builtin-trace.c"
       is_hexa = tok[0] == 0 && (tok[1] = 'x' || tok[1] == 'X');

   val = strtoul(tok, 
# 624 "builtin-trace.c" 3 4
                     ((void *)0)
# 624 "builtin-trace.c"
                         , is_hexa ? 16 : 0);
  }

  *ret |= (1 << (val - 1));

  if (sep == 
# 629 "builtin-trace.c" 3 4
            ((void *)0)
# 629 "builtin-trace.c"
                )
   break;
  tok = sep + 1;
 }

 return 
# 634 "builtin-trace.c" 3 4
       1
# 634 "builtin-trace.c"
           ;
}


# 637 "builtin-trace.c" 3 4
_Bool 
# 637 "builtin-trace.c"
    strarrays__strtoul(struct strarrays *sas, char *bf, size_t size, u64 *ret)
{
 int i;

 for (i = 0; i < sas->nr_entries; ++i) {
  struct strarray *sa = sas->entries[i];

  if (strarray__strtoul(sa, bf, size, ret))
   return 
# 645 "builtin-trace.c" 3 4
         1
# 645 "builtin-trace.c"
             ;
 }

 return 
# 648 "builtin-trace.c" 3 4
       0
# 648 "builtin-trace.c"
            ;
}

size_t syscall_arg__scnprintf_strarrays(char *bf, size_t size,
     struct syscall_arg *arg)
{
 return strarrays__scnprintf(arg->parm, bf, size, "%d", arg->show_string_prefix, arg->val);
}





static size_t syscall_arg__scnprintf_fd_at(char *bf, size_t size,
        struct syscall_arg *arg)
{
 int fd = arg->val;
 const char *prefix = "AT_FD";

 if (fd == 
# 667 "builtin-trace.c" 3 4
          -100
# 667 "builtin-trace.c"
                  )
  return scnprintf(bf, size, "%s%s", arg->show_string_prefix ? prefix : "", "CWD");

 return syscall_arg__scnprintf_fd(bf, size, arg);
}

#define SCA_FDAT syscall_arg__scnprintf_fd_at

static size_t syscall_arg__scnprintf_close_fd(char *bf, size_t size,
           struct syscall_arg *arg);

#define SCA_CLOSE_FD syscall_arg__scnprintf_close_fd

size_t syscall_arg__scnprintf_hex(char *bf, size_t size, struct syscall_arg *arg)
{
 return scnprintf(bf, size, "%#lx", arg->val);
}

size_t syscall_arg__scnprintf_ptr(char *bf, size_t size, struct syscall_arg *arg)
{
 if (arg->val == 0)
  return scnprintf(bf, size, "NULL");
 return syscall_arg__scnprintf_hex(bf, size, arg);
}

size_t syscall_arg__scnprintf_int(char *bf, size_t size, struct syscall_arg *arg)
{
 return scnprintf(bf, size, "%d", arg->val);
}

size_t syscall_arg__scnprintf_long(char *bf, size_t size, struct syscall_arg *arg)
{
 return scnprintf(bf, size, "%ld", arg->val);
}

static size_t syscall_arg__scnprintf_char_array(char *bf, size_t size, struct syscall_arg *arg)
{



 return scnprintf(bf, size, "\"%-.*s\"", arg->fmt->nr_entries ?: arg->len, arg->val);
}

#define SCA_CHAR_ARRAY syscall_arg__scnprintf_char_array

static const char *bpf_cmd[] = {
 "MAP_CREATE", "MAP_LOOKUP_ELEM", "MAP_UPDATE_ELEM", "MAP_DELETE_ELEM",
 "MAP_GET_NEXT_KEY", "PROG_LOAD",
};
static struct strarray strarray__bpf_cmd = { .nr_entries = (sizeof(bpf_cmd) / sizeof((bpf_cmd)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((bpf_cmd)), typeof(&(bpf_cmd)[0]))); }))), .entries = bpf_cmd, .prefix = "BPF_", };

static const char *fsmount_flags[] = {
 [1] = "CLOEXEC",
};
static struct strarray strarray__fsmount_flags = { .nr_entries = (sizeof(fsmount_flags) / sizeof((fsmount_flags)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((fsmount_flags)), typeof(&(fsmount_flags)[0]))); }))), .entries = fsmount_flags, .prefix = "FSMOUNT_", };

# 1 "trace/beauty/generated/fsconfig_arrays.c" 1
static const char *fsconfig_cmds[] = {
 [0] = "SET_FLAG",
 [1] = "SET_STRING",
 [2] = "SET_BINARY",
 [3] = "SET_PATH",
 [4] = "SET_PATH_EMPTY",
 [5] = "SET_FD",
 [6] = "CMD_CREATE",
 [7] = "CMD_RECONFIGURE",
};
# 724 "builtin-trace.c" 2

static struct strarray strarray__fsconfig_cmds = { .nr_entries = (sizeof(fsconfig_cmds) / sizeof((fsconfig_cmds)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((fsconfig_cmds)), typeof(&(fsconfig_cmds)[0]))); }))), .entries = fsconfig_cmds, .prefix = "FSCONFIG_", };

static const char *epoll_ctl_ops[] = { "ADD", "DEL", "MOD", };
static struct strarray strarray__epoll_ctl_ops = { .offset = 1, .nr_entries = (sizeof(epoll_ctl_ops) / sizeof((epoll_ctl_ops)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((epoll_ctl_ops)), typeof(&(epoll_ctl_ops)[0]))); }))), .entries = epoll_ctl_ops, .prefix = "EPOLL_CTL_", };

static const char *itimers[] = { "REAL", "VIRTUAL", "PROF", };
static struct strarray strarray__itimers = { .nr_entries = (sizeof(itimers) / sizeof((itimers)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((itimers)), typeof(&(itimers)[0]))); }))), .entries = itimers, .prefix = "ITIMER_", };

static const char *keyctl_options[] = {
 "GET_KEYRING_ID", "JOIN_SESSION_KEYRING", "UPDATE", "REVOKE", "CHOWN",
 "SETPERM", "DESCRIBE", "CLEAR", "LINK", "UNLINK", "SEARCH", "READ",
 "INSTANTIATE", "NEGATE", "SET_REQKEY_KEYRING", "SET_TIMEOUT",
 "ASSUME_AUTHORITY", "GET_SECURITY", "SESSION_TO_PARENT", "REJECT",
 "INSTANTIATE_IOV", "INVALIDATE", "GET_PERSISTENT",
};
static struct strarray strarray__keyctl_options = { .nr_entries = (sizeof(keyctl_options) / sizeof((keyctl_options)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((keyctl_options)), typeof(&(keyctl_options)[0]))); }))), .entries = keyctl_options, .prefix = "KEYCTL_", };

static const char *whences[] = { "SET", "CUR", "END",

"DATA",


"HOLE",

};
static struct strarray strarray__whences = { .nr_entries = (sizeof(whences) / sizeof((whences)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((whences)), typeof(&(whences)[0]))); }))), .entries = whences, .prefix = "SEEK_", };

static const char *fcntl_cmds[] = {
 "DUPFD", "GETFD", "SETFD", "GETFL", "SETFL", "GETLK", "SETLK",
 "SETLKW", "SETOWN", "GETOWN", "SETSIG", "GETSIG", "GETLK64",
 "SETLK64", "SETLKW64", "SETOWN_EX", "GETOWN_EX",
 "GETOWNER_UIDS",
};
static struct strarray strarray__fcntl_cmds = { .nr_entries = (sizeof(fcntl_cmds) / sizeof((fcntl_cmds)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((fcntl_cmds)), typeof(&(fcntl_cmds)[0]))); }))), .entries = fcntl_cmds, .prefix = "F_", };

static const char *fcntl_linux_specific_cmds[] = {
 "SETLEASE", "GETLEASE", "NOTIFY", [5] = "CANCELLK", "DUPFD_CLOEXEC",
 "SETPIPE_SZ", "GETPIPE_SZ", "ADD_SEALS", "GET_SEALS",
 "GET_RW_HINT", "SET_RW_HINT", "GET_FILE_RW_HINT", "SET_FILE_RW_HINT",
};

static struct strarray strarray__fcntl_linux_specific_cmds = { .offset = 1024, .nr_entries = (sizeof(fcntl_linux_specific_cmds) / sizeof((fcntl_linux_specific_cmds)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((fcntl_linux_specific_cmds)), typeof(&(fcntl_linux_specific_cmds)[0]))); }))), .entries = fcntl_linux_specific_cmds, .prefix = "F_", };

static struct strarray *fcntl_cmds_arrays[] = {
 &strarray__fcntl_cmds,
 &strarray__fcntl_linux_specific_cmds,
};

static struct strarrays strarrays__fcntl_cmds_arrays = { .nr_entries = (sizeof(fcntl_cmds_arrays) / sizeof((fcntl_cmds_arrays)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((fcntl_cmds_arrays)), typeof(&(fcntl_cmds_arrays)[0]))); }))), .entries = fcntl_cmds_arrays, };

static const char *rlimit_resources[] = {
 "CPU", "FSIZE", "DATA", "STACK", "CORE", "RSS", "NPROC", "NOFILE",
 "MEMLOCK", "AS", "LOCKS", "SIGPENDING", "MSGQUEUE", "NICE", "RTPRIO",
 "RTTIME",
};
static struct strarray strarray__rlimit_resources = { .nr_entries = (sizeof(rlimit_resources) / sizeof((rlimit_resources)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((rlimit_resources)), typeof(&(rlimit_resources)[0]))); }))), .entries = rlimit_resources, .prefix = "RLIMIT_", };

static const char *sighow[] = { "BLOCK", "UNBLOCK", "SETMASK", };
static struct strarray strarray__sighow = { .nr_entries = (sizeof(sighow) / sizeof((sighow)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((sighow)), typeof(&(sighow)[0]))); }))), .entries = sighow, .prefix = "SIG_", };

static const char *clockid[] = {
 "REALTIME", "MONOTONIC", "PROCESS_CPUTIME_ID", "THREAD_CPUTIME_ID",
 "MONOTONIC_RAW", "REALTIME_COARSE", "MONOTONIC_COARSE", "BOOTTIME",
 "REALTIME_ALARM", "BOOTTIME_ALARM", "SGI_CYCLE", "TAI"
};
static struct strarray strarray__clockid = { .nr_entries = (sizeof(clockid) / sizeof((clockid)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((clockid)), typeof(&(clockid)[0]))); }))), .entries = clockid, .prefix = "CLOCK_", };

static size_t syscall_arg__scnprintf_access_mode(char *bf, size_t size,
       struct syscall_arg *arg)
{
 
# 795 "builtin-trace.c" 3 4
_Bool 
# 795 "builtin-trace.c"
     show_prefix = arg->show_string_prefix;
 const char *suffix = "_OK";
 size_t printed = 0;
 int mode = arg->val;

 if (mode == 
# 800 "builtin-trace.c" 3 4
            0
# 800 "builtin-trace.c"
                )
  return scnprintf(bf, size, "F%s", show_prefix ? suffix : "");
#define P_MODE(n) if (mode & n ##_OK) { printed += scnprintf(bf + printed, size - printed, "%s%s", #n, show_prefix ? suffix : ""); mode &= ~n ##_OK; }





 if (mode & 
# 808 "builtin-trace.c" 3 4
4
# 808 "builtin-trace.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s", "R", show_prefix ? suffix : ""); mode &= ~
# 808 "builtin-trace.c" 3 4
4
# 808 "builtin-trace.c"
; };
 if (mode & 
# 809 "builtin-trace.c" 3 4
2
# 809 "builtin-trace.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s", "W", show_prefix ? suffix : ""); mode &= ~
# 809 "builtin-trace.c" 3 4
2
# 809 "builtin-trace.c"
; };
 if (mode & 
# 810 "builtin-trace.c" 3 4
1
# 810 "builtin-trace.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s", "X", show_prefix ? suffix : ""); mode &= ~
# 810 "builtin-trace.c" 3 4
1
# 810 "builtin-trace.c"
; };
#undef P_MODE

 if (mode)
  printed += scnprintf(bf + printed, size - printed, "|%#x", mode);

 return printed;
}

#define SCA_ACCMODE syscall_arg__scnprintf_access_mode

static size_t syscall_arg__scnprintf_filename(char *bf, size_t size,
           struct syscall_arg *arg);

#define SCA_FILENAME syscall_arg__scnprintf_filename

static size_t syscall_arg__scnprintf_pipe_flags(char *bf, size_t size,
      struct syscall_arg *arg)
{
 
# 829 "builtin-trace.c" 3 4
_Bool 
# 829 "builtin-trace.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "O_";
 int printed = 0, flags = arg->val;

#define P_FLAG(n) if (flags & O_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); flags &= ~O_ ##n; }





 if (flags & 
# 839 "builtin-trace.c" 3 4
02000000
# 839 "builtin-trace.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CLOEXEC"); flags &= ~
# 839 "builtin-trace.c" 3 4
02000000
# 839 "builtin-trace.c"
; };
 if (flags & 
# 840 "builtin-trace.c" 3 4
04000
# 840 "builtin-trace.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NONBLOCK"); flags &= ~
# 840 "builtin-trace.c" 3 4
04000
# 840 "builtin-trace.c"
; };
#undef P_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

#define SCA_PIPE_FLAGS syscall_arg__scnprintf_pipe_flags
# 858 "builtin-trace.c"
static size_t syscall_arg__scnprintf_getrandom_flags(char *bf, size_t size,
         struct syscall_arg *arg)
{
 
# 861 "builtin-trace.c" 3 4
_Bool 
# 861 "builtin-trace.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "GRND_";
 int printed = 0, flags = arg->val;

#define P_FLAG(n) if (flags & GRND_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); flags &= ~GRND_ ##n; }





 if (flags & 
# 871 "builtin-trace.c" 3 4
0x0002
# 871 "builtin-trace.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "RANDOM"); flags &= ~
# 871 "builtin-trace.c" 3 4
0x0002
# 871 "builtin-trace.c"
; };
 if (flags & 
# 872 "builtin-trace.c" 3 4
0x0001
# 872 "builtin-trace.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NONBLOCK"); flags &= ~
# 872 "builtin-trace.c" 3 4
0x0001
# 872 "builtin-trace.c"
; };
#undef P_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

#define SCA_GETRANDOM_FLAGS syscall_arg__scnprintf_getrandom_flags

#define STRARRAY(name,array) { .scnprintf = SCA_STRARRAY, .strtoul = STUL_STRARRAY, .parm = &strarray__ ##array, }




#define STRARRAY_FLAGS(name,array) { .scnprintf = SCA_STRARRAY_FLAGS, .strtoul = STUL_STRARRAY_FLAGS, .parm = &strarray__ ##array, }




# 1 "trace/beauty/arch_errno_names.c" 1
# 1 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 1




static const char *errno_to_name__x86(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__alpha(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EDEADLK";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EAGAIN";
 case 36: return "EINPROGRESS";
 case 37: return "EALREADY";
 case 38: return "ENOTSOCK";
 case 39: return "EDESTADDRREQ";
 case 40: return "EMSGSIZE";
 case 41: return "EPROTOTYPE";
 case 42: return "ENOPROTOOPT";
 case 43: return "EPROTONOSUPPORT";
 case 44: return "ESOCKTNOSUPPORT";
 case 45: return "EOPNOTSUPP";
 case 46: return "EPFNOSUPPORT";
 case 47: return "EAFNOSUPPORT";
 case 48: return "EADDRINUSE";
 case 49: return "EADDRNOTAVAIL";
 case 50: return "ENETDOWN";
 case 51: return "ENETUNREACH";
 case 52: return "ENETRESET";
 case 53: return "ECONNABORTED";
 case 54: return "ECONNRESET";
 case 55: return "ENOBUFS";
 case 56: return "EISCONN";
 case 57: return "ENOTCONN";
 case 58: return "ESHUTDOWN";
 case 59: return "ETOOMANYREFS";
 case 60: return "ETIMEDOUT";
 case 61: return "ECONNREFUSED";
 case 62: return "ELOOP";
 case 63: return "ENAMETOOLONG";
 case 64: return "EHOSTDOWN";
 case 65: return "EHOSTUNREACH";
 case 66: return "ENOTEMPTY";
 case 68: return "EUSERS";
 case 69: return "EDQUOT";
 case 70: return "ESTALE";
 case 71: return "EREMOTE";
 case 77: return "ENOLCK";
 case 78: return "ENOSYS";
 case 80: return "ENOMSG";
 case 81: return "EIDRM";
 case 82: return "ENOSR";
 case 83: return "ETIME";
 case 84: return "EBADMSG";
 case 85: return "EPROTO";
 case 86: return "ENODATA";
 case 87: return "ENOSTR";
 case 88: return "ECHRNG";
 case 89: return "EL2NSYNC";
 case 90: return "EL3HLT";
 case 91: return "EL3RST";
 case 92: return "ENOPKG";
 case 93: return "ELNRNG";
 case 94: return "EUNATCH";
 case 95: return "ENOCSI";
 case 96: return "EL2HLT";
 case 97: return "EBADE";
 case 98: return "EBADR";
 case 99: return "EXFULL";
 case 100: return "ENOANO";
 case 101: return "EBADRQC";
 case 102: return "EBADSLT";
 case 104: return "EBFONT";
 case 105: return "ENONET";
 case 106: return "ENOLINK";
 case 107: return "EADV";
 case 108: return "ESRMNT";
 case 109: return "ECOMM";
 case 110: return "EMULTIHOP";
 case 111: return "EDOTDOT";
 case 112: return "EOVERFLOW";
 case 113: return "ENOTUNIQ";
 case 114: return "EBADFD";
 case 115: return "EREMCHG";
 case 116: return "EILSEQ";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "ELIBACC";
 case 123: return "ELIBBAD";
 case 124: return "ELIBSCN";
 case 125: return "ELIBMAX";
 case 126: return "ELIBEXEC";
 case 127: return "ERESTART";
 case 128: return "ESTRPIPE";
 case 129: return "ENOMEDIUM";
 case 130: return "EMEDIUMTYPE";
 case 131: return "ECANCELED";
 case 132: return "ENOKEY";
 case 133: return "EKEYEXPIRED";
 case 134: return "EKEYREVOKED";
 case 135: return "EKEYREJECTED";
 case 136: return "EOWNERDEAD";
 case 137: return "ENOTRECOVERABLE";
 case 138: return "ERFKILL";
 case 139: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__arc(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__arm(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__arm64(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__csky(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__mips(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "ENOMSG";
 case 36: return "EIDRM";
 case 37: return "ECHRNG";
 case 38: return "EL2NSYNC";
 case 39: return "EL3HLT";
 case 40: return "EL3RST";
 case 41: return "ELNRNG";
 case 42: return "EUNATCH";
 case 43: return "ENOCSI";
 case 44: return "EL2HLT";
 case 45: return "EDEADLK";
 case 46: return "ENOLCK";
 case 50: return "EBADE";
 case 51: return "EBADR";
 case 52: return "EXFULL";
 case 53: return "ENOANO";
 case 54: return "EBADRQC";
 case 55: return "EBADSLT";
 case 56: return "EDEADLOCK";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 73: return "EDOTDOT";
 case 74: return "EMULTIHOP";
 case 77: return "EBADMSG";
 case 78: return "ENAMETOOLONG";
 case 79: return "EOVERFLOW";
 case 80: return "ENOTUNIQ";
 case 81: return "EBADFD";
 case 82: return "EREMCHG";
 case 83: return "ELIBACC";
 case 84: return "ELIBBAD";
 case 85: return "ELIBSCN";
 case 86: return "ELIBMAX";
 case 87: return "ELIBEXEC";
 case 88: return "EILSEQ";
 case 89: return "ENOSYS";
 case 90: return "ELOOP";
 case 91: return "ERESTART";
 case 92: return "ESTRPIPE";
 case 93: return "ENOTEMPTY";
 case 94: return "EUSERS";
 case 95: return "ENOTSOCK";
 case 96: return "EDESTADDRREQ";
 case 97: return "EMSGSIZE";
 case 98: return "EPROTOTYPE";
 case 99: return "ENOPROTOOPT";
 case 120: return "EPROTONOSUPPORT";
 case 121: return "ESOCKTNOSUPPORT";
 case 122: return "EOPNOTSUPP";
 case 123: return "EPFNOSUPPORT";
 case 124: return "EAFNOSUPPORT";
 case 125: return "EADDRINUSE";
 case 126: return "EADDRNOTAVAIL";
 case 127: return "ENETDOWN";
 case 128: return "ENETUNREACH";
 case 129: return "ENETRESET";
 case 130: return "ECONNABORTED";
 case 131: return "ECONNRESET";
 case 132: return "ENOBUFS";
 case 133: return "EISCONN";
 case 134: return "ENOTCONN";
 case 135: return "EUCLEAN";
 case 137: return "ENOTNAM";
 case 138: return "ENAVAIL";
 case 139: return "EISNAM";
 case 140: return "EREMOTEIO";
 case 141: return "EINIT";
 case 142: return "EREMDEV";
 case 143: return "ESHUTDOWN";
 case 144: return "ETOOMANYREFS";
 case 145: return "ETIMEDOUT";
 case 146: return "ECONNREFUSED";
 case 147: return "EHOSTDOWN";
 case 148: return "EHOSTUNREACH";
 case 149: return "EALREADY";
 case 150: return "EINPROGRESS";
 case 151: return "ESTALE";
 case 158: return "ECANCELED";
 case 159: return "ENOMEDIUM";
 case 160: return "EMEDIUMTYPE";
 case 161: return "ENOKEY";
 case 162: return "EKEYEXPIRED";
 case 163: return "EKEYREVOKED";
 case 164: return "EKEYREJECTED";
 case 165: return "EOWNERDEAD";
 case 166: return "ENOTRECOVERABLE";
 case 167: return "ERFKILL";
 case 168: return "EHWPOISON";
 case 1133: return "EDQUOT";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__parisc(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "ENOMSG";
 case 36: return "EIDRM";
 case 37: return "ECHRNG";
 case 38: return "EL2NSYNC";
 case 39: return "EL3HLT";
 case 40: return "EL3RST";
 case 41: return "ELNRNG";
 case 42: return "EUNATCH";
 case 43: return "ENOCSI";
 case 44: return "EL2HLT";
 case 45: return "EDEADLK";
 case 46: return "ENOLCK";
 case 47: return "EILSEQ";
 case 50: return "ENONET";
 case 51: return "ENODATA";
 case 52: return "ETIME";
 case 53: return "ENOSR";
 case 54: return "ENOSTR";
 case 55: return "ENOPKG";
 case 57: return "ENOLINK";
 case 58: return "EADV";
 case 59: return "ESRMNT";
 case 60: return "ECOMM";
 case 61: return "EPROTO";
 case 64: return "EMULTIHOP";
 case 66: return "EDOTDOT";
 case 67: return "EBADMSG";
 case 68: return "EUSERS";
 case 69: return "EDQUOT";
 case 70: return "ESTALE";
 case 71: return "EREMOTE";
 case 72: return "EOVERFLOW";
 case 160: return "EBADE";
 case 161: return "EBADR";
 case 162: return "EXFULL";
 case 163: return "ENOANO";
 case 164: return "EBADRQC";
 case 165: return "EBADSLT";
 case 166: return "EBFONT";
 case 167: return "ENOTUNIQ";
 case 168: return "EBADFD";
 case 169: return "EREMCHG";
 case 170: return "ELIBACC";
 case 171: return "ELIBBAD";
 case 172: return "ELIBSCN";
 case 173: return "ELIBMAX";
 case 174: return "ELIBEXEC";
 case 175: return "ERESTART";
 case 176: return "ESTRPIPE";
 case 177: return "EUCLEAN";
 case 178: return "ENOTNAM";
 case 179: return "ENAVAIL";
 case 180: return "EISNAM";
 case 181: return "EREMOTEIO";
 case 182: return "ENOMEDIUM";
 case 183: return "EMEDIUMTYPE";
 case 184: return "ENOKEY";
 case 185: return "EKEYEXPIRED";
 case 186: return "EKEYREVOKED";
 case 187: return "EKEYREJECTED";
 case 215: return "ENOSYM";
 case 216: return "ENOTSOCK";
 case 217: return "EDESTADDRREQ";
 case 218: return "EMSGSIZE";
 case 219: return "EPROTOTYPE";
 case 220: return "ENOPROTOOPT";
 case 221: return "EPROTONOSUPPORT";
 case 222: return "ESOCKTNOSUPPORT";
 case 223: return "EOPNOTSUPP";
 case 224: return "EPFNOSUPPORT";
 case 225: return "EAFNOSUPPORT";
 case 226: return "EADDRINUSE";
 case 227: return "EADDRNOTAVAIL";
 case 228: return "ENETDOWN";
 case 229: return "ENETUNREACH";
 case 230: return "ENETRESET";
 case 231: return "ECONNABORTED";
 case 232: return "ECONNRESET";
 case 233: return "ENOBUFS";
 case 234: return "EISCONN";
 case 235: return "ENOTCONN";
 case 236: return "ESHUTDOWN";
 case 237: return "ETOOMANYREFS";
 case 238: return "ETIMEDOUT";
 case 239: return "ECONNREFUSED";
 case 240: return "EREMOTERELEASE";
 case 241: return "EHOSTDOWN";
 case 242: return "EHOSTUNREACH";
 case 244: return "EALREADY";
 case 245: return "EINPROGRESS";
 case 247: return "ENOTEMPTY";
 case 248: return "ENAMETOOLONG";
 case 249: return "ELOOP";
 case 251: return "ENOSYS";
 case 253: return "ECANCELLED";
 case 254: return "EOWNERDEAD";
 case 255: return "ENOTRECOVERABLE";
 case 256: return "ERFKILL";
 case 257: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__powerpc(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 58: return "EDEADLOCK";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__riscv(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__s390(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__sh(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__sparc(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 36: return "EINPROGRESS";
 case 37: return "EALREADY";
 case 38: return "ENOTSOCK";
 case 39: return "EDESTADDRREQ";
 case 40: return "EMSGSIZE";
 case 41: return "EPROTOTYPE";
 case 42: return "ENOPROTOOPT";
 case 43: return "EPROTONOSUPPORT";
 case 44: return "ESOCKTNOSUPPORT";
 case 45: return "EOPNOTSUPP";
 case 46: return "EPFNOSUPPORT";
 case 47: return "EAFNOSUPPORT";
 case 48: return "EADDRINUSE";
 case 49: return "EADDRNOTAVAIL";
 case 50: return "ENETDOWN";
 case 51: return "ENETUNREACH";
 case 52: return "ENETRESET";
 case 53: return "ECONNABORTED";
 case 54: return "ECONNRESET";
 case 55: return "ENOBUFS";
 case 56: return "EISCONN";
 case 57: return "ENOTCONN";
 case 58: return "ESHUTDOWN";
 case 59: return "ETOOMANYREFS";
 case 60: return "ETIMEDOUT";
 case 61: return "ECONNREFUSED";
 case 62: return "ELOOP";
 case 63: return "ENAMETOOLONG";
 case 64: return "EHOSTDOWN";
 case 65: return "EHOSTUNREACH";
 case 66: return "ENOTEMPTY";
 case 67: return "EPROCLIM";
 case 68: return "EUSERS";
 case 69: return "EDQUOT";
 case 70: return "ESTALE";
 case 71: return "EREMOTE";
 case 72: return "ENOSTR";
 case 73: return "ETIME";
 case 74: return "ENOSR";
 case 75: return "ENOMSG";
 case 76: return "EBADMSG";
 case 77: return "EIDRM";
 case 78: return "EDEADLK";
 case 79: return "ENOLCK";
 case 80: return "ENONET";
 case 81: return "ERREMOTE";
 case 82: return "ENOLINK";
 case 83: return "EADV";
 case 84: return "ESRMNT";
 case 85: return "ECOMM";
 case 86: return "EPROTO";
 case 87: return "EMULTIHOP";
 case 88: return "EDOTDOT";
 case 89: return "EREMCHG";
 case 90: return "ENOSYS";
 case 91: return "ESTRPIPE";
 case 92: return "EOVERFLOW";
 case 93: return "EBADFD";
 case 94: return "ECHRNG";
 case 95: return "EL2NSYNC";
 case 96: return "EL3HLT";
 case 97: return "EL3RST";
 case 98: return "ELNRNG";
 case 99: return "EUNATCH";
 case 100: return "ENOCSI";
 case 101: return "EL2HLT";
 case 102: return "EBADE";
 case 103: return "EBADR";
 case 104: return "EXFULL";
 case 105: return "ENOANO";
 case 106: return "EBADRQC";
 case 107: return "EBADSLT";
 case 108: return "EDEADLOCK";
 case 109: return "EBFONT";
 case 110: return "ELIBEXEC";
 case 111: return "ENODATA";
 case 112: return "ELIBBAD";
 case 113: return "ENOPKG";
 case 114: return "ELIBACC";
 case 115: return "ENOTUNIQ";
 case 116: return "ERESTART";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EILSEQ";
 case 123: return "ELIBMAX";
 case 124: return "ELIBSCN";
 case 125: return "ENOMEDIUM";
 case 126: return "EMEDIUMTYPE";
 case 127: return "ECANCELED";
 case 128: return "ENOKEY";
 case 129: return "EKEYEXPIRED";
 case 130: return "EKEYREVOKED";
 case 131: return "EKEYREJECTED";
 case 132: return "EOWNERDEAD";
 case 133: return "ENOTRECOVERABLE";
 case 134: return "ERFKILL";
 case 135: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__xtensa(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

static const char *errno_to_name__generic(int err)
{
 switch (err) {
 case 1: return "EPERM";
 case 2: return "ENOENT";
 case 3: return "ESRCH";
 case 4: return "EINTR";
 case 5: return "EIO";
 case 6: return "ENXIO";
 case 7: return "E2BIG";
 case 8: return "ENOEXEC";
 case 9: return "EBADF";
 case 10: return "ECHILD";
 case 11: return "EAGAIN";
 case 12: return "ENOMEM";
 case 13: return "EACCES";
 case 14: return "EFAULT";
 case 15: return "ENOTBLK";
 case 16: return "EBUSY";
 case 17: return "EEXIST";
 case 18: return "EXDEV";
 case 19: return "ENODEV";
 case 20: return "ENOTDIR";
 case 21: return "EISDIR";
 case 22: return "EINVAL";
 case 23: return "ENFILE";
 case 24: return "EMFILE";
 case 25: return "ENOTTY";
 case 26: return "ETXTBSY";
 case 27: return "EFBIG";
 case 28: return "ENOSPC";
 case 29: return "ESPIPE";
 case 30: return "EROFS";
 case 31: return "EMLINK";
 case 32: return "EPIPE";
 case 33: return "EDOM";
 case 34: return "ERANGE";
 case 35: return "EDEADLK";
 case 36: return "ENAMETOOLONG";
 case 37: return "ENOLCK";
 case 38: return "ENOSYS";
 case 39: return "ENOTEMPTY";
 case 40: return "ELOOP";
 case 42: return "ENOMSG";
 case 43: return "EIDRM";
 case 44: return "ECHRNG";
 case 45: return "EL2NSYNC";
 case 46: return "EL3HLT";
 case 47: return "EL3RST";
 case 48: return "ELNRNG";
 case 49: return "EUNATCH";
 case 50: return "ENOCSI";
 case 51: return "EL2HLT";
 case 52: return "EBADE";
 case 53: return "EBADR";
 case 54: return "EXFULL";
 case 55: return "ENOANO";
 case 56: return "EBADRQC";
 case 57: return "EBADSLT";
 case 59: return "EBFONT";
 case 60: return "ENOSTR";
 case 61: return "ENODATA";
 case 62: return "ETIME";
 case 63: return "ENOSR";
 case 64: return "ENONET";
 case 65: return "ENOPKG";
 case 66: return "EREMOTE";
 case 67: return "ENOLINK";
 case 68: return "EADV";
 case 69: return "ESRMNT";
 case 70: return "ECOMM";
 case 71: return "EPROTO";
 case 72: return "EMULTIHOP";
 case 73: return "EDOTDOT";
 case 74: return "EBADMSG";
 case 75: return "EOVERFLOW";
 case 76: return "ENOTUNIQ";
 case 77: return "EBADFD";
 case 78: return "EREMCHG";
 case 79: return "ELIBACC";
 case 80: return "ELIBBAD";
 case 81: return "ELIBSCN";
 case 82: return "ELIBMAX";
 case 83: return "ELIBEXEC";
 case 84: return "EILSEQ";
 case 85: return "ERESTART";
 case 86: return "ESTRPIPE";
 case 87: return "EUSERS";
 case 88: return "ENOTSOCK";
 case 89: return "EDESTADDRREQ";
 case 90: return "EMSGSIZE";
 case 91: return "EPROTOTYPE";
 case 92: return "ENOPROTOOPT";
 case 93: return "EPROTONOSUPPORT";
 case 94: return "ESOCKTNOSUPPORT";
 case 95: return "EOPNOTSUPP";
 case 96: return "EPFNOSUPPORT";
 case 97: return "EAFNOSUPPORT";
 case 98: return "EADDRINUSE";
 case 99: return "EADDRNOTAVAIL";
 case 100: return "ENETDOWN";
 case 101: return "ENETUNREACH";
 case 102: return "ENETRESET";
 case 103: return "ECONNABORTED";
 case 104: return "ECONNRESET";
 case 105: return "ENOBUFS";
 case 106: return "EISCONN";
 case 107: return "ENOTCONN";
 case 108: return "ESHUTDOWN";
 case 109: return "ETOOMANYREFS";
 case 110: return "ETIMEDOUT";
 case 111: return "ECONNREFUSED";
 case 112: return "EHOSTDOWN";
 case 113: return "EHOSTUNREACH";
 case 114: return "EALREADY";
 case 115: return "EINPROGRESS";
 case 116: return "ESTALE";
 case 117: return "EUCLEAN";
 case 118: return "ENOTNAM";
 case 119: return "ENAVAIL";
 case 120: return "EISNAM";
 case 121: return "EREMOTEIO";
 case 122: return "EDQUOT";
 case 123: return "ENOMEDIUM";
 case 124: return "EMEDIUMTYPE";
 case 125: return "ECANCELED";
 case 126: return "ENOKEY";
 case 127: return "EKEYEXPIRED";
 case 128: return "EKEYREVOKED";
 case 129: return "EKEYREJECTED";
 case 130: return "EOWNERDEAD";
 case 131: return "ENOTRECOVERABLE";
 case 132: return "ERFKILL";
 case 133: return "EHWPOISON";
 default:
  return "(unknown)";
 }
}

const char *arch_syscalls__strerrno(const char *arch, int err)
{
 if (!
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "x86"
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2101 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                        )
  return errno_to_name__x86(err);
 if (!
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "alpha"
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2103 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                          )
  return errno_to_name__alpha(err);
 if (!
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arc"
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2105 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                        )
  return errno_to_name__arc(err);
 if (!
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm"
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2107 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                        )
  return errno_to_name__arm(err);
 if (!
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "arm64"
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2109 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                          )
  return errno_to_name__arm64(err);
 if (!
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "csky"
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2111 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                         )
  return errno_to_name__csky(err);
 if (!
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "mips"
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2113 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                         )
  return errno_to_name__mips(err);
 if (!
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "parisc"
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2115 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                           )
  return errno_to_name__parisc(err);
 if (!
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "powerpc"
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2117 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                            )
  return errno_to_name__powerpc(err);
 if (!
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "riscv"
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2119 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                          )
  return errno_to_name__riscv(err);
 if (!
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "s390"
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2121 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                         )
  return errno_to_name__s390(err);
 if (!
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sh"
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2123 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                       )
  return errno_to_name__sh(err);
 if (!
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "sparc"
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2125 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                          )
  return errno_to_name__sparc(err);
 if (!
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && __builtin_constant_p (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), (!((size_t)(const void *)((
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__builtin_constant_p (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) && ((size_t)(const void *)((
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     arch
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     , 
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
     "xtensa"
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c" 3 4
     )))); })
# 2127 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/arch_errno_name_array.c"
                           )
  return errno_to_name__xtensa(err);
 return errno_to_name__generic(err);
}
# 1 "trace/beauty/arch_errno_names.c" 2
# 894 "builtin-trace.c" 2
# 1 "trace/beauty/eventfd.c" 1


#define EFD_SEMAPHORE 1



#define EFD_NONBLOCK 00004000



#define EFD_CLOEXEC 02000000


static size_t syscall_arg__scnprintf_eventfd_flags(char *bf, size_t size, struct syscall_arg *arg)
{
 
# 16 "trace/beauty/eventfd.c" 3 4
_Bool 
# 16 "trace/beauty/eventfd.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "EFD_";
 int printed = 0, flags = arg->val;

 if (flags == 0)
  return scnprintf(bf, size, "NONE");
#define P_FLAG(n) if (flags & EFD_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); flags &= ~EFD_ ##n; }





 if (flags & 1) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "SEMAPHORE"); flags &= ~1; };
 if (flags & 02000000) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CLOEXEC"); flags &= ~02000000; };
 if (flags & 00004000) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NONBLOCK"); flags &= ~00004000; };
#undef P_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

#define SCA_EFD_FLAGS syscall_arg__scnprintf_eventfd_flags
# 895 "builtin-trace.c" 2
# 1 "trace/beauty/futex_op.c" 1

# 1 "/usr/include/linux/futex.h" 1 3 4

#define _LINUX_FUTEX_H 







#define FUTEX_WAIT 0
#define FUTEX_WAKE 1
#define FUTEX_FD 2
#define FUTEX_REQUEUE 3
#define FUTEX_CMP_REQUEUE 4
#define FUTEX_WAKE_OP 5
#define FUTEX_LOCK_PI 6
#define FUTEX_UNLOCK_PI 7
#define FUTEX_TRYLOCK_PI 8
#define FUTEX_WAIT_BITSET 9
#define FUTEX_WAKE_BITSET 10
#define FUTEX_WAIT_REQUEUE_PI 11
#define FUTEX_CMP_REQUEUE_PI 12

#define FUTEX_PRIVATE_FLAG 128
#define FUTEX_CLOCK_REALTIME 256
#define FUTEX_CMD_MASK ~(FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME)

#define FUTEX_WAIT_PRIVATE (FUTEX_WAIT | FUTEX_PRIVATE_FLAG)
#define FUTEX_WAKE_PRIVATE (FUTEX_WAKE | FUTEX_PRIVATE_FLAG)
#define FUTEX_REQUEUE_PRIVATE (FUTEX_REQUEUE | FUTEX_PRIVATE_FLAG)
#define FUTEX_CMP_REQUEUE_PRIVATE (FUTEX_CMP_REQUEUE | FUTEX_PRIVATE_FLAG)
#define FUTEX_WAKE_OP_PRIVATE (FUTEX_WAKE_OP | FUTEX_PRIVATE_FLAG)
#define FUTEX_LOCK_PI_PRIVATE (FUTEX_LOCK_PI | FUTEX_PRIVATE_FLAG)
#define FUTEX_UNLOCK_PI_PRIVATE (FUTEX_UNLOCK_PI | FUTEX_PRIVATE_FLAG)
#define FUTEX_TRYLOCK_PI_PRIVATE (FUTEX_TRYLOCK_PI | FUTEX_PRIVATE_FLAG)
#define FUTEX_WAIT_BITSET_PRIVATE (FUTEX_WAIT_BITSET | FUTEX_PRIVATE_FLAG)
#define FUTEX_WAKE_BITSET_PRIVATE (FUTEX_WAKE_BITSET | FUTEX_PRIVATE_FLAG)
#define FUTEX_WAIT_REQUEUE_PI_PRIVATE (FUTEX_WAIT_REQUEUE_PI | FUTEX_PRIVATE_FLAG)

#define FUTEX_CMP_REQUEUE_PI_PRIVATE (FUTEX_CMP_REQUEUE_PI | FUTEX_PRIVATE_FLAG)
# 57 "/usr/include/linux/futex.h" 3 4

# 57 "/usr/include/linux/futex.h" 3 4
struct robust_list {
 struct robust_list *next;
};
# 69 "/usr/include/linux/futex.h" 3 4
struct robust_list_head {



 struct robust_list list;







 long futex_offset;
# 93 "/usr/include/linux/futex.h" 3 4
 struct robust_list *list_op_pending;
};




#define FUTEX_WAITERS 0x80000000







#define FUTEX_OWNER_DIED 0x40000000




#define FUTEX_TID_MASK 0x3fffffff





#define ROBUST_LIST_LIMIT 2048





#define FUTEX_BITSET_MATCH_ANY 0xffffffff


#define FUTEX_OP_SET 0
#define FUTEX_OP_ADD 1
#define FUTEX_OP_OR 2
#define FUTEX_OP_ANDN 3
#define FUTEX_OP_XOR 4

#define FUTEX_OP_OPARG_SHIFT 8

#define FUTEX_OP_CMP_EQ 0
#define FUTEX_OP_CMP_NE 1
#define FUTEX_OP_CMP_LT 2
#define FUTEX_OP_CMP_LE 3
#define FUTEX_OP_CMP_GT 4
#define FUTEX_OP_CMP_GE 5







#define FUTEX_OP(op,oparg,cmp,cmparg) (((op & 0xf) << 28) | ((cmp & 0xf) << 24) | ((oparg & 0xfff) << 12) | (cmparg & 0xfff))
# 3 "trace/beauty/futex_op.c" 2
# 20 "trace/beauty/futex_op.c"

# 20 "trace/beauty/futex_op.c"
static size_t syscall_arg__scnprintf_futex_op(char *bf, size_t size, struct syscall_arg *arg)
{
 
# 22 "trace/beauty/futex_op.c" 3 4
_Bool 
# 22 "trace/beauty/futex_op.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "FUTEX_";
 enum syscall_futex_args {
  SCF_UADDR = (1 << 0),
  SCF_OP = (1 << 1),
  SCF_VAL = (1 << 2),
  SCF_TIMEOUT = (1 << 3),
  SCF_UADDR2 = (1 << 4),
  SCF_VAL3 = (1 << 5),
 };
 int op = arg->val;
 int cmd = op & 
# 33 "trace/beauty/futex_op.c" 3 4
               ~(128 | 256)
# 33 "trace/beauty/futex_op.c"
                             ;
 size_t printed = 0;

 switch (cmd) {
#define P_FUTEX_OP(n) case FUTEX_ ##n: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", #n);
 case 
# 38 "trace/beauty/futex_op.c" 3 4
0
# 38 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "WAIT");; arg->mask |= SCF_VAL3|SCF_UADDR2; break;
 case 
# 39 "trace/beauty/futex_op.c" 3 4
1
# 39 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "WAKE");; arg->mask |= SCF_VAL3|SCF_UADDR2|SCF_TIMEOUT; break;
 case 
# 40 "trace/beauty/futex_op.c" 3 4
2
# 40 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "FD");; arg->mask |= SCF_VAL3|SCF_UADDR2|SCF_TIMEOUT; break;
 case 
# 41 "trace/beauty/futex_op.c" 3 4
3
# 41 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "REQUEUE");; arg->mask |= SCF_VAL3|SCF_TIMEOUT; break;
 case 
# 42 "trace/beauty/futex_op.c" 3 4
4
# 42 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "CMP_REQUEUE");; arg->mask |= SCF_TIMEOUT; break;
 case 
# 43 "trace/beauty/futex_op.c" 3 4
12
# 43 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "CMP_REQUEUE_PI");; arg->mask |= SCF_TIMEOUT; break;
 case 
# 44 "trace/beauty/futex_op.c" 3 4
5
# 44 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "WAKE_OP");; break;
 case 
# 45 "trace/beauty/futex_op.c" 3 4
6
# 45 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "LOCK_PI");; arg->mask |= SCF_VAL3|SCF_UADDR2|SCF_TIMEOUT; break;
 case 
# 46 "trace/beauty/futex_op.c" 3 4
7
# 46 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "UNLOCK_PI");; arg->mask |= SCF_VAL3|SCF_UADDR2|SCF_TIMEOUT; break;
 case 
# 47 "trace/beauty/futex_op.c" 3 4
8
# 47 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "TRYLOCK_PI");; arg->mask |= SCF_VAL3|SCF_UADDR2; break;
 case 
# 48 "trace/beauty/futex_op.c" 3 4
9
# 48 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "WAIT_BITSET");; arg->mask |= SCF_UADDR2; break;
 case 
# 49 "trace/beauty/futex_op.c" 3 4
10
# 49 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "WAKE_BITSET");; arg->mask |= SCF_UADDR2; break;
 case 
# 50 "trace/beauty/futex_op.c" 3 4
11
# 50 "trace/beauty/futex_op.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "WAIT_REQUEUE_PI");; break;
 default: printed = scnprintf(bf, size, "%#x", cmd); break;
 }

 if (op & 
# 54 "trace/beauty/futex_op.c" 3 4
         128
# 54 "trace/beauty/futex_op.c"
                           )
  printed += scnprintf(bf + printed, size - printed, "|%s%s", show_prefix ? prefix : "", "PRIVATE_FLAG");

 if (op & 
# 57 "trace/beauty/futex_op.c" 3 4
         256
# 57 "trace/beauty/futex_op.c"
                             )
  printed += scnprintf(bf + printed, size - printed, "|%s%s", show_prefix ? prefix : "", "CLOCK_REALTIME");

 return printed;
}

#define SCA_FUTEX_OP syscall_arg__scnprintf_futex_op
# 896 "builtin-trace.c" 2
# 1 "trace/beauty/futex_val3.c" 1







static size_t syscall_arg__scnprintf_futex_val3(char *bf, size_t size, struct syscall_arg *arg)
{
 const char *prefix = "FUTEX_BITSET_";
 unsigned int bitset = arg->val;

 if (bitset == 
# 13 "trace/beauty/futex_val3.c" 3 4
              0xffffffff
# 13 "trace/beauty/futex_val3.c"
                                    )
  return scnprintf(bf, size, "%s%s", arg->show_string_prefix ? prefix : "", "MATCH_ANY");

 return scnprintf(bf, size, "%#xd", bitset);
}

#define SCA_FUTEX_VAL3 syscall_arg__scnprintf_futex_val3
# 897 "builtin-trace.c" 2
# 1 "trace/beauty/mmap.c" 1

# 1 "/home/jmikedupont2/linux/tools/include/uapi/linux/mman.h" 1


#define _UAPI_LINUX_MMAN_H 

# 1 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/mman.h" 1


#define TOOLS_ARCH_X86_UAPI_ASM_MMAN_FIX_H 
#define MAP_32BIT 0x40
# 1 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/mman.h" 1


#define __ASM_GENERIC_MMAN_H 

# 1 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/mman-common-tools.h" 1


#define __ASM_GENERIC_MMAN_COMMON_TOOLS_ONLY_H 

# 1 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/mman-common.h" 1


#define __ASM_GENERIC_MMAN_COMMON_H 






#define PROT_READ 0x1
#define PROT_WRITE 0x2
#define PROT_EXEC 0x4
#define PROT_SEM 0x8
#define PROT_NONE 0x0
#define PROT_GROWSDOWN 0x01000000
#define PROT_GROWSUP 0x02000000


#define MAP_TYPE 0x0f
#define MAP_FIXED 0x10
#define MAP_ANONYMOUS 0x20


#define MAP_POPULATE 0x008000
#define MAP_NONBLOCK 0x010000
#define MAP_STACK 0x020000
#define MAP_HUGETLB 0x040000
#define MAP_SYNC 0x080000
#define MAP_FIXED_NOREPLACE 0x100000

#define MAP_UNINITIALIZED 0x4000000





#define MLOCK_ONFAULT 0x01

#define MS_ASYNC 1
#define MS_INVALIDATE 2
#define MS_SYNC 4

#define MADV_NORMAL 0
#define MADV_RANDOM 1
#define MADV_SEQUENTIAL 2
#define MADV_WILLNEED 3
#define MADV_DONTNEED 4


#define MADV_FREE 8
#define MADV_REMOVE 9
#define MADV_DONTFORK 10
#define MADV_DOFORK 11
#define MADV_HWPOISON 100
#define MADV_SOFT_OFFLINE 101

#define MADV_MERGEABLE 12
#define MADV_UNMERGEABLE 13

#define MADV_HUGEPAGE 14
#define MADV_NOHUGEPAGE 15

#define MADV_DONTDUMP 16

#define MADV_DODUMP 17

#define MADV_WIPEONFORK 18
#define MADV_KEEPONFORK 19

#define MADV_COLD 20
#define MADV_PAGEOUT 21


#define MAP_FILE 0

#define PKEY_DISABLE_ACCESS 0x1
#define PKEY_DISABLE_WRITE 0x2
#define PKEY_ACCESS_MASK (PKEY_DISABLE_ACCESS | PKEY_DISABLE_WRITE)
# 6 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/mman-common-tools.h" 2
# 19 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/mman-common-tools.h"
#define MAP_SHARED 0x01
#define MAP_PRIVATE 0x02
#define MAP_SHARED_VALIDATE 0x03
# 6 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/mman.h" 2

#define MAP_GROWSDOWN 0x0100
#define MAP_DENYWRITE 0x0800
#define MAP_EXECUTABLE 0x1000
#define MAP_LOCKED 0x2000
#define MAP_NORESERVE 0x4000






#define MCL_CURRENT 1
#define MCL_FUTURE 2
#define MCL_ONFAULT 4
# 6 "/home/jmikedupont2/linux/tools/arch/x86/include/uapi/asm/mman.h" 2
# 6 "/home/jmikedupont2/linux/tools/include/uapi/linux/mman.h" 2
# 1 "/home/jmikedupont2/linux/tools/include/asm-generic/hugetlb_encode.h" 1

#define _ASM_GENERIC_HUGETLB_ENCODE_H_ 
# 20 "/home/jmikedupont2/linux/tools/include/asm-generic/hugetlb_encode.h"
#define HUGETLB_FLAG_ENCODE_SHIFT 26
#define HUGETLB_FLAG_ENCODE_MASK 0x3f

#define HUGETLB_FLAG_ENCODE_64KB (16 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_512KB (19 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_1MB (20 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_2MB (21 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_8MB (23 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_16MB (24 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_256MB (28 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_1GB (30 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_2GB (31 << HUGETLB_FLAG_ENCODE_SHIFT)
#define HUGETLB_FLAG_ENCODE_16GB (34 << HUGETLB_FLAG_ENCODE_SHIFT)
# 7 "/home/jmikedupont2/linux/tools/include/uapi/linux/mman.h" 2

#define MREMAP_MAYMOVE 1
#define MREMAP_FIXED 2

#define OVERCOMMIT_GUESS 0
#define OVERCOMMIT_ALWAYS 1
#define OVERCOMMIT_NEVER 2

#define MAP_SHARED 0x01
#define MAP_PRIVATE 0x02
#define MAP_SHARED_VALIDATE 0x03
# 26 "/home/jmikedupont2/linux/tools/include/uapi/linux/mman.h"
#define MAP_HUGE_SHIFT HUGETLB_FLAG_ENCODE_SHIFT
#define MAP_HUGE_MASK HUGETLB_FLAG_ENCODE_MASK

#define MAP_HUGE_64KB HUGETLB_FLAG_ENCODE_64KB
#define MAP_HUGE_512KB HUGETLB_FLAG_ENCODE_512KB
#define MAP_HUGE_1MB HUGETLB_FLAG_ENCODE_1MB
#define MAP_HUGE_2MB HUGETLB_FLAG_ENCODE_2MB
#define MAP_HUGE_8MB HUGETLB_FLAG_ENCODE_8MB
#define MAP_HUGE_16MB HUGETLB_FLAG_ENCODE_16MB
#define MAP_HUGE_32MB HUGETLB_FLAG_ENCODE_32MB
#define MAP_HUGE_256MB HUGETLB_FLAG_ENCODE_256MB
#define MAP_HUGE_512MB HUGETLB_FLAG_ENCODE_512MB
#define MAP_HUGE_1GB HUGETLB_FLAG_ENCODE_1GB
#define MAP_HUGE_2GB HUGETLB_FLAG_ENCODE_2GB
#define MAP_HUGE_16GB HUGETLB_FLAG_ENCODE_16GB
# 3 "trace/beauty/mmap.c" 2
# 1 "/home/jmikedupont2/linux/tools/include/linux/log2.h" 1
# 9 "/home/jmikedupont2/linux/tools/include/linux/log2.h"
#define _TOOLS_LINUX_LOG2_H 
# 20 "/home/jmikedupont2/linux/tools/include/linux/log2.h"
static inline __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}

static inline __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}






static inline __attribute__((const))

# 38 "/home/jmikedupont2/linux/tools/include/linux/log2.h" 3 4
_Bool 
# 38 "/home/jmikedupont2/linux/tools/include/linux/log2.h"
    is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}




static inline __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}




static inline __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 71 "/home/jmikedupont2/linux/tools/include/linux/log2.h"
#define ilog2(n) ( __builtin_constant_p(n) ? ( (n) < 2 ? 0 : (n) & (1ULL << 63) ? 63 : (n) & (1ULL << 62) ? 62 : (n) & (1ULL << 61) ? 61 : (n) & (1ULL << 60) ? 60 : (n) & (1ULL << 59) ? 59 : (n) & (1ULL << 58) ? 58 : (n) & (1ULL << 57) ? 57 : (n) & (1ULL << 56) ? 56 : (n) & (1ULL << 55) ? 55 : (n) & (1ULL << 54) ? 54 : (n) & (1ULL << 53) ? 53 : (n) & (1ULL << 52) ? 52 : (n) & (1ULL << 51) ? 51 : (n) & (1ULL << 50) ? 50 : (n) & (1ULL << 49) ? 49 : (n) & (1ULL << 48) ? 48 : (n) & (1ULL << 47) ? 47 : (n) & (1ULL << 46) ? 46 : (n) & (1ULL << 45) ? 45 : (n) & (1ULL << 44) ? 44 : (n) & (1ULL << 43) ? 43 : (n) & (1ULL << 42) ? 42 : (n) & (1ULL << 41) ? 41 : (n) & (1ULL << 40) ? 40 : (n) & (1ULL << 39) ? 39 : (n) & (1ULL << 38) ? 38 : (n) & (1ULL << 37) ? 37 : (n) & (1ULL << 36) ? 36 : (n) & (1ULL << 35) ? 35 : (n) & (1ULL << 34) ? 34 : (n) & (1ULL << 33) ? 33 : (n) & (1ULL << 32) ? 32 : (n) & (1ULL << 31) ? 31 : (n) & (1ULL << 30) ? 30 : (n) & (1ULL << 29) ? 29 : (n) & (1ULL << 28) ? 28 : (n) & (1ULL << 27) ? 27 : (n) & (1ULL << 26) ? 26 : (n) & (1ULL << 25) ? 25 : (n) & (1ULL << 24) ? 24 : (n) & (1ULL << 23) ? 23 : (n) & (1ULL << 22) ? 22 : (n) & (1ULL << 21) ? 21 : (n) & (1ULL << 20) ? 20 : (n) & (1ULL << 19) ? 19 : (n) & (1ULL << 18) ? 18 : (n) & (1ULL << 17) ? 17 : (n) & (1ULL << 16) ? 16 : (n) & (1ULL << 15) ? 15 : (n) & (1ULL << 14) ? 14 : (n) & (1ULL << 13) ? 13 : (n) & (1ULL << 12) ? 12 : (n) & (1ULL << 11) ? 11 : (n) & (1ULL << 10) ? 10 : (n) & (1ULL << 9) ? 9 : (n) & (1ULL << 8) ? 8 : (n) & (1ULL << 7) ? 7 : (n) & (1ULL << 6) ? 6 : (n) & (1ULL << 5) ? 5 : (n) & (1ULL << 4) ? 4 : (n) & (1ULL << 3) ? 3 : (n) & (1ULL << 2) ? 2 : 1 ) : (sizeof(n) <= 4) ? __ilog2_u32(n) : __ilog2_u64(n) )
# 151 "/home/jmikedupont2/linux/tools/include/linux/log2.h"
#define roundup_pow_of_two(n) ( __builtin_constant_p(n) ? ( (n == 1) ? 1 : (1UL << (ilog2((n) - 1) + 1)) ) : __roundup_pow_of_two(n) )
# 168 "/home/jmikedupont2/linux/tools/include/linux/log2.h"
#define rounddown_pow_of_two(n) ( __builtin_constant_p(n) ? ( (1UL << ilog2(n))) : __rounddown_pow_of_two(n) )
# 4 "trace/beauty/mmap.c" 2

static size_t syscall_arg__scnprintf_mmap_prot(char *bf, size_t size,
            struct syscall_arg *arg)
{
 const char *prot_prefix = "PROT_";
 int printed = 0, prot = arg->val;
 
# 10 "trace/beauty/mmap.c" 3 4
_Bool 
# 10 "trace/beauty/mmap.c"
     show_prefix = arg->show_string_prefix;

 if (prot == 0x0)
  return scnprintf(bf, size, "%sNONE", show_prefix ? prot_prefix : "");
#define P_MMAP_PROT(n) if (prot & PROT_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prot_prefix :"", #n); prot &= ~PROT_ ##n; }





 if (prot & 0x1) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prot_prefix :"", "READ"); prot &= ~0x1; };
 if (prot & 0x2) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prot_prefix :"", "WRITE"); prot &= ~0x2; };
 if (prot & 0x4) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prot_prefix :"", "EXEC"); prot &= ~0x4; };
 if (prot & 0x8) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prot_prefix :"", "SEM"); prot &= ~0x8; };
 if (prot & 0x01000000) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prot_prefix :"", "GROWSDOWN"); prot &= ~0x01000000; };
 if (prot & 0x02000000) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prot_prefix :"", "GROWSUP"); prot &= ~0x02000000; };
#undef P_MMAP_PROT

 if (prot)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", prot);

 return printed;
}

#define SCA_MMAP_PROT syscall_arg__scnprintf_mmap_prot

# 1 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/mmap_flags_array.c" 1
static const char *mmap_flags[] = {
 [( __builtin_constant_p(0x40) ? ( (0x40) < 2 ? 0 : (0x40) & (1ULL << 63) ? 63 : (0x40) & (1ULL << 62) ? 62 : (0x40) & (1ULL << 61) ? 61 : (0x40) & (1ULL << 60) ? 60 : (0x40) & (1ULL << 59) ? 59 : (0x40) & (1ULL << 58) ? 58 : (0x40) & (1ULL << 57) ? 57 : (0x40) & (1ULL << 56) ? 56 : (0x40) & (1ULL << 55) ? 55 : (0x40) & (1ULL << 54) ? 54 : (0x40) & (1ULL << 53) ? 53 : (0x40) & (1ULL << 52) ? 52 : (0x40) & (1ULL << 51) ? 51 : (0x40) & (1ULL << 50) ? 50 : (0x40) & (1ULL << 49) ? 49 : (0x40) & (1ULL << 48) ? 48 : (0x40) & (1ULL << 47) ? 47 : (0x40) & (1ULL << 46) ? 46 : (0x40) & (1ULL << 45) ? 45 : (0x40) & (1ULL << 44) ? 44 : (0x40) & (1ULL << 43) ? 43 : (0x40) & (1ULL << 42) ? 42 : (0x40) & (1ULL << 41) ? 41 : (0x40) & (1ULL << 40) ? 40 : (0x40) & (1ULL << 39) ? 39 : (0x40) & (1ULL << 38) ? 38 : (0x40) & (1ULL << 37) ? 37 : (0x40) & (1ULL << 36) ? 36 : (0x40) & (1ULL << 35) ? 35 : (0x40) & (1ULL << 34) ? 34 : (0x40) & (1ULL << 33) ? 33 : (0x40) & (1ULL << 32) ? 32 : (0x40) & (1ULL << 31) ? 31 : (0x40) & (1ULL << 30) ? 30 : (0x40) & (1ULL << 29) ? 29 : (0x40) & (1ULL << 28) ? 28 : (0x40) & (1ULL << 27) ? 27 : (0x40) & (1ULL << 26) ? 26 : (0x40) & (1ULL << 25) ? 25 : (0x40) & (1ULL << 24) ? 24 : (0x40) & (1ULL << 23) ? 23 : (0x40) & (1ULL << 22) ? 22 : (0x40) & (1ULL << 21) ? 21 : (0x40) & (1ULL << 20) ? 20 : (0x40) & (1ULL << 19) ? 19 : (0x40) & (1ULL << 18) ? 18 : (0x40) & (1ULL << 17) ? 17 : (0x40) & (1ULL << 16) ? 16 : (0x40) & (1ULL << 15) ? 15 : (0x40) & (1ULL << 14) ? 14 : (0x40) & (1ULL << 13) ? 13 : (0x40) & (1ULL << 12) ? 12 : (0x40) & (1ULL << 11) ? 11 : (0x40) & (1ULL << 10) ? 10 : (0x40) & (1ULL << 9) ? 9 : (0x40) & (1ULL << 8) ? 8 : (0x40) & (1ULL << 7) ? 7 : (0x40) & (1ULL << 6) ? 6 : (0x40) & (1ULL << 5) ? 5 : (0x40) & (1ULL << 4) ? 4 : (0x40) & (1ULL << 3) ? 3 : (0x40) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x40) <= 4) ? __ilog2_u32(0x40) : __ilog2_u64(0x40) ) + 1] = "32BIT",
 [( __builtin_constant_p(0x01) ? ( (0x01) < 2 ? 0 : (0x01) & (1ULL << 63) ? 63 : (0x01) & (1ULL << 62) ? 62 : (0x01) & (1ULL << 61) ? 61 : (0x01) & (1ULL << 60) ? 60 : (0x01) & (1ULL << 59) ? 59 : (0x01) & (1ULL << 58) ? 58 : (0x01) & (1ULL << 57) ? 57 : (0x01) & (1ULL << 56) ? 56 : (0x01) & (1ULL << 55) ? 55 : (0x01) & (1ULL << 54) ? 54 : (0x01) & (1ULL << 53) ? 53 : (0x01) & (1ULL << 52) ? 52 : (0x01) & (1ULL << 51) ? 51 : (0x01) & (1ULL << 50) ? 50 : (0x01) & (1ULL << 49) ? 49 : (0x01) & (1ULL << 48) ? 48 : (0x01) & (1ULL << 47) ? 47 : (0x01) & (1ULL << 46) ? 46 : (0x01) & (1ULL << 45) ? 45 : (0x01) & (1ULL << 44) ? 44 : (0x01) & (1ULL << 43) ? 43 : (0x01) & (1ULL << 42) ? 42 : (0x01) & (1ULL << 41) ? 41 : (0x01) & (1ULL << 40) ? 40 : (0x01) & (1ULL << 39) ? 39 : (0x01) & (1ULL << 38) ? 38 : (0x01) & (1ULL << 37) ? 37 : (0x01) & (1ULL << 36) ? 36 : (0x01) & (1ULL << 35) ? 35 : (0x01) & (1ULL << 34) ? 34 : (0x01) & (1ULL << 33) ? 33 : (0x01) & (1ULL << 32) ? 32 : (0x01) & (1ULL << 31) ? 31 : (0x01) & (1ULL << 30) ? 30 : (0x01) & (1ULL << 29) ? 29 : (0x01) & (1ULL << 28) ? 28 : (0x01) & (1ULL << 27) ? 27 : (0x01) & (1ULL << 26) ? 26 : (0x01) & (1ULL << 25) ? 25 : (0x01) & (1ULL << 24) ? 24 : (0x01) & (1ULL << 23) ? 23 : (0x01) & (1ULL << 22) ? 22 : (0x01) & (1ULL << 21) ? 21 : (0x01) & (1ULL << 20) ? 20 : (0x01) & (1ULL << 19) ? 19 : (0x01) & (1ULL << 18) ? 18 : (0x01) & (1ULL << 17) ? 17 : (0x01) & (1ULL << 16) ? 16 : (0x01) & (1ULL << 15) ? 15 : (0x01) & (1ULL << 14) ? 14 : (0x01) & (1ULL << 13) ? 13 : (0x01) & (1ULL << 12) ? 12 : (0x01) & (1ULL << 11) ? 11 : (0x01) & (1ULL << 10) ? 10 : (0x01) & (1ULL << 9) ? 9 : (0x01) & (1ULL << 8) ? 8 : (0x01) & (1ULL << 7) ? 7 : (0x01) & (1ULL << 6) ? 6 : (0x01) & (1ULL << 5) ? 5 : (0x01) & (1ULL << 4) ? 4 : (0x01) & (1ULL << 3) ? 3 : (0x01) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x01) <= 4) ? __ilog2_u32(0x01) : __ilog2_u64(0x01) ) + 1] = "SHARED",
 [( __builtin_constant_p(0x02) ? ( (0x02) < 2 ? 0 : (0x02) & (1ULL << 63) ? 63 : (0x02) & (1ULL << 62) ? 62 : (0x02) & (1ULL << 61) ? 61 : (0x02) & (1ULL << 60) ? 60 : (0x02) & (1ULL << 59) ? 59 : (0x02) & (1ULL << 58) ? 58 : (0x02) & (1ULL << 57) ? 57 : (0x02) & (1ULL << 56) ? 56 : (0x02) & (1ULL << 55) ? 55 : (0x02) & (1ULL << 54) ? 54 : (0x02) & (1ULL << 53) ? 53 : (0x02) & (1ULL << 52) ? 52 : (0x02) & (1ULL << 51) ? 51 : (0x02) & (1ULL << 50) ? 50 : (0x02) & (1ULL << 49) ? 49 : (0x02) & (1ULL << 48) ? 48 : (0x02) & (1ULL << 47) ? 47 : (0x02) & (1ULL << 46) ? 46 : (0x02) & (1ULL << 45) ? 45 : (0x02) & (1ULL << 44) ? 44 : (0x02) & (1ULL << 43) ? 43 : (0x02) & (1ULL << 42) ? 42 : (0x02) & (1ULL << 41) ? 41 : (0x02) & (1ULL << 40) ? 40 : (0x02) & (1ULL << 39) ? 39 : (0x02) & (1ULL << 38) ? 38 : (0x02) & (1ULL << 37) ? 37 : (0x02) & (1ULL << 36) ? 36 : (0x02) & (1ULL << 35) ? 35 : (0x02) & (1ULL << 34) ? 34 : (0x02) & (1ULL << 33) ? 33 : (0x02) & (1ULL << 32) ? 32 : (0x02) & (1ULL << 31) ? 31 : (0x02) & (1ULL << 30) ? 30 : (0x02) & (1ULL << 29) ? 29 : (0x02) & (1ULL << 28) ? 28 : (0x02) & (1ULL << 27) ? 27 : (0x02) & (1ULL << 26) ? 26 : (0x02) & (1ULL << 25) ? 25 : (0x02) & (1ULL << 24) ? 24 : (0x02) & (1ULL << 23) ? 23 : (0x02) & (1ULL << 22) ? 22 : (0x02) & (1ULL << 21) ? 21 : (0x02) & (1ULL << 20) ? 20 : (0x02) & (1ULL << 19) ? 19 : (0x02) & (1ULL << 18) ? 18 : (0x02) & (1ULL << 17) ? 17 : (0x02) & (1ULL << 16) ? 16 : (0x02) & (1ULL << 15) ? 15 : (0x02) & (1ULL << 14) ? 14 : (0x02) & (1ULL << 13) ? 13 : (0x02) & (1ULL << 12) ? 12 : (0x02) & (1ULL << 11) ? 11 : (0x02) & (1ULL << 10) ? 10 : (0x02) & (1ULL << 9) ? 9 : (0x02) & (1ULL << 8) ? 8 : (0x02) & (1ULL << 7) ? 7 : (0x02) & (1ULL << 6) ? 6 : (0x02) & (1ULL << 5) ? 5 : (0x02) & (1ULL << 4) ? 4 : (0x02) & (1ULL << 3) ? 3 : (0x02) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x02) <= 4) ? __ilog2_u32(0x02) : __ilog2_u64(0x02) ) + 1] = "PRIVATE",
 [( __builtin_constant_p(0x10) ? ( (0x10) < 2 ? 0 : (0x10) & (1ULL << 63) ? 63 : (0x10) & (1ULL << 62) ? 62 : (0x10) & (1ULL << 61) ? 61 : (0x10) & (1ULL << 60) ? 60 : (0x10) & (1ULL << 59) ? 59 : (0x10) & (1ULL << 58) ? 58 : (0x10) & (1ULL << 57) ? 57 : (0x10) & (1ULL << 56) ? 56 : (0x10) & (1ULL << 55) ? 55 : (0x10) & (1ULL << 54) ? 54 : (0x10) & (1ULL << 53) ? 53 : (0x10) & (1ULL << 52) ? 52 : (0x10) & (1ULL << 51) ? 51 : (0x10) & (1ULL << 50) ? 50 : (0x10) & (1ULL << 49) ? 49 : (0x10) & (1ULL << 48) ? 48 : (0x10) & (1ULL << 47) ? 47 : (0x10) & (1ULL << 46) ? 46 : (0x10) & (1ULL << 45) ? 45 : (0x10) & (1ULL << 44) ? 44 : (0x10) & (1ULL << 43) ? 43 : (0x10) & (1ULL << 42) ? 42 : (0x10) & (1ULL << 41) ? 41 : (0x10) & (1ULL << 40) ? 40 : (0x10) & (1ULL << 39) ? 39 : (0x10) & (1ULL << 38) ? 38 : (0x10) & (1ULL << 37) ? 37 : (0x10) & (1ULL << 36) ? 36 : (0x10) & (1ULL << 35) ? 35 : (0x10) & (1ULL << 34) ? 34 : (0x10) & (1ULL << 33) ? 33 : (0x10) & (1ULL << 32) ? 32 : (0x10) & (1ULL << 31) ? 31 : (0x10) & (1ULL << 30) ? 30 : (0x10) & (1ULL << 29) ? 29 : (0x10) & (1ULL << 28) ? 28 : (0x10) & (1ULL << 27) ? 27 : (0x10) & (1ULL << 26) ? 26 : (0x10) & (1ULL << 25) ? 25 : (0x10) & (1ULL << 24) ? 24 : (0x10) & (1ULL << 23) ? 23 : (0x10) & (1ULL << 22) ? 22 : (0x10) & (1ULL << 21) ? 21 : (0x10) & (1ULL << 20) ? 20 : (0x10) & (1ULL << 19) ? 19 : (0x10) & (1ULL << 18) ? 18 : (0x10) & (1ULL << 17) ? 17 : (0x10) & (1ULL << 16) ? 16 : (0x10) & (1ULL << 15) ? 15 : (0x10) & (1ULL << 14) ? 14 : (0x10) & (1ULL << 13) ? 13 : (0x10) & (1ULL << 12) ? 12 : (0x10) & (1ULL << 11) ? 11 : (0x10) & (1ULL << 10) ? 10 : (0x10) & (1ULL << 9) ? 9 : (0x10) & (1ULL << 8) ? 8 : (0x10) & (1ULL << 7) ? 7 : (0x10) & (1ULL << 6) ? 6 : (0x10) & (1ULL << 5) ? 5 : (0x10) & (1ULL << 4) ? 4 : (0x10) & (1ULL << 3) ? 3 : (0x10) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x10) <= 4) ? __ilog2_u32(0x10) : __ilog2_u64(0x10) ) + 1] = "FIXED",
 [( __builtin_constant_p(0x20) ? ( (0x20) < 2 ? 0 : (0x20) & (1ULL << 63) ? 63 : (0x20) & (1ULL << 62) ? 62 : (0x20) & (1ULL << 61) ? 61 : (0x20) & (1ULL << 60) ? 60 : (0x20) & (1ULL << 59) ? 59 : (0x20) & (1ULL << 58) ? 58 : (0x20) & (1ULL << 57) ? 57 : (0x20) & (1ULL << 56) ? 56 : (0x20) & (1ULL << 55) ? 55 : (0x20) & (1ULL << 54) ? 54 : (0x20) & (1ULL << 53) ? 53 : (0x20) & (1ULL << 52) ? 52 : (0x20) & (1ULL << 51) ? 51 : (0x20) & (1ULL << 50) ? 50 : (0x20) & (1ULL << 49) ? 49 : (0x20) & (1ULL << 48) ? 48 : (0x20) & (1ULL << 47) ? 47 : (0x20) & (1ULL << 46) ? 46 : (0x20) & (1ULL << 45) ? 45 : (0x20) & (1ULL << 44) ? 44 : (0x20) & (1ULL << 43) ? 43 : (0x20) & (1ULL << 42) ? 42 : (0x20) & (1ULL << 41) ? 41 : (0x20) & (1ULL << 40) ? 40 : (0x20) & (1ULL << 39) ? 39 : (0x20) & (1ULL << 38) ? 38 : (0x20) & (1ULL << 37) ? 37 : (0x20) & (1ULL << 36) ? 36 : (0x20) & (1ULL << 35) ? 35 : (0x20) & (1ULL << 34) ? 34 : (0x20) & (1ULL << 33) ? 33 : (0x20) & (1ULL << 32) ? 32 : (0x20) & (1ULL << 31) ? 31 : (0x20) & (1ULL << 30) ? 30 : (0x20) & (1ULL << 29) ? 29 : (0x20) & (1ULL << 28) ? 28 : (0x20) & (1ULL << 27) ? 27 : (0x20) & (1ULL << 26) ? 26 : (0x20) & (1ULL << 25) ? 25 : (0x20) & (1ULL << 24) ? 24 : (0x20) & (1ULL << 23) ? 23 : (0x20) & (1ULL << 22) ? 22 : (0x20) & (1ULL << 21) ? 21 : (0x20) & (1ULL << 20) ? 20 : (0x20) & (1ULL << 19) ? 19 : (0x20) & (1ULL << 18) ? 18 : (0x20) & (1ULL << 17) ? 17 : (0x20) & (1ULL << 16) ? 16 : (0x20) & (1ULL << 15) ? 15 : (0x20) & (1ULL << 14) ? 14 : (0x20) & (1ULL << 13) ? 13 : (0x20) & (1ULL << 12) ? 12 : (0x20) & (1ULL << 11) ? 11 : (0x20) & (1ULL << 10) ? 10 : (0x20) & (1ULL << 9) ? 9 : (0x20) & (1ULL << 8) ? 8 : (0x20) & (1ULL << 7) ? 7 : (0x20) & (1ULL << 6) ? 6 : (0x20) & (1ULL << 5) ? 5 : (0x20) & (1ULL << 4) ? 4 : (0x20) & (1ULL << 3) ? 3 : (0x20) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x20) <= 4) ? __ilog2_u32(0x20) : __ilog2_u64(0x20) ) + 1] = "ANONYMOUS",
 [( __builtin_constant_p(0x008000) ? ( (0x008000) < 2 ? 0 : (0x008000) & (1ULL << 63) ? 63 : (0x008000) & (1ULL << 62) ? 62 : (0x008000) & (1ULL << 61) ? 61 : (0x008000) & (1ULL << 60) ? 60 : (0x008000) & (1ULL << 59) ? 59 : (0x008000) & (1ULL << 58) ? 58 : (0x008000) & (1ULL << 57) ? 57 : (0x008000) & (1ULL << 56) ? 56 : (0x008000) & (1ULL << 55) ? 55 : (0x008000) & (1ULL << 54) ? 54 : (0x008000) & (1ULL << 53) ? 53 : (0x008000) & (1ULL << 52) ? 52 : (0x008000) & (1ULL << 51) ? 51 : (0x008000) & (1ULL << 50) ? 50 : (0x008000) & (1ULL << 49) ? 49 : (0x008000) & (1ULL << 48) ? 48 : (0x008000) & (1ULL << 47) ? 47 : (0x008000) & (1ULL << 46) ? 46 : (0x008000) & (1ULL << 45) ? 45 : (0x008000) & (1ULL << 44) ? 44 : (0x008000) & (1ULL << 43) ? 43 : (0x008000) & (1ULL << 42) ? 42 : (0x008000) & (1ULL << 41) ? 41 : (0x008000) & (1ULL << 40) ? 40 : (0x008000) & (1ULL << 39) ? 39 : (0x008000) & (1ULL << 38) ? 38 : (0x008000) & (1ULL << 37) ? 37 : (0x008000) & (1ULL << 36) ? 36 : (0x008000) & (1ULL << 35) ? 35 : (0x008000) & (1ULL << 34) ? 34 : (0x008000) & (1ULL << 33) ? 33 : (0x008000) & (1ULL << 32) ? 32 : (0x008000) & (1ULL << 31) ? 31 : (0x008000) & (1ULL << 30) ? 30 : (0x008000) & (1ULL << 29) ? 29 : (0x008000) & (1ULL << 28) ? 28 : (0x008000) & (1ULL << 27) ? 27 : (0x008000) & (1ULL << 26) ? 26 : (0x008000) & (1ULL << 25) ? 25 : (0x008000) & (1ULL << 24) ? 24 : (0x008000) & (1ULL << 23) ? 23 : (0x008000) & (1ULL << 22) ? 22 : (0x008000) & (1ULL << 21) ? 21 : (0x008000) & (1ULL << 20) ? 20 : (0x008000) & (1ULL << 19) ? 19 : (0x008000) & (1ULL << 18) ? 18 : (0x008000) & (1ULL << 17) ? 17 : (0x008000) & (1ULL << 16) ? 16 : (0x008000) & (1ULL << 15) ? 15 : (0x008000) & (1ULL << 14) ? 14 : (0x008000) & (1ULL << 13) ? 13 : (0x008000) & (1ULL << 12) ? 12 : (0x008000) & (1ULL << 11) ? 11 : (0x008000) & (1ULL << 10) ? 10 : (0x008000) & (1ULL << 9) ? 9 : (0x008000) & (1ULL << 8) ? 8 : (0x008000) & (1ULL << 7) ? 7 : (0x008000) & (1ULL << 6) ? 6 : (0x008000) & (1ULL << 5) ? 5 : (0x008000) & (1ULL << 4) ? 4 : (0x008000) & (1ULL << 3) ? 3 : (0x008000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x008000) <= 4) ? __ilog2_u32(0x008000) : __ilog2_u64(0x008000) ) + 1] = "POPULATE",
 [( __builtin_constant_p(0x010000) ? ( (0x010000) < 2 ? 0 : (0x010000) & (1ULL << 63) ? 63 : (0x010000) & (1ULL << 62) ? 62 : (0x010000) & (1ULL << 61) ? 61 : (0x010000) & (1ULL << 60) ? 60 : (0x010000) & (1ULL << 59) ? 59 : (0x010000) & (1ULL << 58) ? 58 : (0x010000) & (1ULL << 57) ? 57 : (0x010000) & (1ULL << 56) ? 56 : (0x010000) & (1ULL << 55) ? 55 : (0x010000) & (1ULL << 54) ? 54 : (0x010000) & (1ULL << 53) ? 53 : (0x010000) & (1ULL << 52) ? 52 : (0x010000) & (1ULL << 51) ? 51 : (0x010000) & (1ULL << 50) ? 50 : (0x010000) & (1ULL << 49) ? 49 : (0x010000) & (1ULL << 48) ? 48 : (0x010000) & (1ULL << 47) ? 47 : (0x010000) & (1ULL << 46) ? 46 : (0x010000) & (1ULL << 45) ? 45 : (0x010000) & (1ULL << 44) ? 44 : (0x010000) & (1ULL << 43) ? 43 : (0x010000) & (1ULL << 42) ? 42 : (0x010000) & (1ULL << 41) ? 41 : (0x010000) & (1ULL << 40) ? 40 : (0x010000) & (1ULL << 39) ? 39 : (0x010000) & (1ULL << 38) ? 38 : (0x010000) & (1ULL << 37) ? 37 : (0x010000) & (1ULL << 36) ? 36 : (0x010000) & (1ULL << 35) ? 35 : (0x010000) & (1ULL << 34) ? 34 : (0x010000) & (1ULL << 33) ? 33 : (0x010000) & (1ULL << 32) ? 32 : (0x010000) & (1ULL << 31) ? 31 : (0x010000) & (1ULL << 30) ? 30 : (0x010000) & (1ULL << 29) ? 29 : (0x010000) & (1ULL << 28) ? 28 : (0x010000) & (1ULL << 27) ? 27 : (0x010000) & (1ULL << 26) ? 26 : (0x010000) & (1ULL << 25) ? 25 : (0x010000) & (1ULL << 24) ? 24 : (0x010000) & (1ULL << 23) ? 23 : (0x010000) & (1ULL << 22) ? 22 : (0x010000) & (1ULL << 21) ? 21 : (0x010000) & (1ULL << 20) ? 20 : (0x010000) & (1ULL << 19) ? 19 : (0x010000) & (1ULL << 18) ? 18 : (0x010000) & (1ULL << 17) ? 17 : (0x010000) & (1ULL << 16) ? 16 : (0x010000) & (1ULL << 15) ? 15 : (0x010000) & (1ULL << 14) ? 14 : (0x010000) & (1ULL << 13) ? 13 : (0x010000) & (1ULL << 12) ? 12 : (0x010000) & (1ULL << 11) ? 11 : (0x010000) & (1ULL << 10) ? 10 : (0x010000) & (1ULL << 9) ? 9 : (0x010000) & (1ULL << 8) ? 8 : (0x010000) & (1ULL << 7) ? 7 : (0x010000) & (1ULL << 6) ? 6 : (0x010000) & (1ULL << 5) ? 5 : (0x010000) & (1ULL << 4) ? 4 : (0x010000) & (1ULL << 3) ? 3 : (0x010000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x010000) <= 4) ? __ilog2_u32(0x010000) : __ilog2_u64(0x010000) ) + 1] = "NONBLOCK",
 [( __builtin_constant_p(0x020000) ? ( (0x020000) < 2 ? 0 : (0x020000) & (1ULL << 63) ? 63 : (0x020000) & (1ULL << 62) ? 62 : (0x020000) & (1ULL << 61) ? 61 : (0x020000) & (1ULL << 60) ? 60 : (0x020000) & (1ULL << 59) ? 59 : (0x020000) & (1ULL << 58) ? 58 : (0x020000) & (1ULL << 57) ? 57 : (0x020000) & (1ULL << 56) ? 56 : (0x020000) & (1ULL << 55) ? 55 : (0x020000) & (1ULL << 54) ? 54 : (0x020000) & (1ULL << 53) ? 53 : (0x020000) & (1ULL << 52) ? 52 : (0x020000) & (1ULL << 51) ? 51 : (0x020000) & (1ULL << 50) ? 50 : (0x020000) & (1ULL << 49) ? 49 : (0x020000) & (1ULL << 48) ? 48 : (0x020000) & (1ULL << 47) ? 47 : (0x020000) & (1ULL << 46) ? 46 : (0x020000) & (1ULL << 45) ? 45 : (0x020000) & (1ULL << 44) ? 44 : (0x020000) & (1ULL << 43) ? 43 : (0x020000) & (1ULL << 42) ? 42 : (0x020000) & (1ULL << 41) ? 41 : (0x020000) & (1ULL << 40) ? 40 : (0x020000) & (1ULL << 39) ? 39 : (0x020000) & (1ULL << 38) ? 38 : (0x020000) & (1ULL << 37) ? 37 : (0x020000) & (1ULL << 36) ? 36 : (0x020000) & (1ULL << 35) ? 35 : (0x020000) & (1ULL << 34) ? 34 : (0x020000) & (1ULL << 33) ? 33 : (0x020000) & (1ULL << 32) ? 32 : (0x020000) & (1ULL << 31) ? 31 : (0x020000) & (1ULL << 30) ? 30 : (0x020000) & (1ULL << 29) ? 29 : (0x020000) & (1ULL << 28) ? 28 : (0x020000) & (1ULL << 27) ? 27 : (0x020000) & (1ULL << 26) ? 26 : (0x020000) & (1ULL << 25) ? 25 : (0x020000) & (1ULL << 24) ? 24 : (0x020000) & (1ULL << 23) ? 23 : (0x020000) & (1ULL << 22) ? 22 : (0x020000) & (1ULL << 21) ? 21 : (0x020000) & (1ULL << 20) ? 20 : (0x020000) & (1ULL << 19) ? 19 : (0x020000) & (1ULL << 18) ? 18 : (0x020000) & (1ULL << 17) ? 17 : (0x020000) & (1ULL << 16) ? 16 : (0x020000) & (1ULL << 15) ? 15 : (0x020000) & (1ULL << 14) ? 14 : (0x020000) & (1ULL << 13) ? 13 : (0x020000) & (1ULL << 12) ? 12 : (0x020000) & (1ULL << 11) ? 11 : (0x020000) & (1ULL << 10) ? 10 : (0x020000) & (1ULL << 9) ? 9 : (0x020000) & (1ULL << 8) ? 8 : (0x020000) & (1ULL << 7) ? 7 : (0x020000) & (1ULL << 6) ? 6 : (0x020000) & (1ULL << 5) ? 5 : (0x020000) & (1ULL << 4) ? 4 : (0x020000) & (1ULL << 3) ? 3 : (0x020000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x020000) <= 4) ? __ilog2_u32(0x020000) : __ilog2_u64(0x020000) ) + 1] = "STACK",
 [( __builtin_constant_p(0x040000) ? ( (0x040000) < 2 ? 0 : (0x040000) & (1ULL << 63) ? 63 : (0x040000) & (1ULL << 62) ? 62 : (0x040000) & (1ULL << 61) ? 61 : (0x040000) & (1ULL << 60) ? 60 : (0x040000) & (1ULL << 59) ? 59 : (0x040000) & (1ULL << 58) ? 58 : (0x040000) & (1ULL << 57) ? 57 : (0x040000) & (1ULL << 56) ? 56 : (0x040000) & (1ULL << 55) ? 55 : (0x040000) & (1ULL << 54) ? 54 : (0x040000) & (1ULL << 53) ? 53 : (0x040000) & (1ULL << 52) ? 52 : (0x040000) & (1ULL << 51) ? 51 : (0x040000) & (1ULL << 50) ? 50 : (0x040000) & (1ULL << 49) ? 49 : (0x040000) & (1ULL << 48) ? 48 : (0x040000) & (1ULL << 47) ? 47 : (0x040000) & (1ULL << 46) ? 46 : (0x040000) & (1ULL << 45) ? 45 : (0x040000) & (1ULL << 44) ? 44 : (0x040000) & (1ULL << 43) ? 43 : (0x040000) & (1ULL << 42) ? 42 : (0x040000) & (1ULL << 41) ? 41 : (0x040000) & (1ULL << 40) ? 40 : (0x040000) & (1ULL << 39) ? 39 : (0x040000) & (1ULL << 38) ? 38 : (0x040000) & (1ULL << 37) ? 37 : (0x040000) & (1ULL << 36) ? 36 : (0x040000) & (1ULL << 35) ? 35 : (0x040000) & (1ULL << 34) ? 34 : (0x040000) & (1ULL << 33) ? 33 : (0x040000) & (1ULL << 32) ? 32 : (0x040000) & (1ULL << 31) ? 31 : (0x040000) & (1ULL << 30) ? 30 : (0x040000) & (1ULL << 29) ? 29 : (0x040000) & (1ULL << 28) ? 28 : (0x040000) & (1ULL << 27) ? 27 : (0x040000) & (1ULL << 26) ? 26 : (0x040000) & (1ULL << 25) ? 25 : (0x040000) & (1ULL << 24) ? 24 : (0x040000) & (1ULL << 23) ? 23 : (0x040000) & (1ULL << 22) ? 22 : (0x040000) & (1ULL << 21) ? 21 : (0x040000) & (1ULL << 20) ? 20 : (0x040000) & (1ULL << 19) ? 19 : (0x040000) & (1ULL << 18) ? 18 : (0x040000) & (1ULL << 17) ? 17 : (0x040000) & (1ULL << 16) ? 16 : (0x040000) & (1ULL << 15) ? 15 : (0x040000) & (1ULL << 14) ? 14 : (0x040000) & (1ULL << 13) ? 13 : (0x040000) & (1ULL << 12) ? 12 : (0x040000) & (1ULL << 11) ? 11 : (0x040000) & (1ULL << 10) ? 10 : (0x040000) & (1ULL << 9) ? 9 : (0x040000) & (1ULL << 8) ? 8 : (0x040000) & (1ULL << 7) ? 7 : (0x040000) & (1ULL << 6) ? 6 : (0x040000) & (1ULL << 5) ? 5 : (0x040000) & (1ULL << 4) ? 4 : (0x040000) & (1ULL << 3) ? 3 : (0x040000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x040000) <= 4) ? __ilog2_u32(0x040000) : __ilog2_u64(0x040000) ) + 1] = "HUGETLB",
 [( __builtin_constant_p(0x080000) ? ( (0x080000) < 2 ? 0 : (0x080000) & (1ULL << 63) ? 63 : (0x080000) & (1ULL << 62) ? 62 : (0x080000) & (1ULL << 61) ? 61 : (0x080000) & (1ULL << 60) ? 60 : (0x080000) & (1ULL << 59) ? 59 : (0x080000) & (1ULL << 58) ? 58 : (0x080000) & (1ULL << 57) ? 57 : (0x080000) & (1ULL << 56) ? 56 : (0x080000) & (1ULL << 55) ? 55 : (0x080000) & (1ULL << 54) ? 54 : (0x080000) & (1ULL << 53) ? 53 : (0x080000) & (1ULL << 52) ? 52 : (0x080000) & (1ULL << 51) ? 51 : (0x080000) & (1ULL << 50) ? 50 : (0x080000) & (1ULL << 49) ? 49 : (0x080000) & (1ULL << 48) ? 48 : (0x080000) & (1ULL << 47) ? 47 : (0x080000) & (1ULL << 46) ? 46 : (0x080000) & (1ULL << 45) ? 45 : (0x080000) & (1ULL << 44) ? 44 : (0x080000) & (1ULL << 43) ? 43 : (0x080000) & (1ULL << 42) ? 42 : (0x080000) & (1ULL << 41) ? 41 : (0x080000) & (1ULL << 40) ? 40 : (0x080000) & (1ULL << 39) ? 39 : (0x080000) & (1ULL << 38) ? 38 : (0x080000) & (1ULL << 37) ? 37 : (0x080000) & (1ULL << 36) ? 36 : (0x080000) & (1ULL << 35) ? 35 : (0x080000) & (1ULL << 34) ? 34 : (0x080000) & (1ULL << 33) ? 33 : (0x080000) & (1ULL << 32) ? 32 : (0x080000) & (1ULL << 31) ? 31 : (0x080000) & (1ULL << 30) ? 30 : (0x080000) & (1ULL << 29) ? 29 : (0x080000) & (1ULL << 28) ? 28 : (0x080000) & (1ULL << 27) ? 27 : (0x080000) & (1ULL << 26) ? 26 : (0x080000) & (1ULL << 25) ? 25 : (0x080000) & (1ULL << 24) ? 24 : (0x080000) & (1ULL << 23) ? 23 : (0x080000) & (1ULL << 22) ? 22 : (0x080000) & (1ULL << 21) ? 21 : (0x080000) & (1ULL << 20) ? 20 : (0x080000) & (1ULL << 19) ? 19 : (0x080000) & (1ULL << 18) ? 18 : (0x080000) & (1ULL << 17) ? 17 : (0x080000) & (1ULL << 16) ? 16 : (0x080000) & (1ULL << 15) ? 15 : (0x080000) & (1ULL << 14) ? 14 : (0x080000) & (1ULL << 13) ? 13 : (0x080000) & (1ULL << 12) ? 12 : (0x080000) & (1ULL << 11) ? 11 : (0x080000) & (1ULL << 10) ? 10 : (0x080000) & (1ULL << 9) ? 9 : (0x080000) & (1ULL << 8) ? 8 : (0x080000) & (1ULL << 7) ? 7 : (0x080000) & (1ULL << 6) ? 6 : (0x080000) & (1ULL << 5) ? 5 : (0x080000) & (1ULL << 4) ? 4 : (0x080000) & (1ULL << 3) ? 3 : (0x080000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x080000) <= 4) ? __ilog2_u32(0x080000) : __ilog2_u64(0x080000) ) + 1] = "SYNC",
 [( __builtin_constant_p(0x100000) ? ( (0x100000) < 2 ? 0 : (0x100000) & (1ULL << 63) ? 63 : (0x100000) & (1ULL << 62) ? 62 : (0x100000) & (1ULL << 61) ? 61 : (0x100000) & (1ULL << 60) ? 60 : (0x100000) & (1ULL << 59) ? 59 : (0x100000) & (1ULL << 58) ? 58 : (0x100000) & (1ULL << 57) ? 57 : (0x100000) & (1ULL << 56) ? 56 : (0x100000) & (1ULL << 55) ? 55 : (0x100000) & (1ULL << 54) ? 54 : (0x100000) & (1ULL << 53) ? 53 : (0x100000) & (1ULL << 52) ? 52 : (0x100000) & (1ULL << 51) ? 51 : (0x100000) & (1ULL << 50) ? 50 : (0x100000) & (1ULL << 49) ? 49 : (0x100000) & (1ULL << 48) ? 48 : (0x100000) & (1ULL << 47) ? 47 : (0x100000) & (1ULL << 46) ? 46 : (0x100000) & (1ULL << 45) ? 45 : (0x100000) & (1ULL << 44) ? 44 : (0x100000) & (1ULL << 43) ? 43 : (0x100000) & (1ULL << 42) ? 42 : (0x100000) & (1ULL << 41) ? 41 : (0x100000) & (1ULL << 40) ? 40 : (0x100000) & (1ULL << 39) ? 39 : (0x100000) & (1ULL << 38) ? 38 : (0x100000) & (1ULL << 37) ? 37 : (0x100000) & (1ULL << 36) ? 36 : (0x100000) & (1ULL << 35) ? 35 : (0x100000) & (1ULL << 34) ? 34 : (0x100000) & (1ULL << 33) ? 33 : (0x100000) & (1ULL << 32) ? 32 : (0x100000) & (1ULL << 31) ? 31 : (0x100000) & (1ULL << 30) ? 30 : (0x100000) & (1ULL << 29) ? 29 : (0x100000) & (1ULL << 28) ? 28 : (0x100000) & (1ULL << 27) ? 27 : (0x100000) & (1ULL << 26) ? 26 : (0x100000) & (1ULL << 25) ? 25 : (0x100000) & (1ULL << 24) ? 24 : (0x100000) & (1ULL << 23) ? 23 : (0x100000) & (1ULL << 22) ? 22 : (0x100000) & (1ULL << 21) ? 21 : (0x100000) & (1ULL << 20) ? 20 : (0x100000) & (1ULL << 19) ? 19 : (0x100000) & (1ULL << 18) ? 18 : (0x100000) & (1ULL << 17) ? 17 : (0x100000) & (1ULL << 16) ? 16 : (0x100000) & (1ULL << 15) ? 15 : (0x100000) & (1ULL << 14) ? 14 : (0x100000) & (1ULL << 13) ? 13 : (0x100000) & (1ULL << 12) ? 12 : (0x100000) & (1ULL << 11) ? 11 : (0x100000) & (1ULL << 10) ? 10 : (0x100000) & (1ULL << 9) ? 9 : (0x100000) & (1ULL << 8) ? 8 : (0x100000) & (1ULL << 7) ? 7 : (0x100000) & (1ULL << 6) ? 6 : (0x100000) & (1ULL << 5) ? 5 : (0x100000) & (1ULL << 4) ? 4 : (0x100000) & (1ULL << 3) ? 3 : (0x100000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x100000) <= 4) ? __ilog2_u32(0x100000) : __ilog2_u64(0x100000) ) + 1] = "FIXED_NOREPLACE",
 [( __builtin_constant_p(0x0100) ? ( (0x0100) < 2 ? 0 : (0x0100) & (1ULL << 63) ? 63 : (0x0100) & (1ULL << 62) ? 62 : (0x0100) & (1ULL << 61) ? 61 : (0x0100) & (1ULL << 60) ? 60 : (0x0100) & (1ULL << 59) ? 59 : (0x0100) & (1ULL << 58) ? 58 : (0x0100) & (1ULL << 57) ? 57 : (0x0100) & (1ULL << 56) ? 56 : (0x0100) & (1ULL << 55) ? 55 : (0x0100) & (1ULL << 54) ? 54 : (0x0100) & (1ULL << 53) ? 53 : (0x0100) & (1ULL << 52) ? 52 : (0x0100) & (1ULL << 51) ? 51 : (0x0100) & (1ULL << 50) ? 50 : (0x0100) & (1ULL << 49) ? 49 : (0x0100) & (1ULL << 48) ? 48 : (0x0100) & (1ULL << 47) ? 47 : (0x0100) & (1ULL << 46) ? 46 : (0x0100) & (1ULL << 45) ? 45 : (0x0100) & (1ULL << 44) ? 44 : (0x0100) & (1ULL << 43) ? 43 : (0x0100) & (1ULL << 42) ? 42 : (0x0100) & (1ULL << 41) ? 41 : (0x0100) & (1ULL << 40) ? 40 : (0x0100) & (1ULL << 39) ? 39 : (0x0100) & (1ULL << 38) ? 38 : (0x0100) & (1ULL << 37) ? 37 : (0x0100) & (1ULL << 36) ? 36 : (0x0100) & (1ULL << 35) ? 35 : (0x0100) & (1ULL << 34) ? 34 : (0x0100) & (1ULL << 33) ? 33 : (0x0100) & (1ULL << 32) ? 32 : (0x0100) & (1ULL << 31) ? 31 : (0x0100) & (1ULL << 30) ? 30 : (0x0100) & (1ULL << 29) ? 29 : (0x0100) & (1ULL << 28) ? 28 : (0x0100) & (1ULL << 27) ? 27 : (0x0100) & (1ULL << 26) ? 26 : (0x0100) & (1ULL << 25) ? 25 : (0x0100) & (1ULL << 24) ? 24 : (0x0100) & (1ULL << 23) ? 23 : (0x0100) & (1ULL << 22) ? 22 : (0x0100) & (1ULL << 21) ? 21 : (0x0100) & (1ULL << 20) ? 20 : (0x0100) & (1ULL << 19) ? 19 : (0x0100) & (1ULL << 18) ? 18 : (0x0100) & (1ULL << 17) ? 17 : (0x0100) & (1ULL << 16) ? 16 : (0x0100) & (1ULL << 15) ? 15 : (0x0100) & (1ULL << 14) ? 14 : (0x0100) & (1ULL << 13) ? 13 : (0x0100) & (1ULL << 12) ? 12 : (0x0100) & (1ULL << 11) ? 11 : (0x0100) & (1ULL << 10) ? 10 : (0x0100) & (1ULL << 9) ? 9 : (0x0100) & (1ULL << 8) ? 8 : (0x0100) & (1ULL << 7) ? 7 : (0x0100) & (1ULL << 6) ? 6 : (0x0100) & (1ULL << 5) ? 5 : (0x0100) & (1ULL << 4) ? 4 : (0x0100) & (1ULL << 3) ? 3 : (0x0100) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x0100) <= 4) ? __ilog2_u32(0x0100) : __ilog2_u64(0x0100) ) + 1] = "GROWSDOWN",
 [( __builtin_constant_p(0x0800) ? ( (0x0800) < 2 ? 0 : (0x0800) & (1ULL << 63) ? 63 : (0x0800) & (1ULL << 62) ? 62 : (0x0800) & (1ULL << 61) ? 61 : (0x0800) & (1ULL << 60) ? 60 : (0x0800) & (1ULL << 59) ? 59 : (0x0800) & (1ULL << 58) ? 58 : (0x0800) & (1ULL << 57) ? 57 : (0x0800) & (1ULL << 56) ? 56 : (0x0800) & (1ULL << 55) ? 55 : (0x0800) & (1ULL << 54) ? 54 : (0x0800) & (1ULL << 53) ? 53 : (0x0800) & (1ULL << 52) ? 52 : (0x0800) & (1ULL << 51) ? 51 : (0x0800) & (1ULL << 50) ? 50 : (0x0800) & (1ULL << 49) ? 49 : (0x0800) & (1ULL << 48) ? 48 : (0x0800) & (1ULL << 47) ? 47 : (0x0800) & (1ULL << 46) ? 46 : (0x0800) & (1ULL << 45) ? 45 : (0x0800) & (1ULL << 44) ? 44 : (0x0800) & (1ULL << 43) ? 43 : (0x0800) & (1ULL << 42) ? 42 : (0x0800) & (1ULL << 41) ? 41 : (0x0800) & (1ULL << 40) ? 40 : (0x0800) & (1ULL << 39) ? 39 : (0x0800) & (1ULL << 38) ? 38 : (0x0800) & (1ULL << 37) ? 37 : (0x0800) & (1ULL << 36) ? 36 : (0x0800) & (1ULL << 35) ? 35 : (0x0800) & (1ULL << 34) ? 34 : (0x0800) & (1ULL << 33) ? 33 : (0x0800) & (1ULL << 32) ? 32 : (0x0800) & (1ULL << 31) ? 31 : (0x0800) & (1ULL << 30) ? 30 : (0x0800) & (1ULL << 29) ? 29 : (0x0800) & (1ULL << 28) ? 28 : (0x0800) & (1ULL << 27) ? 27 : (0x0800) & (1ULL << 26) ? 26 : (0x0800) & (1ULL << 25) ? 25 : (0x0800) & (1ULL << 24) ? 24 : (0x0800) & (1ULL << 23) ? 23 : (0x0800) & (1ULL << 22) ? 22 : (0x0800) & (1ULL << 21) ? 21 : (0x0800) & (1ULL << 20) ? 20 : (0x0800) & (1ULL << 19) ? 19 : (0x0800) & (1ULL << 18) ? 18 : (0x0800) & (1ULL << 17) ? 17 : (0x0800) & (1ULL << 16) ? 16 : (0x0800) & (1ULL << 15) ? 15 : (0x0800) & (1ULL << 14) ? 14 : (0x0800) & (1ULL << 13) ? 13 : (0x0800) & (1ULL << 12) ? 12 : (0x0800) & (1ULL << 11) ? 11 : (0x0800) & (1ULL << 10) ? 10 : (0x0800) & (1ULL << 9) ? 9 : (0x0800) & (1ULL << 8) ? 8 : (0x0800) & (1ULL << 7) ? 7 : (0x0800) & (1ULL << 6) ? 6 : (0x0800) & (1ULL << 5) ? 5 : (0x0800) & (1ULL << 4) ? 4 : (0x0800) & (1ULL << 3) ? 3 : (0x0800) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x0800) <= 4) ? __ilog2_u32(0x0800) : __ilog2_u64(0x0800) ) + 1] = "DENYWRITE",
 [( __builtin_constant_p(0x1000) ? ( (0x1000) < 2 ? 0 : (0x1000) & (1ULL << 63) ? 63 : (0x1000) & (1ULL << 62) ? 62 : (0x1000) & (1ULL << 61) ? 61 : (0x1000) & (1ULL << 60) ? 60 : (0x1000) & (1ULL << 59) ? 59 : (0x1000) & (1ULL << 58) ? 58 : (0x1000) & (1ULL << 57) ? 57 : (0x1000) & (1ULL << 56) ? 56 : (0x1000) & (1ULL << 55) ? 55 : (0x1000) & (1ULL << 54) ? 54 : (0x1000) & (1ULL << 53) ? 53 : (0x1000) & (1ULL << 52) ? 52 : (0x1000) & (1ULL << 51) ? 51 : (0x1000) & (1ULL << 50) ? 50 : (0x1000) & (1ULL << 49) ? 49 : (0x1000) & (1ULL << 48) ? 48 : (0x1000) & (1ULL << 47) ? 47 : (0x1000) & (1ULL << 46) ? 46 : (0x1000) & (1ULL << 45) ? 45 : (0x1000) & (1ULL << 44) ? 44 : (0x1000) & (1ULL << 43) ? 43 : (0x1000) & (1ULL << 42) ? 42 : (0x1000) & (1ULL << 41) ? 41 : (0x1000) & (1ULL << 40) ? 40 : (0x1000) & (1ULL << 39) ? 39 : (0x1000) & (1ULL << 38) ? 38 : (0x1000) & (1ULL << 37) ? 37 : (0x1000) & (1ULL << 36) ? 36 : (0x1000) & (1ULL << 35) ? 35 : (0x1000) & (1ULL << 34) ? 34 : (0x1000) & (1ULL << 33) ? 33 : (0x1000) & (1ULL << 32) ? 32 : (0x1000) & (1ULL << 31) ? 31 : (0x1000) & (1ULL << 30) ? 30 : (0x1000) & (1ULL << 29) ? 29 : (0x1000) & (1ULL << 28) ? 28 : (0x1000) & (1ULL << 27) ? 27 : (0x1000) & (1ULL << 26) ? 26 : (0x1000) & (1ULL << 25) ? 25 : (0x1000) & (1ULL << 24) ? 24 : (0x1000) & (1ULL << 23) ? 23 : (0x1000) & (1ULL << 22) ? 22 : (0x1000) & (1ULL << 21) ? 21 : (0x1000) & (1ULL << 20) ? 20 : (0x1000) & (1ULL << 19) ? 19 : (0x1000) & (1ULL << 18) ? 18 : (0x1000) & (1ULL << 17) ? 17 : (0x1000) & (1ULL << 16) ? 16 : (0x1000) & (1ULL << 15) ? 15 : (0x1000) & (1ULL << 14) ? 14 : (0x1000) & (1ULL << 13) ? 13 : (0x1000) & (1ULL << 12) ? 12 : (0x1000) & (1ULL << 11) ? 11 : (0x1000) & (1ULL << 10) ? 10 : (0x1000) & (1ULL << 9) ? 9 : (0x1000) & (1ULL << 8) ? 8 : (0x1000) & (1ULL << 7) ? 7 : (0x1000) & (1ULL << 6) ? 6 : (0x1000) & (1ULL << 5) ? 5 : (0x1000) & (1ULL << 4) ? 4 : (0x1000) & (1ULL << 3) ? 3 : (0x1000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x1000) <= 4) ? __ilog2_u32(0x1000) : __ilog2_u64(0x1000) ) + 1] = "EXECUTABLE",
 [( __builtin_constant_p(0x2000) ? ( (0x2000) < 2 ? 0 : (0x2000) & (1ULL << 63) ? 63 : (0x2000) & (1ULL << 62) ? 62 : (0x2000) & (1ULL << 61) ? 61 : (0x2000) & (1ULL << 60) ? 60 : (0x2000) & (1ULL << 59) ? 59 : (0x2000) & (1ULL << 58) ? 58 : (0x2000) & (1ULL << 57) ? 57 : (0x2000) & (1ULL << 56) ? 56 : (0x2000) & (1ULL << 55) ? 55 : (0x2000) & (1ULL << 54) ? 54 : (0x2000) & (1ULL << 53) ? 53 : (0x2000) & (1ULL << 52) ? 52 : (0x2000) & (1ULL << 51) ? 51 : (0x2000) & (1ULL << 50) ? 50 : (0x2000) & (1ULL << 49) ? 49 : (0x2000) & (1ULL << 48) ? 48 : (0x2000) & (1ULL << 47) ? 47 : (0x2000) & (1ULL << 46) ? 46 : (0x2000) & (1ULL << 45) ? 45 : (0x2000) & (1ULL << 44) ? 44 : (0x2000) & (1ULL << 43) ? 43 : (0x2000) & (1ULL << 42) ? 42 : (0x2000) & (1ULL << 41) ? 41 : (0x2000) & (1ULL << 40) ? 40 : (0x2000) & (1ULL << 39) ? 39 : (0x2000) & (1ULL << 38) ? 38 : (0x2000) & (1ULL << 37) ? 37 : (0x2000) & (1ULL << 36) ? 36 : (0x2000) & (1ULL << 35) ? 35 : (0x2000) & (1ULL << 34) ? 34 : (0x2000) & (1ULL << 33) ? 33 : (0x2000) & (1ULL << 32) ? 32 : (0x2000) & (1ULL << 31) ? 31 : (0x2000) & (1ULL << 30) ? 30 : (0x2000) & (1ULL << 29) ? 29 : (0x2000) & (1ULL << 28) ? 28 : (0x2000) & (1ULL << 27) ? 27 : (0x2000) & (1ULL << 26) ? 26 : (0x2000) & (1ULL << 25) ? 25 : (0x2000) & (1ULL << 24) ? 24 : (0x2000) & (1ULL << 23) ? 23 : (0x2000) & (1ULL << 22) ? 22 : (0x2000) & (1ULL << 21) ? 21 : (0x2000) & (1ULL << 20) ? 20 : (0x2000) & (1ULL << 19) ? 19 : (0x2000) & (1ULL << 18) ? 18 : (0x2000) & (1ULL << 17) ? 17 : (0x2000) & (1ULL << 16) ? 16 : (0x2000) & (1ULL << 15) ? 15 : (0x2000) & (1ULL << 14) ? 14 : (0x2000) & (1ULL << 13) ? 13 : (0x2000) & (1ULL << 12) ? 12 : (0x2000) & (1ULL << 11) ? 11 : (0x2000) & (1ULL << 10) ? 10 : (0x2000) & (1ULL << 9) ? 9 : (0x2000) & (1ULL << 8) ? 8 : (0x2000) & (1ULL << 7) ? 7 : (0x2000) & (1ULL << 6) ? 6 : (0x2000) & (1ULL << 5) ? 5 : (0x2000) & (1ULL << 4) ? 4 : (0x2000) & (1ULL << 3) ? 3 : (0x2000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x2000) <= 4) ? __ilog2_u32(0x2000) : __ilog2_u64(0x2000) ) + 1] = "LOCKED",
 [( __builtin_constant_p(0x4000) ? ( (0x4000) < 2 ? 0 : (0x4000) & (1ULL << 63) ? 63 : (0x4000) & (1ULL << 62) ? 62 : (0x4000) & (1ULL << 61) ? 61 : (0x4000) & (1ULL << 60) ? 60 : (0x4000) & (1ULL << 59) ? 59 : (0x4000) & (1ULL << 58) ? 58 : (0x4000) & (1ULL << 57) ? 57 : (0x4000) & (1ULL << 56) ? 56 : (0x4000) & (1ULL << 55) ? 55 : (0x4000) & (1ULL << 54) ? 54 : (0x4000) & (1ULL << 53) ? 53 : (0x4000) & (1ULL << 52) ? 52 : (0x4000) & (1ULL << 51) ? 51 : (0x4000) & (1ULL << 50) ? 50 : (0x4000) & (1ULL << 49) ? 49 : (0x4000) & (1ULL << 48) ? 48 : (0x4000) & (1ULL << 47) ? 47 : (0x4000) & (1ULL << 46) ? 46 : (0x4000) & (1ULL << 45) ? 45 : (0x4000) & (1ULL << 44) ? 44 : (0x4000) & (1ULL << 43) ? 43 : (0x4000) & (1ULL << 42) ? 42 : (0x4000) & (1ULL << 41) ? 41 : (0x4000) & (1ULL << 40) ? 40 : (0x4000) & (1ULL << 39) ? 39 : (0x4000) & (1ULL << 38) ? 38 : (0x4000) & (1ULL << 37) ? 37 : (0x4000) & (1ULL << 36) ? 36 : (0x4000) & (1ULL << 35) ? 35 : (0x4000) & (1ULL << 34) ? 34 : (0x4000) & (1ULL << 33) ? 33 : (0x4000) & (1ULL << 32) ? 32 : (0x4000) & (1ULL << 31) ? 31 : (0x4000) & (1ULL << 30) ? 30 : (0x4000) & (1ULL << 29) ? 29 : (0x4000) & (1ULL << 28) ? 28 : (0x4000) & (1ULL << 27) ? 27 : (0x4000) & (1ULL << 26) ? 26 : (0x4000) & (1ULL << 25) ? 25 : (0x4000) & (1ULL << 24) ? 24 : (0x4000) & (1ULL << 23) ? 23 : (0x4000) & (1ULL << 22) ? 22 : (0x4000) & (1ULL << 21) ? 21 : (0x4000) & (1ULL << 20) ? 20 : (0x4000) & (1ULL << 19) ? 19 : (0x4000) & (1ULL << 18) ? 18 : (0x4000) & (1ULL << 17) ? 17 : (0x4000) & (1ULL << 16) ? 16 : (0x4000) & (1ULL << 15) ? 15 : (0x4000) & (1ULL << 14) ? 14 : (0x4000) & (1ULL << 13) ? 13 : (0x4000) & (1ULL << 12) ? 12 : (0x4000) & (1ULL << 11) ? 11 : (0x4000) & (1ULL << 10) ? 10 : (0x4000) & (1ULL << 9) ? 9 : (0x4000) & (1ULL << 8) ? 8 : (0x4000) & (1ULL << 7) ? 7 : (0x4000) & (1ULL << 6) ? 6 : (0x4000) & (1ULL << 5) ? 5 : (0x4000) & (1ULL << 4) ? 4 : (0x4000) & (1ULL << 3) ? 3 : (0x4000) & (1ULL << 2) ? 2 : 1 ) : (sizeof(0x4000) <= 4) ? __ilog2_u32(0x4000) : __ilog2_u64(0x4000) ) + 1] = "NORESERVE",
};
# 37 "trace/beauty/mmap.c" 2
       static struct strarray strarray__mmap_flags = { .nr_entries = (sizeof(mmap_flags) / sizeof((mmap_flags)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((mmap_flags)), typeof(&(mmap_flags)[0]))); }))), .entries = mmap_flags, .prefix = "MAP_", };

static size_t mmap__scnprintf_flags(unsigned long flags, char *bf, size_t size, 
# 39 "trace/beauty/mmap.c" 3 4
                                                                               _Bool 
# 39 "trace/beauty/mmap.c"
                                                                                    show_prefix)
{
       return strarray__scnprintf_flags(&strarray__mmap_flags, bf, size, show_prefix, flags);
}

static size_t syscall_arg__scnprintf_mmap_flags(char *bf, size_t size,
      struct syscall_arg *arg)
{
 unsigned long flags = arg->val;

 if (flags & 0x20)
  arg->mask |= (1 << 4) | (1 << 5);

 return mmap__scnprintf_flags(flags, bf, size, arg->show_string_prefix);
}

#define SCA_MMAP_FLAGS syscall_arg__scnprintf_mmap_flags

static size_t syscall_arg__scnprintf_mremap_flags(char *bf, size_t size,
        struct syscall_arg *arg)
{
 const char *flags_prefix = "MREMAP_";
 
# 61 "trace/beauty/mmap.c" 3 4
_Bool 
# 61 "trace/beauty/mmap.c"
     show_prefix = arg->show_string_prefix;
 int printed = 0, flags = arg->val;

#define P_MREMAP_FLAG(n) if (flags & MREMAP_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? flags_prefix : "", #n); flags &= ~MREMAP_ ##n; }





 if (flags & 1) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? flags_prefix : "", "MAYMOVE"); flags &= ~1; };
 if (flags & 2) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? flags_prefix : "", "FIXED"); flags &= ~2; };
#undef P_MREMAP_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

#define SCA_MREMAP_FLAGS syscall_arg__scnprintf_mremap_flags

static size_t madvise__scnprintf_behavior(int behavior, char *bf, size_t size)
{
# 1 "/home/jmikedupont2/linux/tools/perf/trace/beauty/generated/madvise_behavior_array.c" 1
static const char *madvise_advices[] = {
 [0] = "NORMAL",
 [1] = "RANDOM",
 [2] = "SEQUENTIAL",
 [3] = "WILLNEED",
 [4] = "DONTNEED",
 [8] = "FREE",
 [9] = "REMOVE",
 [10] = "DONTFORK",
 [11] = "DOFORK",
 [12] = "MERGEABLE",
 [13] = "UNMERGEABLE",
 [14] = "HUGEPAGE",
 [15] = "NOHUGEPAGE",
 [16] = "DONTDUMP",
 [17] = "DODUMP",
 [18] = "WIPEONFORK",
 [19] = "KEEPONFORK",
 [20] = "COLD",
 [21] = "PAGEOUT",
 [100] = "HWPOISON",
 [101] = "SOFT_OFFLINE",
};
# 85 "trace/beauty/mmap.c" 2
       static struct strarray strarray__madvise_advices = { .nr_entries = (sizeof(madvise_advices) / sizeof((madvise_advices)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((madvise_advices)), typeof(&(madvise_advices)[0]))); }))), .entries = madvise_advices, .prefix = "MADV_", };

       if (behavior < strarray__madvise_advices.nr_entries && strarray__madvise_advices.entries[behavior] != 
# 87 "trace/beauty/mmap.c" 3 4
                                                                                                            ((void *)0)
# 87 "trace/beauty/mmap.c"
                                                                                                                )
               return scnprintf(bf, size, "MADV_%s", strarray__madvise_advices.entries[behavior]);

       return scnprintf(bf, size, "%#", behavior);
}

static size_t syscall_arg__scnprintf_madvise_behavior(char *bf, size_t size,
            struct syscall_arg *arg)
{
 return madvise__scnprintf_behavior(arg->val, bf, size);
}

#define SCA_MADV_BHV syscall_arg__scnprintf_madvise_behavior
# 898 "builtin-trace.c" 2
# 1 "trace/beauty/mode_t.c" 1


# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
#define _SYS_STAT_H 1







#define __need_time_t 


#define __need_timespec 
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 105 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4


#define S_IFMT __S_IFMT
#define S_IFDIR __S_IFDIR
#define S_IFCHR __S_IFCHR
#define S_IFBLK __S_IFBLK
#define S_IFREG __S_IFREG

#define S_IFIFO __S_IFIFO


#define S_IFLNK __S_IFLNK



#define S_IFSOCK __S_IFSOCK





#define __S_ISTYPE(mode,mask) (((mode) & __S_IFMT) == (mask))

#define S_ISDIR(mode) __S_ISTYPE((mode), __S_IFDIR)
#define S_ISCHR(mode) __S_ISTYPE((mode), __S_IFCHR)
#define S_ISBLK(mode) __S_ISTYPE((mode), __S_IFBLK)
#define S_ISREG(mode) __S_ISTYPE((mode), __S_IFREG)

#define S_ISFIFO(mode) __S_ISTYPE((mode), __S_IFIFO)


#define S_ISLNK(mode) __S_ISTYPE((mode), __S_IFLNK)
# 145 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
#define S_ISSOCK(mode) __S_ISTYPE((mode), __S_IFSOCK)
# 155 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
#define S_TYPEISMQ(buf) __S_TYPEISMQ(buf)
#define S_TYPEISSEM(buf) __S_TYPEISSEM(buf)
#define S_TYPEISSHM(buf) __S_TYPEISSHM(buf)





#define S_ISUID __S_ISUID
#define S_ISGID __S_ISGID



#define S_ISVTX __S_ISVTX


#define S_IRUSR __S_IREAD
#define S_IWUSR __S_IWRITE
#define S_IXUSR __S_IEXEC

#define S_IRWXU (__S_IREAD|__S_IWRITE|__S_IEXEC)


#define S_IREAD S_IRUSR
#define S_IWRITE S_IWUSR
#define S_IEXEC S_IXUSR


#define S_IRGRP (S_IRUSR >> 3)
#define S_IWGRP (S_IWUSR >> 3)
#define S_IXGRP (S_IXUSR >> 3)

#define S_IRWXG (S_IRWXU >> 3)

#define S_IROTH (S_IRGRP >> 3)
#define S_IWOTH (S_IWGRP >> 3)
#define S_IXOTH (S_IXGRP >> 3)

#define S_IRWXO (S_IRWXG >> 3)




#define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO)
#define ALLPERMS (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)
#define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)

#define S_BLKSIZE 512
# 216 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 216 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file, struct stat *__restrict __buf) __asm__ ("" "stat64") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (1, 2)));
extern int fstat (int __fd, struct stat *__buf) __asm__ ("" "fstat64") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2)));






extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 242 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file, struct stat *__restrict __buf, int __flag) __asm__ ("" "fstatat64") __attribute__ ((__nothrow__ , __leaf__))


                 __attribute__ ((__nonnull__ (2, 3)));






extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 266 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file, struct stat *__restrict __buf) __asm__ ("" "lstat64") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1, 2)));





extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));




extern __mode_t getumask (void) __attribute__ ((__nothrow__ , __leaf__));



extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 393 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
#define _MKNOD_VER 0
# 409 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf) __asm__ ("" "__fxstat64") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename, struct stat *__stat_buf) __asm__ ("" "__xstat64") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename, struct stat *__stat_buf) __asm__ ("" "__lxstat64") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag) __asm__ ("" "__fxstatat64") __attribute__ ((__nothrow__ , __leaf__))


                    __attribute__ ((__nonnull__ (3, 4)));
# 431 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) stat (const char *__path, struct stat *__statbuf)
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) lstat (const char *__path, struct stat *__statbuf)
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) fstat (int __fd, struct stat *__statbuf)
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag)

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev)
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev)

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) stat64 (const char *__path, struct stat64 *__statbuf)
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf)
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) fstat64 (int __fd, struct stat64 *__statbuf)
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag)

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}







# 4 "trace/beauty/mode_t.c" 2




#define S_IRWXUGO (S_IRWXU|S_IRWXG|S_IRWXO)


#define S_IALLUGO (S_ISUID|S_ISGID|S_ISVTX|S_IRWXUGO)


#define S_IRUGO (S_IRUSR|S_IRGRP|S_IROTH)


#define S_IWUGO (S_IWUSR|S_IWGRP|S_IWOTH)


#define S_IXUGO (S_IXUSR|S_IXGRP|S_IXOTH)



# 23 "trace/beauty/mode_t.c"
static size_t syscall_arg__scnprintf_mode_t(char *bf, size_t size, struct syscall_arg *arg)
{
 
# 25 "trace/beauty/mode_t.c" 3 4
_Bool 
# 25 "trace/beauty/mode_t.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "S_";
 int printed = 0, mode = arg->val;

#define P_MODE(n) if ((mode & S_ ##n) == S_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); mode &= ~S_ ##n; }





 if ((mode & (
# 35 "trace/beauty/mode_t.c" 3 4
04000
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
02000
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
01000
# 35 "trace/beauty/mode_t.c"
|(
# 35 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 35 "trace/beauty/mode_t.c"
))) == (
# 35 "trace/beauty/mode_t.c" 3 4
04000
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
02000
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
01000
# 35 "trace/beauty/mode_t.c"
|(
# 35 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 35 "trace/beauty/mode_t.c"
))) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IALLUGO"); mode &= ~(
# 35 "trace/beauty/mode_t.c" 3 4
04000
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
02000
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
01000
# 35 "trace/beauty/mode_t.c"
|(
# 35 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 35 "trace/beauty/mode_t.c"
|
# 35 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 35 "trace/beauty/mode_t.c"
)); };
 if ((mode & (
# 36 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 36 "trace/beauty/mode_t.c"
|
# 36 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 36 "trace/beauty/mode_t.c"
|
# 36 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 36 "trace/beauty/mode_t.c"
)) == (
# 36 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 36 "trace/beauty/mode_t.c"
|
# 36 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 36 "trace/beauty/mode_t.c"
|
# 36 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 36 "trace/beauty/mode_t.c"
)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IRWXUGO"); mode &= ~(
# 36 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 36 "trace/beauty/mode_t.c"
|
# 36 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 36 "trace/beauty/mode_t.c"
|
# 36 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 36 "trace/beauty/mode_t.c"
); };
 if ((mode & (
# 37 "trace/beauty/mode_t.c" 3 4
0400
# 37 "trace/beauty/mode_t.c"
|
# 37 "trace/beauty/mode_t.c" 3 4
(0400 >> 3)
# 37 "trace/beauty/mode_t.c"
|
# 37 "trace/beauty/mode_t.c" 3 4
((0400 >> 3) >> 3)
# 37 "trace/beauty/mode_t.c"
)) == (
# 37 "trace/beauty/mode_t.c" 3 4
0400
# 37 "trace/beauty/mode_t.c"
|
# 37 "trace/beauty/mode_t.c" 3 4
(0400 >> 3)
# 37 "trace/beauty/mode_t.c"
|
# 37 "trace/beauty/mode_t.c" 3 4
((0400 >> 3) >> 3)
# 37 "trace/beauty/mode_t.c"
)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IRUGO"); mode &= ~(
# 37 "trace/beauty/mode_t.c" 3 4
0400
# 37 "trace/beauty/mode_t.c"
|
# 37 "trace/beauty/mode_t.c" 3 4
(0400 >> 3)
# 37 "trace/beauty/mode_t.c"
|
# 37 "trace/beauty/mode_t.c" 3 4
((0400 >> 3) >> 3)
# 37 "trace/beauty/mode_t.c"
); };
 if ((mode & (
# 38 "trace/beauty/mode_t.c" 3 4
0200
# 38 "trace/beauty/mode_t.c"
|
# 38 "trace/beauty/mode_t.c" 3 4
(0200 >> 3)
# 38 "trace/beauty/mode_t.c"
|
# 38 "trace/beauty/mode_t.c" 3 4
((0200 >> 3) >> 3)
# 38 "trace/beauty/mode_t.c"
)) == (
# 38 "trace/beauty/mode_t.c" 3 4
0200
# 38 "trace/beauty/mode_t.c"
|
# 38 "trace/beauty/mode_t.c" 3 4
(0200 >> 3)
# 38 "trace/beauty/mode_t.c"
|
# 38 "trace/beauty/mode_t.c" 3 4
((0200 >> 3) >> 3)
# 38 "trace/beauty/mode_t.c"
)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IWUGO"); mode &= ~(
# 38 "trace/beauty/mode_t.c" 3 4
0200
# 38 "trace/beauty/mode_t.c"
|
# 38 "trace/beauty/mode_t.c" 3 4
(0200 >> 3)
# 38 "trace/beauty/mode_t.c"
|
# 38 "trace/beauty/mode_t.c" 3 4
((0200 >> 3) >> 3)
# 38 "trace/beauty/mode_t.c"
); };
 if ((mode & (
# 39 "trace/beauty/mode_t.c" 3 4
0100
# 39 "trace/beauty/mode_t.c"
|
# 39 "trace/beauty/mode_t.c" 3 4
(0100 >> 3)
# 39 "trace/beauty/mode_t.c"
|
# 39 "trace/beauty/mode_t.c" 3 4
((0100 >> 3) >> 3)
# 39 "trace/beauty/mode_t.c"
)) == (
# 39 "trace/beauty/mode_t.c" 3 4
0100
# 39 "trace/beauty/mode_t.c"
|
# 39 "trace/beauty/mode_t.c" 3 4
(0100 >> 3)
# 39 "trace/beauty/mode_t.c"
|
# 39 "trace/beauty/mode_t.c" 3 4
((0100 >> 3) >> 3)
# 39 "trace/beauty/mode_t.c"
)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IXUGO"); mode &= ~(
# 39 "trace/beauty/mode_t.c" 3 4
0100
# 39 "trace/beauty/mode_t.c"
|
# 39 "trace/beauty/mode_t.c" 3 4
(0100 >> 3)
# 39 "trace/beauty/mode_t.c"
|
# 39 "trace/beauty/mode_t.c" 3 4
((0100 >> 3) >> 3)
# 39 "trace/beauty/mode_t.c"
); };
 if ((mode & 
# 40 "trace/beauty/mode_t.c" 3 4
0170000
# 40 "trace/beauty/mode_t.c"
) == 
# 40 "trace/beauty/mode_t.c" 3 4
0170000
# 40 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFMT"); mode &= ~
# 40 "trace/beauty/mode_t.c" 3 4
0170000
# 40 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 41 "trace/beauty/mode_t.c" 3 4
0140000
# 41 "trace/beauty/mode_t.c"
) == 
# 41 "trace/beauty/mode_t.c" 3 4
0140000
# 41 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFSOCK"); mode &= ~
# 41 "trace/beauty/mode_t.c" 3 4
0140000
# 41 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 42 "trace/beauty/mode_t.c" 3 4
0120000
# 42 "trace/beauty/mode_t.c"
) == 
# 42 "trace/beauty/mode_t.c" 3 4
0120000
# 42 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFLNK"); mode &= ~
# 42 "trace/beauty/mode_t.c" 3 4
0120000
# 42 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 43 "trace/beauty/mode_t.c" 3 4
0100000
# 43 "trace/beauty/mode_t.c"
) == 
# 43 "trace/beauty/mode_t.c" 3 4
0100000
# 43 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFREG"); mode &= ~
# 43 "trace/beauty/mode_t.c" 3 4
0100000
# 43 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 44 "trace/beauty/mode_t.c" 3 4
0060000
# 44 "trace/beauty/mode_t.c"
) == 
# 44 "trace/beauty/mode_t.c" 3 4
0060000
# 44 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFBLK"); mode &= ~
# 44 "trace/beauty/mode_t.c" 3 4
0060000
# 44 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 45 "trace/beauty/mode_t.c" 3 4
0040000
# 45 "trace/beauty/mode_t.c"
) == 
# 45 "trace/beauty/mode_t.c" 3 4
0040000
# 45 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFDIR"); mode &= ~
# 45 "trace/beauty/mode_t.c" 3 4
0040000
# 45 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 46 "trace/beauty/mode_t.c" 3 4
0020000
# 46 "trace/beauty/mode_t.c"
) == 
# 46 "trace/beauty/mode_t.c" 3 4
0020000
# 46 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFCHR"); mode &= ~
# 46 "trace/beauty/mode_t.c" 3 4
0020000
# 46 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 47 "trace/beauty/mode_t.c" 3 4
0010000
# 47 "trace/beauty/mode_t.c"
) == 
# 47 "trace/beauty/mode_t.c" 3 4
0010000
# 47 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IFIFO"); mode &= ~
# 47 "trace/beauty/mode_t.c" 3 4
0010000
# 47 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 48 "trace/beauty/mode_t.c" 3 4
04000
# 48 "trace/beauty/mode_t.c"
) == 
# 48 "trace/beauty/mode_t.c" 3 4
04000
# 48 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "ISUID"); mode &= ~
# 48 "trace/beauty/mode_t.c" 3 4
04000
# 48 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 49 "trace/beauty/mode_t.c" 3 4
02000
# 49 "trace/beauty/mode_t.c"
) == 
# 49 "trace/beauty/mode_t.c" 3 4
02000
# 49 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "ISGID"); mode &= ~
# 49 "trace/beauty/mode_t.c" 3 4
02000
# 49 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 50 "trace/beauty/mode_t.c" 3 4
01000
# 50 "trace/beauty/mode_t.c"
) == 
# 50 "trace/beauty/mode_t.c" 3 4
01000
# 50 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "ISVTX"); mode &= ~
# 50 "trace/beauty/mode_t.c" 3 4
01000
# 50 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 51 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 51 "trace/beauty/mode_t.c"
) == 
# 51 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 51 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IRWXU"); mode &= ~
# 51 "trace/beauty/mode_t.c" 3 4
(0400|0200|0100)
# 51 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 52 "trace/beauty/mode_t.c" 3 4
0400
# 52 "trace/beauty/mode_t.c"
) == 
# 52 "trace/beauty/mode_t.c" 3 4
0400
# 52 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IRUSR"); mode &= ~
# 52 "trace/beauty/mode_t.c" 3 4
0400
# 52 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 53 "trace/beauty/mode_t.c" 3 4
0200
# 53 "trace/beauty/mode_t.c"
) == 
# 53 "trace/beauty/mode_t.c" 3 4
0200
# 53 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IWUSR"); mode &= ~
# 53 "trace/beauty/mode_t.c" 3 4
0200
# 53 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 54 "trace/beauty/mode_t.c" 3 4
0100
# 54 "trace/beauty/mode_t.c"
) == 
# 54 "trace/beauty/mode_t.c" 3 4
0100
# 54 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IXUSR"); mode &= ~
# 54 "trace/beauty/mode_t.c" 3 4
0100
# 54 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 55 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 55 "trace/beauty/mode_t.c"
) == 
# 55 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 55 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IRWXG"); mode &= ~
# 55 "trace/beauty/mode_t.c" 3 4
((0400|0200|0100) >> 3)
# 55 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 56 "trace/beauty/mode_t.c" 3 4
(0400 >> 3)
# 56 "trace/beauty/mode_t.c"
) == 
# 56 "trace/beauty/mode_t.c" 3 4
(0400 >> 3)
# 56 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IRGRP"); mode &= ~
# 56 "trace/beauty/mode_t.c" 3 4
(0400 >> 3)
# 56 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 57 "trace/beauty/mode_t.c" 3 4
(0200 >> 3)
# 57 "trace/beauty/mode_t.c"
) == 
# 57 "trace/beauty/mode_t.c" 3 4
(0200 >> 3)
# 57 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IWGRP"); mode &= ~
# 57 "trace/beauty/mode_t.c" 3 4
(0200 >> 3)
# 57 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 58 "trace/beauty/mode_t.c" 3 4
(0100 >> 3)
# 58 "trace/beauty/mode_t.c"
) == 
# 58 "trace/beauty/mode_t.c" 3 4
(0100 >> 3)
# 58 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IXGRP"); mode &= ~
# 58 "trace/beauty/mode_t.c" 3 4
(0100 >> 3)
# 58 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 59 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 59 "trace/beauty/mode_t.c"
) == 
# 59 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 59 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IRWXO"); mode &= ~
# 59 "trace/beauty/mode_t.c" 3 4
(((0400|0200|0100) >> 3) >> 3)
# 59 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 60 "trace/beauty/mode_t.c" 3 4
((0400 >> 3) >> 3)
# 60 "trace/beauty/mode_t.c"
) == 
# 60 "trace/beauty/mode_t.c" 3 4
((0400 >> 3) >> 3)
# 60 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IROTH"); mode &= ~
# 60 "trace/beauty/mode_t.c" 3 4
((0400 >> 3) >> 3)
# 60 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 61 "trace/beauty/mode_t.c" 3 4
((0200 >> 3) >> 3)
# 61 "trace/beauty/mode_t.c"
) == 
# 61 "trace/beauty/mode_t.c" 3 4
((0200 >> 3) >> 3)
# 61 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IWOTH"); mode &= ~
# 61 "trace/beauty/mode_t.c" 3 4
((0200 >> 3) >> 3)
# 61 "trace/beauty/mode_t.c"
; };
 if ((mode & 
# 62 "trace/beauty/mode_t.c" 3 4
((0100 >> 3) >> 3)
# 62 "trace/beauty/mode_t.c"
) == 
# 62 "trace/beauty/mode_t.c" 3 4
((0100 >> 3) >> 3)
# 62 "trace/beauty/mode_t.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "IXOTH"); mode &= ~
# 62 "trace/beauty/mode_t.c" 3 4
((0100 >> 3) >> 3)
# 62 "trace/beauty/mode_t.c"
; };
#undef P_MODE

 if (mode)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", mode);

 return printed;
}

#define SCA_MODE_T syscall_arg__scnprintf_mode_t
# 899 "builtin-trace.c" 2
# 1 "trace/beauty/msg_flags.c" 1


# 1 "/usr/include/x86_64-linux-gnu/sys/socket.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
#define _SYS_SOCKET_H 1





# 1 "/usr/include/x86_64-linux-gnu/sys/uio.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
#define _SYS_UIO_H 1








# 1 "/usr/include/x86_64-linux-gnu/bits/uio.h" 1 3 4
# 54 "/usr/include/x86_64-linux-gnu/bits/uio.h" 3 4
#define _BITS_UIO_H_FOR_SYS_UIO_H 1





# 59 "/usr/include/x86_64-linux-gnu/bits/uio.h" 3 4
extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


# 29 "/usr/include/x86_64-linux-gnu/sys/uio.h" 2 3 4
# 39 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
# 50 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
# 81 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count, __off64_t __offset) __asm__ ("" "preadv64")

                __attribute__ ((__warn_unused_result__));
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count, __off64_t __offset) __asm__ ("" "pwritev64")

                 __attribute__ ((__warn_unused_result__));
# 103 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));
# 115 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset) __attribute__ ((__warn_unused_result__));




# 27 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4
#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 29 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/socket.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
#define __BITS_SOCKET_H 





#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 1 3 4
# 161 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/usr/lib/gcc/x86_64-linux-gnu/6/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 28 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,

#define SOCK_STREAM SOCK_STREAM
  SOCK_DGRAM = 2,

#define SOCK_DGRAM SOCK_DGRAM
  SOCK_RAW = 3,
#define SOCK_RAW SOCK_RAW
  SOCK_RDM = 4,
#define SOCK_RDM SOCK_RDM
  SOCK_SEQPACKET = 5,

#define SOCK_SEQPACKET SOCK_SEQPACKET
  SOCK_DCCP = 6,
#define SOCK_DCCP SOCK_DCCP
  SOCK_PACKET = 10,


#define SOCK_PACKET SOCK_PACKET




  SOCK_CLOEXEC = 02000000,

#define SOCK_CLOEXEC SOCK_CLOEXEC
  SOCK_NONBLOCK = 00004000

#define SOCK_NONBLOCK SOCK_NONBLOCK
};
# 39 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4


#define PF_UNSPEC 0
#define PF_LOCAL 1
#define PF_UNIX PF_LOCAL
#define PF_FILE PF_LOCAL
#define PF_INET 2
#define PF_AX25 3
#define PF_IPX 4
#define PF_APPLETALK 5
#define PF_NETROM 6
#define PF_BRIDGE 7
#define PF_ATMPVC 8
#define PF_X25 9
#define PF_INET6 10
#define PF_ROSE 11
#define PF_DECnet 12
#define PF_NETBEUI 13
#define PF_SECURITY 14
#define PF_KEY 15
#define PF_NETLINK 16
#define PF_ROUTE PF_NETLINK
#define PF_PACKET 17
#define PF_ASH 18
#define PF_ECONET 19
#define PF_ATMSVC 20
#define PF_RDS 21
#define PF_SNA 22
#define PF_IRDA 23
#define PF_PPPOX 24
#define PF_WANPIPE 25
#define PF_LLC 26
#define PF_IB 27
#define PF_MPLS 28
#define PF_CAN 29
#define PF_TIPC 30
#define PF_BLUETOOTH 31
#define PF_IUCV 32
#define PF_RXRPC 33
#define PF_ISDN 34
#define PF_PHONET 35
#define PF_IEEE802154 36
#define PF_CAIF 37
#define PF_ALG 38
#define PF_NFC 39
#define PF_VSOCK 40
#define PF_KCM 41
#define PF_MAX 42


#define AF_UNSPEC PF_UNSPEC
#define AF_LOCAL PF_LOCAL
#define AF_UNIX PF_UNIX
#define AF_FILE PF_FILE
#define AF_INET PF_INET
#define AF_AX25 PF_AX25
#define AF_IPX PF_IPX
#define AF_APPLETALK PF_APPLETALK
#define AF_NETROM PF_NETROM
#define AF_BRIDGE PF_BRIDGE
#define AF_ATMPVC PF_ATMPVC
#define AF_X25 PF_X25
#define AF_INET6 PF_INET6
#define AF_ROSE PF_ROSE
#define AF_DECnet PF_DECnet
#define AF_NETBEUI PF_NETBEUI
#define AF_SECURITY PF_SECURITY
#define AF_KEY PF_KEY
#define AF_NETLINK PF_NETLINK
#define AF_ROUTE PF_ROUTE
#define AF_PACKET PF_PACKET
#define AF_ASH PF_ASH
#define AF_ECONET PF_ECONET
#define AF_ATMSVC PF_ATMSVC
#define AF_RDS PF_RDS
#define AF_SNA PF_SNA
#define AF_IRDA PF_IRDA
#define AF_PPPOX PF_PPPOX
#define AF_WANPIPE PF_WANPIPE
#define AF_LLC PF_LLC
#define AF_IB PF_IB
#define AF_MPLS PF_MPLS
#define AF_CAN PF_CAN
#define AF_TIPC PF_TIPC
#define AF_BLUETOOTH PF_BLUETOOTH
#define AF_IUCV PF_IUCV
#define AF_RXRPC PF_RXRPC
#define AF_ISDN PF_ISDN
#define AF_PHONET PF_PHONET
#define AF_IEEE802154 PF_IEEE802154
#define AF_CAIF PF_CAIF
#define AF_ALG PF_ALG
#define AF_NFC PF_NFC
#define AF_VSOCK PF_VSOCK
#define AF_KCM PF_KCM
#define AF_MAX PF_MAX





#define SOL_RAW 255
#define SOL_DECNET 261
#define SOL_X25 262
#define SOL_PACKET 263
#define SOL_ATM 264
#define SOL_AAL 265
#define SOL_IRDA 266
#define SOL_NETBEUI 267
#define SOL_LLC 268
#define SOL_DCCP 269
#define SOL_NETLINK 270
#define SOL_TIPC 271
#define SOL_RXRPC 272
#define SOL_PPPOL2TP 273
#define SOL_BLUETOOTH 274
#define SOL_PNPIPE 275
#define SOL_RDS 276
#define SOL_IUCV 277
#define SOL_CAIF 278
#define SOL_ALG 279
#define SOL_NFC 280
#define SOL_KCM 281


#define SOMAXCONN 128


# 1 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 3 4
#define _BITS_SOCKADDR_H 1



typedef unsigned short int sa_family_t;





#define __SOCKADDR_COMMON(sa_prefix) sa_family_t sa_prefix ##family


#define __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int))


#define _SS_SIZE 128
# 168 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };




#define __ss_aligntype unsigned long int
#define _SS_PADSIZE (_SS_SIZE - __SOCKADDR_COMMON_SIZE - sizeof (__ss_aligntype))


struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,
#define MSG_OOB MSG_OOB
    MSG_PEEK = 0x02,
#define MSG_PEEK MSG_PEEK
    MSG_DONTROUTE = 0x04,
#define MSG_DONTROUTE MSG_DONTROUTE


    MSG_TRYHARD = MSG_DONTROUTE,
#define MSG_TRYHARD MSG_DONTROUTE

    MSG_CTRUNC = 0x08,
#define MSG_CTRUNC MSG_CTRUNC
    MSG_PROXY = 0x10,
#define MSG_PROXY MSG_PROXY
    MSG_TRUNC = 0x20,
#define MSG_TRUNC MSG_TRUNC
    MSG_DONTWAIT = 0x40,
#define MSG_DONTWAIT MSG_DONTWAIT
    MSG_EOR = 0x80,
#define MSG_EOR MSG_EOR
    MSG_WAITALL = 0x100,
#define MSG_WAITALL MSG_WAITALL
    MSG_FIN = 0x200,
#define MSG_FIN MSG_FIN
    MSG_SYN = 0x400,
#define MSG_SYN MSG_SYN
    MSG_CONFIRM = 0x800,
#define MSG_CONFIRM MSG_CONFIRM
    MSG_RST = 0x1000,
#define MSG_RST MSG_RST
    MSG_ERRQUEUE = 0x2000,
#define MSG_ERRQUEUE MSG_ERRQUEUE
    MSG_NOSIGNAL = 0x4000,
#define MSG_NOSIGNAL MSG_NOSIGNAL
    MSG_MORE = 0x8000,
#define MSG_MORE MSG_MORE
    MSG_WAITFORONE = 0x10000,
#define MSG_WAITFORONE MSG_WAITFORONE
    MSG_BATCH = 0x40000,
#define MSG_BATCH MSG_BATCH
    MSG_FASTOPEN = 0x20000000,
#define MSG_FASTOPEN MSG_FASTOPEN

    MSG_CMSG_CLOEXEC = 0x40000000


#define MSG_CMSG_CLOEXEC MSG_CMSG_CLOEXEC
  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };



#define CMSG_DATA(cmsg) ((cmsg)->__cmsg_data)



#define CMSG_NXTHDR(mhdr,cmsg) __cmsg_nxthdr (mhdr, cmsg)
#define CMSG_FIRSTHDR(mhdr) ((size_t) (mhdr)->msg_controllen >= sizeof (struct cmsghdr) ? (struct cmsghdr *) (mhdr)->msg_control : (struct cmsghdr *) 0)


#define CMSG_ALIGN(len) (((len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1))

#define CMSG_SPACE(len) (CMSG_ALIGN (len) + CMSG_ALIGN (sizeof (struct cmsghdr)))

#define CMSG_LEN(len) (CMSG_ALIGN (sizeof (struct cmsghdr)) + (len))

extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) struct cmsghdr *
__attribute__ ((__nothrow__ , __leaf__)) __cmsg_nxthdr (struct msghdr *__mhdr, struct cmsghdr *__cmsg)
{
  if ((size_t) __cmsg->cmsg_len < sizeof (struct cmsghdr))

    return (struct cmsghdr *) 0;

  __cmsg = (struct cmsghdr *) ((unsigned char *) __cmsg
          + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1)));
  if ((unsigned char *) (__cmsg + 1) > ((unsigned char *) __mhdr->msg_control
     + __mhdr->msg_controllen)
      || ((unsigned char *) __cmsg + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1))
   > ((unsigned char *) __mhdr->msg_control + __mhdr->msg_controllen)))

    return (struct cmsghdr *) 0;
  return __cmsg;
}




enum
  {
    SCM_RIGHTS = 0x01
#define SCM_RIGHTS SCM_RIGHTS

    , SCM_CREDENTIALS = 0x02
#define SCM_CREDENTIALS SCM_CREDENTIALS

  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 368 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 1 3 4
# 1 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/socket.h" 1 3 4


#define __ASM_GENERIC_SOCKET_H 

# 1 "/usr/include/linux/posix_types.h" 1 3 4

#define _LINUX_POSIX_TYPES_H 
# 21 "/usr/include/linux/posix_types.h" 3 4
#undef __FD_SETSIZE
#define __FD_SETSIZE 1024

typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4
# 36 "/usr/include/linux/posix_types.h" 2 3 4
# 6 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4

#define __ASM_GENERIC_SOCKIOS_H 


#define FIOSETOWN 0x8901
#define SIOCSPGRP 0x8902
#define FIOGETOWN 0x8903
#define SIOCGPGRP 0x8904
#define SIOCATMARK 0x8905
#define SIOCGSTAMP 0x8906
#define SIOCGSTAMPNS 0x8907
# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 2 3 4
# 7 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/socket.h" 2 3 4


#define SOL_SOCKET 1

#define SO_DEBUG 1
#define SO_REUSEADDR 2
#define SO_TYPE 3
#define SO_ERROR 4
#define SO_DONTROUTE 5
#define SO_BROADCAST 6
#define SO_SNDBUF 7
#define SO_RCVBUF 8
#define SO_SNDBUFFORCE 32
#define SO_RCVBUFFORCE 33
#define SO_KEEPALIVE 9
#define SO_OOBINLINE 10
#define SO_NO_CHECK 11
#define SO_PRIORITY 12
#define SO_LINGER 13
#define SO_BSDCOMPAT 14
#define SO_REUSEPORT 15

#define SO_PASSCRED 16
#define SO_PEERCRED 17
#define SO_RCVLOWAT 18
#define SO_SNDLOWAT 19
#define SO_RCVTIMEO_OLD 20
#define SO_SNDTIMEO_OLD 21



#define SO_SECURITY_AUTHENTICATION 22
#define SO_SECURITY_ENCRYPTION_TRANSPORT 23
#define SO_SECURITY_ENCRYPTION_NETWORK 24

#define SO_BINDTODEVICE 25


#define SO_ATTACH_FILTER 26
#define SO_DETACH_FILTER 27
#define SO_GET_FILTER SO_ATTACH_FILTER

#define SO_PEERNAME 28

#define SO_ACCEPTCONN 30

#define SO_PEERSEC 31
#define SO_PASSSEC 34

#define SO_MARK 36

#define SO_PROTOCOL 38
#define SO_DOMAIN 39

#define SO_RXQ_OVFL 40

#define SO_WIFI_STATUS 41
#define SCM_WIFI_STATUS SO_WIFI_STATUS
#define SO_PEEK_OFF 42


#define SO_NOFCS 43

#define SO_LOCK_FILTER 44

#define SO_SELECT_ERR_QUEUE 45

#define SO_BUSY_POLL 46

#define SO_MAX_PACING_RATE 47

#define SO_BPF_EXTENSIONS 48

#define SO_INCOMING_CPU 49

#define SO_ATTACH_BPF 50
#define SO_DETACH_BPF SO_DETACH_FILTER

#define SO_ATTACH_REUSEPORT_CBPF 51
#define SO_ATTACH_REUSEPORT_EBPF 52

#define SO_CNX_ADVICE 53

#define SCM_TIMESTAMPING_OPT_STATS 54

#define SO_MEMINFO 55

#define SO_INCOMING_NAPI_ID 56

#define SO_COOKIE 57

#define SCM_TIMESTAMPING_PKTINFO 58

#define SO_PEERGROUPS 59

#define SO_ZEROCOPY 60

#define SO_TXTIME 61
#define SCM_TXTIME SO_TXTIME

#define SO_BINDTOIFINDEX 62

#define SO_TIMESTAMP_OLD 29
#define SO_TIMESTAMPNS_OLD 35
#define SO_TIMESTAMPING_OLD 37

#define SO_TIMESTAMP_NEW 63
#define SO_TIMESTAMPNS_NEW 64
#define SO_TIMESTAMPING_NEW 65

#define SO_RCVTIMEO_NEW 66
#define SO_SNDTIMEO_NEW 67

#define SO_DETACH_REUSEPORT_BPF 68





#define SO_TIMESTAMP SO_TIMESTAMP_OLD
#define SO_TIMESTAMPNS SO_TIMESTAMPNS_OLD
#define SO_TIMESTAMPING SO_TIMESTAMPING_OLD

#define SO_RCVTIMEO SO_RCVTIMEO_OLD
#define SO_SNDTIMEO SO_SNDTIMEO_OLD
# 141 "/home/jmikedupont2/linux/tools/include/uapi/asm-generic/socket.h" 3 4
#define SCM_TIMESTAMP SO_TIMESTAMP
#define SCM_TIMESTAMPNS SO_TIMESTAMPNS
#define SCM_TIMESTAMPING SO_TIMESTAMPING
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 2 3 4
# 369 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 402 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 39 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,
#define SHUT_RD SHUT_RD
  SHUT_WR,
#define SHUT_WR SHUT_WR
  SHUT_RDWR
#define SHUT_RDWR SHUT_RDWR
};
# 74 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
#define __SOCKADDR_ALLTYPES __SOCKADDR_ONETYPE (sockaddr) __SOCKADDR_ONETYPE (sockaddr_at) __SOCKADDR_ONETYPE (sockaddr_ax25) __SOCKADDR_ONETYPE (sockaddr_dl) __SOCKADDR_ONETYPE (sockaddr_eon) __SOCKADDR_ONETYPE (sockaddr_in) __SOCKADDR_ONETYPE (sockaddr_in6) __SOCKADDR_ONETYPE (sockaddr_inarp) __SOCKADDR_ONETYPE (sockaddr_ipx) __SOCKADDR_ONETYPE (sockaddr_iso) __SOCKADDR_ONETYPE (sockaddr_ns) __SOCKADDR_ONETYPE (sockaddr_un) __SOCKADDR_ONETYPE (sockaddr_x25)
# 89 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
#define __SOCKADDR_ONETYPE(type) struct type *__restrict __ ##type ##__;
typedef union { struct sockaddr *__restrict __sockaddr__; struct sockaddr_at *__restrict __sockaddr_at__; struct sockaddr_ax25 *__restrict __sockaddr_ax25__; struct sockaddr_dl *__restrict __sockaddr_dl__; struct sockaddr_eon *__restrict __sockaddr_eon__; struct sockaddr_in *__restrict __sockaddr_in__; struct sockaddr_in6 *__restrict __sockaddr_in6__; struct sockaddr_inarp *__restrict __sockaddr_inarp__; struct sockaddr_ipx *__restrict __sockaddr_ipx__; struct sockaddr_iso *__restrict __sockaddr_iso__; struct sockaddr_ns *__restrict __sockaddr_ns__; struct sockaddr_un *__restrict __sockaddr_un__; struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __SOCKADDR_ARG __attribute__ ((__transparent_union__));
#undef __SOCKADDR_ONETYPE
#define __SOCKADDR_ONETYPE(type) const struct type *__restrict __ ##type ##__;
typedef union { const struct sockaddr *__restrict __sockaddr__; const struct sockaddr_at *__restrict __sockaddr_at__; const struct sockaddr_ax25 *__restrict __sockaddr_ax25__; const struct sockaddr_dl *__restrict __sockaddr_dl__; const struct sockaddr_eon *__restrict __sockaddr_eon__; const struct sockaddr_in *__restrict __sockaddr_in__; const struct sockaddr_in6 *__restrict __sockaddr_in6__; const struct sockaddr_inarp *__restrict __sockaddr_inarp__; const struct sockaddr_ipx *__restrict __sockaddr_ipx__; const struct sockaddr_iso *__restrict __sockaddr_iso__; const struct sockaddr_ns *__restrict __sockaddr_ns__; const struct sockaddr_un *__restrict __sockaddr_un__; const struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __CONST_SOCKADDR_ARG __attribute__ ((__transparent_union__));
#undef __SOCKADDR_ONETYPE




struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__ , __leaf__));


extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));


extern int getsockname (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));
# 137 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);



extern int getpeername (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, __CONST_SOCKADDR_ARG __addr,
         socklen_t __addr_len);
# 174 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, __SOCKADDR_ARG __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);







extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);







extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);







extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);






extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__ , __leaf__));




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__ , __leaf__));





extern int listen (int __fd, int __n) __attribute__ ((__nothrow__ , __leaf__));
# 243 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, __SOCKADDR_ARG __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, __SOCKADDR_ARG __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 261 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__ , __leaf__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__ , __leaf__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/x86_64-linux-gnu/bits/socket2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/socket2.h" 3 4
extern ssize_t __recv_chk (int __fd, void *__buf, size_t __n, size_t __buflen,
      int __flags);
extern ssize_t __recv_alias (int __fd, void *__buf, size_t __n, int __flags) __asm__ ("" "recv")
                          ;
extern ssize_t __recv_chk_warn (int __fd, void *__buf, size_t __n, size_t __buflen, int __flags) __asm__ ("" "__recv_chk")


     __attribute__((__warning__ ("recv called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recv (int __fd, void *__buf, size_t __n, int __flags)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __recv_chk (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags);

      if (__n > __builtin_object_size (__buf, 0))
 return __recv_chk_warn (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags);
    }
  return __recv_alias (__fd, __buf, __n, __flags);
}

extern ssize_t __recvfrom_chk (int __fd, void *__restrict __buf, size_t __n,
          size_t __buflen, int __flags,
          __SOCKADDR_ARG __addr,
          socklen_t *__restrict __addr_len);
extern ssize_t __recvfrom_alias (int __fd, void *__restrict __buf, size_t __n, int __flags, __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len) __asm__ ("" "recvfrom")


                                                   ;
extern ssize_t __recvfrom_chk_warn (int __fd, void *__restrict __buf, size_t __n, size_t __buflen, int __flags, __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len) __asm__ ("" "__recvfrom_chk")




     __attribute__((__warning__ ("recvfrom called with bigger length than size of " "destination buffer")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recvfrom (int __fd, void *__restrict __buf, size_t __n, int __flags,
   __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __recvfrom_chk (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags,
          __addr, __addr_len);
      if (__n > __builtin_object_size (__buf, 0))
 return __recvfrom_chk_warn (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags,
        __addr, __addr_len);
    }
  return __recvfrom_alias (__fd, __buf, __n, __flags, __addr, __addr_len);
}
# 281 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4



# 4 "trace/beauty/msg_flags.c" 2


#define MSG_PROBE 0x10





#define MSG_SENDPAGE_NOTLAST 0x20000
# 21 "trace/beauty/msg_flags.c"

# 21 "trace/beauty/msg_flags.c"
static size_t syscall_arg__scnprintf_msg_flags(char *bf, size_t size,
            struct syscall_arg *arg)
{
 
# 24 "trace/beauty/msg_flags.c" 3 4
_Bool 
# 24 "trace/beauty/msg_flags.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "MSG_";
 int printed = 0, flags = arg->val;

 if (flags == 0)
  return scnprintf(bf, size, "NONE");
#define P_MSG_FLAG(n) if (flags & MSG_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); flags &= ~MSG_ ##n; }





 if (flags & 
# 36 "trace/beauty/msg_flags.c" 3 4
MSG_OOB
# 36 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "OOB"); flags &= ~
# 36 "trace/beauty/msg_flags.c" 3 4
MSG_OOB
# 36 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 37 "trace/beauty/msg_flags.c" 3 4
MSG_PEEK
# 37 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "PEEK"); flags &= ~
# 37 "trace/beauty/msg_flags.c" 3 4
MSG_PEEK
# 37 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 38 "trace/beauty/msg_flags.c" 3 4
MSG_DONTROUTE
# 38 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "DONTROUTE"); flags &= ~
# 38 "trace/beauty/msg_flags.c" 3 4
MSG_DONTROUTE
# 38 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 39 "trace/beauty/msg_flags.c" 3 4
MSG_CTRUNC
# 39 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CTRUNC"); flags &= ~
# 39 "trace/beauty/msg_flags.c" 3 4
MSG_CTRUNC
# 39 "trace/beauty/msg_flags.c"
; };
 if (flags & 0x10) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "PROBE"); flags &= ~0x10; };
 if (flags & 
# 41 "trace/beauty/msg_flags.c" 3 4
MSG_TRUNC
# 41 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "TRUNC"); flags &= ~
# 41 "trace/beauty/msg_flags.c" 3 4
MSG_TRUNC
# 41 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 42 "trace/beauty/msg_flags.c" 3 4
MSG_DONTWAIT
# 42 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "DONTWAIT"); flags &= ~
# 42 "trace/beauty/msg_flags.c" 3 4
MSG_DONTWAIT
# 42 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 43 "trace/beauty/msg_flags.c" 3 4
MSG_EOR
# 43 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "EOR"); flags &= ~
# 43 "trace/beauty/msg_flags.c" 3 4
MSG_EOR
# 43 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 44 "trace/beauty/msg_flags.c" 3 4
MSG_WAITALL
# 44 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "WAITALL"); flags &= ~
# 44 "trace/beauty/msg_flags.c" 3 4
MSG_WAITALL
# 44 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 45 "trace/beauty/msg_flags.c" 3 4
MSG_FIN
# 45 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "FIN"); flags &= ~
# 45 "trace/beauty/msg_flags.c" 3 4
MSG_FIN
# 45 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 46 "trace/beauty/msg_flags.c" 3 4
MSG_SYN
# 46 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "SYN"); flags &= ~
# 46 "trace/beauty/msg_flags.c" 3 4
MSG_SYN
# 46 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 47 "trace/beauty/msg_flags.c" 3 4
MSG_CONFIRM
# 47 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CONFIRM"); flags &= ~
# 47 "trace/beauty/msg_flags.c" 3 4
MSG_CONFIRM
# 47 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 48 "trace/beauty/msg_flags.c" 3 4
MSG_RST
# 48 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "RST"); flags &= ~
# 48 "trace/beauty/msg_flags.c" 3 4
MSG_RST
# 48 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 49 "trace/beauty/msg_flags.c" 3 4
MSG_ERRQUEUE
# 49 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "ERRQUEUE"); flags &= ~
# 49 "trace/beauty/msg_flags.c" 3 4
MSG_ERRQUEUE
# 49 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 50 "trace/beauty/msg_flags.c" 3 4
MSG_NOSIGNAL
# 50 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NOSIGNAL"); flags &= ~
# 50 "trace/beauty/msg_flags.c" 3 4
MSG_NOSIGNAL
# 50 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 51 "trace/beauty/msg_flags.c" 3 4
MSG_MORE
# 51 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "MORE"); flags &= ~
# 51 "trace/beauty/msg_flags.c" 3 4
MSG_MORE
# 51 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 52 "trace/beauty/msg_flags.c" 3 4
MSG_WAITFORONE
# 52 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "WAITFORONE"); flags &= ~
# 52 "trace/beauty/msg_flags.c" 3 4
MSG_WAITFORONE
# 52 "trace/beauty/msg_flags.c"
; };
 if (flags & 0x20000) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "SENDPAGE_NOTLAST"); flags &= ~0x20000; };
 if (flags & 
# 54 "trace/beauty/msg_flags.c" 3 4
MSG_FASTOPEN
# 54 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "FASTOPEN"); flags &= ~
# 54 "trace/beauty/msg_flags.c" 3 4
MSG_FASTOPEN
# 54 "trace/beauty/msg_flags.c"
; };
 if (flags & 
# 55 "trace/beauty/msg_flags.c" 3 4
MSG_CMSG_CLOEXEC
# 55 "trace/beauty/msg_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CMSG_CLOEXEC"); flags &= ~
# 55 "trace/beauty/msg_flags.c" 3 4
MSG_CMSG_CLOEXEC
# 55 "trace/beauty/msg_flags.c"
; };
#undef P_MSG_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

#define SCA_MSG_FLAGS syscall_arg__scnprintf_msg_flags
# 900 "builtin-trace.c" 2
# 1 "trace/beauty/open_flags.c" 1
# 22 "trace/beauty/open_flags.c"
#undef O_LARGEFILE
#define O_LARGEFILE 00100000

size_t open__scnprintf_flags(unsigned long flags, char *bf, size_t size, 
# 25 "trace/beauty/open_flags.c" 3 4
                                                                        _Bool 
# 25 "trace/beauty/open_flags.c"
                                                                             show_prefix)
{
 const char *prefix = "O_";
 int printed = 0;

 if ((flags & 
# 30 "trace/beauty/open_flags.c" 3 4
             0003
# 30 "trace/beauty/open_flags.c"
                      ) == 
# 30 "trace/beauty/open_flags.c" 3 4
                           00
# 30 "trace/beauty/open_flags.c"
                                   )
  printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "RDONLY");
 if (flags == 0)
  return printed;
#define P_FLAG(n) if (flags & O_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); flags &= ~O_ ##n; }





 if (flags & 
# 40 "trace/beauty/open_flags.c" 3 4
02
# 40 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "RDWR"); flags &= ~
# 40 "trace/beauty/open_flags.c" 3 4
02
# 40 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 41 "trace/beauty/open_flags.c" 3 4
02000
# 41 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "APPEND"); flags &= ~
# 41 "trace/beauty/open_flags.c" 3 4
02000
# 41 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 42 "trace/beauty/open_flags.c" 3 4
020000
# 42 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "ASYNC"); flags &= ~
# 42 "trace/beauty/open_flags.c" 3 4
020000
# 42 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 43 "trace/beauty/open_flags.c" 3 4
02000000
# 43 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CLOEXEC"); flags &= ~
# 43 "trace/beauty/open_flags.c" 3 4
02000000
# 43 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 44 "trace/beauty/open_flags.c" 3 4
0100
# 44 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CREAT"); flags &= ~
# 44 "trace/beauty/open_flags.c" 3 4
0100
# 44 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 45 "trace/beauty/open_flags.c" 3 4
040000
# 45 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "DIRECT"); flags &= ~
# 45 "trace/beauty/open_flags.c" 3 4
040000
# 45 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 46 "trace/beauty/open_flags.c" 3 4
0200000
# 46 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "DIRECTORY"); flags &= ~
# 46 "trace/beauty/open_flags.c" 3 4
0200000
# 46 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 47 "trace/beauty/open_flags.c" 3 4
0200
# 47 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "EXCL"); flags &= ~
# 47 "trace/beauty/open_flags.c" 3 4
0200
# 47 "trace/beauty/open_flags.c"
; };
 if (flags & 00100000) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "LARGEFILE"); flags &= ~00100000; };
 if (flags & 
# 49 "trace/beauty/open_flags.c" 3 4
0400000
# 49 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NOFOLLOW"); flags &= ~
# 49 "trace/beauty/open_flags.c" 3 4
0400000
# 49 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 50 "trace/beauty/open_flags.c" 3 4
(020000000 | 0200000)
# 50 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "TMPFILE"); flags &= ~
# 50 "trace/beauty/open_flags.c" 3 4
(020000000 | 0200000)
# 50 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 51 "trace/beauty/open_flags.c" 3 4
01000000
# 51 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NOATIME"); flags &= ~
# 51 "trace/beauty/open_flags.c" 3 4
01000000
# 51 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 52 "trace/beauty/open_flags.c" 3 4
0400
# 52 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NOCTTY"); flags &= ~
# 52 "trace/beauty/open_flags.c" 3 4
0400
# 52 "trace/beauty/open_flags.c"
; };

 if (flags & 
# 54 "trace/beauty/open_flags.c" 3 4
04000
# 54 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NONBLOCK"); flags &= ~
# 54 "trace/beauty/open_flags.c" 3 4
04000
# 54 "trace/beauty/open_flags.c"
; };




 if (flags & 
# 59 "trace/beauty/open_flags.c" 3 4
010000000
# 59 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "PATH"); flags &= ~
# 59 "trace/beauty/open_flags.c" 3 4
010000000
# 59 "trace/beauty/open_flags.c"
; };


 if ((flags & 
# 62 "trace/beauty/open_flags.c" 3 4
             04010000
# 62 "trace/beauty/open_flags.c"
                   ) == 
# 62 "trace/beauty/open_flags.c" 3 4
                        04010000
# 62 "trace/beauty/open_flags.c"
                              )
  printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "SYNC");
 else {
  if (flags & 
# 65 "trace/beauty/open_flags.c" 3 4
 010000
# 65 "trace/beauty/open_flags.c"
 ) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "DSYNC"); flags &= ~
# 65 "trace/beauty/open_flags.c" 3 4
 010000
# 65 "trace/beauty/open_flags.c"
 ; };
 }



 if (flags & 
# 70 "trace/beauty/open_flags.c" 3 4
01000
# 70 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "TRUNC"); flags &= ~
# 70 "trace/beauty/open_flags.c" 3 4
01000
# 70 "trace/beauty/open_flags.c"
; };
 if (flags & 
# 71 "trace/beauty/open_flags.c" 3 4
01
# 71 "trace/beauty/open_flags.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "WRONLY"); flags &= ~
# 71 "trace/beauty/open_flags.c" 3 4
01
# 71 "trace/beauty/open_flags.c"
; };
#undef P_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

size_t syscall_arg__scnprintf_open_flags(char *bf, size_t size, struct syscall_arg *arg)
{
 int flags = arg->val;

 if (!(flags & 
# 84 "trace/beauty/open_flags.c" 3 4
              0100
# 84 "trace/beauty/open_flags.c"
                     ))
  arg->mask |= 1 << (arg->idx + 1);

 return open__scnprintf_flags(flags, bf, size, arg->show_string_prefix);
}
# 901 "builtin-trace.c" 2
# 1 "trace/beauty/perf_event_open.c" 1
# 18 "trace/beauty/perf_event_open.c"
static size_t syscall_arg__scnprintf_perf_flags(char *bf, size_t size,
      struct syscall_arg *arg)
{
 
# 21 "trace/beauty/perf_event_open.c" 3 4
_Bool 
# 21 "trace/beauty/perf_event_open.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "PERF_";
 int printed = 0, flags = arg->val;

 if (flags == 0)
  return 0;

#define P_FLAG(n) if (flags & PERF_FLAG_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); flags &= ~PERF_FLAG_ ##n; }





 if (flags & (1UL << 0)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "FD_NO_GROUP"); flags &= ~(1UL << 0); };
 if (flags & (1UL << 1)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "FD_OUTPUT"); flags &= ~(1UL << 1); };
 if (flags & (1UL << 2)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "PID_CGROUP"); flags &= ~(1UL << 2); };
 if (flags & (1UL << 3)) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "FD_CLOEXEC"); flags &= ~(1UL << 3); };
#undef P_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

#define SCA_PERF_FLAGS syscall_arg__scnprintf_perf_flags
# 902 "builtin-trace.c" 2
# 1 "trace/beauty/pid.c" 1


size_t syscall_arg__scnprintf_pid(char *bf, size_t size, struct syscall_arg *arg)
{
 int pid = arg->val;
 struct trace *trace = arg->trace;
 size_t printed = scnprintf(bf, size, "%d", pid);
 struct thread *thread = machine__findnew_thread(trace->host, pid, pid);

 if (thread != 
# 10 "trace/beauty/pid.c" 3 4
              ((void *)0)
# 10 "trace/beauty/pid.c"
                  ) {
  if (!thread->comm_set)
   thread__set_comm_from_proc(thread);

  if (thread->comm_set)
   printed += scnprintf(bf + printed, size - printed,
          " (%s)", thread__comm_str(thread));
  thread__put(thread);
 }

 return printed;
}
# 903 "builtin-trace.c" 2
# 1 "trace/beauty/sched_policy.c" 1







#define SCHED_POLICY_MASK 0xff


#define SCHED_DEADLINE 6





static size_t syscall_arg__scnprintf_sched_policy(char *bf, size_t size,
        struct syscall_arg *arg)
{
 
# 20 "trace/beauty/sched_policy.c" 3 4
_Bool 
# 20 "trace/beauty/sched_policy.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "SCHED_";
 const char *policies[] = {
  "NORMAL", "FIFO", "RR", "BATCH", "ISO", "IDLE", "DEADLINE",
 };
 size_t printed;
 int policy = arg->val,
     flags = policy & ~0xff;

 policy &= 0xff;
 if (policy <= 6)
  printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", policies[policy]);
 else
  printed = scnprintf(bf, size, "%#x", policy);

#define P_POLICY_FLAG(n) if (flags & SCHED_ ##n) { printed += scnprintf(bf + printed, size - printed, "|%s%s", show_prefix ? prefix : "", #n); flags &= ~SCHED_ ##n; }





 if (flags & 
# 41 "trace/beauty/sched_policy.c" 3 4
0x40000000
# 41 "trace/beauty/sched_policy.c"
) { printed += scnprintf(bf + printed, size - printed, "|%s%s", show_prefix ? prefix : "", "RESET_ON_FORK"); flags &= ~
# 41 "trace/beauty/sched_policy.c" 3 4
0x40000000
# 41 "trace/beauty/sched_policy.c"
; };
#undef P_POLICY_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "|%#x", flags);

 return printed;
}

#define SCA_SCHED_POLICY syscall_arg__scnprintf_sched_policy
# 904 "builtin-trace.c" 2
# 1 "trace/beauty/seccomp.c" 1


#define SECCOMP_SET_MODE_STRICT 0


#define SECCOMP_SET_MODE_FILTER 1


static size_t syscall_arg__scnprintf_seccomp_op(char *bf, size_t size, struct syscall_arg *arg)
{
 
# 11 "trace/beauty/seccomp.c" 3 4
_Bool 
# 11 "trace/beauty/seccomp.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "SECCOMP_SET_MODE_";
 int op = arg->val;
 size_t printed = 0;

 switch (op) {
#define P_SECCOMP_SET_MODE_OP(n) case SECCOMP_SET_MODE_ ##n: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", #n); break
 case 0: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "STRICT"); break;
 case 1: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "FILTER"); break;
#undef P_SECCOMP_SET_MODE_OP
 default: printed = scnprintf(bf, size, "%#x", op); break;
 }

 return printed;
}

#define SCA_SECCOMP_OP syscall_arg__scnprintf_seccomp_op


#define SECCOMP_FILTER_FLAG_TSYNC 1


static size_t syscall_arg__scnprintf_seccomp_flags(char *bf, size_t size,
         struct syscall_arg *arg)
{
 
# 36 "trace/beauty/seccomp.c" 3 4
_Bool 
# 36 "trace/beauty/seccomp.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "SECCOMP_FILTER_FLAG_";
 int printed = 0, flags = arg->val;

#define P_FLAG(n) if (flags & SECCOMP_FILTER_FLAG_ ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); flags &= ~SECCOMP_FILTER_FLAG_ ##n; }





 if (flags & 1) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "TSYNC"); flags &= ~1; };
#undef P_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);

 return printed;
}

#define SCA_SECCOMP_FLAGS syscall_arg__scnprintf_seccomp_flags
# 905 "builtin-trace.c" 2
# 1 "trace/beauty/signum.c" 1



static size_t syscall_arg__scnprintf_signum(char *bf, size_t size, struct syscall_arg *arg)
{
 
# 6 "trace/beauty/signum.c" 3 4
_Bool 
# 6 "trace/beauty/signum.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "SIG";
 int sig = arg->val;

 switch (sig) {
#define P_SIGNUM(n) case SIG ##n: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", #n)
 case 
# 12 "trace/beauty/signum.c" 3 4
1
# 12 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "HUP");
 case 
# 13 "trace/beauty/signum.c" 3 4
2
# 13 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "INT");
 case 
# 14 "trace/beauty/signum.c" 3 4
3
# 14 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "QUIT");
 case 
# 15 "trace/beauty/signum.c" 3 4
4
# 15 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "ILL");
 case 
# 16 "trace/beauty/signum.c" 3 4
5
# 16 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "TRAP");
 case 
# 17 "trace/beauty/signum.c" 3 4
6
# 17 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "ABRT");
 case 
# 18 "trace/beauty/signum.c" 3 4
7
# 18 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "BUS");
 case 
# 19 "trace/beauty/signum.c" 3 4
8
# 19 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "FPE");
 case 
# 20 "trace/beauty/signum.c" 3 4
9
# 20 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "KILL");
 case 
# 21 "trace/beauty/signum.c" 3 4
10
# 21 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "USR1");
 case 
# 22 "trace/beauty/signum.c" 3 4
11
# 22 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "SEGV");
 case 
# 23 "trace/beauty/signum.c" 3 4
12
# 23 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "USR2");
 case 
# 24 "trace/beauty/signum.c" 3 4
13
# 24 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "PIPE");
 case 
# 25 "trace/beauty/signum.c" 3 4
14
# 25 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "ALRM");
 case 
# 26 "trace/beauty/signum.c" 3 4
15
# 26 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "TERM");
 case 
# 27 "trace/beauty/signum.c" 3 4
17
# 27 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "CHLD");
 case 
# 28 "trace/beauty/signum.c" 3 4
18
# 28 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "CONT");
 case 
# 29 "trace/beauty/signum.c" 3 4
19
# 29 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "STOP");
 case 
# 30 "trace/beauty/signum.c" 3 4
20
# 30 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "TSTP");
 case 
# 31 "trace/beauty/signum.c" 3 4
21
# 31 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "TTIN");
 case 
# 32 "trace/beauty/signum.c" 3 4
22
# 32 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "TTOU");
 case 
# 33 "trace/beauty/signum.c" 3 4
23
# 33 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "URG");
 case 
# 34 "trace/beauty/signum.c" 3 4
24
# 34 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "XCPU");
 case 
# 35 "trace/beauty/signum.c" 3 4
25
# 35 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "XFSZ");
 case 
# 36 "trace/beauty/signum.c" 3 4
26
# 36 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "VTALRM");
 case 
# 37 "trace/beauty/signum.c" 3 4
27
# 37 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "PROF");
 case 
# 38 "trace/beauty/signum.c" 3 4
28
# 38 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "WINCH");
 case 
# 39 "trace/beauty/signum.c" 3 4
29
# 39 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "IO");
 case 
# 40 "trace/beauty/signum.c" 3 4
30
# 40 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "PWR");
 case 
# 41 "trace/beauty/signum.c" 3 4
31
# 41 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "SYS");




 case 
# 46 "trace/beauty/signum.c" 3 4
16
# 46 "trace/beauty/signum.c"
: return scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "STKFLT");




 default: break;
 }

 return scnprintf(bf, size, "%#x", sig);
}

#define SCA_SIGNUM syscall_arg__scnprintf_signum
# 906 "builtin-trace.c" 2
# 1 "trace/beauty/socket_type.c" 1
# 18 "trace/beauty/socket_type.c"
#define SOCK_TYPE_MASK 0xf


static size_t syscall_arg__scnprintf_socket_type(char *bf, size_t size, struct syscall_arg *arg)
{
 
# 23 "trace/beauty/socket_type.c" 3 4
_Bool 
# 23 "trace/beauty/socket_type.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "SOCK_";
 size_t printed;
 int type = arg->val,
     flags = type & ~0xf;

 type &= 0xf;



 switch (type) {
#define P_SK_TYPE(n) case SOCK_ ##n: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", #n); break;
 case 
# 35 "trace/beauty/socket_type.c" 3 4
SOCK_STREAM
# 35 "trace/beauty/socket_type.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "STREAM"); break;;
 case 
# 36 "trace/beauty/socket_type.c" 3 4
SOCK_DGRAM
# 36 "trace/beauty/socket_type.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "DGRAM"); break;;
 case 
# 37 "trace/beauty/socket_type.c" 3 4
SOCK_RAW
# 37 "trace/beauty/socket_type.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "RAW"); break;;
 case 
# 38 "trace/beauty/socket_type.c" 3 4
SOCK_RDM
# 38 "trace/beauty/socket_type.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "RDM"); break;;
 case 
# 39 "trace/beauty/socket_type.c" 3 4
SOCK_SEQPACKET
# 39 "trace/beauty/socket_type.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "SEQPACKET"); break;;
 case 
# 40 "trace/beauty/socket_type.c" 3 4
SOCK_DCCP
# 40 "trace/beauty/socket_type.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "DCCP"); break;;
 case 
# 41 "trace/beauty/socket_type.c" 3 4
SOCK_PACKET
# 41 "trace/beauty/socket_type.c"
: printed = scnprintf(bf, size, "%s%s", show_prefix ? prefix : "", "PACKET"); break;;
#undef P_SK_TYPE
 default:
  printed = scnprintf(bf, size, "%#x", type);
 }

#define P_SK_FLAG(n) if (flags & SOCK_ ##n) { printed += scnprintf(bf + printed, size - printed, "|%s", #n); flags &= ~SOCK_ ##n; }





 if (flags & 
# 53 "trace/beauty/socket_type.c" 3 4
SOCK_CLOEXEC
# 53 "trace/beauty/socket_type.c"
) { printed += scnprintf(bf + printed, size - printed, "|%s", "CLOEXEC"); flags &= ~
# 53 "trace/beauty/socket_type.c" 3 4
SOCK_CLOEXEC
# 53 "trace/beauty/socket_type.c"
; };
 if (flags & 
# 54 "trace/beauty/socket_type.c" 3 4
SOCK_NONBLOCK
# 54 "trace/beauty/socket_type.c"
) { printed += scnprintf(bf + printed, size - printed, "|%s", "NONBLOCK"); flags &= ~
# 54 "trace/beauty/socket_type.c" 3 4
SOCK_NONBLOCK
# 54 "trace/beauty/socket_type.c"
; };
#undef P_SK_FLAG

 if (flags)
  printed += scnprintf(bf + printed, size - printed, "|%#x", flags);

 return printed;
}

#define SCA_SK_TYPE syscall_arg__scnprintf_socket_type
# 907 "builtin-trace.c" 2
# 1 "trace/beauty/waitid_options.c" 1


# 1 "/usr/include/x86_64-linux-gnu/sys/wait.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
#define _SYS_WAIT_H 1




# 52 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
#define WCOREFLAG __WCOREFLAG
#define WCOREDUMP(status) __WCOREDUMP (status)
#define W_EXITCODE(ret,sig) __W_EXITCODE (ret, sig)
#define W_STOPCODE(sig) __W_STOPCODE (sig)








# 63 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);



#define WAIT_ANY (-1)
#define WAIT_MYPGRP 0
# 86 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 95 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
#define __need_siginfo_t 
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64





#define __WORDSIZE_TIME64_COMPAT32 1

#define __SYSCALL_WORDSIZE 64
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4
# 97 "/usr/include/x86_64-linux-gnu/sys/wait.h" 2 3 4
# 109 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);





struct rusage;






extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) __attribute__ ((__nothrow__));




extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) __attribute__ ((__nothrow__));




# 4 "trace/beauty/waitid_options.c" 2


# 5 "trace/beauty/waitid_options.c"
static size_t syscall_arg__scnprintf_waitid_options(char *bf, size_t size,
          struct syscall_arg *arg)
{
 
# 8 "trace/beauty/waitid_options.c" 3 4
_Bool 
# 8 "trace/beauty/waitid_options.c"
     show_prefix = arg->show_string_prefix;
 const char *prefix = "W";
 int printed = 0, options = arg->val;

#define P_OPTION(n) if (options & W ##n) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", #n); options &= ~W ##n; }





 if (options & 
# 18 "trace/beauty/waitid_options.c" 3 4
1
# 18 "trace/beauty/waitid_options.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "NOHANG"); options &= ~
# 18 "trace/beauty/waitid_options.c" 3 4
1
# 18 "trace/beauty/waitid_options.c"
; };
 if (options & 
# 19 "trace/beauty/waitid_options.c" 3 4
2
# 19 "trace/beauty/waitid_options.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "UNTRACED"); options &= ~
# 19 "trace/beauty/waitid_options.c" 3 4
2
# 19 "trace/beauty/waitid_options.c"
; };
 if (options & 
# 20 "trace/beauty/waitid_options.c" 3 4
8
# 20 "trace/beauty/waitid_options.c"
) { printed += scnprintf(bf + printed, size - printed, "%s%s%s", printed ? "|" : "", show_prefix ? prefix : "", "CONTINUED"); options &= ~
# 20 "trace/beauty/waitid_options.c" 3 4
8
# 20 "trace/beauty/waitid_options.c"
; };
#undef P_OPTION

 if (options)
  printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", options);

 return printed;
}

#define SCA_WAITID_OPTIONS syscall_arg__scnprintf_waitid_options
# 908 "builtin-trace.c" 2

static struct syscall_fmt syscall_fmts[] = {
 { .name = "access",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_access_mode, }, }, },
 { .name = "arch_prctl",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_x86_arch_prctl_code, },
     [1] = { .scnprintf = syscall_arg__scnprintf_ptr, }, }, },
 { .name = "bind",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_int, },
     [1] = { .scnprintf = syscall_arg__scnprintf_sockaddr, },
     [2] = { .scnprintf = syscall_arg__scnprintf_int, }, }, },
 { .name = "bpf",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__bpf_cmd, }, }, },
 { .name = "brk", .hexret = 
# 921 "builtin-trace.c" 3 4
                                   1
# 921 "builtin-trace.c"
                                       ,
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_ptr, }, }, },
 { .name = "clock_gettime",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__clockid, }, }, },
 { .name = "clone", .errpid = 
# 925 "builtin-trace.c" 3 4
                                     1
# 925 "builtin-trace.c"
                                         , .nr_args = 5,
   .arg = { [0] = { .name = "flags", .scnprintf = syscall_arg__scnprintf_clone_flags, },
     [1] = { .name = "child_stack", .scnprintf = syscall_arg__scnprintf_hex, },
     [2] = { .name = "parent_tidptr", .scnprintf = syscall_arg__scnprintf_hex, },
     [3] = { .name = "child_tidptr", .scnprintf = syscall_arg__scnprintf_hex, },
     [4] = { .name = "tls", .scnprintf = syscall_arg__scnprintf_hex, }, }, },
 { .name = "close",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_close_fd, }, }, },
 { .name = "connect",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_int, },
     [1] = { .scnprintf = syscall_arg__scnprintf_sockaddr, },
     [2] = { .scnprintf = syscall_arg__scnprintf_int, }, }, },
 { .name = "epoll_ctl",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__epoll_ctl_ops, }, }, },
 { .name = "eventfd2",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_eventfd_flags, }, }, },
 { .name = "fchmodat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "fchownat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "fcntl",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_fcntl_cmd,
      .strtoul = syscall_arg__strtoul_strarrays,
      .parm = &strarrays__fcntl_cmds_arrays,
      .show_zero = 
# 949 "builtin-trace.c" 3 4
                  1
# 949 "builtin-trace.c"
                      , },
     [2] = { .scnprintf = syscall_arg__scnprintf_fcntl_arg, }, }, },
 { .name = "flock",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_flock, }, }, },
 { .name = "fsconfig",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__fsconfig_cmds, }, }, },
 { .name = "fsmount",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_strarray_flags, .strtoul = syscall_arg__strtoul_strarray_flags, .parm = &strarray__fsmount_flags, },
     [2] = { .scnprintf = syscall_arg__scnprintf_fsmount_attr_flags, }, }, },
 { .name = "fspick",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [1] = { .scnprintf = syscall_arg__scnprintf_filename, },
     [2] = { .scnprintf = syscall_arg__scnprintf_fspick_flags, }, }, },
 { .name = "fstat", .alias = "newfstat", },
 { .name = "fstatat", .alias = "newfstatat", },
 { .name = "futex",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_futex_op, },
     [5] = { .scnprintf = syscall_arg__scnprintf_futex_val3, }, }, },
 { .name = "futimesat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "getitimer",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__itimers, }, }, },
 { .name = "getpid", .errpid = 
# 971 "builtin-trace.c" 3 4
                                      1
# 971 "builtin-trace.c"
                                          , },
 { .name = "getpgid", .errpid = 
# 972 "builtin-trace.c" 3 4
                                      1
# 972 "builtin-trace.c"
                                          , },
 { .name = "getppid", .errpid = 
# 973 "builtin-trace.c" 3 4
                                      1
# 973 "builtin-trace.c"
                                          , },
 { .name = "getrandom",
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_getrandom_flags, }, }, },
 { .name = "getrlimit",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__rlimit_resources, }, }, },
 { .name = "gettid", .errpid = 
# 978 "builtin-trace.c" 3 4
                                      1
# 978 "builtin-trace.c"
                                          , },
 { .name = "ioctl",
   .arg = {




     [1] = { .scnprintf = syscall_arg__scnprintf_ioctl_cmd, },
     [2] = { .scnprintf = syscall_arg__scnprintf_hex, }, }, },



 { .name = "kcmp", .nr_args = 5,
   .arg = { [0] = { .name = "pid1", .scnprintf = syscall_arg__scnprintf_pid, },
     [1] = { .name = "pid2", .scnprintf = syscall_arg__scnprintf_pid, },
     [2] = { .name = "type", .scnprintf = syscall_arg__scnprintf_kcmp_type, },
     [3] = { .name = "idx1", .scnprintf = syscall_arg__scnprintf_kcmp_idx, },
     [4] = { .name = "idx2", .scnprintf = syscall_arg__scnprintf_kcmp_idx, }, }, },
 { .name = "keyctl",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__keyctl_options, }, }, },
 { .name = "kill",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_signum, }, }, },
 { .name = "linkat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "lseek",
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__whences, }, }, },
 { .name = "lstat", .alias = "newlstat", },
 { .name = "madvise",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_hex, },
     [2] = { .scnprintf = syscall_arg__scnprintf_madvise_behavior, }, }, },
 { .name = "mkdirat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "mknodat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "mmap", .hexret = 
# 1012 "builtin-trace.c" 3 4
                                    1
# 1012 "builtin-trace.c"
                                        ,




   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_mmap_prot, },
     [3] = { .scnprintf = syscall_arg__scnprintf_mmap_flags,
      .strtoul = syscall_arg__strtoul_strarray_flags,
      .parm = &strarray__mmap_flags, },
     [5] = { .scnprintf = syscall_arg__scnprintf_hex, }, }, },
 { .name = "mount",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_filename, },
     [3] = { .scnprintf = syscall_arg__scnprintf_mount_flags,
      .mask_val = syscall_arg__mask_val_mount_flags, }, }, },
 { .name = "move_mount",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [1] = { .scnprintf = syscall_arg__scnprintf_filename, },
     [2] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [3] = { .scnprintf = syscall_arg__scnprintf_filename, },
     [4] = { .scnprintf = syscall_arg__scnprintf_move_mount_flags, }, }, },
 { .name = "mprotect",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_hex, },
     [2] = { .scnprintf = syscall_arg__scnprintf_mmap_prot, }, }, },
 { .name = "mq_unlink",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_filename, }, }, },
 { .name = "mremap", .hexret = 
# 1037 "builtin-trace.c" 3 4
                                      1
# 1037 "builtin-trace.c"
                                          ,
   .arg = { [3] = { .scnprintf = syscall_arg__scnprintf_mremap_flags, }, }, },
 { .name = "name_to_handle_at",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "newfstatat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "open",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_open_flags, }, }, },
 { .name = "open_by_handle_at",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [2] = { .scnprintf = syscall_arg__scnprintf_open_flags, }, }, },
 { .name = "openat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [2] = { .scnprintf = syscall_arg__scnprintf_open_flags, }, }, },
 { .name = "perf_event_open",
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_int, },
     [3] = { .scnprintf = syscall_arg__scnprintf_fd, },
     [4] = { .scnprintf = syscall_arg__scnprintf_perf_flags, }, }, },
 { .name = "pipe2",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_pipe_flags, }, }, },
 { .name = "pkey_alloc",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_pkey_alloc_access_rights, }, }, },
 { .name = "pkey_free",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_int, }, }, },
 { .name = "pkey_mprotect",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_hex, },
     [2] = { .scnprintf = syscall_arg__scnprintf_mmap_prot, },
     [3] = { .scnprintf = syscall_arg__scnprintf_int, }, }, },
 { .name = "poll", .timeout = 
# 1065 "builtin-trace.c" 3 4
                                 1
# 1065 "builtin-trace.c"
                                     , },
 { .name = "ppoll", .timeout = 
# 1066 "builtin-trace.c" 3 4
                                  1
# 1066 "builtin-trace.c"
                                      , },
 { .name = "prctl",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_prctl_option, },
     [1] = { .scnprintf = syscall_arg__scnprintf_prctl_arg2, },
     [2] = { .scnprintf = syscall_arg__scnprintf_prctl_arg3, }, }, },
 { .name = "pread", .alias = "pread64", },
 { .name = "preadv", .alias = "pread", },
 { .name = "prlimit64",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__rlimit_resources, }, }, },
 { .name = "pwrite", .alias = "pwrite64", },
 { .name = "readlinkat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "recvfrom",
   .arg = { [3] = { .scnprintf = syscall_arg__scnprintf_msg_flags, }, }, },
 { .name = "recvmmsg",
   .arg = { [3] = { .scnprintf = syscall_arg__scnprintf_msg_flags, }, }, },
 { .name = "recvmsg",
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_msg_flags, }, }, },
 { .name = "renameat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [2] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "renameat2",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [2] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [4] = { .scnprintf = syscall_arg__scnprintf_renameat2_flags, }, }, },
 { .name = "rt_sigaction",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_signum, }, }, },
 { .name = "rt_sigprocmask",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__sighow, }, }, },
 { .name = "rt_sigqueueinfo",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_signum, }, }, },
 { .name = "rt_tgsigqueueinfo",
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_signum, }, }, },
 { .name = "sched_setscheduler",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_sched_policy, }, }, },
 { .name = "seccomp",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_seccomp_op, },
     [1] = { .scnprintf = syscall_arg__scnprintf_seccomp_flags, }, }, },
 { .name = "select", .timeout = 
# 1104 "builtin-trace.c" 3 4
                                   1
# 1104 "builtin-trace.c"
                                       , },
 { .name = "sendfile", .alias = "sendfile64", },
 { .name = "sendmmsg",
   .arg = { [3] = { .scnprintf = syscall_arg__scnprintf_msg_flags, }, }, },
 { .name = "sendmsg",
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_msg_flags, }, }, },
 { .name = "sendto",
   .arg = { [3] = { .scnprintf = syscall_arg__scnprintf_msg_flags, },
     [4] = { .scnprintf = syscall_arg__scnprintf_sockaddr, }, }, },
 { .name = "set_tid_address", .errpid = 
# 1113 "builtin-trace.c" 3 4
                                           1
# 1113 "builtin-trace.c"
                                               , },
 { .name = "setitimer",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__itimers, }, }, },
 { .name = "setrlimit",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__rlimit_resources, }, }, },
 { .name = "socket",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__socket_families, },
     [1] = { .scnprintf = syscall_arg__scnprintf_socket_type, },
     [2] = { .scnprintf = syscall_arg__scnprintf_socket_protocol, }, }, },
 { .name = "socketpair",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_strarray, .strtoul = syscall_arg__strtoul_strarray, .parm = &strarray__socket_families, },
     [1] = { .scnprintf = syscall_arg__scnprintf_socket_type, },
     [2] = { .scnprintf = syscall_arg__scnprintf_socket_protocol, }, }, },
 { .name = "stat", .alias = "newstat", },
 { .name = "statx",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, },
     [2] = { .scnprintf = syscall_arg__scnprintf_statx_flags, } ,
     [3] = { .scnprintf = syscall_arg__scnprintf_statx_mask, }, }, },
 { .name = "swapoff",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_filename, }, }, },
 { .name = "swapon",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_filename, }, }, },
 { .name = "symlinkat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "sync_file_range",
   .arg = { [3] = { .scnprintf = syscall_arg__scnprintf_sync_file_range_flags, }, }, },
 { .name = "tgkill",
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_signum, }, }, },
 { .name = "tkill",
   .arg = { [1] = { .scnprintf = syscall_arg__scnprintf_signum, }, }, },
 { .name = "umount2", .alias = "umount",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_filename, }, }, },
 { .name = "uname", .alias = "newuname", },
 { .name = "unlinkat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "utimensat",
   .arg = { [0] = { .scnprintf = syscall_arg__scnprintf_fd_at, }, }, },
 { .name = "wait4", .errpid = 
# 1150 "builtin-trace.c" 3 4
                                     1
# 1150 "builtin-trace.c"
                                         ,
   .arg = { [2] = { .scnprintf = syscall_arg__scnprintf_waitid_options, }, }, },
 { .name = "waitid", .errpid = 
# 1152 "builtin-trace.c" 3 4
                                      1
# 1152 "builtin-trace.c"
                                          ,
   .arg = { [3] = { .scnprintf = syscall_arg__scnprintf_waitid_options, }, }, },
};

static int syscall_fmt__cmp(const void *name, const void *fmtp)
{
 const struct syscall_fmt *fmt = fmtp;
 return 
# 1159 "builtin-trace.c" 3 4
       __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) && __builtin_constant_p (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) && (__s1_len = __builtin_strlen (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ), __s2_len = __builtin_strlen (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ), (!((size_t)(const void *)((
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) + 1) - (size_t)(const void *)(
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) + 1) - (size_t)(const void *)(
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       , 
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) : (__builtin_constant_p (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) && ((size_t)(const void *)((
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) + 1) - (size_t)(const void *)(
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) == 1) && (__s1_len = __builtin_strlen (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ), __s1_len < 4) ? (__builtin_constant_p (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) && ((size_t)(const void *)((
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) + 1) - (size_t)(const void *)(
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) == 1) ? __builtin_strcmp (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       , 
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ); int __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) && ((size_t)(const void *)((
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) + 1) - (size_t)(const void *)(
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) == 1) && (__s2_len = __builtin_strlen (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ), __s2_len < 4) ? (__builtin_constant_p (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) && ((size_t)(const void *)((
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) + 1) - (size_t)(const void *)(
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ) == 1) ? __builtin_strcmp (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       , 
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       ); int __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1159 "builtin-trace.c"
       name
# 1159 "builtin-trace.c" 3 4
       , 
# 1159 "builtin-trace.c"
       fmt->name
# 1159 "builtin-trace.c" 3 4
       )))); })
# 1159 "builtin-trace.c"
                              ;
}

static struct syscall_fmt *__syscall_fmt__find(struct syscall_fmt *fmts, const int nmemb, const char *name)
{
 return bsearch(name, fmts, nmemb, sizeof(struct syscall_fmt), syscall_fmt__cmp);
}

static struct syscall_fmt *syscall_fmt__find(const char *name)
{
 const int nmemb = (sizeof(syscall_fmts) / sizeof((syscall_fmts)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((syscall_fmts)), typeof(&(syscall_fmts)[0]))); })));
 return __syscall_fmt__find(syscall_fmts, nmemb, name);
}

static struct syscall_fmt *__syscall_fmt__find_by_alias(struct syscall_fmt *fmts, const int nmemb, const char *alias)
{
 int i;

 for (i = 0; i < nmemb; ++i) {
  if (fmts[i].alias && 
# 1178 "builtin-trace.c" 3 4
                      __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) && __builtin_constant_p (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) && (__s1_len = __builtin_strlen (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ), __s2_len = __builtin_strlen (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ), (!((size_t)(const void *)((
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) + 1) - (size_t)(const void *)(
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) + 1) - (size_t)(const void *)(
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      , 
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) : (__builtin_constant_p (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) && ((size_t)(const void *)((
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) + 1) - (size_t)(const void *)(
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) == 1) && (__s1_len = __builtin_strlen (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ), __s1_len < 4) ? (__builtin_constant_p (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) && ((size_t)(const void *)((
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) + 1) - (size_t)(const void *)(
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) == 1) ? __builtin_strcmp (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      , 
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ); int __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) && ((size_t)(const void *)((
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) + 1) - (size_t)(const void *)(
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) == 1) && (__s2_len = __builtin_strlen (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ), __s2_len < 4) ? (__builtin_constant_p (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) && ((size_t)(const void *)((
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) + 1) - (size_t)(const void *)(
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ) == 1) ? __builtin_strcmp (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      , 
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      ); int __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1178 "builtin-trace.c"
                      fmts[i].alias
# 1178 "builtin-trace.c" 3 4
                      , 
# 1178 "builtin-trace.c"
                      alias
# 1178 "builtin-trace.c" 3 4
                      )))); }) 
# 1178 "builtin-trace.c"
                                                   == 0)
   return &fmts[i];
 }

 return 
# 1182 "builtin-trace.c" 3 4
       ((void *)0)
# 1182 "builtin-trace.c"
           ;
}

static struct syscall_fmt *syscall_fmt__find_by_alias(const char *alias)
{
 const int nmemb = (sizeof(syscall_fmts) / sizeof((syscall_fmts)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((syscall_fmts)), typeof(&(syscall_fmts)[0]))); })));
 return __syscall_fmt__find_by_alias(syscall_fmts, nmemb, alias);
}







struct syscall {
 struct tep_event *tp_format;
 int nr_args;
 int args_size;
 struct {
  struct bpf_program *sys_enter,
       *sys_exit;
 } bpf_prog;
 
# 1205 "builtin-trace.c" 3 4
_Bool 
# 1205 "builtin-trace.c"
          is_exit;
 
# 1206 "builtin-trace.c" 3 4
_Bool 
# 1206 "builtin-trace.c"
          is_open;
 
# 1207 "builtin-trace.c" 3 4
_Bool 
# 1207 "builtin-trace.c"
          nonexistent;
 struct tep_format_field *args;
 const char *name;
 struct syscall_fmt *fmt;
 struct syscall_arg_fmt *arg_fmt;
};






struct bpf_map_syscall_entry {
 
# 1220 "builtin-trace.c" 3 4
_Bool 
# 1220 "builtin-trace.c"
     enabled;
 u16 string_args_len[6];
};
# 1231 "builtin-trace.c"
static size_t fprintf_duration(unsigned long t, 
# 1231 "builtin-trace.c" 3 4
                                               _Bool 
# 1231 "builtin-trace.c"
                                                    calculated, FILE *fp)
{
 double duration = (double)t / 1000000L;
 size_t printed = fprintf(fp, "(");

 if (!calculated)
  printed += fprintf(fp, "         ");
 else if (duration >= 1.0)
  printed += color_fprintf(fp, "\033[31m", "%6.3f ms", duration);
 else if (duration >= 0.01)
  printed += color_fprintf(fp, "\033[33m", "%6.3f ms", duration);
 else
  printed += color_fprintf(fp, "", "%6.3f ms", duration);
 return printed + fprintf(fp, "): ");
}
# 1254 "builtin-trace.c"
struct thread_trace {
 u64 entry_time;
 
# 1256 "builtin-trace.c" 3 4
_Bool 
# 1256 "builtin-trace.c"
        entry_pending;
 unsigned long nr_events;
 unsigned long pfmaj, pfmin;
 char *entry_str;
 double runtime_ms;
 size_t (*ret_scnprintf)(char *bf, size_t size, struct syscall_arg *arg);
        struct {
  unsigned long ptr;
  short int entry_str_pos;
  
# 1265 "builtin-trace.c" 3 4
 _Bool 
# 1265 "builtin-trace.c"
            pending_open;
  unsigned int namelen;
  char *name;
 } filename;
 struct {
  int max;
  struct file *table;
 } files;

 struct intlist *syscall_stats;
};

static struct thread_trace *thread_trace__new(void)
{
 struct thread_trace *ttrace = zalloc(sizeof(struct thread_trace));

 if (ttrace) {
  ttrace->files.max = -1;
  ttrace->syscall_stats = intlist__new(
# 1283 "builtin-trace.c" 3 4
                                      ((void *)0)
# 1283 "builtin-trace.c"
                                          );
 }

 return ttrace;
}

static struct thread_trace *thread__trace(struct thread *thread, FILE *fp)
{
 struct thread_trace *ttrace;

 if (thread == 
# 1293 "builtin-trace.c" 3 4
              ((void *)0)
# 1293 "builtin-trace.c"
                  )
  goto fail;

 if (thread__priv(thread) == 
# 1296 "builtin-trace.c" 3 4
                            ((void *)0)
# 1296 "builtin-trace.c"
                                )
  thread__set_priv(thread, thread_trace__new());

 if (thread__priv(thread) == 
# 1299 "builtin-trace.c" 3 4
                            ((void *)0)
# 1299 "builtin-trace.c"
                                )
  goto fail;

 ttrace = thread__priv(thread);
 ++ttrace->nr_events;

 return ttrace;
fail:
 color_fprintf(fp, "\033[31m",
        "WARNING: not enough memory, dropping samples!\n");
 return 
# 1309 "builtin-trace.c" 3 4
       ((void *)0)
# 1309 "builtin-trace.c"
           ;
}


void syscall_arg__set_ret_scnprintf(struct syscall_arg *arg,
        size_t (*ret_scnprintf)(char *bf, size_t size, struct syscall_arg *arg))
{
 struct thread_trace *ttrace = thread__priv(arg->thread);

 ttrace->ret_scnprintf = ret_scnprintf;
}

#define TRACE_PFMAJ (1 << 0)
#define TRACE_PFMIN (1 << 1)

static const size_t trace__entry_str_size = 2048;

static struct file *thread_trace__files_entry(struct thread_trace *ttrace, int fd)
{
 if (fd < 0)
  return 
# 1329 "builtin-trace.c" 3 4
        ((void *)0)
# 1329 "builtin-trace.c"
            ;

 if (fd > ttrace->files.max) {
  struct file *nfiles = realloc(ttrace->files.table, (fd + 1) * sizeof(struct file));

  if (nfiles == 
# 1334 "builtin-trace.c" 3 4
               ((void *)0)
# 1334 "builtin-trace.c"
                   )
   return 
# 1335 "builtin-trace.c" 3 4
         ((void *)0)
# 1335 "builtin-trace.c"
             ;

  if (ttrace->files.max != -1) {
   memset(nfiles + ttrace->files.max + 1, 0,
          (fd - ttrace->files.max) * sizeof(struct file));
  } else {
   memset(nfiles, 0, (fd + 1) * sizeof(struct file));
  }

  ttrace->files.table = nfiles;
  ttrace->files.max = fd;
 }

 return ttrace->files.table + fd;
}

struct file *thread__files_entry(struct thread *thread, int fd)
{
 return thread_trace__files_entry(thread__priv(thread), fd);
}

static int trace__set_fd_pathname(struct thread *thread, int fd, const char *pathname)
{
 struct thread_trace *ttrace = thread__priv(thread);
 struct file *file = thread_trace__files_entry(ttrace, fd);

 if (file != 
# 1361 "builtin-trace.c" 3 4
            ((void *)0)
# 1361 "builtin-trace.c"
                ) {
  struct stat st;
  if (stat(pathname, &st) == 0)
   file->dev_maj = 
# 1364 "builtin-trace.c" 3 4
                  gnu_dev_major (
# 1364 "builtin-trace.c"
                  st.st_rdev
# 1364 "builtin-trace.c" 3 4
                  )
# 1364 "builtin-trace.c"
                                   ;
  file->pathname = 
# 1365 "builtin-trace.c" 3 4
                  (__extension__ (__builtin_constant_p (
# 1365 "builtin-trace.c"
                  pathname
# 1365 "builtin-trace.c" 3 4
                  ) && ((size_t)(const void *)((
# 1365 "builtin-trace.c"
                  pathname
# 1365 "builtin-trace.c" 3 4
                  ) + 1) - (size_t)(const void *)(
# 1365 "builtin-trace.c"
                  pathname
# 1365 "builtin-trace.c" 3 4
                  ) == 1) ? (((const char *) (
# 1365 "builtin-trace.c"
                  pathname
# 1365 "builtin-trace.c" 3 4
                  ))[0] == '\0' ? (char *) calloc ((size_t) 1, (size_t) 1) : ({ size_t __len = strlen (
# 1365 "builtin-trace.c"
                  pathname
# 1365 "builtin-trace.c" 3 4
                  ) + 1; char *__retval = (char *) malloc (__len); if (__retval != ((void *)0)) __retval = (char *) memcpy (__retval, 
# 1365 "builtin-trace.c"
                  pathname
# 1365 "builtin-trace.c" 3 4
                  , __len); __retval; })) : __strdup (
# 1365 "builtin-trace.c"
                  pathname
# 1365 "builtin-trace.c" 3 4
                  )))
# 1365 "builtin-trace.c"
                                  ;
  if (file->pathname)
   return 0;
 }

 return -1;
}

static int thread__read_fd_path(struct thread *thread, int fd)
{
 char linkname[
# 1375 "builtin-trace.c" 3 4
              4096
# 1375 "builtin-trace.c"
                      ], pathname[
# 1375 "builtin-trace.c" 3 4
                                  4096
# 1375 "builtin-trace.c"
                                          ];
 struct stat st;
 int ret;

 if (thread->pid_ == thread->tid) {
  scnprintf(linkname, sizeof(linkname),
     "/proc/%d/fd/%d", thread->pid_, fd);
 } else {
  scnprintf(linkname, sizeof(linkname),
     "/proc/%d/task/%d/fd/%d", thread->pid_, thread->tid, fd);
 }

 if (lstat(linkname, &st) < 0 || st.st_size + 1 > (off_t)sizeof(pathname))
  return -1;

 ret = readlink(linkname, pathname, sizeof(pathname));

 if (ret < 0 || ret > st.st_size)
  return -1;

 pathname[ret] = '\0';
 return trace__set_fd_pathname(thread, fd, pathname);
}

static const char *thread__fd_path(struct thread *thread, int fd,
       struct trace *trace)
{
 struct thread_trace *ttrace = thread__priv(thread);

 if (ttrace == 
# 1404 "builtin-trace.c" 3 4
              ((void *)0) 
# 1404 "builtin-trace.c"
                   || trace->fd_path_disabled)
  return 
# 1405 "builtin-trace.c" 3 4
        ((void *)0)
# 1405 "builtin-trace.c"
            ;

 if (fd < 0)
  return 
# 1408 "builtin-trace.c" 3 4
        ((void *)0)
# 1408 "builtin-trace.c"
            ;

 if ((fd > ttrace->files.max || ttrace->files.table[fd].pathname == 
# 1410 "builtin-trace.c" 3 4
                                                                   ((void *)0)
# 1410 "builtin-trace.c"
                                                                       )) {
  if (!trace->live)
   return 
# 1412 "builtin-trace.c" 3 4
         ((void *)0)
# 1412 "builtin-trace.c"
             ;
  ++trace->stats.proc_getname;
  if (thread__read_fd_path(thread, fd))
   return 
# 1415 "builtin-trace.c" 3 4
         ((void *)0)
# 1415 "builtin-trace.c"
             ;
 }

 return ttrace->files.table[fd].pathname;
}

size_t syscall_arg__scnprintf_fd(char *bf, size_t size, struct syscall_arg *arg)
{
 int fd = arg->val;
 size_t printed = scnprintf(bf, size, "%d", fd);
 const char *path = thread__fd_path(arg->thread, fd, arg->trace);

 if (path)
  printed += scnprintf(bf + printed, size - printed, "<%s>", path);

 return printed;
}

size_t pid__scnprintf_fd(struct trace *trace, pid_t pid, int fd, char *bf, size_t size)
{
        size_t printed = scnprintf(bf, size, "%d", fd);
 struct thread *thread = machine__find_thread(trace->host, pid, pid);

 if (thread) {
  const char *path = thread__fd_path(thread, fd, trace);

  if (path)
   printed += scnprintf(bf + printed, size - printed, "<%s>", path);

  thread__put(thread);
 }

        return printed;
}

static size_t syscall_arg__scnprintf_close_fd(char *bf, size_t size,
           struct syscall_arg *arg)
{
 int fd = arg->val;
 size_t printed = syscall_arg__scnprintf_fd(bf, size, arg);
 struct thread_trace *ttrace = thread__priv(arg->thread);

 if (ttrace && fd >= 0 && fd <= ttrace->files.max)
  __zfree((void **)(&ttrace->files.table[fd].pathname));

 return printed;
}

static void thread__set_filename_pos(struct thread *thread, const char *bf,
         unsigned long ptr)
{
 struct thread_trace *ttrace = thread__priv(thread);

 ttrace->filename.ptr = ptr;
 ttrace->filename.entry_str_pos = bf - ttrace->entry_str;
}

static size_t syscall_arg__scnprintf_augmented_string(struct syscall_arg *arg, char *bf, size_t size)
{
 struct augmented_arg *augmented_arg = arg->augmented.args;
 size_t printed = scnprintf(bf, size, "\"%.*s\"", augmented_arg->size, augmented_arg->value);




 int consumed = sizeof(*augmented_arg) + augmented_arg->size;

 arg->augmented.args = ((void *)arg->augmented.args) + consumed;
 arg->augmented.size -= consumed;

 return printed;
}

static size_t syscall_arg__scnprintf_filename(char *bf, size_t size,
           struct syscall_arg *arg)
{
 unsigned long ptr = arg->val;

 if (arg->augmented.args)
  return syscall_arg__scnprintf_augmented_string(arg, bf, size);

 if (!arg->trace->vfs_getname)
  return scnprintf(bf, size, "%#x", ptr);

 thread__set_filename_pos(arg->thread, bf, ptr);
 return 0;
}

static 
# 1503 "builtin-trace.c" 3 4
      _Bool 
# 1503 "builtin-trace.c"
           trace__filter_duration(struct trace *trace, double t)
{
 return t < (trace->duration_filter * 1000000L);
}

static size_t __trace__fprintf_tstamp(struct trace *trace, u64 tstamp, FILE *fp)
{
 double ts = (double)(tstamp - trace->base_time) / 1000000L;

 return fprintf(fp, "%10.3f ", ts);
}







static size_t trace__fprintf_tstamp(struct trace *trace, u64 tstamp, FILE *fp)
{
 if (tstamp > 0)
  return __trace__fprintf_tstamp(trace, tstamp, fp);

 return fprintf(fp, "         ? ");
}

static 
# 1529 "builtin-trace.c" 3 4
      _Bool 
# 1529 "builtin-trace.c"
           done = 
# 1529 "builtin-trace.c" 3 4
                  0
# 1529 "builtin-trace.c"
                       ;
static 
# 1530 "builtin-trace.c" 3 4
      _Bool 
# 1530 "builtin-trace.c"
           interrupted = 
# 1530 "builtin-trace.c" 3 4
                         0
# 1530 "builtin-trace.c"
                              ;

static void sig_handler(int sig)
{
 done = 
# 1534 "builtin-trace.c" 3 4
       1
# 1534 "builtin-trace.c"
           ;
 interrupted = sig == 
# 1535 "builtin-trace.c" 3 4
                     2
# 1535 "builtin-trace.c"
                           ;
}

static size_t trace__fprintf_comm_tid(struct trace *trace, struct thread *thread, FILE *fp)
{
 size_t printed = 0;

 if (trace->multiple_threads) {
  if (trace->show_comm)
   printed += fprintf(fp, "%.14s/", thread__comm_str(thread));
  printed += fprintf(fp, "%d ", thread->tid);
 }

 return printed;
}

static size_t trace__fprintf_entry_head(struct trace *trace, struct thread *thread,
     u64 duration, 
# 1552 "builtin-trace.c" 3 4
                  _Bool 
# 1552 "builtin-trace.c"
                       duration_calculated, u64 tstamp, FILE *fp)
{
 size_t printed = 0;

 if (trace->show_tstamp)
  printed = trace__fprintf_tstamp(trace, tstamp, fp);
 if (trace->show_duration)
  printed += fprintf_duration(duration, duration_calculated, fp);
 return printed + trace__fprintf_comm_tid(trace, thread, fp);
}

static int trace__process_event(struct trace *trace, struct machine *machine,
    union perf_event *event, struct perf_sample *sample)
{
 int ret = 0;

 switch (event->header.type) {
 case PERF_RECORD_LOST:
  color_fprintf(trace->output, "\033[31m",
         "LOST %" 
# 1571 "builtin-trace.c" 3 4
                 "l" "u" 
# 1571 "builtin-trace.c"
                        " events!\n", event->lost.lost);
  ret = machine__process_lost_event(machine, event, sample);
  break;
 default:
  ret = machine__process_event(machine, event, sample);
  break;
 }

 return ret;
}

static int trace__tool_process(struct perf_tool *tool,
          union perf_event *event,
          struct perf_sample *sample,
          struct machine *machine)
{
 struct trace *trace = ({ const typeof(((struct trace *)0)->tool) * __mptr = (tool); (struct trace *)((char *)__mptr - 
# 1587 "builtin-trace.c" 3 4
                      __builtin_offsetof (
# 1587 "builtin-trace.c"
                      struct trace
# 1587 "builtin-trace.c" 3 4
                      , 
# 1587 "builtin-trace.c"
                      tool
# 1587 "builtin-trace.c" 3 4
                      )
# 1587 "builtin-trace.c"
                      ); });
 return trace__process_event(trace, machine, event, sample);
}

static char *trace__machine__resolve_kernel_addr(void *vmachine, unsigned long long *addrp, char **modp)
{
 struct machine *machine = vmachine;

 if (machine->kptr_restrict_warned)
  return 
# 1596 "builtin-trace.c" 3 4
        ((void *)0)
# 1596 "builtin-trace.c"
            ;

 if (symbol_conf.kptr_restrict) {
  eprintf(0, verbose, "Kernel address maps (/proc/{kallsyms,modules}) are restricted.\n\n" "Check /proc/sys/kernel/kptr_restrict and /proc/sys/kernel/perf_event_paranoid.\n\n" "Kernel samples will not be resolved.\n")

                                               ;
  machine->kptr_restrict_warned = 
# 1602 "builtin-trace.c" 3 4
                                 1
# 1602 "builtin-trace.c"
                                     ;
  return 
# 1603 "builtin-trace.c" 3 4
        ((void *)0)
# 1603 "builtin-trace.c"
            ;
 }

 return machine__resolve_kernel_addr(vmachine, addrp, modp);
}

static int trace__symbols_init(struct trace *trace, struct evlist *evlist)
{
 int err = symbol__init(
# 1611 "builtin-trace.c" 3 4
                       ((void *)0)
# 1611 "builtin-trace.c"
                           );

 if (err)
  return err;

 trace->host = machine__new_host();
 if (trace->host == 
# 1617 "builtin-trace.c" 3 4
                   ((void *)0)
# 1617 "builtin-trace.c"
                       )
  return -
# 1618 "builtin-trace.c" 3 4
         12
# 1618 "builtin-trace.c"
               ;

 err = trace_event__register_resolver(trace->host, trace__machine__resolve_kernel_addr);
 if (err < 0)
  goto out;

 err = __machine__synthesize_threads(trace->host, &trace->tool, &trace->opts.target,
         evlist->core.threads, trace__tool_process, 
# 1625 "builtin-trace.c" 3 4
                                                   0
# 1625 "builtin-trace.c"
                                                        ,
         1);
out:
 if (err)
  symbol__exit();

 return err;
}

static void trace__symbols__exit(struct trace *trace)
{
 machine__exit(trace->host);
 trace->host = 
# 1637 "builtin-trace.c" 3 4
              ((void *)0)
# 1637 "builtin-trace.c"
                  ;

 symbol__exit();
}

static int syscall__alloc_arg_fmts(struct syscall *sc, int nr_args)
{
 int idx;

 if (nr_args == 6 && sc->fmt && sc->fmt->nr_args != 0)
  nr_args = sc->fmt->nr_args;

 sc->arg_fmt = calloc(nr_args, sizeof(*sc->arg_fmt));
 if (sc->arg_fmt == 
# 1650 "builtin-trace.c" 3 4
                   ((void *)0)
# 1650 "builtin-trace.c"
                       )
  return -1;

 for (idx = 0; idx < nr_args; ++idx) {
  if (sc->fmt)
   sc->arg_fmt[idx] = sc->fmt->arg[idx];
 }

 sc->nr_args = nr_args;
 return 0;
}

static struct syscall_arg_fmt syscall_arg_fmts__by_name[] = {
 { .name = "msr", .scnprintf = syscall_arg__scnprintf_x86_MSR, .strtoul = syscall_arg__strtoul_x86_MSR, },
 { .name = "vector", .scnprintf = syscall_arg__scnprintf_x86_irq_vectors, .strtoul = syscall_arg__strtoul_x86_irq_vectors, },
};

static int syscall_arg_fmt__cmp(const void *name, const void *fmtp)
{
       const struct syscall_arg_fmt *fmt = fmtp;
       return 
# 1670 "builtin-trace.c" 3 4
             __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) && __builtin_constant_p (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) && (__s1_len = __builtin_strlen (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ), __s2_len = __builtin_strlen (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ), (!((size_t)(const void *)((
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             , 
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) : (__builtin_constant_p (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) == 1) && (__s1_len = __builtin_strlen (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ), __s1_len < 4) ? (__builtin_constant_p (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) == 1) ? __builtin_strcmp (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             , 
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ); int __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) == 1) && (__s2_len = __builtin_strlen (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ), __s2_len < 4) ? (__builtin_constant_p (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ) == 1) ? __builtin_strcmp (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             , 
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             ); int __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1670 "builtin-trace.c"
             name
# 1670 "builtin-trace.c" 3 4
             , 
# 1670 "builtin-trace.c"
             fmt->name
# 1670 "builtin-trace.c" 3 4
             )))); })
# 1670 "builtin-trace.c"
                                    ;
}

static struct syscall_arg_fmt *
__syscall_arg_fmt__find_by_name(struct syscall_arg_fmt *fmts, const int nmemb, const char *name)
{
       return bsearch(name, fmts, nmemb, sizeof(struct syscall_arg_fmt), syscall_arg_fmt__cmp);
}

static struct syscall_arg_fmt *syscall_arg_fmt__find_by_name(const char *name)
{
       const int nmemb = (sizeof(syscall_arg_fmts__by_name) / sizeof((syscall_arg_fmts__by_name)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((syscall_arg_fmts__by_name)), typeof(&(syscall_arg_fmts__by_name)[0]))); })));
       return __syscall_arg_fmt__find_by_name(syscall_arg_fmts__by_name, nmemb, name);
}

static struct tep_format_field *
syscall_arg_fmt__init_array(struct syscall_arg_fmt *arg, struct tep_format_field *field)
{
 struct tep_format_field *last_field = 
# 1688 "builtin-trace.c" 3 4
                                      ((void *)0)
# 1688 "builtin-trace.c"
                                          ;
 int len;

 for (; field; field = field->next, ++arg) {
  last_field = field;

  if (arg->scnprintf)
   continue;

  len = strlen(field->name);

  if (
# 1699 "builtin-trace.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) && __builtin_constant_p (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ), __s2_len = __builtin_strlen (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ), (!((size_t)(const void *)((
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     , 
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) : (__builtin_constant_p (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     , 
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     , 
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1699 "builtin-trace.c"
     field->type
# 1699 "builtin-trace.c" 3 4
     , 
# 1699 "builtin-trace.c"
     "const char *"
# 1699 "builtin-trace.c" 3 4
     )))); }) 
# 1699 "builtin-trace.c"
                                         == 0 &&
      ((len >= 4 && 
# 1700 "builtin-trace.c" 3 4
                   __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) && __builtin_constant_p (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) && (__s1_len = __builtin_strlen (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ), __s2_len = __builtin_strlen (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ), (!((size_t)(const void *)((
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) + 1) - (size_t)(const void *)(
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) + 1) - (size_t)(const void *)(
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   , 
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) : (__builtin_constant_p (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) && ((size_t)(const void *)((
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) + 1) - (size_t)(const void *)(
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) == 1) && (__s1_len = __builtin_strlen (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ), __s1_len < 4) ? (__builtin_constant_p (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) && ((size_t)(const void *)((
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) + 1) - (size_t)(const void *)(
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) == 1) ? __builtin_strcmp (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   , 
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ); int __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) && ((size_t)(const void *)((
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) + 1) - (size_t)(const void *)(
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) == 1) && (__s2_len = __builtin_strlen (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ), __s2_len < 4) ? (__builtin_constant_p (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) && ((size_t)(const void *)((
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) + 1) - (size_t)(const void *)(
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ) == 1) ? __builtin_strcmp (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   , 
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   ); int __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1700 "builtin-trace.c"
                   field->name + len - 4
# 1700 "builtin-trace.c" 3 4
                   , 
# 1700 "builtin-trace.c"
                   "name"
# 1700 "builtin-trace.c" 3 4
                   )))); }) 
# 1700 "builtin-trace.c"
                                                         == 0) ||
       strstr(field->name, "path") != 
# 1701 "builtin-trace.c" 3 4
                                     ((void *)0)
# 1701 "builtin-trace.c"
                                         ))
   arg->scnprintf = syscall_arg__scnprintf_filename;
  else if ((field->flags & TEP_FIELD_IS_POINTER) || strstr(field->name, "addr"))
   arg->scnprintf = syscall_arg__scnprintf_ptr;
  else if (
# 1705 "builtin-trace.c" 3 4
          __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) && __builtin_constant_p (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) && (__s1_len = __builtin_strlen (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ), __s2_len = __builtin_strlen (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ), (!((size_t)(const void *)((
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          , 
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) : (__builtin_constant_p (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) == 1) && (__s1_len = __builtin_strlen (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ), __s1_len < 4) ? (__builtin_constant_p (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) == 1) ? __builtin_strcmp (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          , 
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ); int __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) == 1) && (__s2_len = __builtin_strlen (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ), __s2_len < 4) ? (__builtin_constant_p (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ) == 1) ? __builtin_strcmp (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          , 
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          ); int __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1705 "builtin-trace.c"
          field->type
# 1705 "builtin-trace.c" 3 4
          , 
# 1705 "builtin-trace.c"
          "pid_t"
# 1705 "builtin-trace.c" 3 4
          )))); }) 
# 1705 "builtin-trace.c"
                                       == 0)
   arg->scnprintf = syscall_arg__scnprintf_pid;
  else if (
# 1707 "builtin-trace.c" 3 4
          __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) && __builtin_constant_p (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) && (__s1_len = __builtin_strlen (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ), __s2_len = __builtin_strlen (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ), (!((size_t)(const void *)((
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          , 
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) : (__builtin_constant_p (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) == 1) && (__s1_len = __builtin_strlen (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ), __s1_len < 4) ? (__builtin_constant_p (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) == 1) ? __builtin_strcmp (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          , 
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ); int __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) == 1) && (__s2_len = __builtin_strlen (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ), __s2_len < 4) ? (__builtin_constant_p (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) && ((size_t)(const void *)((
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) + 1) - (size_t)(const void *)(
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ) == 1) ? __builtin_strcmp (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          , 
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          ); int __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1707 "builtin-trace.c"
          field->type
# 1707 "builtin-trace.c" 3 4
          , 
# 1707 "builtin-trace.c"
          "umode_t"
# 1707 "builtin-trace.c" 3 4
          )))); }) 
# 1707 "builtin-trace.c"
                                         == 0)
   arg->scnprintf = syscall_arg__scnprintf_mode_t;
  else if ((field->flags & TEP_FIELD_IS_ARRAY) && strstr(field->type, "char")) {
   arg->scnprintf = syscall_arg__scnprintf_char_array;
   arg->nr_entries = field->arraylen;
  } else if ((
# 1712 "builtin-trace.c" 3 4
             __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) && __builtin_constant_p (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) && (__s1_len = __builtin_strlen (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ), __s2_len = __builtin_strlen (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ), (!((size_t)(const void *)((
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             , 
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) : (__builtin_constant_p (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) == 1) && (__s1_len = __builtin_strlen (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ), __s1_len < 4) ? (__builtin_constant_p (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) == 1) ? __builtin_strcmp (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             , 
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ); int __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) == 1) && (__s2_len = __builtin_strlen (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ), __s2_len < 4) ? (__builtin_constant_p (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ) == 1) ? __builtin_strcmp (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             , 
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             ); int __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1712 "builtin-trace.c"
             field->type
# 1712 "builtin-trace.c" 3 4
             , 
# 1712 "builtin-trace.c"
             "int"
# 1712 "builtin-trace.c" 3 4
             )))); }) 
# 1712 "builtin-trace.c"
                                        == 0 ||
     
# 1713 "builtin-trace.c" 3 4
    __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) && __builtin_constant_p (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) && (__s1_len = __builtin_strlen (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ), __s2_len = __builtin_strlen (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ), (!((size_t)(const void *)((
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    , 
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) : (__builtin_constant_p (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) == 1) && (__s1_len = __builtin_strlen (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ), __s1_len < 4) ? (__builtin_constant_p (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) == 1) ? __builtin_strcmp (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    , 
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ); int __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) == 1) && (__s2_len = __builtin_strlen (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ), __s2_len < 4) ? (__builtin_constant_p (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ) == 1) ? __builtin_strcmp (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    , 
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    ); int __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1713 "builtin-trace.c"
    field->type
# 1713 "builtin-trace.c" 3 4
    , 
# 1713 "builtin-trace.c"
    "unsigned int"
# 1713 "builtin-trace.c" 3 4
    )))); }) 
# 1713 "builtin-trace.c"
                                        == 0 ||
     
# 1714 "builtin-trace.c" 3 4
    __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) && __builtin_constant_p (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) && (__s1_len = __builtin_strlen (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ), __s2_len = __builtin_strlen (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ), (!((size_t)(const void *)((
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    , 
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) : (__builtin_constant_p (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) == 1) && (__s1_len = __builtin_strlen (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ), __s1_len < 4) ? (__builtin_constant_p (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) == 1) ? __builtin_strcmp (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    , 
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ); int __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) == 1) && (__s2_len = __builtin_strlen (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ), __s2_len < 4) ? (__builtin_constant_p (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ) == 1) ? __builtin_strcmp (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    , 
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    ); int __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1714 "builtin-trace.c"
    field->type
# 1714 "builtin-trace.c" 3 4
    , 
# 1714 "builtin-trace.c"
    "long"
# 1714 "builtin-trace.c" 3 4
    )))); }) 
# 1714 "builtin-trace.c"
                                == 0) &&
    len >= 2 && 
# 1715 "builtin-trace.c" 3 4
               __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) && __builtin_constant_p (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) && (__s1_len = __builtin_strlen (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ), __s2_len = __builtin_strlen (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ), (!((size_t)(const void *)((
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               , 
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) : (__builtin_constant_p (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) == 1) && (__s1_len = __builtin_strlen (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ), __s1_len < 4) ? (__builtin_constant_p (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) == 1) ? __builtin_strcmp (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               , 
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ); int __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) == 1) && (__s2_len = __builtin_strlen (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ), __s2_len < 4) ? (__builtin_constant_p (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ) == 1) ? __builtin_strcmp (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               , 
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               ); int __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1715 "builtin-trace.c"
               field->name + len - 2
# 1715 "builtin-trace.c" 3 4
               , 
# 1715 "builtin-trace.c"
               "fd"
# 1715 "builtin-trace.c" 3 4
               )))); }) 
# 1715 "builtin-trace.c"
                                                   == 0) {







   arg->scnprintf = syscall_arg__scnprintf_fd;
               } else {
   struct syscall_arg_fmt *fmt = syscall_arg_fmt__find_by_name(field->name);

   if (fmt) {
    arg->scnprintf = fmt->scnprintf;
    arg->strtoul = fmt->strtoul;
   }
  }
 }

 return last_field;
}

static int syscall__set_arg_fmts(struct syscall *sc)
{
 struct tep_format_field *last_field = syscall_arg_fmt__init_array(sc->arg_fmt, sc->args);

 if (last_field)
  sc->args_size = last_field->offset + last_field->size;

 return 0;
}

static int trace__read_syscall_info(struct trace *trace, int id)
{
 char tp_name[128];
 struct syscall *sc;
 const char *name = syscalltbl__name(trace->sctbl, id);

 if (trace->syscalls.table == 
# 1753 "builtin-trace.c" 3 4
                             ((void *)0)
# 1753 "builtin-trace.c"
                                 ) {
  trace->syscalls.table = calloc(trace->sctbl->syscalls.max_id + 1, sizeof(*sc));
  if (trace->syscalls.table == 
# 1755 "builtin-trace.c" 3 4
                              ((void *)0)
# 1755 "builtin-trace.c"
                                  )
   return -
# 1756 "builtin-trace.c" 3 4
          12
# 1756 "builtin-trace.c"
                ;
 }

 sc = trace->syscalls.table + id;
 if (sc->nonexistent)
  return 0;

 if (name == 
# 1763 "builtin-trace.c" 3 4
            ((void *)0)
# 1763 "builtin-trace.c"
                ) {
  sc->nonexistent = 
# 1764 "builtin-trace.c" 3 4
                   1
# 1764 "builtin-trace.c"
                       ;
  return 0;
 }

 sc->name = name;
 sc->fmt = syscall_fmt__find(sc->name);

 snprintf(tp_name, sizeof(tp_name), "sys_enter_%s", sc->name);
 sc->tp_format = trace_event__tp_format("syscalls", tp_name);

 if (IS_ERR(sc->tp_format) && sc->fmt && sc->fmt->alias) {
  snprintf(tp_name, sizeof(tp_name), "sys_enter_%s", sc->fmt->alias);
  sc->tp_format = trace_event__tp_format("syscalls", tp_name);
 }

 if (syscall__alloc_arg_fmts(sc, IS_ERR(sc->tp_format) ? 6 : sc->tp_format->format.nr_fields))
  return -
# 1780 "builtin-trace.c" 3 4
         12
# 1780 "builtin-trace.c"
               ;

 if (IS_ERR(sc->tp_format))
  return PTR_ERR(sc->tp_format);

 sc->args = sc->tp_format->format.fields;





 if (sc->args && (!
# 1791 "builtin-trace.c" 3 4
                  __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) && __builtin_constant_p (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) && (__s1_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ), __s2_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ), (!((size_t)(const void *)((
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  , 
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) : (__builtin_constant_p (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) == 1) && (__s1_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ), __s1_len < 4) ? (__builtin_constant_p (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) == 1) ? __builtin_strcmp (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  , 
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ); int __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) == 1) && (__s2_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ), __s2_len < 4) ? (__builtin_constant_p (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ) == 1) ? __builtin_strcmp (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  , 
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  ); int __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1791 "builtin-trace.c"
                  sc->args->name
# 1791 "builtin-trace.c" 3 4
                  , 
# 1791 "builtin-trace.c"
                  "__syscall_nr"
# 1791 "builtin-trace.c" 3 4
                  )))); }) 
# 1791 "builtin-trace.c"
                                                         || !
# 1791 "builtin-trace.c" 3 4
                                                             __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) && __builtin_constant_p (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) && (__s1_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ), __s2_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ), (!((size_t)(const void *)((
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             , 
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) : (__builtin_constant_p (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) == 1) && (__s1_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ), __s1_len < 4) ? (__builtin_constant_p (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) == 1) ? __builtin_strcmp (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             , 
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ); int __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) == 1) && (__s2_len = __builtin_strlen (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ), __s2_len < 4) ? (__builtin_constant_p (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) && ((size_t)(const void *)((
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) + 1) - (size_t)(const void *)(
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ) == 1) ? __builtin_strcmp (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             , 
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             ); int __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1791 "builtin-trace.c"
                                                             sc->args->name
# 1791 "builtin-trace.c" 3 4
                                                             , 
# 1791 "builtin-trace.c"
                                                             "nr"
# 1791 "builtin-trace.c" 3 4
                                                             )))); })
# 1791 "builtin-trace.c"
                                                                                         )) {
  sc->args = sc->args->next;
  --sc->nr_args;
 }

 sc->is_exit = !
# 1796 "builtin-trace.c" 3 4
               __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) && __builtin_constant_p (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) && (__s1_len = __builtin_strlen (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ), __s2_len = __builtin_strlen (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ), (!((size_t)(const void *)((
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               , 
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) : (__builtin_constant_p (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) == 1) && (__s1_len = __builtin_strlen (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ), __s1_len < 4) ? (__builtin_constant_p (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) == 1) ? __builtin_strcmp (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               , 
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ); int __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) == 1) && (__s2_len = __builtin_strlen (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ), __s2_len < 4) ? (__builtin_constant_p (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ) == 1) ? __builtin_strcmp (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               , 
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               ); int __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1796 "builtin-trace.c"
               name
# 1796 "builtin-trace.c" 3 4
               , 
# 1796 "builtin-trace.c"
               "exit_group"
# 1796 "builtin-trace.c" 3 4
               )))); }) 
# 1796 "builtin-trace.c"
                                          || !
# 1796 "builtin-trace.c" 3 4
                                              __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) && __builtin_constant_p (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) && (__s1_len = __builtin_strlen (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ), __s2_len = __builtin_strlen (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ), (!((size_t)(const void *)((
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              , 
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) : (__builtin_constant_p (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) == 1) && (__s1_len = __builtin_strlen (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ), __s1_len < 4) ? (__builtin_constant_p (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) == 1) ? __builtin_strcmp (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              , 
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ); int __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) == 1) && (__s2_len = __builtin_strlen (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ), __s2_len < 4) ? (__builtin_constant_p (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) && ((size_t)(const void *)((
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) + 1) - (size_t)(const void *)(
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ) == 1) ? __builtin_strcmp (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              , 
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              ); int __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1796 "builtin-trace.c"
                                              name
# 1796 "builtin-trace.c" 3 4
                                              , 
# 1796 "builtin-trace.c"
                                              "exit"
# 1796 "builtin-trace.c" 3 4
                                              )))); })
# 1796 "builtin-trace.c"
                                                                  ;
 sc->is_open = !
# 1797 "builtin-trace.c" 3 4
               __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) && __builtin_constant_p (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) && (__s1_len = __builtin_strlen (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ), __s2_len = __builtin_strlen (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ), (!((size_t)(const void *)((
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               , 
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) : (__builtin_constant_p (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) == 1) && (__s1_len = __builtin_strlen (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ), __s1_len < 4) ? (__builtin_constant_p (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) == 1) ? __builtin_strcmp (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               , 
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ); int __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) == 1) && (__s2_len = __builtin_strlen (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ), __s2_len < 4) ? (__builtin_constant_p (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ) == 1) ? __builtin_strcmp (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               , 
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               ); int __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1797 "builtin-trace.c"
               name
# 1797 "builtin-trace.c" 3 4
               , 
# 1797 "builtin-trace.c"
               "open"
# 1797 "builtin-trace.c" 3 4
               )))); }) 
# 1797 "builtin-trace.c"
                                    || !
# 1797 "builtin-trace.c" 3 4
                                        __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) && __builtin_constant_p (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) && (__s1_len = __builtin_strlen (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ), __s2_len = __builtin_strlen (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ), (!((size_t)(const void *)((
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        , 
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) : (__builtin_constant_p (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) == 1) && (__s1_len = __builtin_strlen (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ), __s1_len < 4) ? (__builtin_constant_p (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) == 1) ? __builtin_strcmp (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        , 
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ); int __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) == 1) && (__s2_len = __builtin_strlen (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ), __s2_len < 4) ? (__builtin_constant_p (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) && ((size_t)(const void *)((
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) + 1) - (size_t)(const void *)(
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ) == 1) ? __builtin_strcmp (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        , 
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        ); int __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 1797 "builtin-trace.c"
                                        name
# 1797 "builtin-trace.c" 3 4
                                        , 
# 1797 "builtin-trace.c"
                                        "openat"
# 1797 "builtin-trace.c" 3 4
                                        )))); })
# 1797 "builtin-trace.c"
                                                              ;

 return syscall__set_arg_fmts(sc);
}

static int perf_evsel__init_tp_arg_scnprintf(struct evsel *evsel)
{
 struct syscall_arg_fmt *fmt = evsel__syscall_arg_fmt(evsel);

 if (fmt != 
# 1806 "builtin-trace.c" 3 4
           ((void *)0)
# 1806 "builtin-trace.c"
               ) {
  syscall_arg_fmt__init_array(fmt, evsel->tp_format->format.fields);
  return 0;
 }

 return -
# 1811 "builtin-trace.c" 3 4
        12
# 1811 "builtin-trace.c"
              ;
}

static int intcmp(const void *a, const void *b)
{
 const int *one = a, *another = b;

 return *one - *another;
}

static int trace__validate_ev_qualifier(struct trace *trace)
{
 int err = 0;
 
# 1824 "builtin-trace.c" 3 4
_Bool 
# 1824 "builtin-trace.c"
     printed_invalid_prefix = 
# 1824 "builtin-trace.c" 3 4
                              0
# 1824 "builtin-trace.c"
                                   ;
 struct str_node *pos;
 size_t nr_used = 0, nr_allocated = strlist__nr_entries(trace->ev_qualifier);

 trace->ev_qualifier_ids.entries = malloc(nr_allocated *
       sizeof(trace->ev_qualifier_ids.entries[0]));

 if (trace->ev_qualifier_ids.entries == 
# 1831 "builtin-trace.c" 3 4
                                       ((void *)0)
# 1831 "builtin-trace.c"
                                           ) {
  fputs("Error:\tNot enough memory for allocating events qualifier ids\n",
         trace->output);
  err = -
# 1834 "builtin-trace.c" 3 4
        22
# 1834 "builtin-trace.c"
              ;
  goto out;
 }

 for (pos = strlist__first(trace->ev_qualifier); pos; pos = strlist__next(pos)) {
  const char *sc = pos->s;
  int id = syscalltbl__id(trace->sctbl, sc), match_next = -1;

  if (id < 0) {
   id = syscalltbl__strglobmatch_first(trace->sctbl, sc, &match_next);
   if (id >= 0)
    goto matches;

   if (!printed_invalid_prefix) {
    eprintf(1, verbose, "Skipping unknown syscalls: ");
    printed_invalid_prefix = 
# 1849 "builtin-trace.c" 3 4
                            1
# 1849 "builtin-trace.c"
                                ;
   } else {
    eprintf(1, verbose, ", ");
   }

   eprintf(1, verbose, "%s", sc);
   continue;
  }
matches:
  trace->ev_qualifier_ids.entries[nr_used++] = id;
  if (match_next == -1)
   continue;

  while (1) {
   id = syscalltbl__strglobmatch_next(trace->sctbl, sc, &match_next);
   if (id < 0)
    break;
   if (nr_allocated == nr_used) {
    void *entries;

    nr_allocated += 8;
    entries = realloc(trace->ev_qualifier_ids.entries,
        nr_allocated * sizeof(trace->ev_qualifier_ids.entries[0]));
    if (entries == 
# 1872 "builtin-trace.c" 3 4
                  ((void *)0)
# 1872 "builtin-trace.c"
                      ) {
     err = -
# 1873 "builtin-trace.c" 3 4
           12
# 1873 "builtin-trace.c"
                 ;
     fputs("\nError:\t Not enough memory for parsing\n", trace->output);
     goto out_free;
    }
    trace->ev_qualifier_ids.entries = entries;
   }
   trace->ev_qualifier_ids.entries[nr_used++] = id;
  }
 }

 trace->ev_qualifier_ids.nr = nr_used;
 qsort(trace->ev_qualifier_ids.entries, nr_used, sizeof(int), intcmp);
out:
 if (printed_invalid_prefix)
  eprintf(1, verbose, "\n");
 return err;
out_free:
 __zfree((void **)(&trace->ev_qualifier_ids.entries));
 trace->ev_qualifier_ids.nr = 0;
 goto out;
}

static __attribute__((unused)) 
# 1895 "builtin-trace.c" 3 4
                     _Bool 
# 1895 "builtin-trace.c"
                          trace__syscall_enabled(struct trace *trace, int id)
{
 
# 1897 "builtin-trace.c" 3 4
_Bool 
# 1897 "builtin-trace.c"
     in_ev_qualifier;

 if (trace->ev_qualifier_ids.nr == 0)
  return 
# 1900 "builtin-trace.c" 3 4
        1
# 1900 "builtin-trace.c"
            ;

 in_ev_qualifier = bsearch(&id, trace->ev_qualifier_ids.entries,
      trace->ev_qualifier_ids.nr, sizeof(int), intcmp) != 
# 1903 "builtin-trace.c" 3 4
                                                         ((void *)0)
# 1903 "builtin-trace.c"
                                                             ;

 if (in_ev_qualifier)
        return !trace->not_ev_qualifier;

 return trace->not_ev_qualifier;
}
# 1919 "builtin-trace.c"
unsigned long syscall_arg__val(struct syscall_arg *arg, u8 idx)
{
 unsigned long val;
 unsigned char *p = arg->args + sizeof(unsigned long) * idx;

 memcpy(&val, p, sizeof(val));
 return val;
}

static size_t syscall__scnprintf_name(struct syscall *sc, char *bf, size_t size,
          struct syscall_arg *arg)
{
 if (sc->arg_fmt && sc->arg_fmt[arg->idx].name)
  return scnprintf(bf, size, "%s: ", sc->arg_fmt[arg->idx].name);

 return scnprintf(bf, size, "arg%d: ", arg->idx);
}






static unsigned long syscall_arg_fmt__mask_val(struct syscall_arg_fmt *fmt, struct syscall_arg *arg, unsigned long val)
{
 if (fmt && fmt->mask_val)
  return fmt->mask_val(arg, val);

 return val;
}

static size_t syscall_arg_fmt__scnprintf_val(struct syscall_arg_fmt *fmt, char *bf, size_t size,
          struct syscall_arg *arg, unsigned long val)
{
 if (fmt && fmt->scnprintf) {
  arg->val = val;
  if (fmt->parm)
   arg->parm = fmt->parm;
  return fmt->scnprintf(bf, size, arg);
 }
 return scnprintf(bf, size, "%ld", val);
}

static size_t syscall__scnprintf_args(struct syscall *sc, char *bf, size_t size,
          unsigned char *args, void *augmented_args, int augmented_args_size,
          struct trace *trace, struct thread *thread)
{
 size_t printed = 0;
 unsigned long val;
 u8 bit = 1;
 struct syscall_arg arg = {
  .args = args,
  .augmented = {
   .size = augmented_args_size,
   .args = augmented_args,
  },
  .idx = 0,
  .mask = 0,
  .trace = trace,
  .thread = thread,
  .show_string_prefix = trace->show_string_prefix,
 };
 struct thread_trace *ttrace = thread__priv(thread);






 ttrace->ret_scnprintf = 
# 1988 "builtin-trace.c" 3 4
                        ((void *)0)
# 1988 "builtin-trace.c"
                            ;

 if (sc->args != 
# 1990 "builtin-trace.c" 3 4
                ((void *)0)
# 1990 "builtin-trace.c"
                    ) {
  struct tep_format_field *field;

  for (field = sc->args; field;
       field = field->next, ++arg.idx, bit <<= 1) {
   if (arg.mask & bit)
    continue;

   arg.fmt = &sc->arg_fmt[arg.idx];
   val = syscall_arg__val(&arg, arg.idx);




   val = syscall_arg_fmt__mask_val(&sc->arg_fmt[arg.idx], &arg, val);






   if (val == 0 &&
       !trace->show_zeros &&
       !(sc->arg_fmt &&
         (sc->arg_fmt[arg.idx].show_zero ||
          sc->arg_fmt[arg.idx].scnprintf == syscall_arg__scnprintf_strarray ||
          sc->arg_fmt[arg.idx].scnprintf == syscall_arg__scnprintf_strarrays) &&
         sc->arg_fmt[arg.idx].parm))
    continue;

   printed += scnprintf(bf + printed, size - printed, "%s", printed ? ", " : "");

   if (trace->show_arg_names)
    printed += scnprintf(bf + printed, size - printed, "%s: ", field->name);

   printed += syscall_arg_fmt__scnprintf_val(&sc->arg_fmt[arg.idx],
          bf + printed, size - printed, &arg, val);
  }
 } else if (IS_ERR(sc->tp_format)) {





  while (arg.idx < sc->nr_args) {
   if (arg.mask & bit)
    goto next_arg;
   val = syscall_arg__val(&arg, arg.idx);
   if (printed)
    printed += scnprintf(bf + printed, size - printed, ", ");
   printed += syscall__scnprintf_name(sc, bf + printed, size - printed, &arg);
   printed += syscall_arg_fmt__scnprintf_val(&sc->arg_fmt[arg.idx], bf + printed, size - printed, &arg, val);
next_arg:
   ++arg.idx;
   bit <<= 1;
  }
 }

 return printed;
}

typedef int (*tracepoint_handler)(struct trace *trace, struct evsel *evsel,
      union perf_event *event,
      struct perf_sample *sample);

static struct syscall *trace__syscall_info(struct trace *trace,
        struct evsel *evsel, int id)
{
 int err = 0;

 if (id < 0) {
# 2072 "builtin-trace.c"
  if (verbose > 1) {
   static u64 n;
   fprintf(trace->output, "Invalid syscall %d id, skipping (%s, %" 
# 2074 "builtin-trace.c" 3 4
                                                                  "l" "u" 
# 2074 "builtin-trace.c"
                                                                         ") ...\n",
    id, perf_evsel__name(evsel), ++n);
  }
  return 
# 2077 "builtin-trace.c" 3 4
        ((void *)0)
# 2077 "builtin-trace.c"
            ;
 }

 err = -
# 2080 "builtin-trace.c" 3 4
       22
# 2080 "builtin-trace.c"
             ;

 if (id > trace->sctbl->syscalls.max_id)
  goto out_cant_read;

 if ((trace->syscalls.table == 
# 2085 "builtin-trace.c" 3 4
                              ((void *)0) 
# 2085 "builtin-trace.c"
                                   || trace->syscalls.table[id].name == 
# 2085 "builtin-trace.c" 3 4
                                                                        ((void *)0)
# 2085 "builtin-trace.c"
                                                                            ) &&
     (err = trace__read_syscall_info(trace, id)) != 0)
  goto out_cant_read;

 if (trace->syscalls.table[id].name == 
# 2089 "builtin-trace.c" 3 4
                                      ((void *)0)
# 2089 "builtin-trace.c"
                                          ) {
  if (trace->syscalls.table[id].nonexistent)
   return 
# 2091 "builtin-trace.c" 3 4
         ((void *)0)
# 2091 "builtin-trace.c"
             ;
  goto out_cant_read;
 }

 return &trace->syscalls.table[id];

out_cant_read:
 if (verbose > 0) {
  char sbuf[128];
  fprintf(trace->output, "Problems reading syscall %d: %d (%s)", id, -err, str_error_r(-err, sbuf, sizeof(sbuf)));
  if (id <= trace->sctbl->syscalls.max_id && trace->syscalls.table[id].name != 
# 2101 "builtin-trace.c" 3 4
                                                                              ((void *)0)
# 2101 "builtin-trace.c"
                                                                                  )
   fprintf(trace->output, "(%s)", trace->syscalls.table[id].name);
  fputs(" information\n", trace->output);
 }
 return 
# 2105 "builtin-trace.c" 3 4
       ((void *)0)
# 2105 "builtin-trace.c"
           ;
}

struct syscall_stats {
 struct stats stats;
 u64 nr_failures;
 int max_errno;
 u32 *errnos;
};

static void thread__update_stats(struct thread *thread, struct thread_trace *ttrace,
     int id, struct perf_sample *sample, long err, 
# 2116 "builtin-trace.c" 3 4
                                                  _Bool 
# 2116 "builtin-trace.c"
                                                       errno_summary)
{
 struct int_node *inode;
 struct syscall_stats *stats;
 u64 duration = 0;

 inode = intlist__findnew(ttrace->syscall_stats, id);
 if (inode == 
# 2123 "builtin-trace.c" 3 4
             ((void *)0)
# 2123 "builtin-trace.c"
                 )
  return;

 stats = inode->priv;
 if (stats == 
# 2127 "builtin-trace.c" 3 4
             ((void *)0)
# 2127 "builtin-trace.c"
                 ) {
  stats = malloc(sizeof(*stats));
  if (stats == 
# 2129 "builtin-trace.c" 3 4
              ((void *)0)
# 2129 "builtin-trace.c"
                  )
   return;

  stats->nr_failures = 0;
  stats->max_errno = 0;
  stats->errnos = 
# 2134 "builtin-trace.c" 3 4
                    ((void *)0)
# 2134 "builtin-trace.c"
                        ;
  init_stats(&stats->stats);
  inode->priv = stats;
 }

 if (ttrace->entry_time && sample->time > ttrace->entry_time)
  duration = sample->time - ttrace->entry_time;

 update_stats(&stats->stats, duration);

 if (err < 0) {
  ++stats->nr_failures;

  if (!errno_summary)
   return;

  err = -err;
  if (err > stats->max_errno) {
   u32 *new_errnos = realloc(stats->errnos, err * sizeof(u32));

   if (new_errnos) {
    memset(new_errnos + stats->max_errno, 0, (err - stats->max_errno) * sizeof(u32));
   } else {
    eprintf(1, verbose, "Not enough memory for errno stats for thread \"%s\"(%d/%d), results will be incomplete\n", thread__comm_str(thread), thread->pid_, thread->tid)
                                                          ;
    return;
   }

   stats->errnos = new_errnos;
   stats->max_errno = err;
  }

  ++stats->errnos[err - 1];
 }
}

static int trace__printf_interrupted_entry(struct trace *trace)
{
 struct thread_trace *ttrace;
 size_t printed;
 int len;

 if (trace->failure_only || trace->current == 
# 2176 "builtin-trace.c" 3 4
                                             ((void *)0)
# 2176 "builtin-trace.c"
                                                 )
  return 0;

 ttrace = thread__priv(trace->current);

 if (!ttrace->entry_pending)
  return 0;

 printed = trace__fprintf_entry_head(trace, trace->current, 0, 
# 2184 "builtin-trace.c" 3 4
                                                               0
# 2184 "builtin-trace.c"
                                                                    , ttrace->entry_time, trace->output);
 printed += len = fprintf(trace->output, "%s)", ttrace->entry_str);

 if (len < trace->args_alignment - 4)
  printed += fprintf(trace->output, "%-*s", trace->args_alignment - 4 - len, " ");

 printed += fprintf(trace->output, " ...\n");

 ttrace->entry_pending = 
# 2192 "builtin-trace.c" 3 4
                        0
# 2192 "builtin-trace.c"
                             ;
 ++trace->nr_events_printed;

 return printed;
}

static int trace__fprintf_sample(struct trace *trace, struct evsel *evsel,
     struct perf_sample *sample, struct thread *thread)
{
 int printed = 0;

 if (trace->print_sample) {
  double ts = (double)sample->time / 1000000L;

  printed += fprintf(trace->output, "%22s %10.3f %s %d/%d [%d]\n",
       perf_evsel__name(evsel), ts,
       thread__comm_str(thread),
       sample->pid, sample->tid, sample->cpu);
 }

 return printed;
}

static void *syscall__augmented_args(struct syscall *sc, struct perf_sample *sample, int *augmented_args_size, int raw_augmented_args_size)
{
 void *augmented_args = 
# 2217 "builtin-trace.c" 3 4
                       ((void *)0)
# 2217 "builtin-trace.c"
                           ;
# 2232 "builtin-trace.c"
 int args_size = raw_augmented_args_size ?: sc->args_size;

 *augmented_args_size = sample->raw_size - args_size;
 if (*augmented_args_size > 0)
  augmented_args = sample->raw_data + args_size;

 return augmented_args;
}

static int trace__sys_enter(struct trace *trace, struct evsel *evsel,
       union perf_event *event __attribute__((unused)),
       struct perf_sample *sample)
{
 char *msg;
 void *args;
 int printed = 0;
 struct thread *thread;
 int id = ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->id.integer(&fields->id, sample); }), err = -1;
 int augmented_args_size = 0;
 void *augmented_args = 
# 2251 "builtin-trace.c" 3 4
                       ((void *)0)
# 2251 "builtin-trace.c"
                           ;
 struct syscall *sc = trace__syscall_info(trace, evsel, id);
 struct thread_trace *ttrace;

 if (sc == 
# 2255 "builtin-trace.c" 3 4
          ((void *)0)
# 2255 "builtin-trace.c"
              )
  return -1;

 thread = machine__findnew_thread(trace->host, sample->pid, sample->tid);
 ttrace = thread__trace(thread, trace->output);
 if (ttrace == 
# 2260 "builtin-trace.c" 3 4
              ((void *)0)
# 2260 "builtin-trace.c"
                  )
  goto out_put;

 trace__fprintf_sample(trace, evsel, sample, thread);

 args = ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->args.pointer(&fields->args, sample); });

 if (ttrace->entry_str == 
# 2267 "builtin-trace.c" 3 4
                         ((void *)0)
# 2267 "builtin-trace.c"
                             ) {
  ttrace->entry_str = malloc(trace__entry_str_size);
  if (!ttrace->entry_str)
   goto out_put;
 }

 if (!(trace->duration_filter || trace->summary_only || trace->min_stack))
  trace__printf_interrupted_entry(trace);
# 2285 "builtin-trace.c"
 if (evsel != trace->syscalls.events.sys_enter)
  augmented_args = syscall__augmented_args(sc, sample, &augmented_args_size, trace->raw_augmented_syscalls_args_size);
 ttrace->entry_time = sample->time;
 msg = ttrace->entry_str;
 printed += scnprintf(msg + printed, trace__entry_str_size - printed, "%s(", sc->name);

 printed += syscall__scnprintf_args(sc, msg + printed, trace__entry_str_size - printed,
        args, augmented_args, augmented_args_size, trace, thread);

 if (sc->is_exit) {
  if (!(trace->duration_filter || trace->summary_only || trace->failure_only || trace->min_stack)) {
   int alignment = 0;

   trace__fprintf_entry_head(trace, thread, 0, 
# 2298 "builtin-trace.c" 3 4
                                              0
# 2298 "builtin-trace.c"
                                                   , ttrace->entry_time, trace->output);
   printed = fprintf(trace->output, "%s)", ttrace->entry_str);
   if (trace->args_alignment > printed)
    alignment = trace->args_alignment - printed;
   fprintf(trace->output, "%*s= ?\n", alignment, " ");
  }
 } else {
  ttrace->entry_pending = 
# 2305 "builtin-trace.c" 3 4
                         1
# 2305 "builtin-trace.c"
                             ;

  ttrace->filename.pending_open = 
# 2307 "builtin-trace.c" 3 4
                                 0
# 2307 "builtin-trace.c"
                                      ;
 }

 if (trace->current != thread) {
  thread__put(trace->current);
  trace->current = thread__get(thread);
 }
 err = 0;
out_put:
 thread__put(thread);
 return err;
}

static int trace__fprintf_sys_enter(struct trace *trace, struct evsel *evsel,
        struct perf_sample *sample)
{
 struct thread_trace *ttrace;
 struct thread *thread;
 int id = ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->id.integer(&fields->id, sample); }), err = -1;
 struct syscall *sc = trace__syscall_info(trace, evsel, id);
 char msg[1024];
 void *args, *augmented_args = 
# 2328 "builtin-trace.c" 3 4
                              ((void *)0)
# 2328 "builtin-trace.c"
                                  ;
 int augmented_args_size;

 if (sc == 
# 2331 "builtin-trace.c" 3 4
          ((void *)0)
# 2331 "builtin-trace.c"
              )
  return -1;

 thread = machine__findnew_thread(trace->host, sample->pid, sample->tid);
 ttrace = thread__trace(thread, trace->output);




 if (ttrace == 
# 2340 "builtin-trace.c" 3 4
              ((void *)0)
# 2340 "builtin-trace.c"
                  )
  goto out_put;

 args = ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->args.pointer(&fields->args, sample); });
 augmented_args = syscall__augmented_args(sc, sample, &augmented_args_size, trace->raw_augmented_syscalls_args_size);
 syscall__scnprintf_args(sc, msg, sizeof(msg), args, augmented_args, augmented_args_size, trace, thread);
 fprintf(trace->output, "%s", msg);
 err = 0;
out_put:
 thread__put(thread);
 return err;
}

static int trace__resolve_callchain(struct trace *trace, struct evsel *evsel,
        struct perf_sample *sample,
        struct callchain_cursor *cursor)
{
 struct addr_location al;
 int max_stack = evsel->core.attr.sample_max_stack ?
   evsel->core.attr.sample_max_stack :
   trace->max_stack;
 int err;

 if (machine__resolve(trace->host, &al, sample) < 0)
  return -1;

 err = thread__resolve_callchain(al.thread, cursor, evsel, sample, 
# 2366 "builtin-trace.c" 3 4
                                                                  ((void *)0)
# 2366 "builtin-trace.c"
                                                                      , 
# 2366 "builtin-trace.c" 3 4
                                                                        ((void *)0)
# 2366 "builtin-trace.c"
                                                                            , max_stack);
 addr_location__put(&al);
 return err;
}

static int trace__fprintf_callchain(struct trace *trace, struct perf_sample *sample)
{

 const unsigned int print_opts = (1<<1) |
            (1<<2) |
            (1<<6);

 return sample__fprintf_callchain(sample, 38, print_opts, &callchain_cursor, symbol_conf.bt_stop_list, trace->output);
}

static const char *errno_to_name(struct evsel *evsel, int err)
{
 struct perf_env *env = perf_evsel__env(evsel);
 const char *arch_name = perf_env__arch(env);

 return arch_syscalls__strerrno(arch_name, err);
}

static int trace__sys_exit(struct trace *trace, struct evsel *evsel,
      union perf_event *event __attribute__((unused)),
      struct perf_sample *sample)
{
 long ret;
 u64 duration = 0;
 
# 2395 "builtin-trace.c" 3 4
_Bool 
# 2395 "builtin-trace.c"
     duration_calculated = 
# 2395 "builtin-trace.c" 3 4
                           0
# 2395 "builtin-trace.c"
                                ;
 struct thread *thread;
 int id = ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->id.integer(&fields->id, sample); }), err = -1, callchain_ret = 0, printed = 0;
 int alignment = trace->args_alignment;
 struct syscall *sc = trace__syscall_info(trace, evsel, id);
 struct thread_trace *ttrace;

 if (sc == 
# 2402 "builtin-trace.c" 3 4
          ((void *)0)
# 2402 "builtin-trace.c"
              )
  return -1;

 thread = machine__findnew_thread(trace->host, sample->pid, sample->tid);
 ttrace = thread__trace(thread, trace->output);
 if (ttrace == 
# 2407 "builtin-trace.c" 3 4
              ((void *)0)
# 2407 "builtin-trace.c"
                  )
  goto out_put;

 trace__fprintf_sample(trace, evsel, sample, thread);

 ret = ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->ret.integer(&fields->ret, sample); });

 if (trace->summary)
  thread__update_stats(thread, ttrace, id, sample, ret, trace->errno_summary);

 if (!trace->fd_path_disabled && sc->is_open && ret >= 0 && ttrace->filename.pending_open) {
  trace__set_fd_pathname(thread, ret, ttrace->filename.name);
  ttrace->filename.pending_open = 
# 2419 "builtin-trace.c" 3 4
                                 0
# 2419 "builtin-trace.c"
                                      ;
  ++trace->stats.vfs_getname;
 }

 if (ttrace->entry_time) {
  duration = sample->time - ttrace->entry_time;
  if (trace__filter_duration(trace, duration))
   goto out;
  duration_calculated = 
# 2427 "builtin-trace.c" 3 4
                       1
# 2427 "builtin-trace.c"
                           ;
 } else if (trace->duration_filter)
  goto out;

 if (sample->callchain) {
  callchain_ret = trace__resolve_callchain(trace, evsel, sample, &callchain_cursor);
  if (callchain_ret == 0) {
   if (callchain_cursor.nr < trace->min_stack)
    goto out;
   callchain_ret = 1;
  }
 }

 if (trace->summary_only || (ret >= 0 && trace->failure_only))
  goto out;

 trace__fprintf_entry_head(trace, thread, duration, duration_calculated, ttrace->entry_time, trace->output);

 if (ttrace->entry_pending) {
  printed = fprintf(trace->output, "%s", ttrace->entry_str);
 } else {
  printed += fprintf(trace->output, " ... [");
  color_fprintf(trace->output, "\033[33m", "continued");
  printed += 9;
  printed += fprintf(trace->output, "]: %s()", sc->name);
 }

 printed++;

 if (alignment > printed)
  alignment -= printed;
 else
  alignment = 0;

 fprintf(trace->output, ")%*s= ", alignment, " ");

 if (sc->fmt == 
# 2463 "builtin-trace.c" 3 4
               ((void *)0)
# 2463 "builtin-trace.c"
                   ) {
  if (ret < 0)
   goto errno_print;
signed_print:
  fprintf(trace->output, "%ld", ret);
 } else if (ret < 0) {
errno_print: {
  char bf[128];
  const char *emsg = str_error_r(-ret, bf, sizeof(bf)),
      *e = errno_to_name(evsel, -ret);

  fprintf(trace->output, "-1 %s (%s)", e, emsg);
 }
 } else if (ret == 0 && sc->fmt->timeout)
  fprintf(trace->output, "0 (Timeout)");
 else if (ttrace->ret_scnprintf) {
  char bf[1024];
  struct syscall_arg arg = {
   .val = ret,
   .thread = thread,
   .trace = trace,
  };
  ttrace->ret_scnprintf(bf, sizeof(bf), &arg);
  ttrace->ret_scnprintf = 
# 2486 "builtin-trace.c" 3 4
                         ((void *)0)
# 2486 "builtin-trace.c"
                             ;
  fprintf(trace->output, "%s", bf);
 } else if (sc->fmt->hexret)
  fprintf(trace->output, "%#lx", ret);
 else if (sc->fmt->errpid) {
  struct thread *child = machine__find_thread(trace->host, ret, ret);

  if (child != 
# 2493 "builtin-trace.c" 3 4
              ((void *)0)
# 2493 "builtin-trace.c"
                  ) {
   fprintf(trace->output, "%ld", ret);
   if (child->comm_set)
    fprintf(trace->output, " (%s)", thread__comm_str(child));
   thread__put(child);
  }
 } else
  goto signed_print;

 fputc('\n', trace->output);





 if (++trace->nr_events_printed == trace->max_events && trace->max_events != 
# 2508 "builtin-trace.c" 3 4
                                                                            (0x7fffffffffffffffL * 2UL + 1UL)
# 2508 "builtin-trace.c"
                                                                                     )
  interrupted = 
# 2509 "builtin-trace.c" 3 4
               1
# 2509 "builtin-trace.c"
                   ;

 if (callchain_ret > 0)
  trace__fprintf_callchain(trace, sample);
 else if (callchain_ret < 0)
  eprintf(0, verbose, "Problem processing %s callchain, skipping...\n", perf_evsel__name(evsel));
out:
 ttrace->entry_pending = 
# 2516 "builtin-trace.c" 3 4
                        0
# 2516 "builtin-trace.c"
                             ;
 err = 0;
out_put:
 thread__put(thread);
 return err;
}

static int trace__vfs_getname(struct trace *trace, struct evsel *evsel,
         union perf_event *event __attribute__((unused)),
         struct perf_sample *sample)
{
 struct thread *thread = machine__findnew_thread(trace->host, sample->pid, sample->tid);
 struct thread_trace *ttrace;
 size_t filename_len, entry_str_len, to_move;
 ssize_t remaining_space;
 char *pos;
 const char *filename = perf_evsel__rawptr(evsel, sample, "pathname");

 if (!thread)
  goto out;

 ttrace = thread__priv(thread);
 if (!ttrace)
  goto out_put;

 filename_len = strlen(filename);
 if (filename_len == 0)
  goto out_put;

 if (ttrace->filename.namelen < filename_len) {
  char *f = realloc(ttrace->filename.name, filename_len + 1);

  if (f == 
# 2548 "builtin-trace.c" 3 4
          ((void *)0)
# 2548 "builtin-trace.c"
              )
   goto out_put;

  ttrace->filename.namelen = filename_len;
  ttrace->filename.name = f;
 }

 strcpy(ttrace->filename.name, filename);
 ttrace->filename.pending_open = 
# 2556 "builtin-trace.c" 3 4
                                1
# 2556 "builtin-trace.c"
                                    ;

 if (!ttrace->filename.ptr)
  goto out_put;

 entry_str_len = strlen(ttrace->entry_str);
 remaining_space = trace__entry_str_size - entry_str_len - 1;
 if (remaining_space <= 0)
  goto out_put;

 if (filename_len > (size_t)remaining_space) {
  filename += filename_len - remaining_space;
  filename_len = remaining_space;
 }

 to_move = entry_str_len - ttrace->filename.entry_str_pos + 1;
 pos = ttrace->entry_str + ttrace->filename.entry_str_pos;
 memmove(pos + filename_len, pos, to_move);
 memcpy(pos, filename, filename_len);

 ttrace->filename.ptr = 0;
 ttrace->filename.entry_str_pos = 0;
out_put:
 thread__put(thread);
out:
 return 0;
}

static int trace__sched_stat_runtime(struct trace *trace, struct evsel *evsel,
         union perf_event *event __attribute__((unused)),
         struct perf_sample *sample)
{
        u64 runtime = perf_evsel__intval(evsel, sample, "runtime");
 double runtime_ms = (double)runtime / 1000000L;
 struct thread *thread = machine__findnew_thread(trace->host,
       sample->pid,
       sample->tid);
 struct thread_trace *ttrace = thread__trace(thread, trace->output);

 if (ttrace == 
# 2595 "builtin-trace.c" 3 4
              ((void *)0)
# 2595 "builtin-trace.c"
                  )
  goto out_dump;

 ttrace->runtime_ms += runtime_ms;
 trace->runtime_ms += runtime_ms;
out_put:
 thread__put(thread);
 return 0;

out_dump:
 fprintf(trace->output, "%s: comm=%s,pid=%u,runtime=%" 
# 2605 "builtin-trace.c" 3 4
                                                      "l" "u" 
# 2605 "builtin-trace.c"
                                                             ",vruntime=%" 
# 2605 "builtin-trace.c" 3 4
                                                                           "l" "u" 
# 2605 "builtin-trace.c"
                                                                                  ")\n",
        evsel->name,
        perf_evsel__strval(evsel, sample, "comm"),
        (pid_t)perf_evsel__intval(evsel, sample, "pid"),
        runtime,
        perf_evsel__intval(evsel, sample, "vruntime"));
 goto out_put;
}

static int bpf_output__printer(enum binary_printer_ops op,
          unsigned int val, void *extra __attribute__((unused)), FILE *fp)
{
 unsigned char ch = (unsigned char)val;

 switch (op) {
 case BINARY_PRINT_CHAR_DATA:
  return fprintf(fp, "%c", (((_ctype[(int)(unsigned char)(ch)])&(0x10|0x01|0x02|0x04|0x80)) != 0) ? ch : '.');
 case BINARY_PRINT_DATA_BEGIN:
 case BINARY_PRINT_LINE_BEGIN:
 case BINARY_PRINT_ADDR:
 case BINARY_PRINT_NUM_DATA:
 case BINARY_PRINT_NUM_PAD:
 case BINARY_PRINT_SEP:
 case BINARY_PRINT_CHAR_PAD:
 case BINARY_PRINT_LINE_END:
 case BINARY_PRINT_DATA_END:
 default:
  break;
 }

 return 0;
}

static void bpf_output__fprintf(struct trace *trace,
    struct perf_sample *sample)
{
 binary__fprintf(sample->raw_data, sample->raw_size, 8,
   bpf_output__printer, 
# 2642 "builtin-trace.c" 3 4
                       ((void *)0)
# 2642 "builtin-trace.c"
                           , trace->output);
 ++trace->nr_events_printed;
}

static size_t trace__fprintf_tp_fields(struct trace *trace, struct evsel *evsel, struct perf_sample *sample,
           struct thread *thread, void *augmented_args, int augmented_args_size)
{
 char bf[2048];
 size_t size = sizeof(bf);
 struct tep_format_field *field = evsel->tp_format->format.fields;
 struct syscall_arg_fmt *arg = __evsel__syscall_arg_fmt(evsel);
 size_t printed = 0;
 unsigned long val;
 u8 bit = 1;
 struct syscall_arg syscall_arg = {
  .augmented = {
   .size = augmented_args_size,
   .args = augmented_args,
  },
  .idx = 0,
  .mask = 0,
  .trace = trace,
  .thread = thread,
  .show_string_prefix = trace->show_string_prefix,
 };

 for (; field && arg; field = field->next, ++syscall_arg.idx, bit <<= 1, ++arg) {
  if (syscall_arg.mask & bit)
   continue;

  syscall_arg.len = 0;
  syscall_arg.fmt = arg;
  if (field->flags & TEP_FIELD_IS_ARRAY) {
   int offset = field->offset;

   if (field->flags & TEP_FIELD_IS_DYNAMIC) {
    offset = format_field__intval(field, sample, evsel->needs_swap);
    syscall_arg.len = offset >> 16;
    offset &= 0xffff;
   }

   val = (uintptr_t)(sample->raw_data + offset);
  } else
   val = format_field__intval(field, sample, evsel->needs_swap);




  val = syscall_arg_fmt__mask_val(arg, &syscall_arg, val);






  if (val == 0 &&
      !trace->show_zeros &&
      !((arg->show_zero ||
         arg->scnprintf == syscall_arg__scnprintf_strarray ||
         arg->scnprintf == syscall_arg__scnprintf_strarrays) &&
        arg->parm))
   continue;

  printed += scnprintf(bf + printed, size - printed, "%s", printed ? ", " : "");





  if (1 || trace->show_arg_names)
   printed += scnprintf(bf + printed, size - printed, "%s: ", field->name);

  printed += syscall_arg_fmt__scnprintf_val(arg, bf + printed, size - printed, &syscall_arg, val);
 }

 return printed + fprintf(trace->output, "%s", bf);
}

static int trace__event_handler(struct trace *trace, struct evsel *evsel,
    union perf_event *event __attribute__((unused)),
    struct perf_sample *sample)
{
 struct thread *thread;
 int callchain_ret = 0;






 if (evsel->disabled)
  return 0;

 thread = machine__findnew_thread(trace->host, sample->pid, sample->tid);

 if (sample->callchain) {
  callchain_ret = trace__resolve_callchain(trace, evsel, sample, &callchain_cursor);
  if (callchain_ret == 0) {
   if (callchain_cursor.nr < trace->min_stack)
    goto out;
   callchain_ret = 1;
  }
 }

 trace__printf_interrupted_entry(trace);
 trace__fprintf_tstamp(trace, sample->time, trace->output);

 if (trace->trace_syscalls && trace->show_duration)
  fprintf(trace->output, "(         ): ");

 if (thread)
  trace__fprintf_comm_tid(trace, thread, trace->output);

 if (evsel == trace->syscalls.events.augmented) {
  int id = ({ struct syscall_tp *fields = __evsel__syscall_tp(evsel); fields->id.integer(&fields->id, sample); });
  struct syscall *sc = trace__syscall_info(trace, evsel, id);

  if (sc) {
   fprintf(trace->output, "%s(", sc->name);
   trace__fprintf_sys_enter(trace, evsel, sample);
   fputc(')', trace->output);
   goto newline;
  }






 }

 fprintf(trace->output, "%s(", evsel->name);

 if (perf_evsel__is_bpf_output(evsel)) {
  bpf_output__fprintf(trace, sample);
 } else if (evsel->tp_format) {
  if (
# 2778 "builtin-trace.c" 3 4
     (__extension__ (__builtin_constant_p (
# 2778 "builtin-trace.c"
     10
# 2778 "builtin-trace.c" 3 4
     ) && ((__builtin_constant_p (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) && strlen (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) < ((size_t) (
# 2778 "builtin-trace.c"
     10
# 2778 "builtin-trace.c" 3 4
     ))) || (__builtin_constant_p (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) && strlen (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) < ((size_t) (
# 2778 "builtin-trace.c"
     10
# 2778 "builtin-trace.c" 3 4
     )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) && __builtin_constant_p (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ), __s2_len = __builtin_strlen (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ), (!((size_t)(const void *)((
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     , 
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) : (__builtin_constant_p (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     , 
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     , 
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     , 
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     )))); }) : strncmp (
# 2778 "builtin-trace.c"
     evsel->tp_format->name
# 2778 "builtin-trace.c" 3 4
     , 
# 2778 "builtin-trace.c"
     "sys_enter_"
# 2778 "builtin-trace.c" 3 4
     , 
# 2778 "builtin-trace.c"
     10
# 2778 "builtin-trace.c" 3 4
     ))) 
# 2778 "builtin-trace.c"
                                                       ||
      trace__fprintf_sys_enter(trace, evsel, sample)) {
   if (trace->libtraceevent_print) {
    event_format__fprintf(evsel->tp_format, sample->cpu,
            sample->raw_data, sample->raw_size,
            trace->output);
   } else {
    trace__fprintf_tp_fields(trace, evsel, sample, thread, 
# 2785 "builtin-trace.c" 3 4
                                                          ((void *)0)
# 2785 "builtin-trace.c"
                                                              , 0);
   }
  }
 }

newline:
 fprintf(trace->output, ")\n");

 if (callchain_ret > 0)
  trace__fprintf_callchain(trace, sample);
 else if (callchain_ret < 0)
  eprintf(0, verbose, "Problem processing %s callchain, skipping...\n", perf_evsel__name(evsel));

 ++trace->nr_events_printed;

 if (evsel->max_events != 
# 2800 "builtin-trace.c" 3 4
                         (0x7fffffffffffffffL * 2UL + 1UL) 
# 2800 "builtin-trace.c"
                                   && ++evsel->nr_events_printed == evsel->max_events) {
  evsel__disable(evsel);
  evsel__close(evsel);
 }
out:
 thread__put(thread);
 return 0;
}

static void print_location(FILE *f, struct perf_sample *sample,
      struct addr_location *al,
      
# 2811 "builtin-trace.c" 3 4
     _Bool 
# 2811 "builtin-trace.c"
          print_dso, 
# 2811 "builtin-trace.c" 3 4
                     _Bool 
# 2811 "builtin-trace.c"
                          print_sym)
{

 if ((verbose > 0 || print_dso) && al->map)
  fprintf(f, "%s@", al->map->dso->long_name);

 if ((verbose > 0 || print_sym) && al->sym)
  fprintf(f, "%s+0x%" 
# 2818 "builtin-trace.c" 3 4
                     "l" "x"
# 2818 "builtin-trace.c"
                           , al->sym->name,
   al->addr - al->sym->start);
 else if (al->map)
  fprintf(f, "0x%" 
# 2821 "builtin-trace.c" 3 4
                  "l" "x"
# 2821 "builtin-trace.c"
                        , al->addr);
 else
  fprintf(f, "0x%" 
# 2823 "builtin-trace.c" 3 4
                  "l" "x"
# 2823 "builtin-trace.c"
                        , sample->addr);
}

static int trace__pgfault(struct trace *trace,
     struct evsel *evsel,
     union perf_event *event __attribute__((unused)),
     struct perf_sample *sample)
{
 struct thread *thread;
 struct addr_location al;
 char map_type = 'd';
 struct thread_trace *ttrace;
 int err = -1;
 int callchain_ret = 0;

 thread = machine__findnew_thread(trace->host, sample->pid, sample->tid);

 if (sample->callchain) {
  callchain_ret = trace__resolve_callchain(trace, evsel, sample, &callchain_cursor);
  if (callchain_ret == 0) {
   if (callchain_cursor.nr < trace->min_stack)
    goto out_put;
   callchain_ret = 1;
  }
 }

 ttrace = thread__trace(thread, trace->output);
 if (ttrace == 
# 2850 "builtin-trace.c" 3 4
              ((void *)0)
# 2850 "builtin-trace.c"
                  )
  goto out_put;

 if (evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ)
  ttrace->pfmaj++;
 else
  ttrace->pfmin++;

 if (trace->summary_only)
  goto out;

 thread__find_symbol(thread, sample->cpumode, sample->ip, &al);

 trace__fprintf_entry_head(trace, thread, 0, 
# 2863 "builtin-trace.c" 3 4
                                            1
# 2863 "builtin-trace.c"
                                                , sample->time, trace->output);

 fprintf(trace->output, "%sfault [",
  evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ ?
  "maj" : "min");

 print_location(trace->output, sample, &al, 
# 2869 "builtin-trace.c" 3 4
                                           0
# 2869 "builtin-trace.c"
                                                , 
# 2869 "builtin-trace.c" 3 4
                                                  1
# 2869 "builtin-trace.c"
                                                      );

 fprintf(trace->output, "] => ");

 thread__find_symbol(thread, sample->cpumode, sample->addr, &al);

 if (!al.map) {
  thread__find_symbol(thread, sample->cpumode, sample->addr, &al);

  if (al.map)
   map_type = 'x';
  else
   map_type = '?';
 }

 print_location(trace->output, sample, &al, 
# 2884 "builtin-trace.c" 3 4
                                           1
# 2884 "builtin-trace.c"
                                               , 
# 2884 "builtin-trace.c" 3 4
                                                 0
# 2884 "builtin-trace.c"
                                                      );

 fprintf(trace->output, " (%c%c)\n", map_type, al.level);

 if (callchain_ret > 0)
  trace__fprintf_callchain(trace, sample);
 else if (callchain_ret < 0)
  eprintf(0, verbose, "Problem processing %s callchain, skipping...\n", perf_evsel__name(evsel));

 ++trace->nr_events_printed;
out:
 err = 0;
out_put:
 thread__put(thread);
 return err;
}

static void trace__set_base_time(struct trace *trace,
     struct evsel *evsel,
     struct perf_sample *sample)
{
# 2913 "builtin-trace.c"
 if (trace->base_time == 0 && !trace->full_time &&
     (evsel->core.attr.sample_type & PERF_SAMPLE_TIME))
  trace->base_time = sample->time;
}

static int trace__process_sample(struct perf_tool *tool,
     union perf_event *event,
     struct perf_sample *sample,
     struct evsel *evsel,
     struct machine *machine __attribute__((unused)))
{
 struct trace *trace = ({ const typeof(((struct trace *)0)->tool) * __mptr = (tool); (struct trace *)((char *)__mptr - 
# 2924 "builtin-trace.c" 3 4
                      __builtin_offsetof (
# 2924 "builtin-trace.c"
                      struct trace
# 2924 "builtin-trace.c" 3 4
                      , 
# 2924 "builtin-trace.c"
                      tool
# 2924 "builtin-trace.c" 3 4
                      )
# 2924 "builtin-trace.c"
                      ); });
 struct thread *thread;
 int err = 0;

 tracepoint_handler handler = evsel->handler;

 thread = machine__findnew_thread(trace->host, sample->pid, sample->tid);
 if (thread && thread__is_filtered(thread))
  goto out;

 trace__set_base_time(trace, evsel, sample);

 if (handler) {
  ++trace->nr_events;
  handler(trace, evsel, event, sample);
 }
out:
 thread__put(thread);
 return err;
}

static int trace__record(struct trace *trace, int argc, const char **argv)
{
 unsigned int rec_argc, i, j;
 const char **rec_argv;
 const char * const record_args[] = {
  "record",
  "-R",
  "-m", "1024",
  "-c", "1",
 };
 pid_t pid = getpid();
 char *filter = asprintf__tp_filter_pids(1, &pid);
 const char * const sc_args[] = { "-e", };
 unsigned int sc_args_nr = (sizeof(sc_args) / sizeof((sc_args)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((sc_args)), typeof(&(sc_args)[0]))); })));
 const char * const majpf_args[] = { "-e", "major-faults" };
 unsigned int majpf_args_nr = (sizeof(majpf_args) / sizeof((majpf_args)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((majpf_args)), typeof(&(majpf_args)[0]))); })));
 const char * const minpf_args[] = { "-e", "minor-faults" };
 unsigned int minpf_args_nr = (sizeof(minpf_args) / sizeof((minpf_args)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((minpf_args)), typeof(&(minpf_args)[0]))); })));
 int err = -1;


 rec_argc = (sizeof(record_args) / sizeof((record_args)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((record_args)), typeof(&(record_args)[0]))); }))) + sc_args_nr + 3 +
  majpf_args_nr + minpf_args_nr + argc;
 rec_argv = calloc(rec_argc + 1, sizeof(char *));

 if (rec_argv == 
# 2970 "builtin-trace.c" 3 4
                ((void *)0) 
# 2970 "builtin-trace.c"
                     || filter == 
# 2970 "builtin-trace.c" 3 4
                                  ((void *)0)
# 2970 "builtin-trace.c"
                                      )
  goto out_free;

 j = 0;
 for (i = 0; i < (sizeof(record_args) / sizeof((record_args)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((record_args)), typeof(&(record_args)[0]))); }))); i++)
  rec_argv[j++] = record_args[i];

 if (trace->trace_syscalls) {
  for (i = 0; i < sc_args_nr; i++)
   rec_argv[j++] = sc_args[i];


  if (is_valid_tracepoint("raw_syscalls:sys_enter"))
   rec_argv[j++] = "raw_syscalls:sys_enter,raw_syscalls:sys_exit";
  else if (is_valid_tracepoint("syscalls:sys_enter"))
   rec_argv[j++] = "syscalls:sys_enter,syscalls:sys_exit";
  else {
   eprintf(0, verbose, "Neither raw_syscalls nor syscalls events exist.\n");
   goto out_free;
  }
 }

 rec_argv[j++] = "--filter";
 rec_argv[j++] = filter;

 if (trace->trace_pgfaults & (1 << 0))
  for (i = 0; i < majpf_args_nr; i++)
   rec_argv[j++] = majpf_args[i];

 if (trace->trace_pgfaults & (1 << 1))
  for (i = 0; i < minpf_args_nr; i++)
   rec_argv[j++] = minpf_args[i];

 for (i = 0; i < (unsigned int)argc; i++)
  rec_argv[j++] = argv[i];

 err = cmd_record(j, rec_argv);
out_free:
 free(filter);
 free(rec_argv);
 return err;
}

static size_t trace__fprintf_thread_summary(struct trace *trace, FILE *fp);

static 
# 3015 "builtin-trace.c" 3 4
      _Bool 
# 3015 "builtin-trace.c"
           evlist__add_vfs_getname(struct evlist *evlist)
{
 
# 3017 "builtin-trace.c" 3 4
_Bool 
# 3017 "builtin-trace.c"
     found = 
# 3017 "builtin-trace.c" 3 4
             0
# 3017 "builtin-trace.c"
                  ;
 struct evsel *evsel, *tmp;
 struct parse_events_error err;
 int ret;

 bzero(&err, sizeof(err));
 ret = parse_events(evlist, "probe:vfs_getname*", &err);
 if (ret) {
  free(err.str);
  free(err.help);
  free(err.first_str);
  free(err.first_help);
  return 
# 3029 "builtin-trace.c" 3 4
        0
# 3029 "builtin-trace.c"
             ;
 }

 for (tmp = ({ const typeof(((typeof(*tmp) *)0)->core.node) * __mptr = ((&(evlist)->core.entries)->next); (typeof(*tmp) *)((char *)__mptr - 
# 3032 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3032 "builtin-trace.c"
typeof(*tmp)
# 3032 "builtin-trace.c" 3 4
, 
# 3032 "builtin-trace.c"
core.node
# 3032 "builtin-trace.c" 3 4
)
# 3032 "builtin-trace.c"
); }), evsel = ({ const typeof(((typeof(*(tmp)) *)0)->core.node) * __mptr = ((tmp)->core.node.next); (typeof(*(tmp)) *)((char *)__mptr - 
# 3032 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3032 "builtin-trace.c"
typeof(*(tmp))
# 3032 "builtin-trace.c" 3 4
, 
# 3032 "builtin-trace.c"
core.node
# 3032 "builtin-trace.c" 3 4
)
# 3032 "builtin-trace.c"
); }); &tmp->core.node != (&(evlist)->core.entries); tmp = evsel, evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 3032 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3032 "builtin-trace.c"
typeof(*(evsel))
# 3032 "builtin-trace.c" 3 4
, 
# 3032 "builtin-trace.c"
core.node
# 3032 "builtin-trace.c" 3 4
)
# 3032 "builtin-trace.c"
); })) {
  if (!strstarts(perf_evsel__name(evsel), "probe:vfs_getname"))
   continue;

  if (perf_evsel__field(evsel, "pathname")) {
   evsel->handler = trace__vfs_getname;
   found = 
# 3038 "builtin-trace.c" 3 4
          1
# 3038 "builtin-trace.c"
              ;
   continue;
  }

  list_del_init(&evsel->core.node);
  evsel->evlist = 
# 3043 "builtin-trace.c" 3 4
                 ((void *)0)
# 3043 "builtin-trace.c"
                     ;
  evsel__delete(evsel);
 }

 return found;
}

static struct evsel *perf_evsel__new_pgfault(u64 config)
{
 struct evsel *evsel;
 struct perf_event_attr attr = {
  .type = PERF_TYPE_SOFTWARE,
  .mmap_data = 1,
 };

 attr.config = config;
 attr.sample_period = 1;

 event_attr_init(&attr);

 evsel = evsel__new(&attr);
 if (evsel)
  evsel->handler = trace__pgfault;

 return evsel;
}

static void trace__handle_event(struct trace *trace, union perf_event *event, struct perf_sample *sample)
{
 const u32 type = event->header.type;
 struct evsel *evsel;

 if (type != PERF_RECORD_SAMPLE) {
  trace__process_event(trace, trace->host, event, sample);
  return;
 }

 evsel = perf_evlist__id2evsel(trace->evlist, sample->id);
 if (evsel == 
# 3081 "builtin-trace.c" 3 4
             ((void *)0)
# 3081 "builtin-trace.c"
                 ) {
  fprintf(trace->output, "Unknown tp ID %" 
# 3082 "builtin-trace.c" 3 4
                                          "l" "u" 
# 3082 "builtin-trace.c"
                                                 ", skipping...\n", sample->id);
  return;
 }

 if (evswitch__discard(&trace->evswitch, evsel))
  return;

 trace__set_base_time(trace, evsel, sample);

 if (evsel->core.attr.type == PERF_TYPE_TRACEPOINT &&
     sample->raw_data == 
# 3092 "builtin-trace.c" 3 4
                        ((void *)0)
# 3092 "builtin-trace.c"
                            ) {
  fprintf(trace->output, "%s sample with no payload for tid: %d, cpu %d, raw_size=%d, skipping...\n",
         perf_evsel__name(evsel), sample->tid,
         sample->cpu, sample->raw_size);
 } else {
  tracepoint_handler handler = evsel->handler;
  handler(trace, evsel, event, sample);
 }

 if (trace->nr_events_printed >= trace->max_events && trace->max_events != 
# 3101 "builtin-trace.c" 3 4
                                                                          (0x7fffffffffffffffL * 2UL + 1UL)
# 3101 "builtin-trace.c"
                                                                                   )
  interrupted = 
# 3102 "builtin-trace.c" 3 4
               1
# 3102 "builtin-trace.c"
                   ;
}

static int trace__add_syscall_newtp(struct trace *trace)
{
 int ret = -1;
 struct evlist *evlist = trace->evlist;
 struct evsel *sys_enter, *sys_exit;

 sys_enter = perf_evsel__raw_syscall_newtp("sys_enter", trace__sys_enter);
 if (sys_enter == 
# 3112 "builtin-trace.c" 3 4
                 ((void *)0)
# 3112 "builtin-trace.c"
                     )
  goto out;

 if (({ struct syscall_tp *sc = __evsel__syscall_tp(sys_enter); perf_evsel__init_tp_ptr_field(sys_enter, &sc->args, "args"); }))
  goto out_delete_sys_enter;

 sys_exit = perf_evsel__raw_syscall_newtp("sys_exit", trace__sys_exit);
 if (sys_exit == 
# 3119 "builtin-trace.c" 3 4
                ((void *)0)
# 3119 "builtin-trace.c"
                    )
  goto out_delete_sys_enter;

 if (({ struct syscall_tp *sc = __evsel__syscall_tp(sys_exit); perf_evsel__init_tp_uint_field(sys_exit, &sc->ret, "ret"); }))
  goto out_delete_sys_exit;

 perf_evsel__config_callchain(sys_enter, &trace->opts, &callchain_param);
 perf_evsel__config_callchain(sys_exit, &trace->opts, &callchain_param);

 evlist__add(evlist, sys_enter);
 evlist__add(evlist, sys_exit);

 if (callchain_param.enabled && !trace->kernel_syscallchains) {





  sys_exit->core.attr.exclude_callchain_kernel = 1;
 }

 trace->syscalls.events.sys_enter = sys_enter;
 trace->syscalls.events.sys_exit = sys_exit;

 ret = 0;
out:
 return ret;

out_delete_sys_exit:
 evsel__delete_priv(sys_exit);
out_delete_sys_enter:
 evsel__delete_priv(sys_enter);
 goto out;
}

static int trace__set_ev_qualifier_tp_filter(struct trace *trace)
{
 int err = -1;
 struct evsel *sys_exit;
 char *filter = asprintf_expr_inout_ints("id", !trace->not_ev_qualifier,
      trace->ev_qualifier_ids.nr,
      trace->ev_qualifier_ids.entries);

 if (filter == 
# 3162 "builtin-trace.c" 3 4
              ((void *)0)
# 3162 "builtin-trace.c"
                  )
  goto out_enomem;

 if (!perf_evsel__append_tp_filter(trace->syscalls.events.sys_enter,
       filter)) {
  sys_exit = trace->syscalls.events.sys_exit;
  err = perf_evsel__append_tp_filter(sys_exit, filter);
 }

 free(filter);
out:
 return err;
out_enomem:
 
# 3175 "builtin-trace.c" 3 4
(*__errno_location ()) 
# 3175 "builtin-trace.c"
      = 
# 3175 "builtin-trace.c" 3 4
        12
# 3175 "builtin-trace.c"
              ;
 goto out;
}


static struct bpf_program *trace__find_bpf_program_by_title(struct trace *trace, const char *name)
{
 if (trace->bpf_obj == 
# 3182 "builtin-trace.c" 3 4
                      ((void *)0)
# 3182 "builtin-trace.c"
                          )
  return 
# 3183 "builtin-trace.c" 3 4
        ((void *)0)
# 3183 "builtin-trace.c"
            ;

 return bpf_object__find_program_by_title(trace->bpf_obj, name);
}

static struct bpf_program *trace__find_syscall_bpf_prog(struct trace *trace, struct syscall *sc,
       const char *prog_name, const char *type)
{
 struct bpf_program *prog;

 if (prog_name == 
# 3193 "builtin-trace.c" 3 4
                 ((void *)0)
# 3193 "builtin-trace.c"
                     ) {
  char default_prog_name[256];
  scnprintf(default_prog_name, sizeof(default_prog_name), "!syscalls:sys_%s_%s", type, sc->name);
  prog = trace__find_bpf_program_by_title(trace, default_prog_name);
  if (prog != 
# 3197 "builtin-trace.c" 3 4
             ((void *)0)
# 3197 "builtin-trace.c"
                 )
   goto out_found;
  if (sc->fmt && sc->fmt->alias) {
   scnprintf(default_prog_name, sizeof(default_prog_name), "!syscalls:sys_%s_%s", type, sc->fmt->alias);
   prog = trace__find_bpf_program_by_title(trace, default_prog_name);
   if (prog != 
# 3202 "builtin-trace.c" 3 4
              ((void *)0)
# 3202 "builtin-trace.c"
                  )
    goto out_found;
  }
  goto out_unaugmented;
 }

 prog = trace__find_bpf_program_by_title(trace, prog_name);

 if (prog != 
# 3210 "builtin-trace.c" 3 4
            ((void *)0)
# 3210 "builtin-trace.c"
                ) {
out_found:
  return prog;
 }

 eprintf(1, verbose, "Couldn't find BPF prog \"%s\" to associate with syscalls:sys_%s_%s, not augmenting it\n", prog_name, type, sc->name)
                             ;
out_unaugmented:
 return trace->syscalls.unaugmented_prog;
}

static void trace__init_syscall_bpf_progs(struct trace *trace, int id)
{
 struct syscall *sc = trace__syscall_info(trace, 
# 3223 "builtin-trace.c" 3 4
                                                ((void *)0)
# 3223 "builtin-trace.c"
                                                    , id);

 if (sc == 
# 3225 "builtin-trace.c" 3 4
          ((void *)0)
# 3225 "builtin-trace.c"
              )
  return;

 sc->bpf_prog.sys_enter = trace__find_syscall_bpf_prog(trace, sc, sc->fmt ? sc->fmt->bpf_prog_name.sys_enter : 
# 3228 "builtin-trace.c" 3 4
                                                                                                              ((void *)0)
# 3228 "builtin-trace.c"
                                                                                                                  , "enter");
 sc->bpf_prog.sys_exit = trace__find_syscall_bpf_prog(trace, sc, sc->fmt ? sc->fmt->bpf_prog_name.sys_exit : 
# 3229 "builtin-trace.c" 3 4
                                                                                                              ((void *)0)
# 3229 "builtin-trace.c"
                                                                                                                  , "exit");
}

static int trace__bpf_prog_sys_enter_fd(struct trace *trace, int id)
{
 struct syscall *sc = trace__syscall_info(trace, 
# 3234 "builtin-trace.c" 3 4
                                                ((void *)0)
# 3234 "builtin-trace.c"
                                                    , id);
 return sc ? bpf_program__fd(sc->bpf_prog.sys_enter) : bpf_program__fd(trace->syscalls.unaugmented_prog);
}

static int trace__bpf_prog_sys_exit_fd(struct trace *trace, int id)
{
 struct syscall *sc = trace__syscall_info(trace, 
# 3240 "builtin-trace.c" 3 4
                                                ((void *)0)
# 3240 "builtin-trace.c"
                                                    , id);
 return sc ? bpf_program__fd(sc->bpf_prog.sys_exit) : bpf_program__fd(trace->syscalls.unaugmented_prog);
}

static void trace__init_bpf_map_syscall_args(struct trace *trace, int id, struct bpf_map_syscall_entry *entry)
{
 struct syscall *sc = trace__syscall_info(trace, 
# 3246 "builtin-trace.c" 3 4
                                                ((void *)0)
# 3246 "builtin-trace.c"
                                                    , id);
 int arg = 0;

 if (sc == 
# 3249 "builtin-trace.c" 3 4
          ((void *)0)
# 3249 "builtin-trace.c"
              )
  goto out;

 for (; arg < sc->nr_args; ++arg) {
  entry->string_args_len[arg] = 0;
  if (sc->arg_fmt[arg].scnprintf == syscall_arg__scnprintf_filename) {

   entry->string_args_len[arg] = 
# 3256 "builtin-trace.c" 3 4
                                4096
# 3256 "builtin-trace.c"
                                        ;
  }
 }
out:
 for (; arg < 6; ++arg)
  entry->string_args_len[arg] = 0;
}
static int trace__set_ev_qualifier_bpf_filter(struct trace *trace)
{
 int fd = bpf_map__fd(trace->syscalls.map);
 struct bpf_map_syscall_entry value = {
  .enabled = !trace->not_ev_qualifier,
 };
 int err = 0;
 size_t i;

 for (i = 0; i < trace->ev_qualifier_ids.nr; ++i) {
  int key = trace->ev_qualifier_ids.entries[i];

  if (value.enabled) {
   trace__init_bpf_map_syscall_args(trace, key, &value);
   trace__init_syscall_bpf_progs(trace, key);
  }

  err = bpf_map_update_elem(fd, &key, &value, 2);
  if (err)
   break;
 }

 return err;
}

static int __trace__init_syscalls_bpf_map(struct trace *trace, 
# 3288 "builtin-trace.c" 3 4
                                                              _Bool 
# 3288 "builtin-trace.c"
                                                                   enabled)
{
 int fd = bpf_map__fd(trace->syscalls.map);
 struct bpf_map_syscall_entry value = {
  .enabled = enabled,
 };
 int err = 0, key;

 for (key = 0; key < trace->sctbl->syscalls.nr_entries; ++key) {
  if (enabled)
   trace__init_bpf_map_syscall_args(trace, key, &value);

  err = bpf_map_update_elem(fd, &key, &value, 0);
  if (err)
   break;
 }

 return err;
}

static int trace__init_syscalls_bpf_map(struct trace *trace)
{
 
# 3310 "builtin-trace.c" 3 4
_Bool 
# 3310 "builtin-trace.c"
     enabled = 
# 3310 "builtin-trace.c" 3 4
               1
# 3310 "builtin-trace.c"
                   ;

 if (trace->ev_qualifier_ids.nr)
  enabled = trace->not_ev_qualifier;

 return __trace__init_syscalls_bpf_map(trace, enabled);
}

static struct bpf_program *trace__find_usable_bpf_prog_entry(struct trace *trace, struct syscall *sc)
{
 struct tep_format_field *field, *candidate_field;
 int id;




 for (field = sc->args; field; field = field->next) {
  if (field->flags & TEP_FIELD_IS_POINTER)
   goto try_to_find_pair;
 }

 return 
# 3331 "builtin-trace.c" 3 4
       ((void *)0)
# 3331 "builtin-trace.c"
           ;

try_to_find_pair:
 for (id = 0; id < trace->sctbl->syscalls.nr_entries; ++id) {
  struct syscall *pair = trace__syscall_info(trace, 
# 3335 "builtin-trace.c" 3 4
                                                   ((void *)0)
# 3335 "builtin-trace.c"
                                                       , id);
  struct bpf_program *pair_prog;
  
# 3337 "builtin-trace.c" 3 4
 _Bool 
# 3337 "builtin-trace.c"
      is_candidate = 
# 3337 "builtin-trace.c" 3 4
                     0
# 3337 "builtin-trace.c"
                          ;

  if (pair == 
# 3339 "builtin-trace.c" 3 4
             ((void *)0) 
# 3339 "builtin-trace.c"
                  || pair == sc ||
      pair->bpf_prog.sys_enter == trace->syscalls.unaugmented_prog)
   continue;

  for (field = sc->args, candidate_field = pair->args;
       field && candidate_field; field = field->next, candidate_field = candidate_field->next) {
   
# 3345 "builtin-trace.c" 3 4
  _Bool 
# 3345 "builtin-trace.c"
       is_pointer = field->flags & TEP_FIELD_IS_POINTER,
        candidate_is_pointer = candidate_field->flags & TEP_FIELD_IS_POINTER;

   if (is_pointer) {
          if (!candidate_is_pointer) {

     continue;
          }
   } else {
    if (candidate_is_pointer) {

     goto next_candidate;
    }
    continue;
   }

   if (
# 3361 "builtin-trace.c" 3 4
      __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) && __builtin_constant_p (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) && (__s1_len = __builtin_strlen (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ), __s2_len = __builtin_strlen (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ), (!((size_t)(const void *)((
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      , 
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) : (__builtin_constant_p (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) == 1) && (__s1_len = __builtin_strlen (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ), __s1_len < 4) ? (__builtin_constant_p (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      , 
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) == 1) && (__s2_len = __builtin_strlen (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ), __s2_len < 4) ? (__builtin_constant_p (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      , 
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 3361 "builtin-trace.c"
      field->type
# 3361 "builtin-trace.c" 3 4
      , 
# 3361 "builtin-trace.c"
      candidate_field->type
# 3361 "builtin-trace.c" 3 4
      )))); })
# 3361 "builtin-trace.c"
                                                )
    goto next_candidate;

   is_candidate = 
# 3364 "builtin-trace.c" 3 4
                 1
# 3364 "builtin-trace.c"
                     ;
  }

  if (!is_candidate)
   goto next_candidate;






  if (candidate_field) {
   for (candidate_field = candidate_field->next; candidate_field; candidate_field = candidate_field->next)
    if (candidate_field->flags & TEP_FIELD_IS_POINTER)
     goto next_candidate;
  }

  pair_prog = pair->bpf_prog.sys_enter;
# 3391 "builtin-trace.c"
  if (pair_prog == 
# 3391 "builtin-trace.c" 3 4
                  ((void *)0)
# 3391 "builtin-trace.c"
                      ) {
   pair_prog = trace__find_syscall_bpf_prog(trace, pair, pair->fmt ? pair->fmt->bpf_prog_name.sys_enter : 
# 3392 "builtin-trace.c" 3 4
                                                                                                         ((void *)0)
# 3392 "builtin-trace.c"
                                                                                                             , "enter");
   if (pair_prog == trace->syscalls.unaugmented_prog)
    goto next_candidate;
  }

  eprintf(1, verbose, "Reusing \"%s\" BPF sys_enter augmenter for \"%s\"\n", pair->name, sc->name);
  return pair_prog;
 next_candidate:
  continue;
 }

 return 
# 3403 "builtin-trace.c" 3 4
       ((void *)0)
# 3403 "builtin-trace.c"
           ;
}

static int trace__init_syscalls_bpf_prog_array_maps(struct trace *trace)
{
 int map_enter_fd = bpf_map__fd(trace->syscalls.prog_array.sys_enter),
     map_exit_fd = bpf_map__fd(trace->syscalls.prog_array.sys_exit);
 int err = 0, key;

 for (key = 0; key < trace->sctbl->syscalls.nr_entries; ++key) {
  int prog_fd;

  if (!trace__syscall_enabled(trace, key))
   continue;

  trace__init_syscall_bpf_progs(trace, key);


  prog_fd = trace__bpf_prog_sys_enter_fd(trace, key);
  err = bpf_map_update_elem(map_enter_fd, &key, &prog_fd, 0);
  if (err)
   break;
  prog_fd = trace__bpf_prog_sys_exit_fd(trace, key);
  err = bpf_map_update_elem(map_exit_fd, &key, &prog_fd, 0);
  if (err)
   break;
 }
# 3459 "builtin-trace.c"
 for (key = 0; key < trace->sctbl->syscalls.nr_entries; ++key) {
  struct syscall *sc = trace__syscall_info(trace, 
# 3460 "builtin-trace.c" 3 4
                                                 ((void *)0)
# 3460 "builtin-trace.c"
                                                     , key);
  struct bpf_program *pair_prog;
  int prog_fd;

  if (sc == 
# 3464 "builtin-trace.c" 3 4
           ((void *)0) 
# 3464 "builtin-trace.c"
                || sc->bpf_prog.sys_enter == 
# 3464 "builtin-trace.c" 3 4
                                             ((void *)0)
# 3464 "builtin-trace.c"
                                                 )
   continue;





  if (sc->bpf_prog.sys_enter != trace->syscalls.unaugmented_prog)
   continue;





  pair_prog = trace__find_usable_bpf_prog_entry(trace, sc);
  if (pair_prog == 
# 3479 "builtin-trace.c" 3 4
                  ((void *)0)
# 3479 "builtin-trace.c"
                      )
   continue;

  sc->bpf_prog.sys_enter = pair_prog;





  prog_fd = bpf_program__fd(sc->bpf_prog.sys_enter);
  err = bpf_map_update_elem(map_enter_fd, &key, &prog_fd, 0);
  if (err)
   break;
 }


 return err;
}

static void trace__delete_augmented_syscalls(struct trace *trace)
{
 struct evsel *evsel, *tmp;

 evlist__remove(trace->evlist, trace->syscalls.events.augmented);
 evsel__delete(trace->syscalls.events.augmented);
 trace->syscalls.events.augmented = 
# 3504 "builtin-trace.c" 3 4
                                   ((void *)0)
# 3504 "builtin-trace.c"
                                       ;

 for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(trace->evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 3506 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3506 "builtin-trace.c"
typeof(*evsel)
# 3506 "builtin-trace.c" 3 4
, 
# 3506 "builtin-trace.c"
core.node
# 3506 "builtin-trace.c" 3 4
)
# 3506 "builtin-trace.c"
); }), tmp = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 3506 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3506 "builtin-trace.c"
typeof(*(evsel))
# 3506 "builtin-trace.c" 3 4
, 
# 3506 "builtin-trace.c"
core.node
# 3506 "builtin-trace.c" 3 4
)
# 3506 "builtin-trace.c"
); }); &evsel->core.node != (&(trace->evlist)->core.entries); evsel = tmp, tmp = ({ const typeof(((typeof(*(tmp)) *)0)->core.node) * __mptr = ((tmp)->core.node.next); (typeof(*(tmp)) *)((char *)__mptr - 
# 3506 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3506 "builtin-trace.c"
typeof(*(tmp))
# 3506 "builtin-trace.c" 3 4
, 
# 3506 "builtin-trace.c"
core.node
# 3506 "builtin-trace.c" 3 4
)
# 3506 "builtin-trace.c"
); })) {
  if (evsel->bpf_obj == trace->bpf_obj) {
   evlist__remove(trace->evlist, evsel);
   evsel__delete(evsel);
  }

 }

 bpf_object__close(trace->bpf_obj);
 trace->bpf_obj = 
# 3515 "builtin-trace.c" 3 4
                 ((void *)0)
# 3515 "builtin-trace.c"
                     ;
}
# 3544 "builtin-trace.c"
static 
# 3544 "builtin-trace.c" 3 4
      _Bool 
# 3544 "builtin-trace.c"
           trace__only_augmented_syscalls_evsels(struct trace *trace)
{
 struct evsel *evsel;

 for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(trace->evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 3548 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3548 "builtin-trace.c"
typeof(*evsel)
# 3548 "builtin-trace.c" 3 4
, 
# 3548 "builtin-trace.c"
core.node
# 3548 "builtin-trace.c" 3 4
)
# 3548 "builtin-trace.c"
); }); &evsel->core.node != (&(trace->evlist)->core.entries); evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 3548 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3548 "builtin-trace.c"
typeof(*(evsel))
# 3548 "builtin-trace.c" 3 4
, 
# 3548 "builtin-trace.c"
core.node
# 3548 "builtin-trace.c" 3 4
)
# 3548 "builtin-trace.c"
); })) {
  if (evsel == trace->syscalls.events.augmented ||
      evsel->bpf_obj == trace->bpf_obj)
   continue;

  return 
# 3553 "builtin-trace.c" 3 4
        0
# 3553 "builtin-trace.c"
             ;
 }

 return 
# 3556 "builtin-trace.c" 3 4
       1
# 3556 "builtin-trace.c"
           ;
}

static int trace__set_ev_qualifier_filter(struct trace *trace)
{
 if (trace->syscalls.map)
  return trace__set_ev_qualifier_bpf_filter(trace);
 if (trace->syscalls.events.sys_enter)
  return trace__set_ev_qualifier_tp_filter(trace);
 return 0;
}

static int bpf_map__set_filter_pids(struct bpf_map *map __attribute__((unused)),
        size_t npids __attribute__((unused)), pid_t *pids __attribute__((unused)))
{
 int err = 0;

 
# 3573 "builtin-trace.c" 3 4
_Bool 
# 3573 "builtin-trace.c"
     value = 
# 3573 "builtin-trace.c" 3 4
             1
# 3573 "builtin-trace.c"
                 ;
 int map_fd = bpf_map__fd(map);
 size_t i;

 for (i = 0; i < npids; ++i) {
  err = bpf_map_update_elem(map_fd, &pids[i], &value, 0);
  if (err)
   break;
 }

 return err;
}

static int trace__set_filter_loop_pids(struct trace *trace)
{
 unsigned int nr = 1, err;
 pid_t pids[32] = {
  getpid(),
 };
 struct thread *thread = machine__find_thread(trace->host, pids[0], pids[0]);

 while (thread && nr < (sizeof(pids) / sizeof((pids)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((pids)), typeof(&(pids)[0]))); })))) {
  struct thread *parent = machine__find_thread(trace->host, thread->ppid, thread->ppid);

  if (parent == 
# 3597 "builtin-trace.c" 3 4
               ((void *)0)
# 3597 "builtin-trace.c"
                   )
   break;

  if (!
# 3600 "builtin-trace.c" 3 4
      __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) && __builtin_constant_p (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) && (__s1_len = __builtin_strlen (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ), __s2_len = __builtin_strlen (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ), (!((size_t)(const void *)((
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      , 
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) : (__builtin_constant_p (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) == 1) && (__s1_len = __builtin_strlen (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ), __s1_len < 4) ? (__builtin_constant_p (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      , 
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) == 1) && (__s2_len = __builtin_strlen (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ), __s2_len < 4) ? (__builtin_constant_p (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      , 
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 3600 "builtin-trace.c"
      thread__comm_str(parent)
# 3600 "builtin-trace.c" 3 4
      , 
# 3600 "builtin-trace.c"
      "sshd"
# 3600 "builtin-trace.c" 3 4
      )))); }) 
# 3600 "builtin-trace.c"
                                               ||
      strstarts(thread__comm_str(parent), "gnome-terminal")) {
   pids[nr++] = parent->tid;
   break;
  }
  thread = parent;
 }

 err = perf_evlist__append_tp_filter_pids(trace->evlist, nr, pids);
 if (!err && trace->filter_pids.map)
  err = bpf_map__set_filter_pids(trace->filter_pids.map, nr, pids);

 return err;
}

static int trace__set_filter_pids(struct trace *trace)
{
 int err = 0;






 if (trace->filter_pids.nr > 0) {
  err = perf_evlist__append_tp_filter_pids(trace->evlist, trace->filter_pids.nr,
        trace->filter_pids.entries);
  if (!err && trace->filter_pids.map) {
   err = bpf_map__set_filter_pids(trace->filter_pids.map, trace->filter_pids.nr,
             trace->filter_pids.entries);
  }
 } else if (perf_thread_map__pid(trace->evlist->core.threads, 0) == -1) {
  err = trace__set_filter_loop_pids(trace);
 }

 return err;
}

static int __trace__deliver_event(struct trace *trace, union perf_event *event)
{
 struct evlist *evlist = trace->evlist;
 struct perf_sample sample;
 int err;

 err = perf_evlist__parse_sample(evlist, event, &sample);
 if (err)
  fprintf(trace->output, "Can't parse sample, err = %d, skipping...\n", err);
 else
  trace__handle_event(trace, event, &sample);

 return 0;
}

static int __trace__flush_events(struct trace *trace)
{
 u64 first = ordered_events__first_time(&trace->oe.data);
 u64 flush = trace->oe.last - 1000000000L;


 if (first && first < flush)
  return ordered_events__flush_time(&trace->oe.data, flush);

 return 0;
}

static int trace__flush_events(struct trace *trace)
{
 return !trace->sort_events ? 0 : __trace__flush_events(trace);
}

static int trace__deliver_event(struct trace *trace, union perf_event *event)
{
 int err;

 if (!trace->sort_events)
  return __trace__deliver_event(trace, event);

 err = perf_evlist__parse_sample_timestamp(trace->evlist, event, &trace->oe.last);
 if (err && err != -1)
  return err;

 err = ordered_events__queue(&trace->oe.data, event, trace->oe.last, 0);
 if (err)
  return err;

 return trace__flush_events(trace);
}

static int ordered_events__deliver_event(struct ordered_events *oe,
      struct ordered_event *event)
{
 struct trace *trace = ({ const typeof(((struct trace *)0)->oe.data) * __mptr = (oe); (struct trace *)((char *)__mptr - 
# 3691 "builtin-trace.c" 3 4
                      __builtin_offsetof (
# 3691 "builtin-trace.c"
                      struct trace
# 3691 "builtin-trace.c" 3 4
                      , 
# 3691 "builtin-trace.c"
                      oe.data
# 3691 "builtin-trace.c" 3 4
                      )
# 3691 "builtin-trace.c"
                      ); });

 return __trace__deliver_event(trace, event->event);
}

static struct syscall_arg_fmt *perf_evsel__syscall_arg_fmt(struct evsel *evsel, char *arg)
{
 struct tep_format_field *field;
 struct syscall_arg_fmt *fmt = __evsel__syscall_arg_fmt(evsel);

 if (evsel->tp_format == 
# 3701 "builtin-trace.c" 3 4
                        ((void *)0) 
# 3701 "builtin-trace.c"
                             || fmt == 
# 3701 "builtin-trace.c" 3 4
                                       ((void *)0)
# 3701 "builtin-trace.c"
                                           )
  return 
# 3702 "builtin-trace.c" 3 4
        ((void *)0)
# 3702 "builtin-trace.c"
            ;

 for (field = evsel->tp_format->format.fields; field; field = field->next, ++fmt)
  if (
# 3705 "builtin-trace.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) && __builtin_constant_p (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ), __s2_len = __builtin_strlen (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ), (!((size_t)(const void *)((
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     , 
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) : (__builtin_constant_p (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     , 
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     , 
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 3705 "builtin-trace.c"
     field->name
# 3705 "builtin-trace.c" 3 4
     , 
# 3705 "builtin-trace.c"
     arg
# 3705 "builtin-trace.c" 3 4
     )))); }) 
# 3705 "builtin-trace.c"
                              == 0)
   return fmt;

 return 
# 3708 "builtin-trace.c" 3 4
       ((void *)0)
# 3708 "builtin-trace.c"
           ;
}

static int trace__expand_filter(struct trace *trace __attribute__((unused)), struct evsel *evsel)
{
 char *tok, *left = evsel->filter, *new_filter = evsel->filter;

 while ((tok = 
# 3715 "builtin-trace.c" 3 4
              __builtin_strpbrk (
# 3715 "builtin-trace.c"
              left
# 3715 "builtin-trace.c" 3 4
              , 
# 3715 "builtin-trace.c"
              "=<>!"
# 3715 "builtin-trace.c" 3 4
              )
# 3715 "builtin-trace.c"
                                   ) != 
# 3715 "builtin-trace.c" 3 4
                                        ((void *)0)
# 3715 "builtin-trace.c"
                                            ) {
  char *right = tok + 1, *right_end;

  if (*right == '=')
   ++right;

  while ((((_ctype[(int)(unsigned char)(*right)])&(0x20)) != 0))
   ++right;

  if (*right == '\0')
   break;

  while (!(((_ctype[(int)(unsigned char)(*left)])&(0x01|0x02)) != 0))
   if (++left == tok) {




    return 0;
   }

  right_end = right + 1;
  while ((((_ctype[(int)(unsigned char)(*right_end)])&(0x01|0x02|0x04)) != 0) || *right_end == '_' || *right_end == '|')
   ++right_end;

  if ((((_ctype[(int)(unsigned char)(*right)])&(0x01|0x02)) != 0)) {
   struct syscall_arg_fmt *fmt;
   int left_size = tok - left,
       right_size = right_end - right;
   char arg[128];

   while ((((_ctype[(int)(unsigned char)(left[left_size - 1])])&(0x20)) != 0))
    --left_size;

   scnprintf(arg, sizeof(arg), "%.*s", left_size, left);

   fmt = perf_evsel__syscall_arg_fmt(evsel, arg);
   if (fmt == 
# 3752 "builtin-trace.c" 3 4
             ((void *)0)
# 3752 "builtin-trace.c"
                 ) {
    eprintf(0, verbose, "\"%s\" not found in \"%s\", can't set filter \"%s\"\n", arg, evsel->name, evsel->filter)
                                           ;
    return -1;
   }

   eprintf(2, verbose, "trying to expand \"%s\" \"%.*s\" \"%.*s\" -> ", arg, (int)(right - tok), tok, right_size, right)
                                                     ;

   if (fmt->strtoul) {
    u64 val;
    struct syscall_arg syscall_arg = {
     .parm = fmt->parm,
    };

    if (fmt->strtoul(right, right_size, &syscall_arg, &val)) {
     char *n, expansion[19];
     int expansion_lenght = scnprintf(expansion, sizeof(expansion), "%#" 
# 3769 "builtin-trace.c" 3 4
                                                                        "l" "x"
# 3769 "builtin-trace.c"
                                                                              , val);
     int expansion_offset = right - new_filter;

     eprintf(1, verbose, "%s", expansion);

     if (asprintf(&n, "%.*s%s%s", expansion_offset, new_filter, expansion, right_end) < 0) {
      eprintf(1, verbose, " out of memory!\n");
      free(new_filter);
      return -1;
     }
     if (new_filter != evsel->filter)
      free(new_filter);
     left = n + expansion_offset + expansion_lenght;
     new_filter = n;
    } else {
     eprintf(0, verbose, "\"%.*s\" not found for \"%s\" in \"%s\", can't set filter \"%s\"\n", right_size, right, arg, evsel->name, evsel->filter)
                                                               ;
     return -1;
    }
   } else {
    eprintf(0, verbose, "No resolver (strtoul) for \"%s\" in \"%s\", can't set filter \"%s\"\n", arg, evsel->name, evsel->filter)
                                           ;
    return -1;
   }

   eprintf(1, verbose, "\n");
  } else {
   left = right_end;
  }
 }

 if (new_filter != evsel->filter) {
  eprintf(1, verbose, "New filter for %s: %s\n", evsel->name, new_filter);
  perf_evsel__set_filter(evsel, new_filter);
  free(new_filter);
 }

 return 0;
}

static int trace__expand_filters(struct trace *trace, struct evsel **err_evsel)
{
 struct evlist *evlist = trace->evlist;
 struct evsel *evsel;

 for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 3814 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3814 "builtin-trace.c"
typeof(*evsel)
# 3814 "builtin-trace.c" 3 4
, 
# 3814 "builtin-trace.c"
core.node
# 3814 "builtin-trace.c" 3 4
)
# 3814 "builtin-trace.c"
); }); &evsel->core.node != (&(evlist)->core.entries); evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 3814 "builtin-trace.c" 3 4
__builtin_offsetof (
# 3814 "builtin-trace.c"
typeof(*(evsel))
# 3814 "builtin-trace.c" 3 4
, 
# 3814 "builtin-trace.c"
core.node
# 3814 "builtin-trace.c" 3 4
)
# 3814 "builtin-trace.c"
); })) {
  if (evsel->filter == 
# 3815 "builtin-trace.c" 3 4
                      ((void *)0)
# 3815 "builtin-trace.c"
                          )
   continue;

  if (trace__expand_filter(trace, evsel)) {
   *err_evsel = evsel;
   return -1;
  }
 }

 return 0;
}

static int trace__run(struct trace *trace, int argc, const char **argv)
{
 struct evlist *evlist = trace->evlist;
 struct evsel *evsel, *pgfault_maj = 
# 3830 "builtin-trace.c" 3 4
                                    ((void *)0)
# 3830 "builtin-trace.c"
                                        , *pgfault_min = 
# 3830 "builtin-trace.c" 3 4
                                                         ((void *)0)
# 3830 "builtin-trace.c"
                                                             ;
 int err = -1, i;
 unsigned long before;
 const 
# 3833 "builtin-trace.c" 3 4
      _Bool 
# 3833 "builtin-trace.c"
           forks = argc > 0;
 
# 3834 "builtin-trace.c" 3 4
_Bool 
# 3834 "builtin-trace.c"
     draining = 
# 3834 "builtin-trace.c" 3 4
                0
# 3834 "builtin-trace.c"
                     ;

 trace->live = 
# 3836 "builtin-trace.c" 3 4
              1
# 3836 "builtin-trace.c"
                  ;

 if (!trace->raw_augmented_syscalls) {
  if (trace->trace_syscalls && trace__add_syscall_newtp(trace))
   goto out_error_raw_syscalls;

  if (trace->trace_syscalls)
   trace->vfs_getname = evlist__add_vfs_getname(evlist);
 }

 if ((trace->trace_pgfaults & (1 << 0))) {
  pgfault_maj = perf_evsel__new_pgfault(PERF_COUNT_SW_PAGE_FAULTS_MAJ);
  if (pgfault_maj == 
# 3848 "builtin-trace.c" 3 4
                    ((void *)0)
# 3848 "builtin-trace.c"
                        )
   goto out_error_mem;
  perf_evsel__config_callchain(pgfault_maj, &trace->opts, &callchain_param);
  evlist__add(evlist, pgfault_maj);
 }

 if ((trace->trace_pgfaults & (1 << 1))) {
  pgfault_min = perf_evsel__new_pgfault(PERF_COUNT_SW_PAGE_FAULTS_MIN);
  if (pgfault_min == 
# 3856 "builtin-trace.c" 3 4
                    ((void *)0)
# 3856 "builtin-trace.c"
                        )
   goto out_error_mem;
  perf_evsel__config_callchain(pgfault_min, &trace->opts, &callchain_param);
  evlist__add(evlist, pgfault_min);
 }

 if (trace->sched &&
     perf_evlist__add_newtp(evlist, "sched", "sched_stat_runtime",
       trace__sched_stat_runtime))
  goto out_error_sched_stat_runtime;
# 3891 "builtin-trace.c"
 if (trace->cgroup)
  evlist__set_default_cgroup(trace->evlist, trace->cgroup);

 err = perf_evlist__create_maps(evlist, &trace->opts.target);
 if (err < 0) {
  fprintf(trace->output, "Problems parsing the target to trace, check your options!\n");
  goto out_delete_evlist;
 }

 err = trace__symbols_init(trace, evlist);
 if (err < 0) {
  fprintf(trace->output, "Problems initializing symbol libraries!\n");
  goto out_delete_evlist;
 }

 perf_evlist__config(evlist, &trace->opts, &callchain_param);

 signal(
# 3908 "builtin-trace.c" 3 4
       17
# 3908 "builtin-trace.c"
              , sig_handler);
 signal(
# 3909 "builtin-trace.c" 3 4
       2
# 3909 "builtin-trace.c"
             , sig_handler);

 if (forks) {
  err = perf_evlist__prepare_workload(evlist, &trace->opts.target,
          argv, 
# 3913 "builtin-trace.c" 3 4
               0
# 3913 "builtin-trace.c"
                    , 
# 3913 "builtin-trace.c" 3 4
                      ((void *)0)
# 3913 "builtin-trace.c"
                          );
  if (err < 0) {
   fprintf(trace->output, "Couldn't run the workload!\n");
   goto out_delete_evlist;
  }
 }

 err = evlist__open(evlist);
 if (err < 0)
  goto out_error_open;

 err = bpf__apply_obj_config();
 if (err) {
  char errbuf[
# 3926 "builtin-trace.c" 3 4
             8192
# 3926 "builtin-trace.c"
                   ];

  bpf__strerror_apply_obj_config(err, errbuf, sizeof(errbuf));
  eprintf(0, verbose, "ERROR: Apply config to BPF failed: %s\n", errbuf)
           ;
  goto out_error_open;
 }

 err = trace__set_filter_pids(trace);
 if (err < 0)
  goto out_error_mem;

 if (trace->syscalls.map)
  trace__init_syscalls_bpf_map(trace);

 if (trace->syscalls.prog_array.sys_enter)
  trace__init_syscalls_bpf_prog_array_maps(trace);

 if (trace->ev_qualifier_ids.nr > 0) {
  err = trace__set_ev_qualifier_filter(trace);
  if (err < 0)
   goto out_errno;

  if (trace->syscalls.events.sys_exit) {
   eprintf(1, verbose, "event qualifier tracepoint filter: %s\n", trace->syscalls.events.sys_exit->filter)
                                             ;
  }
 }
# 3966 "builtin-trace.c"
 trace->fd_path_disabled = !trace__syscall_enabled(trace, syscalltbl__id(trace->sctbl, "close"));

 err = trace__expand_filters(trace, &evsel);
 if (err)
  goto out_delete_evlist;
 err = perf_evlist__apply_filters(evlist, &evsel);
 if (err < 0)
  goto out_error_apply_filters;

 if (trace->dump.map)
  bpf_map__fprintf(trace->dump.map, trace->output);

 err = evlist__mmap(evlist, trace->opts.mmap_pages);
 if (err < 0)
  goto out_error_mmap;

 if (!target__none(&trace->opts.target) && !trace->opts.initial_delay)
  evlist__enable(evlist);

 if (forks)
  perf_evlist__start_workload(evlist);

 if (trace->opts.initial_delay) {
  usleep(trace->opts.initial_delay * 1000);
  evlist__enable(evlist);
 }

 trace->multiple_threads = perf_thread_map__pid(evlist->core.threads, 0) == -1 ||
      evlist->core.threads->nr > 1 ||
      evlist__first(evlist)->core.attr.inherit;







 for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 4003 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4003 "builtin-trace.c"
typeof(*evsel)
# 4003 "builtin-trace.c" 3 4
, 
# 4003 "builtin-trace.c"
core.node
# 4003 "builtin-trace.c" 3 4
)
# 4003 "builtin-trace.c"
); }); &evsel->core.node != (&(evlist)->core.entries); evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 4003 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4003 "builtin-trace.c"
typeof(*(evsel))
# 4003 "builtin-trace.c" 3 4
, 
# 4003 "builtin-trace.c"
core.node
# 4003 "builtin-trace.c" 3 4
)
# 4003 "builtin-trace.c"
); })) {
  if (evsel__has_callchain(evsel) &&
      evsel->core.attr.sample_max_stack == 0)
   evsel->core.attr.sample_max_stack = trace->max_stack;
 }
again:
 before = trace->nr_events;

 for (i = 0; i < evlist->core.nr_mmaps; i++) {
  union perf_event *event;
  struct mmap *md;

  md = &evlist->mmap[i];
  if (perf_mmap__read_init(&md->core) < 0)
   continue;

  while ((event = perf_mmap__read_event(&md->core)) != 
# 4019 "builtin-trace.c" 3 4
                                                      ((void *)0)
# 4019 "builtin-trace.c"
                                                          ) {
   ++trace->nr_events;

   err = trace__deliver_event(trace, event);
   if (err)
    goto out_disable;

   perf_mmap__consume(&md->core);

   if (interrupted)
    goto out_disable;

   if (done && !draining) {
    evlist__disable(evlist);
    draining = 
# 4033 "builtin-trace.c" 3 4
              1
# 4033 "builtin-trace.c"
                  ;
   }
  }
  perf_mmap__read_done(&md->core);
 }

 if (trace->nr_events == before) {
  int timeout = done ? 100 : -1;

  if (!draining && evlist__poll(evlist, timeout) > 0) {
   if (evlist__filter_pollfd(evlist, 
# 4043 "builtin-trace.c" 3 4
                                    0x008 
# 4043 "builtin-trace.c"
                                            | 
# 4043 "builtin-trace.c" 3 4
                                              0x010 
# 4043 "builtin-trace.c"
                                                      | 
# 4043 "builtin-trace.c" 3 4
                                                        0x020
# 4043 "builtin-trace.c"
                                                                ) == 0)
    draining = 
# 4044 "builtin-trace.c" 3 4
              1
# 4044 "builtin-trace.c"
                  ;

   goto again;
  } else {
   if (trace__flush_events(trace))
    goto out_disable;
  }
 } else {
  goto again;
 }

out_disable:
 __thread__zput(&trace->current);

 evlist__disable(evlist);

 if (trace->sort_events)
  ordered_events__flush(&trace->oe.data, OE_FLUSH__FINAL);

 if (!err) {
  if (trace->summary)
   trace__fprintf_thread_summary(trace, trace->output);

  if (trace->show_tool_stats) {
   fprintf(trace->output, "Stats:\n "
            " vfs_getname : %" 
# 4069 "builtin-trace.c" 3 4
                              "l" "u" 
# 4069 "builtin-trace.c"
                                     "\n"
            " proc_getname: %" 
# 4070 "builtin-trace.c" 3 4
                              "l" "u" 
# 4070 "builtin-trace.c"
                                     "\n",
    trace->stats.vfs_getname,
    trace->stats.proc_getname);
  }
 }

out_delete_evlist:
 trace__symbols__exit(trace);

 evlist__delete(evlist);
 cgroup__put(trace->cgroup);
 trace->evlist = 
# 4081 "builtin-trace.c" 3 4
                ((void *)0)
# 4081 "builtin-trace.c"
                    ;
 trace->live = 
# 4082 "builtin-trace.c" 3 4
              0
# 4082 "builtin-trace.c"
                   ;
 return err;
{
 char errbuf[
# 4085 "builtin-trace.c" 3 4
            8192
# 4085 "builtin-trace.c"
                  ];

out_error_sched_stat_runtime:
 tracing_path__strerror_open_tp(
# 4088 "builtin-trace.c" 3 4
                               (*__errno_location ())
# 4088 "builtin-trace.c"
                                    , errbuf, sizeof(errbuf), "sched", "sched_stat_runtime");
 goto out_error;

out_error_raw_syscalls:
 tracing_path__strerror_open_tp(
# 4092 "builtin-trace.c" 3 4
                               (*__errno_location ())
# 4092 "builtin-trace.c"
                                    , errbuf, sizeof(errbuf), "raw_syscalls", "sys_(enter|exit)");
 goto out_error;

out_error_mmap:
 perf_evlist__strerror_mmap(evlist, 
# 4096 "builtin-trace.c" 3 4
                                   (*__errno_location ())
# 4096 "builtin-trace.c"
                                        , errbuf, sizeof(errbuf));
 goto out_error;

out_error_open:
 perf_evlist__strerror_open(evlist, 
# 4100 "builtin-trace.c" 3 4
                                   (*__errno_location ())
# 4100 "builtin-trace.c"
                                        , errbuf, sizeof(errbuf));

out_error:
 fprintf(trace->output, "%s\n", errbuf);
 goto out_delete_evlist;

out_error_apply_filters:
 fprintf(trace->output,
  "Failed to set filter \"%s\" on event %s with %d (%s)\n",
  evsel->filter, perf_evsel__name(evsel), 
# 4109 "builtin-trace.c" 3 4
                                         (*__errno_location ())
# 4109 "builtin-trace.c"
                                              ,
  str_error_r(
# 4110 "builtin-trace.c" 3 4
             (*__errno_location ())
# 4110 "builtin-trace.c"
                  , errbuf, sizeof(errbuf)));
 goto out_delete_evlist;
}
out_error_mem:
 fprintf(trace->output, "Not enough memory to run!\n");
 goto out_delete_evlist;

out_errno:
 fprintf(trace->output, "errno=%d,%s\n", 
# 4118 "builtin-trace.c" 3 4
                                        (*__errno_location ())
# 4118 "builtin-trace.c"
                                             , strerror(
# 4118 "builtin-trace.c" 3 4
                                                        (*__errno_location ())
# 4118 "builtin-trace.c"
                                                             ));
 goto out_delete_evlist;
}

static int trace__replay(struct trace *trace)
{
 const struct evsel_str_handler handlers[] = {
  { "probe:vfs_getname", trace__vfs_getname, },
 };
 struct perf_data data = {
  .path = input_name,
  .mode = PERF_DATA_MODE_READ,
  .force = trace->force,
 };
 struct perf_session *session;
 struct evsel *evsel;
 int err = -1;

 trace->tool.sample = trace__process_sample;
 trace->tool.mmap = perf_event__process_mmap;
 trace->tool.mmap2 = perf_event__process_mmap2;
 trace->tool.comm = perf_event__process_comm;
 trace->tool.exit = perf_event__process_exit;
 trace->tool.fork = perf_event__process_fork;
 trace->tool.attr = perf_event__process_attr;
 trace->tool.tracing_data = perf_event__process_tracing_data;
 trace->tool.build_id = perf_event__process_build_id;
 trace->tool.namespaces = perf_event__process_namespaces;

 trace->tool.ordered_events = 
# 4147 "builtin-trace.c" 3 4
                             1
# 4147 "builtin-trace.c"
                                 ;
 trace->tool.ordering_requires_timestamps = 
# 4148 "builtin-trace.c" 3 4
                                           1
# 4148 "builtin-trace.c"
                                               ;


 trace->multiple_threads = 
# 4151 "builtin-trace.c" 3 4
                          1
# 4151 "builtin-trace.c"
                              ;

 session = perf_session__new(&data, 
# 4153 "builtin-trace.c" 3 4
                                   0
# 4153 "builtin-trace.c"
                                        , &trace->tool);
 if (IS_ERR(session))
  return PTR_ERR(session);

 if (trace->opts.target.pid)
  symbol_conf.pid_list_str = 
# 4158 "builtin-trace.c" 3 4
                            (__extension__ (__builtin_constant_p (
# 4158 "builtin-trace.c"
                            trace->opts.target.pid
# 4158 "builtin-trace.c" 3 4
                            ) && ((size_t)(const void *)((
# 4158 "builtin-trace.c"
                            trace->opts.target.pid
# 4158 "builtin-trace.c" 3 4
                            ) + 1) - (size_t)(const void *)(
# 4158 "builtin-trace.c"
                            trace->opts.target.pid
# 4158 "builtin-trace.c" 3 4
                            ) == 1) ? (((const char *) (
# 4158 "builtin-trace.c"
                            trace->opts.target.pid
# 4158 "builtin-trace.c" 3 4
                            ))[0] == '\0' ? (char *) calloc ((size_t) 1, (size_t) 1) : ({ size_t __len = strlen (
# 4158 "builtin-trace.c"
                            trace->opts.target.pid
# 4158 "builtin-trace.c" 3 4
                            ) + 1; char *__retval = (char *) malloc (__len); if (__retval != ((void *)0)) __retval = (char *) memcpy (__retval, 
# 4158 "builtin-trace.c"
                            trace->opts.target.pid
# 4158 "builtin-trace.c" 3 4
                            , __len); __retval; })) : __strdup (
# 4158 "builtin-trace.c"
                            trace->opts.target.pid
# 4158 "builtin-trace.c" 3 4
                            )))
# 4158 "builtin-trace.c"
                                                          ;

 if (trace->opts.target.tid)
  symbol_conf.tid_list_str = 
# 4161 "builtin-trace.c" 3 4
                            (__extension__ (__builtin_constant_p (
# 4161 "builtin-trace.c"
                            trace->opts.target.tid
# 4161 "builtin-trace.c" 3 4
                            ) && ((size_t)(const void *)((
# 4161 "builtin-trace.c"
                            trace->opts.target.tid
# 4161 "builtin-trace.c" 3 4
                            ) + 1) - (size_t)(const void *)(
# 4161 "builtin-trace.c"
                            trace->opts.target.tid
# 4161 "builtin-trace.c" 3 4
                            ) == 1) ? (((const char *) (
# 4161 "builtin-trace.c"
                            trace->opts.target.tid
# 4161 "builtin-trace.c" 3 4
                            ))[0] == '\0' ? (char *) calloc ((size_t) 1, (size_t) 1) : ({ size_t __len = strlen (
# 4161 "builtin-trace.c"
                            trace->opts.target.tid
# 4161 "builtin-trace.c" 3 4
                            ) + 1; char *__retval = (char *) malloc (__len); if (__retval != ((void *)0)) __retval = (char *) memcpy (__retval, 
# 4161 "builtin-trace.c"
                            trace->opts.target.tid
# 4161 "builtin-trace.c" 3 4
                            , __len); __retval; })) : __strdup (
# 4161 "builtin-trace.c"
                            trace->opts.target.tid
# 4161 "builtin-trace.c" 3 4
                            )))
# 4161 "builtin-trace.c"
                                                          ;

 if (symbol__init(&session->header.env) < 0)
  goto out;

 trace->host = &session->machines.host;

 err = __evlist__set_tracepoints_handlers(session->evlist, handlers, (sizeof(handlers) / sizeof((handlers)[0]) + (sizeof(struct { int:-!!(__builtin_types_compatible_p(typeof((handlers)), typeof(&(handlers)[0]))); }))));
 if (err)
  goto out;

 evsel = perf_evlist__find_tracepoint_by_name(session->evlist,
           "raw_syscalls:sys_enter");

 if (evsel == 
# 4175 "builtin-trace.c" 3 4
             ((void *)0)
# 4175 "builtin-trace.c"
                 )
  evsel = perf_evlist__find_tracepoint_by_name(session->evlist,
            "syscalls:sys_enter");

 if (evsel &&
     (perf_evsel__init_raw_syscall_tp(evsel, trace__sys_enter) < 0 ||
     ({ struct syscall_tp *sc = __evsel__syscall_tp(evsel); perf_evsel__init_tp_ptr_field(evsel, &sc->args, "args"); }))) {
  eprintf(0, verbose, "Error during initialize raw_syscalls:sys_enter event\n");
  goto out;
 }

 evsel = perf_evlist__find_tracepoint_by_name(session->evlist,
           "raw_syscalls:sys_exit");
 if (evsel == 
# 4188 "builtin-trace.c" 3 4
             ((void *)0)
# 4188 "builtin-trace.c"
                 )
  evsel = perf_evlist__find_tracepoint_by_name(session->evlist,
            "syscalls:sys_exit");
 if (evsel &&
     (perf_evsel__init_raw_syscall_tp(evsel, trace__sys_exit) < 0 ||
     ({ struct syscall_tp *sc = __evsel__syscall_tp(evsel); perf_evsel__init_tp_uint_field(evsel, &sc->ret, "ret"); }))) {
  eprintf(0, verbose, "Error during initialize raw_syscalls:sys_exit event\n");
  goto out;
 }

 for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(session->evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 4198 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4198 "builtin-trace.c"
typeof(*evsel)
# 4198 "builtin-trace.c" 3 4
, 
# 4198 "builtin-trace.c"
core.node
# 4198 "builtin-trace.c" 3 4
)
# 4198 "builtin-trace.c"
); }); &evsel->core.node != (&(session->evlist)->core.entries); evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 4198 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4198 "builtin-trace.c"
typeof(*(evsel))
# 4198 "builtin-trace.c" 3 4
, 
# 4198 "builtin-trace.c"
core.node
# 4198 "builtin-trace.c" 3 4
)
# 4198 "builtin-trace.c"
); })) {
  if (evsel->core.attr.type == PERF_TYPE_SOFTWARE &&
      (evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ ||
       evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MIN ||
       evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS))
   evsel->handler = trace__pgfault;
 }

 setup_pager();

 err = perf_session__process_events(session);
 if (err)
  eprintf(0, verbose, "Failed to process events, error %d", err);

 else if (trace->summary)
  trace__fprintf_thread_summary(trace, trace->output);

out:
 perf_session__delete(session);

 return err;
}

static size_t trace__fprintf_threads_header(FILE *fp)
{
 size_t printed;

 printed = fprintf(fp, "\n Summary of events:\n\n");

 return printed;
}

struct syscall_stats_sorted_entry { struct rb_node rb_node; struct syscall_stats *stats; double msecs; int syscall; }; static void syscall_stats_sorted__init_entry(struct rb_node *nd, struct syscall_stats_sorted_entry *entry); static int syscall_stats_sorted__cmp(struct rb_node *nda, struct rb_node *ndb) { struct syscall_stats_sorted_entry *a, *b; a = ({ const typeof(((struct syscall_stats_sorted_entry *)0)->rb_node) * __mptr = (nda); (struct syscall_stats_sorted_entry *)((char *)__mptr - 
# 4230 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4230 "builtin-trace.c"
struct syscall_stats_sorted_entry
# 4230 "builtin-trace.c" 3 4
, 
# 4230 "builtin-trace.c"
rb_node
# 4230 "builtin-trace.c" 3 4
)
# 4230 "builtin-trace.c"
); }); b = ({ const typeof(((struct syscall_stats_sorted_entry *)0)->rb_node) * __mptr = (ndb); (struct syscall_stats_sorted_entry *)((char *)__mptr - 
# 4230 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4230 "builtin-trace.c"
struct syscall_stats_sorted_entry
# 4230 "builtin-trace.c" 3 4
, 
# 4230 "builtin-trace.c"
rb_node
# 4230 "builtin-trace.c" 3 4
)
# 4230 "builtin-trace.c"
); }); return a->msecs > b->msecs; } struct syscall_stats_sorted { struct rb_root entries; struct syscall_stats_sorted_entry nd[0]; }; static void syscall_stats_sorted__insert(struct syscall_stats_sorted *sorted, struct rb_node *sorted_nd) { struct rb_node **p = &sorted->entries.rb_node, *parent = 
# 4230 "builtin-trace.c" 3 4
((void *)0)
# 4230 "builtin-trace.c"
; while (*p != 
# 4230 "builtin-trace.c" 3 4
((void *)0)
# 4230 "builtin-trace.c"
) { parent = *p; if (syscall_stats_sorted__cmp(sorted_nd, parent)) p = &(*p)->rb_left; else p = &(*p)->rb_right; } rb_link_node(sorted_nd, parent, p); rb_insert_color(sorted_nd, &sorted->entries); } static void syscall_stats_sorted__sort(struct syscall_stats_sorted *sorted, struct rb_root *entries) { struct rb_node *nd; unsigned int i = 0; for (nd = rb_first(entries); nd; nd = rb_next(nd)) { struct syscall_stats_sorted_entry *snd = &sorted->nd[i++]; syscall_stats_sorted__init_entry(nd, snd); syscall_stats_sorted__insert(sorted, &snd->rb_node); } } static struct syscall_stats_sorted *syscall_stats_sorted__new(struct rb_root *entries, int nr_entries) { struct syscall_stats_sorted *sorted; sorted = malloc(sizeof(*sorted) + sizeof(sorted->nd[0]) * nr_entries); if (sorted) { sorted->entries = (struct rb_root) { 
# 4230 "builtin-trace.c" 3 4
((void *)0)
# 4230 "builtin-trace.c"
, }; syscall_stats_sorted__sort(sorted, entries); } return sorted; } static void syscall_stats_sorted__delete(struct syscall_stats_sorted *sorted) { free(sorted); } static void syscall_stats_sorted__init_entry(struct rb_node *nd, struct syscall_stats_sorted_entry *entry)




{
 struct int_node *source = ({ const typeof(((struct int_node *)0)->rb_node) * __mptr = (nd); (struct int_node *)((char *)__mptr - 
# 4236 "builtin-trace.c" 3 4
                          __builtin_offsetof (
# 4236 "builtin-trace.c"
                          struct int_node
# 4236 "builtin-trace.c" 3 4
                          , 
# 4236 "builtin-trace.c"
                          rb_node
# 4236 "builtin-trace.c" 3 4
                          )
# 4236 "builtin-trace.c"
                          ); });
 struct syscall_stats *stats = source->priv;

 entry->syscall = source->i;
 entry->stats = stats;
 entry->msecs = stats ? (u64)stats->stats.n * (avg_stats(&stats->stats) / 1000000L) : 0;
}

static size_t thread__dump_stats(struct thread_trace *ttrace,
     struct trace *trace, FILE *fp)
{
 size_t printed = 0;
 struct syscall *sc;
 struct rb_node *nd;
 struct syscall_stats_sorted_entry *syscall_stats_entry; struct syscall_stats_sorted *syscall_stats = syscall_stats_sorted__new(&ttrace->syscall_stats->rblist.entries.rb_root, ttrace->syscall_stats->rblist.nr_entries);

 if (syscall_stats == 
# 4252 "builtin-trace.c" 3 4
                     ((void *)0)
# 4252 "builtin-trace.c"
                         )
  return 0;

 printed += fprintf(fp, "\n");

 printed += fprintf(fp, "   syscall            calls  errors  total       min       avg       max       stddev\n");
 printed += fprintf(fp, "                                     (msec)    (msec)    (msec)    (msec)        (%%)\n");
 printed += fprintf(fp, "   --------------- --------  ------ -------- --------- --------- ---------     ------\n");

 for (nd = rb_first(&syscall_stats->entries); syscall_stats_entry = ({ const typeof(((struct syscall_stats_sorted_entry *)0)->rb_node) * __mptr = (nd); (struct syscall_stats_sorted_entry *)((char *)__mptr - 
# 4261 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4261 "builtin-trace.c"
struct syscall_stats_sorted_entry
# 4261 "builtin-trace.c" 3 4
, 
# 4261 "builtin-trace.c"
rb_node
# 4261 "builtin-trace.c" 3 4
)
# 4261 "builtin-trace.c"
); }), nd; nd = rb_next(nd)) {
  struct syscall_stats *stats = syscall_stats_entry->stats;
  if (stats) {
   double min = (double)(stats->stats.min) / 1000000L;
   double max = (double)(stats->stats.max) / 1000000L;
   double avg = avg_stats(&stats->stats);
   double pct;
   u64 n = (u64)stats->stats.n;

   pct = avg ? 100.0 * stddev_stats(&stats->stats) / avg : 0.0;
   avg /= 1000000L;

   sc = &trace->syscalls.table[syscall_stats_entry->syscall];
   printed += fprintf(fp, "   %-15s", sc->name);
   printed += fprintf(fp, " %8" 
# 4275 "builtin-trace.c" 3 4
                               "l" "u" 
# 4275 "builtin-trace.c"
                                      " %6" 
# 4275 "builtin-trace.c" 3 4
                                            "l" "u" 
# 4275 "builtin-trace.c"
                                                   " %9.3f %9.3f %9.3f",
        n, stats->nr_failures, syscall_stats_entry->msecs, min, avg);
   printed += fprintf(fp, " %9.3f %9.2f%%\n", max, pct);

   if (trace->errno_summary && stats->nr_failures) {
    const char *arch_name = perf_env__arch(trace->host->env);
    int e;

    for (e = 0; e < stats->max_errno; ++e) {
     if (stats->errnos[e] != 0)
      fprintf(fp, "\t\t\t\t%s: %d\n", arch_syscalls__strerrno(arch_name, e + 1), stats->errnos[e]);
    }
   }
  }
 }

 syscall_stats_sorted__delete(syscall_stats), syscall_stats = 
# 4291 "builtin-trace.c" 3 4
((void *)0)
# 4291 "builtin-trace.c"
                                ;
 printed += fprintf(fp, "\n\n");

 return printed;
}

static size_t trace__fprintf_thread(FILE *fp, struct thread *thread, struct trace *trace)
{
 size_t printed = 0;
 struct thread_trace *ttrace = thread__priv(thread);
 double ratio;

 if (ttrace == 
# 4303 "builtin-trace.c" 3 4
              ((void *)0)
# 4303 "builtin-trace.c"
                  )
  return 0;

 ratio = (double)ttrace->nr_events / trace->nr_events * 100.0;

 printed += fprintf(fp, " %s (%d), ", thread__comm_str(thread), thread->tid);
 printed += fprintf(fp, "%lu events, ", ttrace->nr_events);
 printed += fprintf(fp, "%.1f%%", ratio);
 if (ttrace->pfmaj)
  printed += fprintf(fp, ", %lu majfaults", ttrace->pfmaj);
 if (ttrace->pfmin)
  printed += fprintf(fp, ", %lu minfaults", ttrace->pfmin);
 if (trace->sched)
  printed += fprintf(fp, ", %.3f msec\n", ttrace->runtime_ms);
 else if (fputc('\n', fp) != 
# 4317 "builtin-trace.c" 3 4
                            (-1)
# 4317 "builtin-trace.c"
                               )
  ++printed;

 printed += thread__dump_stats(ttrace, trace, fp);

 return printed;
}

static unsigned long thread__nr_events(struct thread_trace *ttrace)
{
 return ttrace ? ttrace->nr_events : 0;
}

struct threads_sorted_entry { struct rb_node rb_node; struct thread *thread; }; static void threads_sorted__init_entry(struct rb_node *nd, struct threads_sorted_entry *entry); static int threads_sorted__cmp(struct rb_node *nda, struct rb_node *ndb) { struct threads_sorted_entry *a, *b; a = ({ const typeof(((struct threads_sorted_entry *)0)->rb_node) * __mptr = (nda); (struct threads_sorted_entry *)((char *)__mptr - 
# 4330 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4330 "builtin-trace.c"
struct threads_sorted_entry
# 4330 "builtin-trace.c" 3 4
, 
# 4330 "builtin-trace.c"
rb_node
# 4330 "builtin-trace.c" 3 4
)
# 4330 "builtin-trace.c"
); }); b = ({ const typeof(((struct threads_sorted_entry *)0)->rb_node) * __mptr = (ndb); (struct threads_sorted_entry *)((char *)__mptr - 
# 4330 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4330 "builtin-trace.c"
struct threads_sorted_entry
# 4330 "builtin-trace.c" 3 4
, 
# 4330 "builtin-trace.c"
rb_node
# 4330 "builtin-trace.c" 3 4
)
# 4330 "builtin-trace.c"
); }); return (thread__nr_events(a->thread->priv) < thread__nr_events(b->thread->priv)); } struct threads_sorted { struct rb_root entries; struct threads_sorted_entry nd[0]; }; static void threads_sorted__insert(struct threads_sorted *sorted, struct rb_node *sorted_nd) { struct rb_node **p = &sorted->entries.rb_node, *parent = 
# 4330 "builtin-trace.c" 3 4
((void *)0)
# 4330 "builtin-trace.c"
; while (*p != 
# 4330 "builtin-trace.c" 3 4
((void *)0)
# 4330 "builtin-trace.c"
) { parent = *p; if (threads_sorted__cmp(sorted_nd, parent)) p = &(*p)->rb_left; else p = &(*p)->rb_right; } rb_link_node(sorted_nd, parent, p); rb_insert_color(sorted_nd, &sorted->entries); } static void threads_sorted__sort(struct threads_sorted *sorted, struct rb_root *entries) { struct rb_node *nd; unsigned int i = 0; for (nd = rb_first(entries); nd; nd = rb_next(nd)) { struct threads_sorted_entry *snd = &sorted->nd[i++]; threads_sorted__init_entry(nd, snd); threads_sorted__insert(sorted, &snd->rb_node); } } static struct threads_sorted *threads_sorted__new(struct rb_root *entries, int nr_entries) { struct threads_sorted *sorted; sorted = malloc(sizeof(*sorted) + sizeof(sorted->nd[0]) * nr_entries); if (sorted) { sorted->entries = (struct rb_root) { 
# 4330 "builtin-trace.c" 3 4
((void *)0)
# 4330 "builtin-trace.c"
, }; threads_sorted__sort(sorted, entries); } return sorted; } static void threads_sorted__delete(struct threads_sorted *sorted) { free(sorted); } static void threads_sorted__init_entry(struct rb_node *nd, struct threads_sorted_entry *entry)


{
 entry->thread = ({ const typeof(((struct thread *)0)->rb_node) * __mptr = (nd); (struct thread *)((char *)__mptr - 
# 4334 "builtin-trace.c" 3 4
                __builtin_offsetof (
# 4334 "builtin-trace.c"
                struct thread
# 4334 "builtin-trace.c" 3 4
                , 
# 4334 "builtin-trace.c"
                rb_node
# 4334 "builtin-trace.c" 3 4
                )
# 4334 "builtin-trace.c"
                ); });
}

static size_t trace__fprintf_thread_summary(struct trace *trace, FILE *fp)
{
 size_t printed = trace__fprintf_threads_header(fp);
 struct rb_node *nd;
 int i;

 for (i = 0; i < (1 << 8); i++) {
  struct threads_sorted_entry *threads_entry; struct threads_sorted *threads = threads_sorted__new(&trace->host->threads[i].entries.rb_root, trace->host->threads[i].nr);

  if (threads == 
# 4346 "builtin-trace.c" 3 4
                ((void *)0)
# 4346 "builtin-trace.c"
                    ) {
   fprintf(fp, "%s", "Error sorting output by nr_events!\n");
   return 0;
  }

  for (nd = rb_first(&threads->entries); threads_entry = ({ const typeof(((struct threads_sorted_entry *)0)->rb_node) * __mptr = (nd); (struct threads_sorted_entry *)((char *)__mptr - 
# 4351 "builtin-trace.c" 3 4
 __builtin_offsetof (
# 4351 "builtin-trace.c"
 struct threads_sorted_entry
# 4351 "builtin-trace.c" 3 4
 , 
# 4351 "builtin-trace.c"
 rb_node
# 4351 "builtin-trace.c" 3 4
 )
# 4351 "builtin-trace.c"
 ); }), nd; nd = rb_next(nd))
   printed += trace__fprintf_thread(fp, threads_entry->thread, trace);

  threads_sorted__delete(threads), threads = 
# 4354 "builtin-trace.c" 3 4
 ((void *)0)
# 4354 "builtin-trace.c"
                           ;
 }
 return printed;
}

static int trace__set_duration(const struct option *opt, const char *str,
          int unset __attribute__((unused)))
{
 struct trace *trace = opt->value;

 trace->duration_filter = atof(str);
 return 0;
}

static int trace__set_filter_pids_from_option(const struct option *opt, const char *str,
           int unset __attribute__((unused)))
{
 int ret = -1;
 size_t i;
 struct trace *trace = opt->value;




 struct intlist *list = intlist__new(str);

 if (list == 
# 4380 "builtin-trace.c" 3 4
            ((void *)0)
# 4380 "builtin-trace.c"
                )
  return -1;

 i = trace->filter_pids.nr = intlist__nr_entries(list) + 1;
 trace->filter_pids.entries = calloc(i, sizeof(pid_t));

 if (trace->filter_pids.entries == 
# 4386 "builtin-trace.c" 3 4
                                  ((void *)0)
# 4386 "builtin-trace.c"
                                      )
  goto out;

 trace->filter_pids.entries[0] = getpid();

 for (i = 1; i < trace->filter_pids.nr; ++i)
  trace->filter_pids.entries[i] = intlist__entry(list, i - 1)->i;

 intlist__delete(list);
 ret = 0;
out:
 return ret;
}

static int trace__open_output(struct trace *trace, const char *filename)
{
 struct stat st;

 if (!stat(filename, &st) && st.st_size) {
  char oldname[
# 4405 "builtin-trace.c" 3 4
              4096
# 4405 "builtin-trace.c"
                      ];

  scnprintf(oldname, sizeof(oldname), "%s.old", filename);
  unlink(oldname);
  rename(filename, oldname);
 }

 trace->output = fopen(filename, "w");

 return trace->output == 
# 4414 "builtin-trace.c" 3 4
                        ((void *)0) 
# 4414 "builtin-trace.c"
                             ? -
# 4414 "builtin-trace.c" 3 4
                                (*__errno_location ()) 
# 4414 "builtin-trace.c"
                                      : 0;
}

static int parse_pagefaults(const struct option *opt, const char *str,
       int unset __attribute__((unused)))
{
 int *trace_pgfaults = opt->value;

 if (
# 4422 "builtin-trace.c" 3 4
    __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) && __builtin_constant_p (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) && (__s1_len = __builtin_strlen (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ), __s2_len = __builtin_strlen (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ), (!((size_t)(const void *)((
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    , 
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) : (__builtin_constant_p (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) == 1) && (__s1_len = __builtin_strlen (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ), __s1_len < 4) ? (__builtin_constant_p (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) == 1) ? __builtin_strcmp (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    , 
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ); int __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) == 1) && (__s2_len = __builtin_strlen (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ), __s2_len < 4) ? (__builtin_constant_p (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) && ((size_t)(const void *)((
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) + 1) - (size_t)(const void *)(
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ) == 1) ? __builtin_strcmp (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    , 
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    ); int __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4422 "builtin-trace.c"
    str
# 4422 "builtin-trace.c" 3 4
    , 
# 4422 "builtin-trace.c"
    "all"
# 4422 "builtin-trace.c" 3 4
    )))); }) 
# 4422 "builtin-trace.c"
                       == 0)
  *trace_pgfaults |= (1 << 0) | (1 << 1);
 else if (
# 4424 "builtin-trace.c" 3 4
         __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) && __builtin_constant_p (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) && (__s1_len = __builtin_strlen (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ), __s2_len = __builtin_strlen (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ), (!((size_t)(const void *)((
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         , 
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) : (__builtin_constant_p (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) == 1) && (__s1_len = __builtin_strlen (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ), __s1_len < 4) ? (__builtin_constant_p (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) == 1) ? __builtin_strcmp (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         , 
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ); int __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) == 1) && (__s2_len = __builtin_strlen (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ), __s2_len < 4) ? (__builtin_constant_p (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ) == 1) ? __builtin_strcmp (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         , 
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         ); int __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4424 "builtin-trace.c"
         str
# 4424 "builtin-trace.c" 3 4
         , 
# 4424 "builtin-trace.c"
         "maj"
# 4424 "builtin-trace.c" 3 4
         )))); }) 
# 4424 "builtin-trace.c"
                            == 0)
  *trace_pgfaults |= (1 << 0);
 else if (
# 4426 "builtin-trace.c" 3 4
         __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) && __builtin_constant_p (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) && (__s1_len = __builtin_strlen (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ), __s2_len = __builtin_strlen (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ), (!((size_t)(const void *)((
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         , 
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) : (__builtin_constant_p (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) == 1) && (__s1_len = __builtin_strlen (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ), __s1_len < 4) ? (__builtin_constant_p (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) == 1) ? __builtin_strcmp (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         , 
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ); int __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) == 1) && (__s2_len = __builtin_strlen (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ), __s2_len < 4) ? (__builtin_constant_p (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) && ((size_t)(const void *)((
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) + 1) - (size_t)(const void *)(
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ) == 1) ? __builtin_strcmp (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         , 
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         ); int __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4426 "builtin-trace.c"
         str
# 4426 "builtin-trace.c" 3 4
         , 
# 4426 "builtin-trace.c"
         "min"
# 4426 "builtin-trace.c" 3 4
         )))); }) 
# 4426 "builtin-trace.c"
                            == 0)
  *trace_pgfaults |= (1 << 1);
 else
  return -1;

 return 0;
}

static void evlist__set_default_evsel_handler(struct evlist *evlist, void *handler)
{
 struct evsel *evsel;

 for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 4438 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4438 "builtin-trace.c"
typeof(*evsel)
# 4438 "builtin-trace.c" 3 4
, 
# 4438 "builtin-trace.c"
core.node
# 4438 "builtin-trace.c" 3 4
)
# 4438 "builtin-trace.c"
); }); &evsel->core.node != (&(evlist)->core.entries); evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 4438 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4438 "builtin-trace.c"
typeof(*(evsel))
# 4438 "builtin-trace.c" 3 4
, 
# 4438 "builtin-trace.c"
core.node
# 4438 "builtin-trace.c" 3 4
)
# 4438 "builtin-trace.c"
); })) {
  if (evsel->handler == 
# 4439 "builtin-trace.c" 3 4
                       ((void *)0)
# 4439 "builtin-trace.c"
                           )
   evsel->handler = handler;
 }
}

static void evsel__set_syscall_arg_fmt(struct evsel *evsel, const char *name)
{
 struct syscall_arg_fmt *fmt = evsel__syscall_arg_fmt(evsel);

 if (fmt) {
  struct syscall_fmt *scfmt = syscall_fmt__find(name);

  if (scfmt) {
   int skip = 0;

   if (
# 4454 "builtin-trace.c" 3 4
      __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) && __builtin_constant_p (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) && (__s1_len = __builtin_strlen (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ), __s2_len = __builtin_strlen (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ), (!((size_t)(const void *)((
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      , 
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) : (__builtin_constant_p (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) == 1) && (__s1_len = __builtin_strlen (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ), __s1_len < 4) ? (__builtin_constant_p (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      , 
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) == 1) && (__s2_len = __builtin_strlen (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ), __s2_len < 4) ? (__builtin_constant_p (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      , 
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4454 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4454 "builtin-trace.c" 3 4
      , 
# 4454 "builtin-trace.c"
      "__syscall_nr"
# 4454 "builtin-trace.c" 3 4
      )))); }) 
# 4454 "builtin-trace.c"
                                                                    == 0 ||
       
# 4455 "builtin-trace.c" 3 4
      __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) && __builtin_constant_p (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) && (__s1_len = __builtin_strlen (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ), __s2_len = __builtin_strlen (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ), (!((size_t)(const void *)((
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      , 
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) : (__builtin_constant_p (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) == 1) && (__s1_len = __builtin_strlen (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ), __s1_len < 4) ? (__builtin_constant_p (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      , 
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) == 1) && (__s2_len = __builtin_strlen (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ), __s2_len < 4) ? (__builtin_constant_p (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      , 
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4455 "builtin-trace.c"
      evsel->tp_format->format.fields->name
# 4455 "builtin-trace.c" 3 4
      , 
# 4455 "builtin-trace.c"
      "nr"
# 4455 "builtin-trace.c" 3 4
      )))); }) 
# 4455 "builtin-trace.c"
                                                          == 0)
    ++skip;

   memcpy(fmt + skip, scfmt->arg, (evsel->tp_format->format.nr_fields - skip) * sizeof(*fmt));
  }
 }
}

static int evlist__set_syscall_tp_fields(struct evlist *evlist)
{
 struct evsel *evsel;

 for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 4467 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4467 "builtin-trace.c"
typeof(*evsel)
# 4467 "builtin-trace.c" 3 4
, 
# 4467 "builtin-trace.c"
core.node
# 4467 "builtin-trace.c" 3 4
)
# 4467 "builtin-trace.c"
); }); &evsel->core.node != (&(evlist)->core.entries); evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 4467 "builtin-trace.c" 3 4
__builtin_offsetof (
# 4467 "builtin-trace.c"
typeof(*(evsel))
# 4467 "builtin-trace.c" 3 4
, 
# 4467 "builtin-trace.c"
core.node
# 4467 "builtin-trace.c" 3 4
)
# 4467 "builtin-trace.c"
); })) {
  if (evsel->priv || !evsel->tp_format)
   continue;

  if (
# 4471 "builtin-trace.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) && __builtin_constant_p (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ), __s2_len = __builtin_strlen (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ), (!((size_t)(const void *)((
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     , 
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) : (__builtin_constant_p (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     , 
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     , 
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4471 "builtin-trace.c"
     evsel->tp_format->system
# 4471 "builtin-trace.c" 3 4
     , 
# 4471 "builtin-trace.c"
     "syscalls"
# 4471 "builtin-trace.c" 3 4
     )))); })
# 4471 "builtin-trace.c"
                                                 ) {
   perf_evsel__init_tp_arg_scnprintf(evsel);
   continue;
  }

  if (perf_evsel__init_syscall_tp(evsel))
   return -1;

  if (!
# 4479 "builtin-trace.c" 3 4
      (__extension__ (__builtin_constant_p (
# 4479 "builtin-trace.c"
      10
# 4479 "builtin-trace.c" 3 4
      ) && ((__builtin_constant_p (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) && strlen (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) < ((size_t) (
# 4479 "builtin-trace.c"
      10
# 4479 "builtin-trace.c" 3 4
      ))) || (__builtin_constant_p (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) && strlen (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) < ((size_t) (
# 4479 "builtin-trace.c"
      10
# 4479 "builtin-trace.c" 3 4
      )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) && __builtin_constant_p (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) && (__s1_len = __builtin_strlen (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ), __s2_len = __builtin_strlen (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ), (!((size_t)(const void *)((
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      , 
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) : (__builtin_constant_p (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) == 1) && (__s1_len = __builtin_strlen (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ), __s1_len < 4) ? (__builtin_constant_p (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      , 
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) == 1) && (__s2_len = __builtin_strlen (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ), __s2_len < 4) ? (__builtin_constant_p (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) && ((size_t)(const void *)((
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) + 1) - (size_t)(const void *)(
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ) == 1) ? __builtin_strcmp (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      , 
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      ); int __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      , 
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      )))); }) : strncmp (
# 4479 "builtin-trace.c"
      evsel->tp_format->name
# 4479 "builtin-trace.c" 3 4
      , 
# 4479 "builtin-trace.c"
      "sys_enter_"
# 4479 "builtin-trace.c" 3 4
      , 
# 4479 "builtin-trace.c"
      10
# 4479 "builtin-trace.c" 3 4
      )))
# 4479 "builtin-trace.c"
                                                       ) {
   struct syscall_tp *sc = __evsel__syscall_tp(evsel);

   if (__tp_field__init_ptr(&sc->args, sc->id.offset + sizeof(u64)))
    return -1;

   evsel__set_syscall_arg_fmt(evsel, evsel->tp_format->name + sizeof("sys_enter_") - 1);
  } else if (!
# 4486 "builtin-trace.c" 3 4
             (__extension__ (__builtin_constant_p (
# 4486 "builtin-trace.c"
             9
# 4486 "builtin-trace.c" 3 4
             ) && ((__builtin_constant_p (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) && strlen (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) < ((size_t) (
# 4486 "builtin-trace.c"
             9
# 4486 "builtin-trace.c" 3 4
             ))) || (__builtin_constant_p (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) && strlen (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) < ((size_t) (
# 4486 "builtin-trace.c"
             9
# 4486 "builtin-trace.c" 3 4
             )))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) && __builtin_constant_p (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) && (__s1_len = __builtin_strlen (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ), __s2_len = __builtin_strlen (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ), (!((size_t)(const void *)((
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             , 
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) : (__builtin_constant_p (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) == 1) && (__s1_len = __builtin_strlen (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ), __s1_len < 4) ? (__builtin_constant_p (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) == 1) ? __builtin_strcmp (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             , 
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ); int __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) == 1) && (__s2_len = __builtin_strlen (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ), __s2_len < 4) ? (__builtin_constant_p (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) && ((size_t)(const void *)((
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) + 1) - (size_t)(const void *)(
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ) == 1) ? __builtin_strcmp (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             , 
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             ); int __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             , 
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             )))); }) : strncmp (
# 4486 "builtin-trace.c"
             evsel->tp_format->name
# 4486 "builtin-trace.c" 3 4
             , 
# 4486 "builtin-trace.c"
             "sys_exit_"
# 4486 "builtin-trace.c" 3 4
             , 
# 4486 "builtin-trace.c"
             9
# 4486 "builtin-trace.c" 3 4
             )))
# 4486 "builtin-trace.c"
                                                            ) {
   struct syscall_tp *sc = __evsel__syscall_tp(evsel);

   if (__tp_field__init_uint(&sc->ret, sizeof(u64), sc->id.offset + sizeof(u64), evsel->needs_swap))
    return -1;

   evsel__set_syscall_arg_fmt(evsel, evsel->tp_format->name + sizeof("sys_exit_") - 1);
  }
 }

 return 0;
}
# 4507 "builtin-trace.c"
static int trace__parse_events_option(const struct option *opt, const char *str,
          int unset __attribute__((unused)))
{
 struct trace *trace = (struct trace *)opt->value;
 const char *s = str;
 char *sep = 
# 4512 "builtin-trace.c" 3 4
            ((void *)0)
# 4512 "builtin-trace.c"
                , *lists[2] = { 
# 4512 "builtin-trace.c" 3 4
                                ((void *)0)
# 4512 "builtin-trace.c"
                                    , 
# 4512 "builtin-trace.c" 3 4
                                      ((void *)0)
# 4512 "builtin-trace.c"
                                          , };
 int len = strlen(str) + 1, err = -1, list, idx;
 char *strace_groups_dir = system_path("share/perf-core/strace/groups");
 char group_name[
# 4515 "builtin-trace.c" 3 4
                4096
# 4515 "builtin-trace.c"
                        ];
 struct syscall_fmt *fmt;

 if (strace_groups_dir == 
# 4518 "builtin-trace.c" 3 4
                         ((void *)0)
# 4518 "builtin-trace.c"
                             )
  return -1;

 if (*s == '!') {
  ++s;
  trace->not_ev_qualifier = 
# 4523 "builtin-trace.c" 3 4
                           1
# 4523 "builtin-trace.c"
                               ;
 }

 while (1) {
  if ((sep = 
# 4527 "builtin-trace.c" 3 4
            (__extension__ (__builtin_constant_p (
# 4527 "builtin-trace.c"
            ','
# 4527 "builtin-trace.c" 3 4
            ) && !__builtin_constant_p (
# 4527 "builtin-trace.c"
            s
# 4527 "builtin-trace.c" 3 4
            ) && (
# 4527 "builtin-trace.c"
            ','
# 4527 "builtin-trace.c" 3 4
            ) == '\0' ? (char *) __rawmemchr (
# 4527 "builtin-trace.c"
            s
# 4527 "builtin-trace.c" 3 4
            , 
# 4527 "builtin-trace.c"
            ','
# 4527 "builtin-trace.c" 3 4
            ) : __builtin_strchr (
# 4527 "builtin-trace.c"
            s
# 4527 "builtin-trace.c" 3 4
            , 
# 4527 "builtin-trace.c"
            ','
# 4527 "builtin-trace.c" 3 4
            )))
# 4527 "builtin-trace.c"
                          ) != 
# 4527 "builtin-trace.c" 3 4
                               ((void *)0)
# 4527 "builtin-trace.c"
                                   )
   *sep = '\0';

  list = 0;
  if (syscalltbl__id(trace->sctbl, s) >= 0 ||
      syscalltbl__strglobmatch_first(trace->sctbl, s, &idx) >= 0) {
   list = 1;
   goto do_concat;
  }

  fmt = syscall_fmt__find_by_alias(s);
  if (fmt != 
# 4538 "builtin-trace.c" 3 4
            ((void *)0)
# 4538 "builtin-trace.c"
                ) {
   list = 1;
   s = fmt->name;
  } else {
   path__join(group_name, sizeof(group_name), strace_groups_dir, s);
   if (access(group_name, 
# 4543 "builtin-trace.c" 3 4
                         4
# 4543 "builtin-trace.c"
                             ) == 0)
    list = 1;
  }
do_concat:
  if (lists[list]) {
   sprintf(lists[list] + strlen(lists[list]), ",%s", s);
  } else {
   lists[list] = malloc(len);
   if (lists[list] == 
# 4551 "builtin-trace.c" 3 4
                     ((void *)0)
# 4551 "builtin-trace.c"
                         )
    goto out;
   strcpy(lists[list], s);
  }

  if (!sep)
   break;

  *sep = ',';
  s = sep + 1;
 }

 if (lists[1] != 
# 4563 "builtin-trace.c" 3 4
                ((void *)0)
# 4563 "builtin-trace.c"
                    ) {
  struct strlist_config slist_config = {
   .dirname = strace_groups_dir,
  };

  trace->ev_qualifier = strlist__new(lists[1], &slist_config);
  if (trace->ev_qualifier == 
# 4569 "builtin-trace.c" 3 4
                            ((void *)0)
# 4569 "builtin-trace.c"
                                ) {
   fputs("Not enough memory to parse event qualifier", trace->output);
   goto out;
  }

  if (trace__validate_ev_qualifier(trace))
   goto out;
  trace->trace_syscalls = 
# 4576 "builtin-trace.c" 3 4
                         1
# 4576 "builtin-trace.c"
                             ;
 }

 err = 0;

 if (lists[0]) {
  struct option o = { .type = OPTION_CALLBACK, .short_name = ('e'), .long_name = ("event"), .value = (&trace->evlist), .argh = ("event"), .help = ("event selector. use 'perf list' to list available events"), .callback = (parse_events_option) }

                                ;
  err = parse_events_option(&o, lists[0], 0);
 }
out:
 if (sep)
  *sep = ',';

 return err;
}

static int trace__parse_cgroups(const struct option *opt, const char *str, int unset)
{
 struct trace *trace = opt->value;

 if (!list_empty(&trace->evlist->core.entries))
  return parse_cgroups(opt, str, unset);

 trace->cgroup = evlist__findnew_cgroup(trace->evlist, str);

 return 0;
}

static struct bpf_map *trace__find_bpf_map_by_name(struct trace *trace, const char *name)
{
 if (trace->bpf_obj == 
# 4608 "builtin-trace.c" 3 4
                      ((void *)0)
# 4608 "builtin-trace.c"
                          )
  return 
# 4609 "builtin-trace.c" 3 4
        ((void *)0)
# 4609 "builtin-trace.c"
            ;

 return bpf_object__find_map_by_name(trace->bpf_obj, name);
}

static void trace__set_bpf_map_filtered_pids(struct trace *trace)
{
 trace->filter_pids.map = trace__find_bpf_map_by_name(trace, "pids_filtered");
}

static void trace__set_bpf_map_syscalls(struct trace *trace)
{
 trace->syscalls.map = trace__find_bpf_map_by_name(trace, "syscalls");
 trace->syscalls.prog_array.sys_enter = trace__find_bpf_map_by_name(trace, "syscalls_sys_enter");
 trace->syscalls.prog_array.sys_exit = trace__find_bpf_map_by_name(trace, "syscalls_sys_exit");
}

static int trace__config(const char *var, const char *value, void *arg)
{
 struct trace *trace = arg;
 int err = 0;

 if (!
# 4631 "builtin-trace.c" 3 4
     __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) && __builtin_constant_p (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) && (__s1_len = __builtin_strlen (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ), __s2_len = __builtin_strlen (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ), (!((size_t)(const void *)((
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     , 
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) : (__builtin_constant_p (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) == 1) && (__s1_len = __builtin_strlen (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ), __s1_len < 4) ? (__builtin_constant_p (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     , 
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) == 1) && (__s2_len = __builtin_strlen (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ), __s2_len < 4) ? (__builtin_constant_p (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) && ((size_t)(const void *)((
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) + 1) - (size_t)(const void *)(
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ) == 1) ? __builtin_strcmp (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     , 
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     ); int __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4631 "builtin-trace.c"
     var
# 4631 "builtin-trace.c" 3 4
     , 
# 4631 "builtin-trace.c"
     "trace.add_events"
# 4631 "builtin-trace.c" 3 4
     )))); })
# 4631 "builtin-trace.c"
                                    ) {
  trace->perfconfig_events = 
# 4632 "builtin-trace.c" 3 4
                            (__extension__ (__builtin_constant_p (
# 4632 "builtin-trace.c"
                            value
# 4632 "builtin-trace.c" 3 4
                            ) && ((size_t)(const void *)((
# 4632 "builtin-trace.c"
                            value
# 4632 "builtin-trace.c" 3 4
                            ) + 1) - (size_t)(const void *)(
# 4632 "builtin-trace.c"
                            value
# 4632 "builtin-trace.c" 3 4
                            ) == 1) ? (((const char *) (
# 4632 "builtin-trace.c"
                            value
# 4632 "builtin-trace.c" 3 4
                            ))[0] == '\0' ? (char *) calloc ((size_t) 1, (size_t) 1) : ({ size_t __len = strlen (
# 4632 "builtin-trace.c"
                            value
# 4632 "builtin-trace.c" 3 4
                            ) + 1; char *__retval = (char *) malloc (__len); if (__retval != ((void *)0)) __retval = (char *) memcpy (__retval, 
# 4632 "builtin-trace.c"
                            value
# 4632 "builtin-trace.c" 3 4
                            , __len); __retval; })) : __strdup (
# 4632 "builtin-trace.c"
                            value
# 4632 "builtin-trace.c" 3 4
                            )))
# 4632 "builtin-trace.c"
                                         ;
  if (trace->perfconfig_events == 
# 4633 "builtin-trace.c" 3 4
                                 ((void *)0)
# 4633 "builtin-trace.c"
                                     ) {
   eprintf(0, verbose, "Not enough memory for %s\n", "trace.add_events");
   return -1;
  }
 } else if (!
# 4637 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            , 
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            , 
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            , 
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4637 "builtin-trace.c"
            var
# 4637 "builtin-trace.c" 3 4
            , 
# 4637 "builtin-trace.c"
            "trace.show_timestamp"
# 4637 "builtin-trace.c" 3 4
            )))); })
# 4637 "builtin-trace.c"
                                               ) {
  trace->show_tstamp = perf_config_bool(var, value);
 } else if (!
# 4639 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            , 
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            , 
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            , 
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4639 "builtin-trace.c"
            var
# 4639 "builtin-trace.c" 3 4
            , 
# 4639 "builtin-trace.c"
            "trace.show_duration"
# 4639 "builtin-trace.c" 3 4
            )))); })
# 4639 "builtin-trace.c"
                                              ) {
  trace->show_duration = perf_config_bool(var, value);
 } else if (!
# 4641 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            , 
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            , 
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            , 
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4641 "builtin-trace.c"
            var
# 4641 "builtin-trace.c" 3 4
            , 
# 4641 "builtin-trace.c"
            "trace.show_arg_names"
# 4641 "builtin-trace.c" 3 4
            )))); })
# 4641 "builtin-trace.c"
                                               ) {
  trace->show_arg_names = perf_config_bool(var, value);
  if (!trace->show_arg_names)
   trace->show_zeros = 
# 4644 "builtin-trace.c" 3 4
                      1
# 4644 "builtin-trace.c"
                          ;
 } else if (!
# 4645 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            , 
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            , 
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            , 
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4645 "builtin-trace.c"
            var
# 4645 "builtin-trace.c" 3 4
            , 
# 4645 "builtin-trace.c"
            "trace.show_zeros"
# 4645 "builtin-trace.c" 3 4
            )))); })
# 4645 "builtin-trace.c"
                                           ) {
  
# 4646 "builtin-trace.c" 3 4
 _Bool 
# 4646 "builtin-trace.c"
      new_show_zeros = perf_config_bool(var, value);
  if (!trace->show_arg_names && !new_show_zeros) {
   eprintf(0, verbose, "trace.show_zeros has to be set when trace.show_arg_names=no\n");
   goto out;
  }
  trace->show_zeros = new_show_zeros;
 } else if (!
# 4652 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            , 
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            , 
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            , 
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4652 "builtin-trace.c"
            var
# 4652 "builtin-trace.c" 3 4
            , 
# 4652 "builtin-trace.c"
            "trace.show_prefix"
# 4652 "builtin-trace.c" 3 4
            )))); })
# 4652 "builtin-trace.c"
                                            ) {
  trace->show_string_prefix = perf_config_bool(var, value);
 } else if (!
# 4654 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            , 
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            , 
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            , 
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4654 "builtin-trace.c"
            var
# 4654 "builtin-trace.c" 3 4
            , 
# 4654 "builtin-trace.c"
            "trace.no_inherit"
# 4654 "builtin-trace.c" 3 4
            )))); })
# 4654 "builtin-trace.c"
                                           ) {
  trace->opts.no_inherit = perf_config_bool(var, value);
 } else if (!
# 4656 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            , 
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            , 
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            , 
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4656 "builtin-trace.c"
            var
# 4656 "builtin-trace.c" 3 4
            , 
# 4656 "builtin-trace.c"
            "trace.args_alignment"
# 4656 "builtin-trace.c" 3 4
            )))); })
# 4656 "builtin-trace.c"
                                               ) {
  int args_alignment = 0;
  if (perf_config_int(&args_alignment, var, value) == 0)
   trace->args_alignment = args_alignment;
 } else if (!
# 4660 "builtin-trace.c" 3 4
            __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) && __builtin_constant_p (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) && (__s1_len = __builtin_strlen (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ), __s2_len = __builtin_strlen (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ), (!((size_t)(const void *)((
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            , 
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) : (__builtin_constant_p (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) == 1) && (__s1_len = __builtin_strlen (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ), __s1_len < 4) ? (__builtin_constant_p (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            , 
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) == 1) && (__s2_len = __builtin_strlen (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ), __s2_len < 4) ? (__builtin_constant_p (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) && ((size_t)(const void *)((
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) + 1) - (size_t)(const void *)(
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ) == 1) ? __builtin_strcmp (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            , 
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            ); int __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4660 "builtin-trace.c"
            var
# 4660 "builtin-trace.c" 3 4
            , 
# 4660 "builtin-trace.c"
            "trace.tracepoint_beautifiers"
# 4660 "builtin-trace.c" 3 4
            )))); })
# 4660 "builtin-trace.c"
                                                       ) {
  if (strcasecmp(value, "libtraceevent") == 0)
   trace->libtraceevent_print = 
# 4662 "builtin-trace.c" 3 4
                               1
# 4662 "builtin-trace.c"
                                   ;
  else if (strcasecmp(value, "libbeauty") == 0)
   trace->libtraceevent_print = 
# 4664 "builtin-trace.c" 3 4
                               0
# 4664 "builtin-trace.c"
                                    ;
 }
out:
 return err;
}

int cmd_trace(int argc, const char **argv)
{
 const char *trace_usage[] = {
  "perf trace [<options>] [<command>]",
  "perf trace [<options>] -- <command> [<options>]",
  "perf trace record [<options>] [<command>]",
  "perf trace record [<options>] -- <command> [<options>]",
  
# 4677 "builtin-trace.c" 3 4
 ((void *)0)
 
# 4678 "builtin-trace.c"
};
 struct trace trace = {
  .opts = {
   .target = {
    .uid = 
# 4682 "builtin-trace.c" 3 4
             (0x7fffffff * 2U + 1U)
# 4682 "builtin-trace.c"
                     ,
    .uses_mmap = 
# 4683 "builtin-trace.c" 3 4
                1
# 4683 "builtin-trace.c"
                    ,
   },
   .user_freq = 
# 4685 "builtin-trace.c" 3 4
                   (0x7fffffff * 2U + 1U)
# 4685 "builtin-trace.c"
                           ,
   .user_interval = 
# 4686 "builtin-trace.c" 3 4
                   (0x7fffffffffffffffLL * 2ULL + 1ULL)
# 4686 "builtin-trace.c"
                             ,
   .no_buffering = 
# 4687 "builtin-trace.c" 3 4
                   1
# 4687 "builtin-trace.c"
                       ,
   .mmap_pages = 
# 4688 "builtin-trace.c" 3 4
                   (0x7fffffff * 2U + 1U)
# 4688 "builtin-trace.c"
                           ,
  },
  .output = 
# 4690 "builtin-trace.c" 3 4
           stderr
# 4690 "builtin-trace.c"
                 ,
  .show_comm = 
# 4691 "builtin-trace.c" 3 4
              1
# 4691 "builtin-trace.c"
                  ,
  .show_tstamp = 
# 4692 "builtin-trace.c" 3 4
                1
# 4692 "builtin-trace.c"
                    ,
  .show_duration = 
# 4693 "builtin-trace.c" 3 4
                  1
# 4693 "builtin-trace.c"
                      ,
  .show_arg_names = 
# 4694 "builtin-trace.c" 3 4
                   1
# 4694 "builtin-trace.c"
                       ,
  .args_alignment = 70,
  .trace_syscalls = 
# 4696 "builtin-trace.c" 3 4
                   0
# 4696 "builtin-trace.c"
                        ,
  .kernel_syscallchains = 
# 4697 "builtin-trace.c" 3 4
                         0
# 4697 "builtin-trace.c"
                              ,
  .max_stack = 
# 4698 "builtin-trace.c" 3 4
              (0x7fffffff * 2U + 1U)
# 4698 "builtin-trace.c"
                      ,
  .max_events = 
# 4699 "builtin-trace.c" 3 4
               (0x7fffffffffffffffL * 2UL + 1UL)
# 4699 "builtin-trace.c"
                        ,
 };
 const char *map_dump_str = 
# 4701 "builtin-trace.c" 3 4
                           ((void *)0)
# 4701 "builtin-trace.c"
                               ;
 const char *output_name = 
# 4702 "builtin-trace.c" 3 4
                          ((void *)0)
# 4702 "builtin-trace.c"
                              ;
 const struct option trace_options[] = {
 { .type = OPTION_CALLBACK, .short_name = ('e'), .long_name = ("event"), .value = (&trace), .argh = ("event"), .help = ("event/syscall selector. use 'perf list' to list available events"), .callback = (trace__parse_events_option) }

                                  ,
 { .type = OPTION_CALLBACK, .short_name = (0), .long_name = ("filter"), .value = (&trace.evlist), .argh = ("filter"), .help = ("event filter"), .callback = (parse_filter) }
                                    ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("comm"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.show_comm), 
# 4709 "builtin-trace.c" 3 4
_Bool 
# 4709 "builtin-trace.c"
*)); })) + &trace.show_comm ), .help = ("show the thread COMM next to its id") }
                                            ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("tool_stats"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.show_tool_stats), 
# 4711 "builtin-trace.c" 3 4
_Bool 
# 4711 "builtin-trace.c"
*)); })) + &trace.show_tool_stats ), .help = ("show tool stats") },
 { .type = OPTION_CALLBACK, .short_name = (0), .long_name = ("expr"), .value = (&trace), .argh = ("expr"), .help = ("list of syscalls/events to trace"), .callback = (trace__parse_events_option) }
                                  ,
 { .type = OPTION_STRING, .short_name = ('o'), .long_name = ("output"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&output_name), const char **)); })) + &output_name ), .argh = ("file"), .help = ("output file name") },
 { .type = OPTION_STRING, .short_name = ('i'), .long_name = ("input"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&input_name), const char **)); })) + &input_name ), .argh = ("file"), .help = ("Analyze events in file") },
 { .type = OPTION_STRING, .short_name = ('p'), .long_name = ("pid"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.opts.target.pid), const char **)); })) + &trace.opts.target.pid ), .argh = ("pid"), .help = ("trace events on existing process id") }
                                            ,
 { .type = OPTION_STRING, .short_name = ('t'), .long_name = ("tid"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.opts.target.tid), const char **)); })) + &trace.opts.target.tid ), .argh = ("tid"), .help = ("trace events on existing thread id") }
                                           ,
 { .type = OPTION_CALLBACK, .short_name = (0), .long_name = ("filter-pids"), .value = (&trace), .argh = ("CSV list of pids"), .help = ("pids to filter (by the kernel)"), .callback = (trace__set_filter_pids_from_option) }
                                                                            ,
 { .type = OPTION_BOOLEAN, .short_name = ('a'), .long_name = ("all-cpus"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.opts.target.system_wide), 
# 4722 "builtin-trace.c" 3 4
_Bool 
# 4722 "builtin-trace.c"
*)); })) + &trace.opts.target.system_wide ), .help = ("system-wide collection from all CPUs") }
                                             ,
 { .type = OPTION_STRING, .short_name = ('C'), .long_name = ("cpu"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.opts.target.cpu_list), const char **)); })) + &trace.opts.target.cpu_list ), .argh = ("cpu"), .help = ("list of cpus to monitor") }
                                ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("no-inherit"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.opts.no_inherit), 
# 4726 "builtin-trace.c" 3 4
_Bool 
# 4726 "builtin-trace.c"
*)); })) + &trace.opts.no_inherit ), .help = ("child tasks do not inherit counters") }
                                            ,
 { .type = OPTION_CALLBACK, .short_name = ('m'), .long_name = ("mmap-pages"), .value = (&trace.opts.mmap_pages), .argh = ("pages"), .help = ("number of mmap data pages"), .callback = (perf_evlist__parse_mmap_pages) }

                                     ,
 { .type = OPTION_STRING, .short_name = ('u'), .long_name = ("uid"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.opts.target.uid_str), const char **)); })) + &trace.opts.target.uid_str ), .argh = ("user"), .help = ("user to profile") }
                       ,
 { .type = OPTION_CALLBACK, .short_name = (0), .long_name = ("duration"), .value = (&trace), .argh = ("float"), .help = ("show only events with duration > N.M ms"), .callback = (trace__set_duration) }

                           ,

 { .type = OPTION_STRING, .short_name = (0), .long_name = ("map-dump"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&map_dump_str), const char **)); })) + &map_dump_str ), .argh = ("BPF map"), .help = ("BPF map to periodically dump") },

 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("sched"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.sched), 
# 4739 "builtin-trace.c" 3 4
_Bool 
# 4739 "builtin-trace.c"
*)); })) + &trace.sched ), .help = ("show blocking scheduler events") },
 { .type = OPTION_INCR, .short_name = ('v'), .long_name = ("verbose"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&verbose), int *)); })) + &verbose ), .help = ("be more verbose") },
 { .type = OPTION_BOOLEAN, .short_name = ('T'), .long_name = ("time"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.full_time), 
# 4741 "builtin-trace.c" 3 4
_Bool 
# 4741 "builtin-trace.c"
*)); })) + &trace.full_time ), .help = ("Show full timestamp, not time relative to first start") }
                                                              ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("failure"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.failure_only), 
# 4743 "builtin-trace.c" 3 4
_Bool 
# 4743 "builtin-trace.c"
*)); })) + &trace.failure_only ), .help = ("Show only syscalls that failed") }
                                       ,
 { .type = OPTION_BOOLEAN, .short_name = ('s'), .long_name = ("summary"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.summary_only), 
# 4745 "builtin-trace.c" 3 4
_Bool 
# 4745 "builtin-trace.c"
*)); })) + &trace.summary_only ), .help = ("Show only syscall summary with statistics") }
                                                  ,
 { .type = OPTION_BOOLEAN, .short_name = ('S'), .long_name = ("with-summary"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.summary), 
# 4747 "builtin-trace.c" 3 4
_Bool 
# 4747 "builtin-trace.c"
*)); })) + &trace.summary ), .help = ("Show all syscalls and summary with statistics") }
                                                      ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("errno-summary"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.errno_summary), 
# 4749 "builtin-trace.c" 3 4
_Bool 
# 4749 "builtin-trace.c"
*)); })) + &trace.errno_summary ), .help = ("Show errno stats per syscall, use with -s or -S") }
                                                        ,
 { .type = OPTION_CALLBACK, .short_name = ('F'), .long_name = ("pf"), .value = (&trace.trace_pgfaults), .argh = ("all|maj|min"), .help = ("Trace pagefaults"), .callback = (parse_pagefaults), .defval = (intptr_t)"maj", .flags = PARSE_OPT_LASTARG_DEFAULT }
                                                   ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("syscalls"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.trace_syscalls), 
# 4753 "builtin-trace.c" 3 4
_Bool 
# 4753 "builtin-trace.c"
*)); })) + &trace.trace_syscalls ), .help = ("Trace syscalls") },
 { .type = OPTION_BOOLEAN, .short_name = ('f'), .long_name = ("force"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.force), 
# 4754 "builtin-trace.c" 3 4
_Bool 
# 4754 "builtin-trace.c"
*)); })) + &trace.force ), .help = ("don't complain, do it") },
 { .type = OPTION_CALLBACK, .short_name = (0), .long_name = ("call-graph"), .value = (&trace.opts), .argh = ("record_mode[,record_size]"), .help = (record_callchain_help), .callback = (&record_parse_callchain_opt) }

                                   ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("libtraceevent_print"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.libtraceevent_print), 
# 4758 "builtin-trace.c" 3 4
_Bool 
# 4758 "builtin-trace.c"
*)); })) + &trace.libtraceevent_print ), .help = ("Use libtraceevent to print the tracepoint arguments.") }
                                                             ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("kernel-syscall-graph"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.kernel_syscallchains), 
# 4760 "builtin-trace.c" 3 4
_Bool 
# 4760 "builtin-trace.c"
*)); })) + &trace.kernel_syscallchains ), .help = ("Show the kernel callchains on the syscall exit path") }
                                                            ,
 { .type = OPTION_ULONG, .short_name = (0), .long_name = ("max-events"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.max_events), unsigned long *)); })) + &trace.max_events ), .help = ("Set the maximum number of events to print, exit after that is reached. ") }
                                                                            ,
 { .type = OPTION_UINTEGER, .short_name = (0), .long_name = ("min-stack"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.min_stack), unsigned int *)); })) + &trace.min_stack ), .help = ("Set the minimum stack depth when parsing the callchain, " "anything below the specified depth will be ignored.") }

                                                             ,
 { .type = OPTION_UINTEGER, .short_name = (0), .long_name = ("max-stack"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.max_stack), unsigned int *)); })) + &trace.max_stack ), .help = ("Set the maximum stack depth when parsing the callchain, " "anything beyond the specified depth will be ignored. " "Default: kernel.perf_event_max_stack or " "127") }


                                                                                    ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("sort-events"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.sort_events), 
# 4771 "builtin-trace.c" 3 4
_Bool 
# 4771 "builtin-trace.c"
*)); })) + &trace.sort_events ), .help = ("Sort batch of events before processing, use if getting out of order events") }
                                                                                ,
 { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("print-sample"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.print_sample), 
# 4773 "builtin-trace.c" 3 4
_Bool 
# 4773 "builtin-trace.c"
*)); })) + &trace.print_sample ), .help = ("print the PERF_RECORD_SAMPLE PERF_SAMPLE_ info, for debugging") }
                                                                   ,
 { .type = OPTION_UINTEGER, .short_name = (0), .long_name = ("proc-map-timeout"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&proc_map_timeout), unsigned int *)); })) + &proc_map_timeout ), .help = ("per thread proc mmap processing timeout in ms") }
                                                   ,
 { .type = OPTION_CALLBACK, .short_name = ('G'), .long_name = ("cgroup"), .value = (&trace), .argh = ("name"), .help = ("monitor event in cgroup name only"), .callback = (trace__parse_cgroups) }
                            ,
 { .type = OPTION_UINTEGER, .short_name = ('D'), .long_name = ("delay"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&trace.opts.initial_delay), unsigned int *)); })) + &trace.opts.initial_delay ), .help = ("ms to wait before starting measurement after program " "start") }

               ,
 { .type = OPTION_STRING, .short_name = (0), .long_name = ("switch-on"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&(&trace.evswitch)->on_name), const char **)); })) + &(&trace.evswitch)->on_name ), .argh = ("event"), .help = ("Consider events after the ocurrence of this event") }, { .type = OPTION_STRING, .short_name = (0), .long_name = ("switch-off"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&(&trace.evswitch)->off_name), const char **)); })) + &(&trace.evswitch)->off_name ), .argh = ("event"), .help = ("Stop considering events after the ocurrence of this event") }, { .type = OPTION_BOOLEAN, .short_name = (0), .long_name = ("show-on-off-events"), .value = ( (sizeof(struct { int:-!!(!__builtin_types_compatible_p(typeof(&(&trace.evswitch)->show_on_off_events), 
# 4782 "builtin-trace.c" 3 4
_Bool 
# 4782 "builtin-trace.c"
*)); })) + &(&trace.evswitch)->show_on_off_events ), .help = ("Show the on/off switch events, used with --switch-on and --switch-off") },
 { .type = OPTION_END }
 };
 
# 4785 "builtin-trace.c" 3 4
_Bool 
# 4785 "builtin-trace.c"
     __attribute__((unused)) max_stack_user_set = 
# 4785 "builtin-trace.c" 3 4
                                         1
# 4785 "builtin-trace.c"
                                             ;
 
# 4786 "builtin-trace.c" 3 4
_Bool 
# 4786 "builtin-trace.c"
     mmap_pages_user_set = 
# 4786 "builtin-trace.c" 3 4
                           1
# 4786 "builtin-trace.c"
                               ;
 struct evsel *evsel;
 const char * const trace_subcommands[] = { "record", 
# 4788 "builtin-trace.c" 3 4
                                                     ((void *)0) 
# 4788 "builtin-trace.c"
                                                          };
 int err = -1;
 char bf[
# 4790 "builtin-trace.c" 3 4
        8192
# 4790 "builtin-trace.c"
              ];

 signal(
# 4792 "builtin-trace.c" 3 4
       11
# 4792 "builtin-trace.c"
              , sighandler_dump_stack);
 signal(
# 4793 "builtin-trace.c" 3 4
       8
# 4793 "builtin-trace.c"
             , sighandler_dump_stack);

 trace.evlist = evlist__new();
 trace.sctbl = syscalltbl__new();

 if (trace.evlist == 
# 4798 "builtin-trace.c" 3 4
                    ((void *)0) 
# 4798 "builtin-trace.c"
                         || trace.sctbl == 
# 4798 "builtin-trace.c" 3 4
                                           ((void *)0)
# 4798 "builtin-trace.c"
                                               ) {
  eprintf(0, verbose, "Not enough memory to run!\n");
  err = -
# 4800 "builtin-trace.c" 3 4
        12
# 4800 "builtin-trace.c"
              ;
  goto out;
 }
# 4811 "builtin-trace.c"
 rlimit__bump_memlock();

 err = perf_config(trace__config, &trace);
 if (err)
  goto out;

 argc = parse_options_subcommand(argc, argv, trace_options, trace_subcommands,
     trace_usage, PARSE_OPT_STOP_AT_NON_OPTION);
# 4831 "builtin-trace.c"
 if (!trace.trace_syscalls && !trace.trace_pgfaults &&
     trace.evlist->core.nr_entries == 0 ) {
  trace.trace_syscalls = 
# 4833 "builtin-trace.c" 3 4
                        1
# 4833 "builtin-trace.c"
                            ;
 }






 if (trace.perfconfig_events != 
# 4841 "builtin-trace.c" 3 4
                               ((void *)0)
# 4841 "builtin-trace.c"
                                   ) {
  struct parse_events_error parse_err;

  bzero(&parse_err, sizeof(parse_err));
  err = parse_events(trace.evlist, trace.perfconfig_events, &parse_err);
  if (err) {
   parse_events_print_error(&parse_err, trace.perfconfig_events);
   goto out;
  }
 }

 if ((nr_cgroups || trace.cgroup) && !trace.opts.target.system_wide) {
  usage_with_options_msg(trace_usage, trace_options,
           "cgroup monitoring only available in system-wide mode");
 }

 evsel = bpf__setup_output_event(trace.evlist, "__augmented_syscalls__");
 if (IS_ERR(evsel)) {
  bpf__strerror_setup_output_event(trace.evlist, PTR_ERR(evsel), bf, sizeof(bf));
  eprintf(0, verbose, "ERROR: Setup trace syscalls enter failed: %s\n", bf);
  goto out;
 }

 if (evsel) {
  trace.syscalls.events.augmented = evsel;

  evsel = perf_evlist__find_tracepoint_by_name(trace.evlist, "raw_syscalls:sys_enter");
  if (evsel == 
# 4868 "builtin-trace.c" 3 4
              ((void *)0)
# 4868 "builtin-trace.c"
                  ) {
   eprintf(0, verbose, "ERROR: raw_syscalls:sys_enter not found in the augmented BPF object\n");
   goto out;
  }

  if (evsel->bpf_obj == 
# 4873 "builtin-trace.c" 3 4
                       ((void *)0)
# 4873 "builtin-trace.c"
                           ) {
   eprintf(0, verbose, "ERROR: raw_syscalls:sys_enter not associated to a BPF object\n");
   goto out;
  }

  trace.bpf_obj = evsel->bpf_obj;






  if (!trace.trace_syscalls && trace__only_augmented_syscalls_evsels(&trace))
   trace.trace_syscalls = 
# 4886 "builtin-trace.c" 3 4
                         1
# 4886 "builtin-trace.c"
                             ;
# 4912 "builtin-trace.c"
  if (!trace.trace_syscalls) {
   trace__delete_augmented_syscalls(&trace);
  } else {
   trace__set_bpf_map_filtered_pids(&trace);
   trace__set_bpf_map_syscalls(&trace);
   trace.syscalls.unaugmented_prog = trace__find_bpf_program_by_title(&trace, "!raw_syscalls:unaugmented");
  }
 }

 err = bpf__setup_stdout(trace.evlist);
 if (err) {
  bpf__strerror_setup_stdout(trace.evlist, err, bf, sizeof(bf));
  eprintf(0, verbose, "ERROR: Setup BPF stdout failed: %s\n", bf);
  goto out;
 }

 err = -1;

 if (map_dump_str) {
  trace.dump.map = trace__find_bpf_map_by_name(&trace, map_dump_str);
  if (trace.dump.map == 
# 4932 "builtin-trace.c" 3 4
                       ((void *)0)
# 4932 "builtin-trace.c"
                           ) {
   eprintf(0, verbose, "ERROR: BPF map \"%s\" not found\n", map_dump_str);
   goto out;
  }
 }

 if (trace.trace_pgfaults) {
  trace.opts.sample_address = 
# 4939 "builtin-trace.c" 3 4
                             1
# 4939 "builtin-trace.c"
                                 ;
  trace.opts.sample_time = 
# 4940 "builtin-trace.c" 3 4
                          1
# 4940 "builtin-trace.c"
                              ;
 }

 if (trace.opts.mmap_pages == 
# 4943 "builtin-trace.c" 3 4
                             (0x7fffffff * 2U + 1U)
# 4943 "builtin-trace.c"
                                     )
  mmap_pages_user_set = 
# 4944 "builtin-trace.c" 3 4
                       0
# 4944 "builtin-trace.c"
                            ;

 if (trace.max_stack == 
# 4946 "builtin-trace.c" 3 4
                       (0x7fffffff * 2U + 1U)
# 4946 "builtin-trace.c"
                               ) {
  trace.max_stack = input_name ? 127 : sysctl__max_stack();
  max_stack_user_set = 
# 4948 "builtin-trace.c" 3 4
                      0
# 4948 "builtin-trace.c"
                           ;
 }







 if (callchain_param.enabled) {
  if (!mmap_pages_user_set && geteuid() == 0)
   trace.opts.mmap_pages = perf_event_mlock_kb_in_pages() * 4;

  symbol_conf.use_callchain = 
# 4961 "builtin-trace.c" 3 4
                             1
# 4961 "builtin-trace.c"
                                 ;
 }

 if (trace.evlist->core.nr_entries > 0) {
  evlist__set_default_evsel_handler(trace.evlist, trace__event_handler);
  if (evlist__set_syscall_tp_fields(trace.evlist)) {
   perror("failed to set syscalls:* tracepoint fields");
   goto out;
  }
 }

 if (trace.sort_events) {
  ordered_events__init(&trace.oe.data, ordered_events__deliver_event, &trace);
  ordered_events__set_copy_on_queue(&trace.oe.data, 
# 4974 "builtin-trace.c" 3 4
                                                   1
# 4974 "builtin-trace.c"
                                                       );
 }
# 4988 "builtin-trace.c"
 if (trace.syscalls.events.augmented) {
  for (evsel = ({ const typeof(((typeof(*evsel) *)0)->core.node) * __mptr = ((&(trace.evlist)->core.entries)->next); (typeof(*evsel) *)((char *)__mptr - 
# 4989 "builtin-trace.c" 3 4
 __builtin_offsetof (
# 4989 "builtin-trace.c"
 typeof(*evsel)
# 4989 "builtin-trace.c" 3 4
 , 
# 4989 "builtin-trace.c"
 core.node
# 4989 "builtin-trace.c" 3 4
 )
# 4989 "builtin-trace.c"
 ); }); &evsel->core.node != (&(trace.evlist)->core.entries); evsel = ({ const typeof(((typeof(*(evsel)) *)0)->core.node) * __mptr = ((evsel)->core.node.next); (typeof(*(evsel)) *)((char *)__mptr - 
# 4989 "builtin-trace.c" 3 4
 __builtin_offsetof (
# 4989 "builtin-trace.c"
 typeof(*(evsel))
# 4989 "builtin-trace.c" 3 4
 , 
# 4989 "builtin-trace.c"
 core.node
# 4989 "builtin-trace.c" 3 4
 )
# 4989 "builtin-trace.c"
 ); })) {
   
# 4990 "builtin-trace.c" 3 4
  _Bool 
# 4990 "builtin-trace.c"
       raw_syscalls_sys_exit = 
# 4990 "builtin-trace.c" 3 4
                               __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) && __builtin_constant_p (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) && (__s1_len = __builtin_strlen (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ), __s2_len = __builtin_strlen (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ), (!((size_t)(const void *)((
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) + 1) - (size_t)(const void *)(
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) + 1) - (size_t)(const void *)(
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               , 
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) : (__builtin_constant_p (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) && ((size_t)(const void *)((
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) + 1) - (size_t)(const void *)(
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) == 1) && (__s1_len = __builtin_strlen (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ), __s1_len < 4) ? (__builtin_constant_p (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) && ((size_t)(const void *)((
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) + 1) - (size_t)(const void *)(
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) == 1) ? __builtin_strcmp (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               , 
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ); int __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) && ((size_t)(const void *)((
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) + 1) - (size_t)(const void *)(
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) == 1) && (__s2_len = __builtin_strlen (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ), __s2_len < 4) ? (__builtin_constant_p (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) && ((size_t)(const void *)((
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) + 1) - (size_t)(const void *)(
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ) == 1) ? __builtin_strcmp (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               , 
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               ); int __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 4990 "builtin-trace.c"
                               perf_evsel__name(evsel)
# 4990 "builtin-trace.c" 3 4
                               , 
# 4990 "builtin-trace.c"
                               "raw_syscalls:sys_exit"
# 4990 "builtin-trace.c" 3 4
                               )))); }) 
# 4990 "builtin-trace.c"
                                                                                        == 0;

   if (raw_syscalls_sys_exit) {
    trace.raw_augmented_syscalls = 
# 4993 "builtin-trace.c" 3 4
                                  1
# 4993 "builtin-trace.c"
                                      ;
    goto init_augmented_syscall_tp;
   }

   if (trace.syscalls.events.augmented->priv == 
# 4997 "builtin-trace.c" 3 4
                                               ((void *)0) 
# 4997 "builtin-trace.c"
                                                    &&
       strstr(perf_evsel__name(evsel), "syscalls:sys_enter")) {
    struct evsel *augmented = trace.syscalls.events.augmented;
    if (perf_evsel__init_augmented_syscall_tp(augmented, evsel) ||
        perf_evsel__init_augmented_syscall_tp_args(augmented))
     goto out;





    augmented->handler = trace__sys_enter;






    if (perf_evsel__init_augmented_syscall_tp(evsel, evsel) ||
        perf_evsel__init_augmented_syscall_tp_args(evsel))
     goto out;
    evsel->handler = trace__sys_enter;
   }

   if (strstarts(perf_evsel__name(evsel), "syscalls:sys_exit_")) {
    struct syscall_tp *sc;
init_augmented_syscall_tp:
    if (perf_evsel__init_augmented_syscall_tp(evsel, evsel))
     goto out;
    sc = __evsel__syscall_tp(evsel);
# 5046 "builtin-trace.c"
    if (trace.raw_augmented_syscalls)
     trace.raw_augmented_syscalls_args_size = (6 + 1) * sizeof(long) + sc->id.offset;
    perf_evsel__init_augmented_syscall_tp_ret(evsel);
    evsel->handler = trace__sys_exit;
   }
  }
 }

 if ((argc >= 1) && (
# 5054 "builtin-trace.c" 3 4
                    __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) && __builtin_constant_p (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) && (__s1_len = __builtin_strlen (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ), __s2_len = __builtin_strlen (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ), (!((size_t)(const void *)((
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) + 1) - (size_t)(const void *)(
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) + 1) - (size_t)(const void *)(
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) == 1) || __s2_len >= 4)) ? __builtin_strcmp (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    , 
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) : (__builtin_constant_p (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) && ((size_t)(const void *)((
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) + 1) - (size_t)(const void *)(
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) == 1) && (__s1_len = __builtin_strlen (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ), __s1_len < 4) ? (__builtin_constant_p (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) && ((size_t)(const void *)((
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) + 1) - (size_t)(const void *)(
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) == 1) ? __builtin_strcmp (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    , 
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ); int __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) && ((size_t)(const void *)((
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) + 1) - (size_t)(const void *)(
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) == 1) && (__s2_len = __builtin_strlen (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ), __s2_len < 4) ? (__builtin_constant_p (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) && ((size_t)(const void *)((
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) + 1) - (size_t)(const void *)(
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ) == 1) ? __builtin_strcmp (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    , 
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ) : -(__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    ); int __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    ))[3] - __s2[3]); } } __result; }))) : __builtin_strcmp (
# 5054 "builtin-trace.c"
                    argv[0]
# 5054 "builtin-trace.c" 3 4
                    , 
# 5054 "builtin-trace.c"
                    "record"
# 5054 "builtin-trace.c" 3 4
                    )))); }) 
# 5054 "builtin-trace.c"
                                              == 0))
  return trace__record(&trace, argc-1, &argv[1]);


 if (trace.errno_summary && !trace.summary && !trace.summary_only)
  trace.summary_only = 
# 5059 "builtin-trace.c" 3 4
                      1
# 5059 "builtin-trace.c"
                          ;


 if (trace.summary_only)
  trace.summary = trace.summary_only;

 if (output_name != 
# 5065 "builtin-trace.c" 3 4
                   ((void *)0)
# 5065 "builtin-trace.c"
                       ) {
  err = trace__open_output(&trace, output_name);
  if (err < 0) {
   perror("failed to create output file");
   goto out;
  }
 }

 err = evswitch__init(&trace.evswitch, trace.evlist, 
# 5073 "builtin-trace.c" 3 4
                                                    stderr
# 5073 "builtin-trace.c"
                                                          );
 if (err)
  goto out_close;

 err = target__validate(&trace.opts.target);
 if (err) {
  target__strerror(&trace.opts.target, err, bf, sizeof(bf));
  fprintf(trace.output, "%s", bf);
  goto out_close;
 }

 err = target__parse_uid(&trace.opts.target);
 if (err) {
  target__strerror(&trace.opts.target, err, bf, sizeof(bf));
  fprintf(trace.output, "%s", bf);
  goto out_close;
 }

 if (!argc && target__none(&trace.opts.target))
  trace.opts.target.system_wide = 
# 5092 "builtin-trace.c" 3 4
                                 1
# 5092 "builtin-trace.c"
                                     ;

 if (input_name)
  err = trace__replay(&trace);
 else
  err = trace__run(&trace, argc, argv);

out_close:
 if (output_name != 
# 5100 "builtin-trace.c" 3 4
                   ((void *)0)
# 5100 "builtin-trace.c"
                       )
  fclose(trace.output);
out:
 __zfree((void **)(&trace.perfconfig_events));
 return err;
}
